Implementation smell,Namespace,Class,File,Method,Description
Long Method,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeChar,The method has 659 lines of code.
Long Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The method has 118 lines of code.
Long Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The method has 110 lines of code.
Long Method,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The method has 119 lines of code.
Long Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The method has 151 lines of code.
Long Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The method has 253 lines of code.
Complex Method,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,Cyclomatic complexity of the method is 11
Complex Method,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,AddCombinedText,Cyclomatic complexity of the method is 9
Complex Method,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,GetText,Cyclomatic complexity of the method is 15
Complex Method,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeChar,Cyclomatic complexity of the method is 324
Complex Method,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,HitTypeToString,Cyclomatic complexity of the method is 8
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,Cyclomatic complexity of the method is 34
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,Cyclomatic complexity of the method is 10
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,Cyclomatic complexity of the method is 10
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,Cyclomatic complexity of the method is 21
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,Cyclomatic complexity of the method is 11
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,Cyclomatic complexity of the method is 14
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,Cyclomatic complexity of the method is 22
Complex Method,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,Cyclomatic complexity of the method is 12
Complex Method,MeanWhile.UserControls,CategoryIcon,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryIcon.xaml.cs,SetCategory,Cyclomatic complexity of the method is 31
Complex Method,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,Cyclomatic complexity of the method is 17
Complex Method,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,GetCategoryTitle,Cyclomatic complexity of the method is 17
Complex Method,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,GetCategoryTitleSource,Cyclomatic complexity of the method is 50
Complex Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,Cyclomatic complexity of the method is 9
Complex Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,Cyclomatic complexity of the method is 19
Complex Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImagePath,Cyclomatic complexity of the method is 8
Complex Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,Cyclomatic complexity of the method is 32
Complex Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,InfoImage_TouchDown,Cyclomatic complexity of the method is 8
Complex Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,Cyclomatic complexity of the method is 54
Complex Method,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ShowLanguageList,Cyclomatic complexity of the method is 8
Long Parameter List,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,AddCombinedText,The method has 6 parameters.
Long Statement,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,FileNameDateTimeExtension,The length of the statement  "	string FileNameExtension = "_" + DateTime.Now.Year.ToString () + "-" + DateTime.Now.Month.ToString ().PadLeft (2' '0') + "-" + DateTime.Now.Day.ToString ().PadLeft (2' '0') + "_" + DateTime.Now.Hour.ToString ().PadLeft (2' '0') + "_" + DateTime.Now.Minute.ToString ().PadLeft (2' '0') + "_" + DateTime.Now.Second.ToString ().PadLeft (2' '0'); " is 342.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoSpinCircle,The length of the statement  "	DoubleAnimation DA = new DoubleAnimation (SpinRotate.Angle' SpinRotate.Angle + 360' new Duration (TimeSpan.FromMilliseconds (2000))); " is 133.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,ResetOriginalValues,The length of the statement  "	DoubleAnimation DA = new DoubleAnimation (WorldMap.ZoomLevel' OriginalZoomLevel' new Duration (TimeSpan.FromMilliseconds (2000))); " is 130.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoZoomLevel,The length of the statement  "	DoubleAnimation DA = new DoubleAnimation (OriginalZoomLevel' OriginalZoomLevel + 2' new Duration (TimeSpan.FromMilliseconds (2000))); " is 133.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoZoomLevel_Completed,The length of the statement  "		DoubleAnimation DA = new DoubleAnimation (OriginalZoomLevel + 2' OriginalZoomLevel + 2' new Duration (TimeSpan.FromMilliseconds (5000))); " is 137.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CreateQrCode,The length of the statement  "	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White); " is 136.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CreateQrCode,The length of the statement  "	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.  " is 146.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CreateQrCode,The length of the statement  "	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.  " is 160.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (EnglishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1600s"' "en"); " is 153.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (EnglishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1610s"' "en"); " is 153.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (EnglishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1620s"' "en"); " is 153.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (EnglishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1630s"' "en"); " is 153.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (EnglishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1640s"' "en"); " is 153.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SwedishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1600-talet (decenium)"' "sv"); " is 169.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SwedishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1610-talet"' "sv"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SwedishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1620-talet"' "sv"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SwedishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1630-talet"' "sv"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SwedishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3A1640-talet"' "sv"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SpanishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAños 1600"' "es"); " is 157.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SpanishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAños 1610"' "es"); " is 157.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SpanishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAños 1620"' "es"); " is 157.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SpanishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAños 1630"' "es"); " is 157.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (SpanishWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAños 1640"' "es"); " is 157.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (FrenchWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAnnées 1600"' "fr"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (FrenchWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAnnées 1610"' "fr"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (FrenchWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAnnées 1620"' "fr"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (FrenchWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAnnées 1630"' "fr"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiPages,The length of the statement  "		SearchForWikiCategories (FrenchWikipediaURL' "?action=query&list=categorymembers&format=json&cmtype=subcat&cmlimit=500&cmtitle=Category%3AAnnées 1640"' "fr"); " is 158.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiCategories,The length of the statement  "	client.Headers.Add (HttpRequestHeader.UserAgent' "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; FSJB)"); " is 130.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The length of the statement  "							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState); " is 203.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The length of the statement  "							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState); " is 203.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The length of the statement  "							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState); " is 203.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The length of the statement  "							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState); " is 202.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The length of the statement  "			//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}} " is 996.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The length of the statement  "	///         "query_url":"http:\/\/tools.wmflabs.org\/catscan2\/catscan2.php?language=sv&depth=1&categories=1600-talet%0D%0Aslag&comb%5Blist%5D=1&format=json" " is 157.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SearchForWikiCoordinates,The length of the statement  "	client.Headers.Add (HttpRequestHeader.UserAgent' "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; FSJB)"); " is 130.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The length of the statement  "						if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) { " is 169.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The length of the statement  "											//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2); " is 193.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The length of the statement  "												SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language); " is 202.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The length of the statement  "												SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language); " is 202.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The length of the statement  "												SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language); " is 202.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The length of the statement  "												SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language); " is 201.
Long Statement,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionCloud,The length of the statement  "	MapLayer.SetPositionRectangle (Cloud' new LocationRect (CloudLatitude' CloudLongitude' CloudLatitude - 60' CloudLongitude + 60)); " is 129.
Long Statement,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategoryCombo,The length of the statement  "	App.StoreAnalytics ("Categories"' "CategoryCard_" + GetCategoryTitle (MainCategoryId' "en") + "_" + GetCategoryTitle (LinkedCategory' "en")' CurrentLanguage); " is 158.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The length of the statement  "		DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White); " is 136.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The length of the statement  "		//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.  " is 146.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The length of the statement  "		//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.  " is 160.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SearchForArticleContent,The length of the statement  "	client.Headers.Add (HttpRequestHeader.UserAgent' "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; FSJB)"); " is 130.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SearchForArticleContent,The length of the statement  "	string URL = string.Concat ("http://" + Language + ".wikipedia.org/w/api.php?action=query&prop=revisions&rvprop=content&format=json&titles="' title); " is 149.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                   {{coord|50|27|52|N|30|31|11|E|type:edu|display=title}} " is 124.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                   \n[[Fil:NaUKMA today.jpg|thumb|Kyiv-Mohyla akademin]] " is 123.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                   \n'''National universitetet Kyiv-Mohyla akademin'''  " is 121.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                   {{lang-uk|\u041d\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0439 \u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442  " is 219.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                     \u00ab\u041a\u0438\u0454\u0432\u043e-\u041c\u043e\u0433\u0438\u043b\u044f\u043d\u0441\u044c\u043a\u0430 \u0430\u043a\u0430\u0434\u0435\u043c\u0456\u044f\u00bb  " is 230.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                 ' Natsional'nyi universytet \"Kyyevo-Mohylians'ka akademiya\")  " is 130.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                 \u00e4r [[Ukraina]]s \u00e4ldsta [[universitet]]' grundat av  " is 128.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                     [[Petro Mohyla]] \u00e5r 1615 i [[Kiev]]. Universitetet \u00e4r ett av landets ledande. <ref>[http://www.encyclopediaofukraine.com/display.asp?linkpath=pages\\K\\Y\\KyivanMohylaAcademy.htm]'  " is 262.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                     \n== Externa l\u00e4nkar ==\n{{commonscat|National University of \"Kyiv-Mohyla Academy\"}}\n* [http://www.ukma.kiev.ua/ Officiell webbplats] " is 212.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The length of the statement  "	///                                                                     \n[[Kategori:Universitet och h\u00f6gskolor i Ukraina]] " is 127.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The length of the statement  "		else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) { " is 139.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The length of the statement  "		else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) { " is 190.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The length of the statement  "	///                   {{lang-uk|\u041d\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0439 \u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442  " is 171.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The length of the statement  "	///                   \u00ab\u041a\u0438\u0454\u0432\u043e-\u041c\u043e\u0433\u0438\u043b\u044f\u043d\u0441\u044c\u043a\u0430 \u0430\u043a\u0430\u0434\u0435\u043c\u0456\u044f\u00bb  " is 180.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The length of the statement  "	///                   [[Petro Mohyla]] \u00e5r 1615 i [[Kiev]]. Universitetet \u00e4r ett av landets ledande. <ref>[http://www.encyclopediaofukraine.com/display.asp?linkpath=pages\\K\\Y\\KyivanMohylaAcademy.htm]'  " is 212.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The length of the statement  "	///                   \n== Externa l\u00e4nkar ==\n{{commonscat|National University of \"Kyiv-Mohyla Academy\"}}\n* [http://www.ukma.kiev.ua/ Officiell webbplats] " is 162.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImagePath,The length of the statement  "	else if ((item.StartsWith ("|")) && ((item.IndexOf (".png") > 0) || (item.IndexOf (".jpg") > 0)) && ((item.IndexOf ("=") > 0))) { " is 129.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImagePath,The length of the statement  "		ImageClient.Headers.Add (HttpRequestHeader.UserAgent' "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; FSJB)"); " is 135.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The length of the statement  "	///                   {{lang-uk|\u041d\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0439 \u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442  " is 171.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The length of the statement  "	///                   \u00ab\u041a\u0438\u0454\u0432\u043e-\u041c\u043e\u0433\u0438\u043b\u044f\u043d\u0441\u044c\u043a\u0430 \u0430\u043a\u0430\u0434\u0435\u043c\u0456\u044f\u00bb  " is 180.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The length of the statement  "	///                   <ref>[http://www.encyclopediaofukraine.com/display.asp?linkpath=pages\\K\\Y\\KyivanMohylaAcademy.htm]' Encyclopedia of Ukraine</ref> " is 154.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetLanguageLinks,The length of the statement  "	string URL1 = "https://" + OriginalLanguage + ".wikipedia.org/w/api.php?format=xml&action=query&prop=langlinks&titles="; " is 120.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetLanguageLinks,The length of the statement  "	client.Headers.Add (HttpRequestHeader.UserAgent' "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; FSJB)"); " is 130.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,LS_OnSelected,The length of the statement  "		App.StoreAnalytics ("Map"' "InfoCard_LanguageSelector_" + (sender as LanguageSelector).WikipediaLanguage.Language' (sender as LanguageSelector).WikipediaLanguage.Language); " is 172.
Long Statement,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,LS_OnSelected,The length of the statement  "		SearchForArticleContent ((sender as LanguageSelector).WikipediaLanguage.Language' (sender as LanguageSelector).WikipediaLanguage.Link); " is 135.
Long Statement,MeanWhile.UserControls,InformationPushPin,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InformationPushPin.xaml.cs,Grid_TouchUp,The length of the statement  "		if ((DownScreenPoint != null) && (Math.Abs (P.X - DownScreenPoint.X) < 10) && (Math.Abs (P.Y - DownScreenPoint.Y) < 10)) { " is 122.
Complex Conditional,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The conditional expression  "(page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))"  is complex.
Complex Conditional,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The conditional expression  "(YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')"  is complex.
Complex Conditional,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The conditional expression  "item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))"  is complex.
Complex Conditional,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The conditional expression  "item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))"  is complex.
Complex Conditional,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImagePath,The conditional expression  "(item.StartsWith ("|")) && ((item.IndexOf (".png") > 0) || (item.IndexOf (".jpg") > 0)) && ((item.IndexOf ("=") > 0))"  is complex.
Complex Conditional,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ShowLanguageList,The conditional expression  "(item.Language == "en") || //   //(item.Language == "da") ||  (item.Language == "de") || //  (item.Language == "es") || //  (item.Language == "fi") || //  //(item.Language == "et") ||  //(item.Language == "is") ||  (item.Language == "it") || //                    //(item.Language == "nl") ||  //(item.Language == "no") ||   (item.Language == "fr") || //  (item.Language == "sv")"  is complex.
Empty Catch Block,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,The method has an empty catch block.
Empty Catch Block,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The method has an empty catch block.
Empty Catch Block,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The method has an empty catch block.
Empty Catch Block,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The method has an empty catch block.
Empty Catch Block,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The method has an empty catch block.
Magic Number,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,The following statement contains a magic number: foreach (var item in Files) {  	using (StreamReader sr = File.OpenText (item)) {  		string s = "";  		while ((s = sr.ReadLine ()) != null) {  			if (s.ToLower ().Contains ("starting application")) {  				ApplicationStarted++;  			}  			else if (s.ToLower ().Contains ("measured data:")) {  				int Pos = s.ToLower ().IndexOf ("measured data:");  				if (Pos > 0) {  					string Data = s.Substring (Pos + 14);  					string[] KeyValue = Data.Split (':');  					if (KeyValue.Length > 1) {  						try {  							AppendKeyValue (KeyValue [0]' Convert.ToInt32 (KeyValue [1]));  						}  						catch {  						}  					}  				}  			}  			else {  				Result.Add (s);  			}  		}  	}  }  
Magic Number,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,The following statement contains a magic number: using (StreamReader sr = File.OpenText (item)) {  	string s = "";  	while ((s = sr.ReadLine ()) != null) {  		if (s.ToLower ().Contains ("starting application")) {  			ApplicationStarted++;  		}  		else if (s.ToLower ().Contains ("measured data:")) {  			int Pos = s.ToLower ().IndexOf ("measured data:");  			if (Pos > 0) {  				string Data = s.Substring (Pos + 14);  				string[] KeyValue = Data.Split (':');  				if (KeyValue.Length > 1) {  					try {  						AppendKeyValue (KeyValue [0]' Convert.ToInt32 (KeyValue [1]));  					}  					catch {  					}  				}  			}  		}  		else {  			Result.Add (s);  		}  	}  }  
Magic Number,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,The following statement contains a magic number: while ((s = sr.ReadLine ()) != null) {  	if (s.ToLower ().Contains ("starting application")) {  		ApplicationStarted++;  	}  	else if (s.ToLower ().Contains ("measured data:")) {  		int Pos = s.ToLower ().IndexOf ("measured data:");  		if (Pos > 0) {  			string Data = s.Substring (Pos + 14);  			string[] KeyValue = Data.Split (':');  			if (KeyValue.Length > 1) {  				try {  					AppendKeyValue (KeyValue [0]' Convert.ToInt32 (KeyValue [1]));  				}  				catch {  				}  			}  		}  	}  	else {  		Result.Add (s);  	}  }  
Magic Number,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,The following statement contains a magic number: if (s.ToLower ().Contains ("starting application")) {  	ApplicationStarted++;  }  else if (s.ToLower ().Contains ("measured data:")) {  	int Pos = s.ToLower ().IndexOf ("measured data:");  	if (Pos > 0) {  		string Data = s.Substring (Pos + 14);  		string[] KeyValue = Data.Split (':');  		if (KeyValue.Length > 1) {  			try {  				AppendKeyValue (KeyValue [0]' Convert.ToInt32 (KeyValue [1]));  			}  			catch {  			}  		}  	}  }  else {  	Result.Add (s);  }  
Magic Number,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,The following statement contains a magic number: if (s.ToLower ().Contains ("measured data:")) {  	int Pos = s.ToLower ().IndexOf ("measured data:");  	if (Pos > 0) {  		string Data = s.Substring (Pos + 14);  		string[] KeyValue = Data.Split (':');  		if (KeyValue.Length > 1) {  			try {  				AppendKeyValue (KeyValue [0]' Convert.ToInt32 (KeyValue [1]));  			}  			catch {  			}  		}  	}  }  else {  	Result.Add (s);  }  
Magic Number,MeanWhile,SpreeLogFile,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\SpreeLogFile.cs,AnalyzeFiles,The following statement contains a magic number: if (Pos > 0) {  	string Data = s.Substring (Pos + 14);  	string[] KeyValue = Data.Split (':');  	if (KeyValue.Length > 1) {  		try {  			AppendKeyValue (KeyValue [0]' Convert.ToInt32 (KeyValue [1]));  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeText,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		NewText += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else {  		NewText += Text [0];  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeText,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		NewText += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else {  		NewText += Text [0];  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeText,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	NewText += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else {  	NewText += Text [0];  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeText,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	NewText += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else {  	NewText += Text [0];  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeText,The following statement contains a magic number: Text = Text.Substring (6);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: ScreenSaverTimer = new DoubleAnimation (1' 1' new Duration (TimeSpan.FromSeconds (30)));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following statement contains a magic number: ScreenSaverSeconds = 300;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following statement contains a magic number: App.CardTurnMilliseconds = 350;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following statement contains a magic number: App.WikiCardsSeconds = 120;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following statement contains a magic number: App.InfoCardsSeconds = 120;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following statement contains a magic number: App.FirstWavePins = 3.8;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following statement contains a magic number: App.SecondWavePins = 4.3;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following statement contains a magic number: App.ThirdWavePins = 4.8;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCategoryTexts,The following statement contains a magic number: LoadCategoryTexts (2' "Trade");  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCategoryTexts,The following statement contains a magic number: LoadCategoryTexts (3' "Hierarchies");  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCategoryTexts,The following statement contains a magic number: LoadCategoryTexts (4' "Environment");  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCategoryTexts,The following statement contains a magic number: LoadCategoryTexts (5' "Religion");  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCategoryTexts,The following statement contains a magic number: LoadCategoryTexts (6' "Language");  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCategoryTexts,The following statement contains a magic number: LoadCategoryTexts (7' "Violence");  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCombinedTexts,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	for (int j = 0; j < 8; j++) {  		if (i != j) {  			if (!App.HasText ("sv"' i' j)) {  				CheckForCombinedText ("sv"' i' j);  			}  			if (!App.HasText ("en"' i' j)) {  				CheckForCombinedText ("en"' i' j);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCombinedTexts,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	for (int j = 0; j < 8; j++) {  		if (i != j) {  			if (!App.HasText ("sv"' i' j)) {  				CheckForCombinedText ("sv"' i' j);  			}  			if (!App.HasText ("en"' i' j)) {  				CheckForCombinedText ("en"' i' j);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadCombinedTexts,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	if (i != j) {  		if (!App.HasText ("sv"' i' j)) {  			CheckForCombinedText ("sv"' i' j);  		}  		if (!App.HasText ("en"' i' j)) {  			CheckForCombinedText ("en"' i' j);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: try {  	string[] Result = System.IO.File.ReadAllLines (WikiData + "WikiUtanKoordinater.txt"' Encoding.Default);  	foreach (var item in Result) {  		string[] Parts = App.DecodeText (item).Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  					P.OriginalLanguage = "en";  				}  				else {  					P.OriginalLanguage = "sv";  				}  				P.VasaTitle = Parts [1];  				P.WikiTitle = App.FixTitleForWiki (Parts [0]);  				P.VasaEnglishTitle = Parts [3];  				P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  				P.VasaPlupp = true;  				Coordinates [0] = Coordinates [0].Replace ('.'' ''');  				Coordinates [1] = Coordinates [1].Replace ('.'' ''');  				P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  				try {  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				}  				catch {  				}  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer1.Children.Add (P);  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: try {  	string[] Result = System.IO.File.ReadAllLines (WikiData + "WikiUtanKoordinater.txt"' Encoding.Default);  	foreach (var item in Result) {  		string[] Parts = App.DecodeText (item).Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  					P.OriginalLanguage = "en";  				}  				else {  					P.OriginalLanguage = "sv";  				}  				P.VasaTitle = Parts [1];  				P.WikiTitle = App.FixTitleForWiki (Parts [0]);  				P.VasaEnglishTitle = Parts [3];  				P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  				P.VasaPlupp = true;  				Coordinates [0] = Coordinates [0].Replace ('.'' ''');  				Coordinates [1] = Coordinates [1].Replace ('.'' ''');  				P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  				try {  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				}  				catch {  				}  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer1.Children.Add (P);  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: try {  	string[] Result = System.IO.File.ReadAllLines (WikiData + "WikiUtanKoordinater.txt"' Encoding.Default);  	foreach (var item in Result) {  		string[] Parts = App.DecodeText (item).Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  					P.OriginalLanguage = "en";  				}  				else {  					P.OriginalLanguage = "sv";  				}  				P.VasaTitle = Parts [1];  				P.WikiTitle = App.FixTitleForWiki (Parts [0]);  				P.VasaEnglishTitle = Parts [3];  				P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  				P.VasaPlupp = true;  				Coordinates [0] = Coordinates [0].Replace ('.'' ''');  				Coordinates [1] = Coordinates [1].Replace ('.'' ''');  				P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  				try {  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				}  				catch {  				}  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer1.Children.Add (P);  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: try {  	string[] Result = System.IO.File.ReadAllLines (WikiData + "WikiUtanKoordinater.txt"' Encoding.Default);  	foreach (var item in Result) {  		string[] Parts = App.DecodeText (item).Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  					P.OriginalLanguage = "en";  				}  				else {  					P.OriginalLanguage = "sv";  				}  				P.VasaTitle = Parts [1];  				P.WikiTitle = App.FixTitleForWiki (Parts [0]);  				P.VasaEnglishTitle = Parts [3];  				P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  				P.VasaPlupp = true;  				Coordinates [0] = Coordinates [0].Replace ('.'' ''');  				Coordinates [1] = Coordinates [1].Replace ('.'' ''');  				P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  				try {  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				}  				catch {  				}  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer1.Children.Add (P);  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: try {  	string[] Result = System.IO.File.ReadAllLines (WikiData + "WikiUtanKoordinater.txt"' Encoding.Default);  	foreach (var item in Result) {  		string[] Parts = App.DecodeText (item).Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  					P.OriginalLanguage = "en";  				}  				else {  					P.OriginalLanguage = "sv";  				}  				P.VasaTitle = Parts [1];  				P.WikiTitle = App.FixTitleForWiki (Parts [0]);  				P.VasaEnglishTitle = Parts [3];  				P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  				P.VasaPlupp = true;  				Coordinates [0] = Coordinates [0].Replace ('.'' ''');  				Coordinates [1] = Coordinates [1].Replace ('.'' ''');  				P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  				try {  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				}  				catch {  				}  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer1.Children.Add (P);  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: try {  	string[] Result = System.IO.File.ReadAllLines (WikiData + "WikiUtanKoordinater.txt"' Encoding.Default);  	foreach (var item in Result) {  		string[] Parts = App.DecodeText (item).Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  					P.OriginalLanguage = "en";  				}  				else {  					P.OriginalLanguage = "sv";  				}  				P.VasaTitle = Parts [1];  				P.WikiTitle = App.FixTitleForWiki (Parts [0]);  				P.VasaEnglishTitle = Parts [3];  				P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  				P.VasaPlupp = true;  				Coordinates [0] = Coordinates [0].Replace ('.'' ''');  				Coordinates [1] = Coordinates [1].Replace ('.'' ''');  				P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  				try {  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				}  				catch {  				}  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer1.Children.Add (P);  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: try {  	string[] Result = System.IO.File.ReadAllLines (WikiData + "WikiUtanKoordinater.txt"' Encoding.Default);  	foreach (var item in Result) {  		string[] Parts = App.DecodeText (item).Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  					P.OriginalLanguage = "en";  				}  				else {  					P.OriginalLanguage = "sv";  				}  				P.VasaTitle = Parts [1];  				P.WikiTitle = App.FixTitleForWiki (Parts [0]);  				P.VasaEnglishTitle = Parts [3];  				P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  				P.VasaPlupp = true;  				Coordinates [0] = Coordinates [0].Replace ('.'' ''');  				Coordinates [1] = Coordinates [1].Replace ('.'' ''');  				P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  				try {  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				}  				catch {  				}  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer1.Children.Add (P);  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = App.DecodeText (item).Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  				P.OriginalLanguage = "en";  			}  			else {  				P.OriginalLanguage = "sv";  			}  			P.VasaTitle = Parts [1];  			P.WikiTitle = App.FixTitleForWiki (Parts [0]);  			P.VasaEnglishTitle = Parts [3];  			P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  			P.VasaPlupp = true;  			Coordinates [0] = Coordinates [0].Replace ('.'' ''');  			Coordinates [1] = Coordinates [1].Replace ('.'' ''');  			P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  			try {  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			}  			catch {  			}  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer1.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = App.DecodeText (item).Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  				P.OriginalLanguage = "en";  			}  			else {  				P.OriginalLanguage = "sv";  			}  			P.VasaTitle = Parts [1];  			P.WikiTitle = App.FixTitleForWiki (Parts [0]);  			P.VasaEnglishTitle = Parts [3];  			P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  			P.VasaPlupp = true;  			Coordinates [0] = Coordinates [0].Replace ('.'' ''');  			Coordinates [1] = Coordinates [1].Replace ('.'' ''');  			P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  			try {  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			}  			catch {  			}  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer1.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = App.DecodeText (item).Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  				P.OriginalLanguage = "en";  			}  			else {  				P.OriginalLanguage = "sv";  			}  			P.VasaTitle = Parts [1];  			P.WikiTitle = App.FixTitleForWiki (Parts [0]);  			P.VasaEnglishTitle = Parts [3];  			P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  			P.VasaPlupp = true;  			Coordinates [0] = Coordinates [0].Replace ('.'' ''');  			Coordinates [1] = Coordinates [1].Replace ('.'' ''');  			P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  			try {  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			}  			catch {  			}  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer1.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = App.DecodeText (item).Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  				P.OriginalLanguage = "en";  			}  			else {  				P.OriginalLanguage = "sv";  			}  			P.VasaTitle = Parts [1];  			P.WikiTitle = App.FixTitleForWiki (Parts [0]);  			P.VasaEnglishTitle = Parts [3];  			P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  			P.VasaPlupp = true;  			Coordinates [0] = Coordinates [0].Replace ('.'' ''');  			Coordinates [1] = Coordinates [1].Replace ('.'' ''');  			P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  			try {  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			}  			catch {  			}  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer1.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = App.DecodeText (item).Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  				P.OriginalLanguage = "en";  			}  			else {  				P.OriginalLanguage = "sv";  			}  			P.VasaTitle = Parts [1];  			P.WikiTitle = App.FixTitleForWiki (Parts [0]);  			P.VasaEnglishTitle = Parts [3];  			P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  			P.VasaPlupp = true;  			Coordinates [0] = Coordinates [0].Replace ('.'' ''');  			Coordinates [1] = Coordinates [1].Replace ('.'' ''');  			P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  			try {  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			}  			catch {  			}  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer1.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = App.DecodeText (item).Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  				P.OriginalLanguage = "en";  			}  			else {  				P.OriginalLanguage = "sv";  			}  			P.VasaTitle = Parts [1];  			P.WikiTitle = App.FixTitleForWiki (Parts [0]);  			P.VasaEnglishTitle = Parts [3];  			P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  			P.VasaPlupp = true;  			Coordinates [0] = Coordinates [0].Replace ('.'' ''');  			Coordinates [1] = Coordinates [1].Replace ('.'' ''');  			P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  			try {  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			}  			catch {  			}  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer1.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = App.DecodeText (item).Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  				P.OriginalLanguage = "en";  			}  			else {  				P.OriginalLanguage = "sv";  			}  			P.VasaTitle = Parts [1];  			P.WikiTitle = App.FixTitleForWiki (Parts [0]);  			P.VasaEnglishTitle = Parts [3];  			P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  			P.VasaPlupp = true;  			Coordinates [0] = Coordinates [0].Replace ('.'' ''');  			Coordinates [1] = Coordinates [1].Replace ('.'' ''');  			P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  			try {  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			}  			catch {  			}  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer1.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  			P.OriginalLanguage = "en";  		}  		else {  			P.OriginalLanguage = "sv";  		}  		P.VasaTitle = Parts [1];  		P.WikiTitle = App.FixTitleForWiki (Parts [0]);  		P.VasaEnglishTitle = Parts [3];  		P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  		P.VasaPlupp = true;  		Coordinates [0] = Coordinates [0].Replace ('.'' ''');  		Coordinates [1] = Coordinates [1].Replace ('.'' ''');  		P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  		try {  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		}  		catch {  		}  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer1.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  			P.OriginalLanguage = "en";  		}  		else {  			P.OriginalLanguage = "sv";  		}  		P.VasaTitle = Parts [1];  		P.WikiTitle = App.FixTitleForWiki (Parts [0]);  		P.VasaEnglishTitle = Parts [3];  		P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  		P.VasaPlupp = true;  		Coordinates [0] = Coordinates [0].Replace ('.'' ''');  		Coordinates [1] = Coordinates [1].Replace ('.'' ''');  		P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  		try {  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		}  		catch {  		}  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer1.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  			P.OriginalLanguage = "en";  		}  		else {  			P.OriginalLanguage = "sv";  		}  		P.VasaTitle = Parts [1];  		P.WikiTitle = App.FixTitleForWiki (Parts [0]);  		P.VasaEnglishTitle = Parts [3];  		P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  		P.VasaPlupp = true;  		Coordinates [0] = Coordinates [0].Replace ('.'' ''');  		Coordinates [1] = Coordinates [1].Replace ('.'' ''');  		P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  		try {  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		}  		catch {  		}  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer1.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  			P.OriginalLanguage = "en";  		}  		else {  			P.OriginalLanguage = "sv";  		}  		P.VasaTitle = Parts [1];  		P.WikiTitle = App.FixTitleForWiki (Parts [0]);  		P.VasaEnglishTitle = Parts [3];  		P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  		P.VasaPlupp = true;  		Coordinates [0] = Coordinates [0].Replace ('.'' ''');  		Coordinates [1] = Coordinates [1].Replace ('.'' ''');  		P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  		try {  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		}  		catch {  		}  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer1.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  			P.OriginalLanguage = "en";  		}  		else {  			P.OriginalLanguage = "sv";  		}  		P.VasaTitle = Parts [1];  		P.WikiTitle = App.FixTitleForWiki (Parts [0]);  		P.VasaEnglishTitle = Parts [3];  		P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  		P.VasaPlupp = true;  		Coordinates [0] = Coordinates [0].Replace ('.'' ''');  		Coordinates [1] = Coordinates [1].Replace ('.'' ''');  		P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  		try {  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		}  		catch {  		}  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer1.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  			P.OriginalLanguage = "en";  		}  		else {  			P.OriginalLanguage = "sv";  		}  		P.VasaTitle = Parts [1];  		P.WikiTitle = App.FixTitleForWiki (Parts [0]);  		P.VasaEnglishTitle = Parts [3];  		P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  		P.VasaPlupp = true;  		Coordinates [0] = Coordinates [0].Replace ('.'' ''');  		Coordinates [1] = Coordinates [1].Replace ('.'' ''');  		P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  		try {  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		}  		catch {  		}  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer1.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  			P.OriginalLanguage = "en";  		}  		else {  			P.OriginalLanguage = "sv";  		}  		P.VasaTitle = Parts [1];  		P.WikiTitle = App.FixTitleForWiki (Parts [0]);  		P.VasaEnglishTitle = Parts [3];  		P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  		P.VasaPlupp = true;  		Coordinates [0] = Coordinates [0].Replace ('.'' ''');  		Coordinates [1] = Coordinates [1].Replace ('.'' ''');  		P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  		try {  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		}  		catch {  		}  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer1.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  		P.OriginalLanguage = "en";  	}  	else {  		P.OriginalLanguage = "sv";  	}  	P.VasaTitle = Parts [1];  	P.WikiTitle = App.FixTitleForWiki (Parts [0]);  	P.VasaEnglishTitle = Parts [3];  	P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  	P.VasaPlupp = true;  	Coordinates [0] = Coordinates [0].Replace ('.'' ''');  	Coordinates [1] = Coordinates [1].Replace ('.'' ''');  	P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  	try {  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	}  	catch {  	}  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	PinMapLayer1.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  		P.OriginalLanguage = "en";  	}  	else {  		P.OriginalLanguage = "sv";  	}  	P.VasaTitle = Parts [1];  	P.WikiTitle = App.FixTitleForWiki (Parts [0]);  	P.VasaEnglishTitle = Parts [3];  	P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  	P.VasaPlupp = true;  	Coordinates [0] = Coordinates [0].Replace ('.'' ''');  	Coordinates [1] = Coordinates [1].Replace ('.'' ''');  	P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  	try {  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	}  	catch {  	}  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	PinMapLayer1.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  		P.OriginalLanguage = "en";  	}  	else {  		P.OriginalLanguage = "sv";  	}  	P.VasaTitle = Parts [1];  	P.WikiTitle = App.FixTitleForWiki (Parts [0]);  	P.VasaEnglishTitle = Parts [3];  	P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  	P.VasaPlupp = true;  	Coordinates [0] = Coordinates [0].Replace ('.'' ''');  	Coordinates [1] = Coordinates [1].Replace ('.'' ''');  	P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  	try {  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	}  	catch {  	}  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	PinMapLayer1.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  		P.OriginalLanguage = "en";  	}  	else {  		P.OriginalLanguage = "sv";  	}  	P.VasaTitle = Parts [1];  	P.WikiTitle = App.FixTitleForWiki (Parts [0]);  	P.VasaEnglishTitle = Parts [3];  	P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  	P.VasaPlupp = true;  	Coordinates [0] = Coordinates [0].Replace ('.'' ''');  	Coordinates [1] = Coordinates [1].Replace ('.'' ''');  	P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  	try {  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	}  	catch {  	}  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	PinMapLayer1.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  		P.OriginalLanguage = "en";  	}  	else {  		P.OriginalLanguage = "sv";  	}  	P.VasaTitle = Parts [1];  	P.WikiTitle = App.FixTitleForWiki (Parts [0]);  	P.VasaEnglishTitle = Parts [3];  	P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  	P.VasaPlupp = true;  	Coordinates [0] = Coordinates [0].Replace ('.'' ''');  	Coordinates [1] = Coordinates [1].Replace ('.'' ''');  	P.Coordinates = Coordinates [0] + "  " + Coordinates [1];  	try {  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	}  	catch {  	}  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	PinMapLayer1.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  	P.OriginalLanguage = "en";  }  else {  	P.OriginalLanguage = "sv";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: if ((Parts.Count () > 4) && (Parts [4].Length > 0)) {  	P.OriginalLanguage = "en";  }  else {  	P.OriginalLanguage = "sv";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: P.VasaEnglishTitle = Parts [3];  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: P.WikiEnglishTitle = App.FixTitleForWiki (Parts [4]);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadArticlesWithoutCoordinates,The following statement contains a magic number: MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DA_Completed,The following statement contains a magic number: if (TimeSinceLastInteraction > Span) {  	if (WorldMap.ZoomLevel == OriginalZoomLevel) {  		if ((DateTime.Now - App.LastUserInteraction) > TimeSpan.FromSeconds (ScreenSaverSeconds * 2)) {  			if (CategoryGrid.Opacity == 1) {  				DemoSpinCircle ();  			}  			else {  				DemoZoomLevel ();  			}  		}  	}  	else {  		ResetOriginalValues ();  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DA_Completed,The following statement contains a magic number: if (WorldMap.ZoomLevel == OriginalZoomLevel) {  	if ((DateTime.Now - App.LastUserInteraction) > TimeSpan.FromSeconds (ScreenSaverSeconds * 2)) {  		if (CategoryGrid.Opacity == 1) {  			DemoSpinCircle ();  		}  		else {  			DemoZoomLevel ();  		}  	}  }  else {  	ResetOriginalValues ();  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DA_Completed,The following statement contains a magic number: if ((DateTime.Now - App.LastUserInteraction) > TimeSpan.FromSeconds (ScreenSaverSeconds * 2)) {  	if (CategoryGrid.Opacity == 1) {  		DemoSpinCircle ();  	}  	else {  		DemoZoomLevel ();  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoZoomLevel,The following statement contains a magic number: WorldMap.Center = new Location (62' 18);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoZoomLevel,The following statement contains a magic number: WorldMap.Center = new Location (62' 18);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoZoomLevel_Completed,The following statement contains a magic number: if ((DateTime.Now - DT) > TimeSpan.FromSeconds (ScreenSaverSeconds)) {  	DoubleAnimation DA = new DoubleAnimation (OriginalZoomLevel + 2' OriginalZoomLevel + 2' new Duration (TimeSpan.FromMilliseconds (5000)));  	DA.Completed += DemoZoomLevel_Completed2;  	DA.FillBehavior = FillBehavior.Stop;  	WorldMap.BeginAnimation (Map.ZoomLevelProperty' DA);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoZoomLevel_Completed,The following statement contains a magic number: if ((DateTime.Now - DT) > TimeSpan.FromSeconds (ScreenSaverSeconds)) {  	DoubleAnimation DA = new DoubleAnimation (OriginalZoomLevel + 2' OriginalZoomLevel + 2' new Duration (TimeSpan.FromMilliseconds (5000)));  	DA.Completed += DemoZoomLevel_Completed2;  	DA.FillBehavior = FillBehavior.Stop;  	WorldMap.BeginAnimation (Map.ZoomLevelProperty' DA);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DemoZoomLevel_Completed,The following statement contains a magic number: if ((DateTime.Now - DT) > TimeSpan.FromSeconds (ScreenSaverSeconds)) {  	DoubleAnimation DA = new DoubleAnimation (OriginalZoomLevel + 2' OriginalZoomLevel + 2' new Duration (TimeSpan.FromMilliseconds (5000)));  	DA.Completed += DemoZoomLevel_Completed2;  	DA.FillBehavior = FillBehavior.Stop;  	WorldMap.BeginAnimation (Map.ZoomLevelProperty' DA);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: try {  	SearchResultList.Clear ();  	string[] Result = System.IO.File.ReadAllLines (WikiData + "ResultListWithCoordinates.txt");  	foreach (var item in Result) {  		string[] Parts = item.Split (':');  		if (Parts.Count () > 2) {  			string[] Coordinates = Parts [2].Split (';');  			if (Coordinates.Count () > 1) {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = Parts[0]; // Category+":"+  				//PinMapLayer.Children.Add(pin);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				if (Parts.Count () > 3) {  					P.OriginalLanguage = Parts [3];  				}  				P.WikiTitle = Parts [1];  				P.Category = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  		else if (Parts.Count () > 1) {  			string[] Coordinates = Parts [1].Split (';');  			if (Coordinates.Count () > 1) {  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = "sv";  				P.WikiTitle = Parts [0];  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				if (PinMapLayer2.Children.Count < 200) {  					PinMapLayer2.Children.Add (P);  				}  				else {  					PinMapLayer3.Children.Add (P);  				}  			}  		}  	}  }  catch {  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: foreach (var item in Result) {  	string[] Parts = item.Split (':');  	if (Parts.Count () > 2) {  		string[] Coordinates = Parts [2].Split (';');  		if (Coordinates.Count () > 1) {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = Parts[0]; // Category+":"+  			//PinMapLayer.Children.Add(pin);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			if (Parts.Count () > 3) {  				P.OriginalLanguage = Parts [3];  			}  			P.WikiTitle = Parts [1];  			P.Category = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  	else if (Parts.Count () > 1) {  		string[] Coordinates = Parts [1].Split (';');  		if (Coordinates.Count () > 1) {  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = "sv";  			P.WikiTitle = Parts [0];  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			if (PinMapLayer2.Children.Count < 200) {  				PinMapLayer2.Children.Add (P);  			}  			else {  				PinMapLayer3.Children.Add (P);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 2) {  	string[] Coordinates = Parts [2].Split (';');  	if (Coordinates.Count () > 1) {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = Parts[0]; // Category+":"+  		//PinMapLayer.Children.Add(pin);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		if (Parts.Count () > 3) {  			P.OriginalLanguage = Parts [3];  		}  		P.WikiTitle = Parts [1];  		P.Category = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  else if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	//Pushpin pin = new Pushpin();  	//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  	//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  	//pin.DataContext = Parts[0]; // Category+":"+  	//PinMapLayer.Children.Add(pin);  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	P.OriginalLanguage = "sv";  	if (Parts.Count () > 3) {  		P.OriginalLanguage = Parts [3];  	}  	P.WikiTitle = Parts [1];  	P.Category = Parts [0];  	MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	if (PinMapLayer2.Children.Count < 200) {  		PinMapLayer2.Children.Add (P);  	}  	else {  		PinMapLayer3.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	//Pushpin pin = new Pushpin();  	//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  	//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  	//pin.DataContext = Parts[0]; // Category+":"+  	//PinMapLayer.Children.Add(pin);  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	P.OriginalLanguage = "sv";  	if (Parts.Count () > 3) {  		P.OriginalLanguage = Parts [3];  	}  	P.WikiTitle = Parts [1];  	P.Category = Parts [0];  	MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	if (PinMapLayer2.Children.Count < 200) {  		PinMapLayer2.Children.Add (P);  	}  	else {  		PinMapLayer3.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	//Pushpin pin = new Pushpin();  	//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  	//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  	//pin.DataContext = Parts[0]; // Category+":"+  	//PinMapLayer.Children.Add(pin);  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	P.OriginalLanguage = "sv";  	if (Parts.Count () > 3) {  		P.OriginalLanguage = Parts [3];  	}  	P.WikiTitle = Parts [1];  	P.Category = Parts [0];  	MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	if (PinMapLayer2.Children.Count < 200) {  		PinMapLayer2.Children.Add (P);  	}  	else {  		PinMapLayer3.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	//Pushpin pin = new Pushpin();  	//pin.Location = new Location(Convert.ToDouble(Coordinates[0])' Convert.ToDouble(Coordinates[1]));  	//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  	//pin.DataContext = Parts[0]; // Category+":"+  	//PinMapLayer.Children.Add(pin);  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	P.OriginalLanguage = "sv";  	if (Parts.Count () > 3) {  		P.OriginalLanguage = Parts [3];  	}  	P.WikiTitle = Parts [1];  	P.Category = Parts [0];  	MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	if (PinMapLayer2.Children.Count < 200) {  		PinMapLayer2.Children.Add (P);  	}  	else {  		PinMapLayer3.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 3) {  	P.OriginalLanguage = Parts [3];  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 3) {  	P.OriginalLanguage = Parts [3];  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: P.OriginalLanguage = Parts [3];  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (PinMapLayer2.Children.Count < 200) {  	PinMapLayer2.Children.Add (P);  }  else {  	PinMapLayer3.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Parts.Count () > 1) {  	string[] Coordinates = Parts [1].Split (';');  	if (Coordinates.Count () > 1) {  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = "sv";  		P.WikiTitle = Parts [0];  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		if (PinMapLayer2.Children.Count < 200) {  			PinMapLayer2.Children.Add (P);  		}  		else {  			PinMapLayer3.Children.Add (P);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	P.OriginalLanguage = "sv";  	P.WikiTitle = Parts [0];  	MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	if (PinMapLayer2.Children.Count < 200) {  		PinMapLayer2.Children.Add (P);  	}  	else {  		PinMapLayer3.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (Coordinates.Count () > 1) {  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	P.OriginalLanguage = "sv";  	P.WikiTitle = Parts [0];  	MapLayer.SetPosition (P' new Location (Convert.ToDouble (Coordinates [0])' Convert.ToDouble (Coordinates [1])));  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	if (PinMapLayer2.Children.Count < 200) {  		PinMapLayer2.Children.Add (P);  	}  	else {  		PinMapLayer3.Children.Add (P);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (Coordinates [0]) * 100));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadStoredArticles,The following statement contains a magic number: if (PinMapLayer2.Children.Count < 200) {  	PinMapLayer2.Children.Add (P);  }  else {  	PinMapLayer3.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (InfoCardLayer.Children.Count < MaxCardsOnTable) {  	Point P = (sender as InformationPushPin).PointToScreen (new Point (0' 0));  	Point P2 = this.PointFromScreen (P);  	InformationPushPin IP = sender as InformationPushPin;  	if (!IP.IsHighlighted ()) {  		InfoCard I = new InfoCard (InfoCardLayer' IP);  		bool English = false;  		if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		if (English) {  			I.SearchForData (IP.WikiEnglishTitle' "en");  		}  		else {  			I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  		}  		Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  		Canvas.SetTop (I' P2.Y + 25);  		I.OriginalLanguage = IP.OriginalLanguage;  		I.CategoryText.Text = IP.Category;  		I.Coordinate.Text = IP.Coordinates;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (InfoCardLayer.Children.Count < MaxCardsOnTable) {  	Point P = (sender as InformationPushPin).PointToScreen (new Point (0' 0));  	Point P2 = this.PointFromScreen (P);  	InformationPushPin IP = sender as InformationPushPin;  	if (!IP.IsHighlighted ()) {  		InfoCard I = new InfoCard (InfoCardLayer' IP);  		bool English = false;  		if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		if (English) {  			I.SearchForData (IP.WikiEnglishTitle' "en");  		}  		else {  			I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  		}  		Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  		Canvas.SetTop (I' P2.Y + 25);  		I.OriginalLanguage = IP.OriginalLanguage;  		I.CategoryText.Text = IP.Category;  		I.Coordinate.Text = IP.Coordinates;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (InfoCardLayer.Children.Count < MaxCardsOnTable) {  	Point P = (sender as InformationPushPin).PointToScreen (new Point (0' 0));  	Point P2 = this.PointFromScreen (P);  	InformationPushPin IP = sender as InformationPushPin;  	if (!IP.IsHighlighted ()) {  		InfoCard I = new InfoCard (InfoCardLayer' IP);  		bool English = false;  		if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		if (English) {  			I.SearchForData (IP.WikiEnglishTitle' "en");  		}  		else {  			I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  		}  		Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  		Canvas.SetTop (I' P2.Y + 25);  		I.OriginalLanguage = IP.OriginalLanguage;  		I.CategoryText.Text = IP.Category;  		I.Coordinate.Text = IP.Coordinates;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (InfoCardLayer.Children.Count < MaxCardsOnTable) {  	Point P = (sender as InformationPushPin).PointToScreen (new Point (0' 0));  	Point P2 = this.PointFromScreen (P);  	InformationPushPin IP = sender as InformationPushPin;  	if (!IP.IsHighlighted ()) {  		InfoCard I = new InfoCard (InfoCardLayer' IP);  		bool English = false;  		if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		if (English) {  			I.SearchForData (IP.WikiEnglishTitle' "en");  		}  		else {  			I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  		}  		Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  		Canvas.SetTop (I' P2.Y + 25);  		I.OriginalLanguage = IP.OriginalLanguage;  		I.CategoryText.Text = IP.Category;  		I.Coordinate.Text = IP.Coordinates;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (InfoCardLayer.Children.Count < MaxCardsOnTable) {  	Point P = (sender as InformationPushPin).PointToScreen (new Point (0' 0));  	Point P2 = this.PointFromScreen (P);  	InformationPushPin IP = sender as InformationPushPin;  	if (!IP.IsHighlighted ()) {  		InfoCard I = new InfoCard (InfoCardLayer' IP);  		bool English = false;  		if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  			I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  			English = true;  		}  		if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  			if (English) {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  			}  			else {  				I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  			}  		}  		if (English) {  			I.SearchForData (IP.WikiEnglishTitle' "en");  		}  		else {  			I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  		}  		Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  		Canvas.SetTop (I' P2.Y + 25);  		I.OriginalLanguage = IP.OriginalLanguage;  		I.CategoryText.Text = IP.Category;  		I.Coordinate.Text = IP.Coordinates;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (!IP.IsHighlighted ()) {  	InfoCard I = new InfoCard (InfoCardLayer' IP);  	bool English = false;  	if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	if (English) {  		I.SearchForData (IP.WikiEnglishTitle' "en");  	}  	else {  		I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  	}  	Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  	Canvas.SetTop (I' P2.Y + 25);  	I.OriginalLanguage = IP.OriginalLanguage;  	I.CategoryText.Text = IP.Category;  	I.Coordinate.Text = IP.Coordinates;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (!IP.IsHighlighted ()) {  	InfoCard I = new InfoCard (InfoCardLayer' IP);  	bool English = false;  	if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	if (English) {  		I.SearchForData (IP.WikiEnglishTitle' "en");  	}  	else {  		I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  	}  	Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  	Canvas.SetTop (I' P2.Y + 25);  	I.OriginalLanguage = IP.OriginalLanguage;  	I.CategoryText.Text = IP.Category;  	I.Coordinate.Text = IP.Coordinates;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (!IP.IsHighlighted ()) {  	InfoCard I = new InfoCard (InfoCardLayer' IP);  	bool English = false;  	if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	if (English) {  		I.SearchForData (IP.WikiEnglishTitle' "en");  	}  	else {  		I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  	}  	Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  	Canvas.SetTop (I' P2.Y + 25);  	I.OriginalLanguage = IP.OriginalLanguage;  	I.CategoryText.Text = IP.Category;  	I.Coordinate.Text = IP.Coordinates;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (!IP.IsHighlighted ()) {  	InfoCard I = new InfoCard (InfoCardLayer' IP);  	bool English = false;  	if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	if (English) {  		I.SearchForData (IP.WikiEnglishTitle' "en");  	}  	else {  		I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  	}  	Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  	Canvas.SetTop (I' P2.Y + 25);  	I.OriginalLanguage = IP.OriginalLanguage;  	I.CategoryText.Text = IP.Category;  	I.Coordinate.Text = IP.Coordinates;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: if (!IP.IsHighlighted ()) {  	InfoCard I = new InfoCard (InfoCardLayer' IP);  	bool English = false;  	if ((IP.VasaEnglishTitle != null) && (IP.VasaEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.VasaEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	else if ((IP.WikiEnglishTitle != null) && (IP.WikiEnglishTitle.Length > 0)) {  		I.SetupInfoCard (IP.WikiEnglishTitle' IP.WikiEnglishTitle' "en");  		English = true;  	}  	if ((IP.VasaTitle != null) && (IP.VasaTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.VasaTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	else if ((IP.WikiTitle != null) && (IP.WikiTitle.Length > 0)) {  		if (English) {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' "sv");  		}  		else {  			I.SetupInfoCard (IP.WikiTitle' IP.WikiTitle' IP.OriginalLanguage);  		}  	}  	if (English) {  		I.SearchForData (IP.WikiEnglishTitle' "en");  	}  	else {  		I.SearchForData (IP.WikiTitle' IP.OriginalLanguage);  	}  	Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  	Canvas.SetTop (I' P2.Y + 25);  	I.OriginalLanguage = IP.OriginalLanguage;  	I.CategoryText.Text = IP.Category;  	I.Coordinate.Text = IP.Coordinates;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: Canvas.SetLeft (I' P2.X - 443 / 2 + 25 / 2);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,P_OnTouchDown,The following statement contains a magic number: Canvas.SetTop (I' P2.Y + 25);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CreateQrCode,The following statement contains a magic number: rect.Width = 150;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CreateQrCode,The following statement contains a magic number: rect.Height = 150;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CreateQrCode,The following statement contains a magic number: dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CreateQrCode,The following statement contains a magic number: dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The following statement contains a magic number: try {  	if (e.Cancelled) {  	}  	else if (e.Error != null) {  		SearchResult.Items.Add ("Exception! " + e.Error.Message);  	}  	else {  		if (e.Result != null) {  			string result = e.Result;  			// PrettyFilter(e.Result);  			WikipediaCategories Data = DeserializeCategories (result);  			foreach (var item in Data.Categories) {  				if (NewCategory (item' ((string)e.UserState).Substring (0' 2))) {  					if (((string)e.UserState).StartsWith ("sv")) {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  					}  					else if (((string)e.UserState).StartsWith ("en")) {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  					}  					else if (((string)e.UserState).StartsWith ("es")) {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  					}  					else if (((string)e.UserState).StartsWith ("fr")) {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  					}  				}  			}  			//if (Data.query != null)  			//{  			//    foreach (var item in Data.query.pages)  			//    {  			//        string property = item.ToString();  			//        int Pos = property.IndexOf(':');  			//        string JsonProperty = property.Substring(Pos + 1);  			//        Page page = JsonConvert.DeserializeObject<Page>(JsonProperty);  			//        if (page.coordinates != null)  			//        {  			//            Coordinate coordinate = (Coordinate)page.coordinates.First();  			//            if (coordinate.globe.ToLower() == "earth")  			//            {  			//                Pushpin pin = new Pushpin();  			//                pin.Location = new Location(coordinate.lat' coordinate.lon);  			//                pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//                WorldMap.Children.Add(pin);  			//            }  			//        }  			//    }  			//}  		}  	}  }  catch {  	SearchResult.Items.Add ("Exception!");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else if (e.Error != null) {  	SearchResult.Items.Add ("Exception! " + e.Error.Message);  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		WikipediaCategories Data = DeserializeCategories (result);  		foreach (var item in Data.Categories) {  			if (NewCategory (item' ((string)e.UserState).Substring (0' 2))) {  				if (((string)e.UserState).StartsWith ("sv")) {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  				else if (((string)e.UserState).StartsWith ("en")) {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  				else if (((string)e.UserState).StartsWith ("es")) {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  				else if (((string)e.UserState).StartsWith ("fr")) {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  			}  		}  		//if (Data.query != null)  		//{  		//    foreach (var item in Data.query.pages)  		//    {  		//        string property = item.ToString();  		//        int Pos = property.IndexOf(':');  		//        string JsonProperty = property.Substring(Pos + 1);  		//        Page page = JsonConvert.DeserializeObject<Page>(JsonProperty);  		//        if (page.coordinates != null)  		//        {  		//            Coordinate coordinate = (Coordinate)page.coordinates.First();  		//            if (coordinate.globe.ToLower() == "earth")  		//            {  		//                Pushpin pin = new Pushpin();  		//                pin.Location = new Location(coordinate.lat' coordinate.lon);  		//                pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//                WorldMap.Children.Add(pin);  		//            }  		//        }  		//    }  		//}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Error != null) {  	SearchResult.Items.Add ("Exception! " + e.Error.Message);  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		WikipediaCategories Data = DeserializeCategories (result);  		foreach (var item in Data.Categories) {  			if (NewCategory (item' ((string)e.UserState).Substring (0' 2))) {  				if (((string)e.UserState).StartsWith ("sv")) {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  				else if (((string)e.UserState).StartsWith ("en")) {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  				else if (((string)e.UserState).StartsWith ("es")) {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  				else if (((string)e.UserState).StartsWith ("fr")) {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  				}  			}  		}  		//if (Data.query != null)  		//{  		//    foreach (var item in Data.query.pages)  		//    {  		//        string property = item.ToString();  		//        int Pos = property.IndexOf(':');  		//        string JsonProperty = property.Substring(Pos + 1);  		//        Page page = JsonConvert.DeserializeObject<Page>(JsonProperty);  		//        if (page.coordinates != null)  		//        {  		//            Coordinate coordinate = (Coordinate)page.coordinates.First();  		//            if (coordinate.globe.ToLower() == "earth")  		//            {  		//                Pushpin pin = new Pushpin();  		//                pin.Location = new Location(coordinate.lat' coordinate.lon);  		//                pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//                WorldMap.Children.Add(pin);  		//            }  		//        }  		//    }  		//}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	WikipediaCategories Data = DeserializeCategories (result);  	foreach (var item in Data.Categories) {  		if (NewCategory (item' ((string)e.UserState).Substring (0' 2))) {  			if (((string)e.UserState).StartsWith ("sv")) {  				SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  			}  			else if (((string)e.UserState).StartsWith ("en")) {  				SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  			}  			else if (((string)e.UserState).StartsWith ("es")) {  				SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  			}  			else if (((string)e.UserState).StartsWith ("fr")) {  				SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  			}  		}  	}  	//if (Data.query != null)  	//{  	//    foreach (var item in Data.query.pages)  	//    {  	//        string property = item.ToString();  	//        int Pos = property.IndexOf(':');  	//        string JsonProperty = property.Substring(Pos + 1);  	//        Page page = JsonConvert.DeserializeObject<Page>(JsonProperty);  	//        if (page.coordinates != null)  	//        {  	//            Coordinate coordinate = (Coordinate)page.coordinates.First();  	//            if (coordinate.globe.ToLower() == "earth")  	//            {  	//                Pushpin pin = new Pushpin();  	//                pin.Location = new Location(coordinate.lat' coordinate.lon);  	//                pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  	//                WorldMap.Children.Add(pin);  	//            }  	//        }  	//    }  	//}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.Categories) {  	if (NewCategory (item' ((string)e.UserState).Substring (0' 2))) {  		if (((string)e.UserState).StartsWith ("sv")) {  			SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  		}  		else if (((string)e.UserState).StartsWith ("en")) {  			SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  		}  		else if (((string)e.UserState).StartsWith ("es")) {  			SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  		}  		else if (((string)e.UserState).StartsWith ("fr")) {  			SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CategoryClient_DownloadStringCompleted,The following statement contains a magic number: if (NewCategory (item' ((string)e.UserState).Substring (0' 2))) {  	if (((string)e.UserState).StartsWith ("sv")) {  		SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  	}  	else if (((string)e.UserState).StartsWith ("en")) {  		SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  	}  	else if (((string)e.UserState).StartsWith ("es")) {  		SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  	}  	else if (((string)e.UserState).StartsWith ("fr")) {  		SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + item + "&gcmlimit=500"' item' (string)e.UserState);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"name\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 8);  			json = json.Substring (Pos + 8);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	Pos = json.IndexOf ("\"list\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  	else {  		//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  		Pos = json.IndexOf ("\"categorymembers\"");  		if (Pos > 0) {  			json = json.Substring (Pos);  			while (json.Length > 0) {  				Pos = json.IndexOf ("\"title\":");  				if (Pos > 0) {  					string CategoryName = json.Substring (Pos + 9);  					json = json.Substring (Pos + 9);  					Pos = CategoryName.IndexOf ("\"");  					CategoryName = CategoryName.Substring (0' Pos);  					Pos = CategoryName.IndexOf ("Category:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Kategori:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (9);  						}  						else {  							Pos = CategoryName.IndexOf ("Categor\\u00eda:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  								if (Pos >= 0) {  									CategoryName = CategoryName.Substring (15);  								}  								else {  									CategoryName = CategoryName.Substring (0);  								}  							}  						}  					}  					Data.Categories.Add (CategoryName);  				}  				else {  					json = "";  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"name\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 8);  		json = json.Substring (Pos + 8);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"name\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 8);  		json = json.Substring (Pos + 8);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 8);  	json = json.Substring (Pos + 8);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 8);  	json = json.Substring (Pos + 8);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: json = json.Substring (Pos + 8);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  else {  	//{"query":{"categorymembers":[{"pageid":256324'"ns":14'"title":"Kategori:F\u00f6dda 1600-talet (decennium)"}'{"pageid":255081'"ns":14'"title":"Kategori:Avlidna 1600-talet (decennium)"}'{"pageid":707710'"ns":14'"title":"Kategori:1600"}'{"pageid":707709'"ns":14'"title":"Kategori:1601"}'{"pageid":707708'"ns":14'"title":"Kategori:1602"}'{"pageid":707706'"ns":14'"title":"Kategori:1603"}'{"pageid":707705'"ns":14'"title":"Kategori:1604"}'{"pageid":706733'"ns":14'"title":"Kategori:1605"}'{"pageid":707704'"ns":14'"title":"Kategori:1606"}'{"pageid":707703'"ns":14'"title":"Kategori:1607"}'{"pageid":707702'"ns":14'"title":"Kategori:1608"}'{"pageid":707701'"ns":14'"title":"Kategori:1609"}'{"pageid":1255364'"ns":14'"title":"Kategori:1600-talet (decennium) efter land"}'{"pageid":1521574'"ns":14'"title":"Kategori:1600-talets religions\u00e5r"}'{"pageid":1373807'"ns":14'"title":"Kategori:1600-talets verk"}'{"pageid":1255356'"ns":14'"title":"Kategori:1600-talet (decennium) efter v\u00e4rldsdel"}]}}  	Pos = json.IndexOf ("\"categorymembers\"");  	if (Pos > 0) {  		json = json.Substring (Pos);  		while (json.Length > 0) {  			Pos = json.IndexOf ("\"title\":");  			if (Pos > 0) {  				string CategoryName = json.Substring (Pos + 9);  				json = json.Substring (Pos + 9);  				Pos = CategoryName.IndexOf ("\"");  				CategoryName = CategoryName.Substring (0' Pos);  				Pos = CategoryName.IndexOf ("Category:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Kategori:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (9);  					}  					else {  						Pos = CategoryName.IndexOf ("Categor\\u00eda:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  							if (Pos >= 0) {  								CategoryName = CategoryName.Substring (15);  							}  							else {  								CategoryName = CategoryName.Substring (0);  							}  						}  					}  				}  				Data.Categories.Add (CategoryName);  			}  			else {  				json = "";  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: json = json.Substring (Pos + 9);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Pos = CategoryName.IndexOf ("Category:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Kategori:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Categor\\u00eda:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							CategoryName = CategoryName.Substring (0);  						}  					}  				}  			}  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Pos = CategoryName.IndexOf ("Category:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Kategori:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Categor\\u00eda:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							CategoryName = CategoryName.Substring (0);  						}  					}  				}  			}  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Pos = CategoryName.IndexOf ("Category:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Kategori:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Categor\\u00eda:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							CategoryName = CategoryName.Substring (0);  						}  					}  				}  			}  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Pos = CategoryName.IndexOf ("Category:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Kategori:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Categor\\u00eda:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							CategoryName = CategoryName.Substring (0);  						}  					}  				}  			}  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Pos = CategoryName.IndexOf ("Category:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Kategori:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Categor\\u00eda:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							CategoryName = CategoryName.Substring (0);  						}  					}  				}  			}  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	json = json.Substring (Pos);  	while (json.Length > 0) {  		Pos = json.IndexOf ("\"title\":");  		if (Pos > 0) {  			string CategoryName = json.Substring (Pos + 9);  			json = json.Substring (Pos + 9);  			Pos = CategoryName.IndexOf ("\"");  			CategoryName = CategoryName.Substring (0' Pos);  			Pos = CategoryName.IndexOf ("Category:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Kategori:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (9);  				}  				else {  					Pos = CategoryName.IndexOf ("Categor\\u00eda:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  						if (Pos >= 0) {  							CategoryName = CategoryName.Substring (15);  						}  						else {  							CategoryName = CategoryName.Substring (0);  						}  					}  				}  			}  			Data.Categories.Add (CategoryName);  		}  		else {  			json = "";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Pos = CategoryName.IndexOf ("Category:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Kategori:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Categor\\u00eda:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						CategoryName = CategoryName.Substring (0);  					}  				}  			}  		}  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Pos = CategoryName.IndexOf ("Category:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Kategori:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Categor\\u00eda:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						CategoryName = CategoryName.Substring (0);  					}  				}  			}  		}  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Pos = CategoryName.IndexOf ("Category:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Kategori:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Categor\\u00eda:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						CategoryName = CategoryName.Substring (0);  					}  				}  			}  		}  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Pos = CategoryName.IndexOf ("Category:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Kategori:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Categor\\u00eda:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						CategoryName = CategoryName.Substring (0);  					}  				}  			}  		}  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Pos = CategoryName.IndexOf ("Category:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Kategori:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Categor\\u00eda:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						CategoryName = CategoryName.Substring (0);  					}  				}  			}  		}  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: while (json.Length > 0) {  	Pos = json.IndexOf ("\"title\":");  	if (Pos > 0) {  		string CategoryName = json.Substring (Pos + 9);  		json = json.Substring (Pos + 9);  		Pos = CategoryName.IndexOf ("\"");  		CategoryName = CategoryName.Substring (0' Pos);  		Pos = CategoryName.IndexOf ("Category:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Kategori:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (9);  			}  			else {  				Pos = CategoryName.IndexOf ("Categor\\u00eda:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  					if (Pos >= 0) {  						CategoryName = CategoryName.Substring (15);  					}  					else {  						CategoryName = CategoryName.Substring (0);  					}  				}  			}  		}  		Data.Categories.Add (CategoryName);  	}  	else {  		json = "";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Pos = CategoryName.IndexOf ("Category:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Kategori:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Categor\\u00eda:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					CategoryName = CategoryName.Substring (0);  				}  			}  		}  	}  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Pos = CategoryName.IndexOf ("Category:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Kategori:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Categor\\u00eda:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					CategoryName = CategoryName.Substring (0);  				}  			}  		}  	}  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Pos = CategoryName.IndexOf ("Category:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Kategori:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Categor\\u00eda:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					CategoryName = CategoryName.Substring (0);  				}  			}  		}  	}  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Pos = CategoryName.IndexOf ("Category:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Kategori:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Categor\\u00eda:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					CategoryName = CategoryName.Substring (0);  				}  			}  		}  	}  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Pos = CategoryName.IndexOf ("Category:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Kategori:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Categor\\u00eda:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					CategoryName = CategoryName.Substring (0);  				}  			}  		}  	}  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos > 0) {  	string CategoryName = json.Substring (Pos + 9);  	json = json.Substring (Pos + 9);  	Pos = CategoryName.IndexOf ("\"");  	CategoryName = CategoryName.Substring (0' Pos);  	Pos = CategoryName.IndexOf ("Category:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Kategori:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (9);  		}  		else {  			Pos = CategoryName.IndexOf ("Categor\\u00eda:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  				if (Pos >= 0) {  					CategoryName = CategoryName.Substring (15);  				}  				else {  					CategoryName = CategoryName.Substring (0);  				}  			}  		}  	}  	Data.Categories.Add (CategoryName);  }  else {  	json = "";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: json = json.Substring (Pos + 9);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (9);  }  else {  	Pos = CategoryName.IndexOf ("Kategori:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Categor\\u00eda:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (15);  		}  		else {  			Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				CategoryName = CategoryName.Substring (0);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (9);  }  else {  	Pos = CategoryName.IndexOf ("Kategori:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Categor\\u00eda:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (15);  		}  		else {  			Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				CategoryName = CategoryName.Substring (0);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (9);  }  else {  	Pos = CategoryName.IndexOf ("Kategori:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Categor\\u00eda:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (15);  		}  		else {  			Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				CategoryName = CategoryName.Substring (0);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (9);  }  else {  	Pos = CategoryName.IndexOf ("Kategori:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (9);  	}  	else {  		Pos = CategoryName.IndexOf ("Categor\\u00eda:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (15);  		}  		else {  			Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  			if (Pos >= 0) {  				CategoryName = CategoryName.Substring (15);  			}  			else {  				CategoryName = CategoryName.Substring (0);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: CategoryName = CategoryName.Substring (9);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (9);  }  else {  	Pos = CategoryName.IndexOf ("Categor\\u00eda:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (15);  	}  	else {  		Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (15);  		}  		else {  			CategoryName = CategoryName.Substring (0);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (9);  }  else {  	Pos = CategoryName.IndexOf ("Categor\\u00eda:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (15);  	}  	else {  		Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (15);  		}  		else {  			CategoryName = CategoryName.Substring (0);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (9);  }  else {  	Pos = CategoryName.IndexOf ("Categor\\u00eda:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (15);  	}  	else {  		Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  		if (Pos >= 0) {  			CategoryName = CategoryName.Substring (15);  		}  		else {  			CategoryName = CategoryName.Substring (0);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: CategoryName = CategoryName.Substring (9);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (15);  }  else {  	Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (15);  	}  	else {  		CategoryName = CategoryName.Substring (0);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (15);  }  else {  	Pos = CategoryName.IndexOf ("Cat\\u00e9gorie:");  	if (Pos >= 0) {  		CategoryName = CategoryName.Substring (15);  	}  	else {  		CategoryName = CategoryName.Substring (0);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: CategoryName = CategoryName.Substring (15);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: if (Pos >= 0) {  	CategoryName = CategoryName.Substring (15);  }  else {  	CategoryName = CategoryName.Substring (0);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,DeserializeCategories,The following statement contains a magic number: CategoryName = CategoryName.Substring (15);  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else {  	if (e.Result != null) {  		string result = e.Result;  		// PrettyFilter(e.Result);  		string[] parts = ((string)e.UserState).Split ('@');  		string Category = parts [1];  		string Language = parts [0];  		WikipediaData Data = Deserialize (result);  		if (Data.query != null) {  			foreach (var item in Data.query.pages) {  				string property = item.ToString ();  				int Pos = property.IndexOf (':');  				string JsonProperty = property.Substring (Pos + 1);  				Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  				if (page.coordinates != null) {  					if (SearchResultList.IndexOf (page.title) < 0) {  						SearchResultList.Add (page.title);  						if (parts [0] == "sv") {  							SearchResultSv++;  							SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  						}  						if (parts [0] == "en") {  							SearchResultEn++;  							SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  						}  						if (parts [0] == "es") {  							SearchResultEs++;  							SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  						}  						if (parts [0] == "fr") {  							SearchResultFr++;  							SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  						}  						//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  						Coordinate coordinate = (Coordinate)page.coordinates.First ();  						if (coordinate.globe.ToLower () == "earth") {  							//Pushpin pin = new Pushpin();  							//pin.Location = new Location(coordinate.lat' coordinate.lon);  							//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  							//pin.DataContext = page.title; // Category+":"+  							//WorldMap.Children.Add(pin);  							String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  							if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  								SearchResultListWithCoordinates.Add (SearchResult);  								InformationPushPin P = new InformationPushPin ();  								P.OnTouchDown += new EventHandler (P_OnTouchDown);  								P.OriginalLanguage = Language;  								P.WikiTitle = page.title;  								P.Category = Category;  								MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  								MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  								MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  								PinMapLayer2.Children.Add (P);  							}  						}  						else {  							SearchResultItemCount++;  							SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						}  					}  				}  				else {  					if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  						int ColonPos = page.title.IndexOf (":") + 1;  						string Category2 = page.title.Substring (ColonPos);  						int YearPos = Category2.IndexOf ("16");  						if (YearPos >= 0) {  							string YearFound = Category2.Substring (YearPos' 4);  							if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  								if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  									if (NewCategory (Category2' Language)) {  										// SwedishWikipediaURL  										//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  										if (Language == "sv") {  											SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "en") {  											SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "es") {  											SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  										else if (Language == "fr") {  											SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  										}  									}  								}  							}  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  						//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	// PrettyFilter(e.Result);  	string[] parts = ((string)e.UserState).Split ('@');  	string Category = parts [1];  	string Language = parts [0];  	WikipediaData Data = Deserialize (result);  	if (Data.query != null) {  		foreach (var item in Data.query.pages) {  			string property = item.ToString ();  			int Pos = property.IndexOf (':');  			string JsonProperty = property.Substring (Pos + 1);  			Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  			if (page.coordinates != null) {  				if (SearchResultList.IndexOf (page.title) < 0) {  					SearchResultList.Add (page.title);  					if (parts [0] == "sv") {  						SearchResultSv++;  						SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  					}  					if (parts [0] == "en") {  						SearchResultEn++;  						SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  					}  					if (parts [0] == "es") {  						SearchResultEs++;  						SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  					}  					if (parts [0] == "fr") {  						SearchResultFr++;  						SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  					}  					//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  					Coordinate coordinate = (Coordinate)page.coordinates.First ();  					if (coordinate.globe.ToLower () == "earth") {  						//Pushpin pin = new Pushpin();  						//pin.Location = new Location(coordinate.lat' coordinate.lon);  						//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  						//pin.DataContext = page.title; // Category+":"+  						//WorldMap.Children.Add(pin);  						String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  						if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  							SearchResultListWithCoordinates.Add (SearchResult);  							InformationPushPin P = new InformationPushPin ();  							P.OnTouchDown += new EventHandler (P_OnTouchDown);  							P.OriginalLanguage = Language;  							P.WikiTitle = page.title;  							P.Category = Category;  							MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  							MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  							MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  							PinMapLayer2.Children.Add (P);  						}  					}  					else {  						SearchResultItemCount++;  						SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					}  				}  			}  			else {  				if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  					int ColonPos = page.title.IndexOf (":") + 1;  					string Category2 = page.title.Substring (ColonPos);  					int YearPos = Category2.IndexOf ("16");  					if (YearPos >= 0) {  						string YearFound = Category2.Substring (YearPos' 4);  						if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  							if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  								if (NewCategory (Category2' Language)) {  									// SwedishWikipediaURL  									//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  									if (Language == "sv") {  										SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "en") {  										SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "es") {  										SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  									else if (Language == "fr") {  										SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  									}  								}  							}  						}  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  					//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (Data.query != null) {  	foreach (var item in Data.query.pages) {  		string property = item.ToString ();  		int Pos = property.IndexOf (':');  		string JsonProperty = property.Substring (Pos + 1);  		Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  		if (page.coordinates != null) {  			if (SearchResultList.IndexOf (page.title) < 0) {  				SearchResultList.Add (page.title);  				if (parts [0] == "sv") {  					SearchResultSv++;  					SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  				}  				if (parts [0] == "en") {  					SearchResultEn++;  					SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  				}  				if (parts [0] == "es") {  					SearchResultEs++;  					SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  				}  				if (parts [0] == "fr") {  					SearchResultFr++;  					SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  				}  				//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  				Coordinate coordinate = (Coordinate)page.coordinates.First ();  				if (coordinate.globe.ToLower () == "earth") {  					//Pushpin pin = new Pushpin();  					//pin.Location = new Location(coordinate.lat' coordinate.lon);  					//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  					//pin.DataContext = page.title; // Category+":"+  					//WorldMap.Children.Add(pin);  					String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  					if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  						SearchResultListWithCoordinates.Add (SearchResult);  						InformationPushPin P = new InformationPushPin ();  						P.OnTouchDown += new EventHandler (P_OnTouchDown);  						P.OriginalLanguage = Language;  						P.WikiTitle = page.title;  						P.Category = Category;  						MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  						MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  						MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  						PinMapLayer2.Children.Add (P);  					}  				}  				else {  					SearchResultItemCount++;  					SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				}  			}  		}  		else {  			if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  				int ColonPos = page.title.IndexOf (":") + 1;  				string Category2 = page.title.Substring (ColonPos);  				int YearPos = Category2.IndexOf ("16");  				if (YearPos >= 0) {  					string YearFound = Category2.Substring (YearPos' 4);  					if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  						if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  							if (NewCategory (Category2' Language)) {  								// SwedishWikipediaURL  								//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  								if (Language == "sv") {  									SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "en") {  									SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "es") {  									SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  								else if (Language == "fr") {  									SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  								}  							}  						}  					}  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  				//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: foreach (var item in Data.query.pages) {  	string property = item.ToString ();  	int Pos = property.IndexOf (':');  	string JsonProperty = property.Substring (Pos + 1);  	Page page = JsonConvert.DeserializeObject<Page> (JsonProperty);  	if (page.coordinates != null) {  		if (SearchResultList.IndexOf (page.title) < 0) {  			SearchResultList.Add (page.title);  			if (parts [0] == "sv") {  				SearchResultSv++;  				SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  			}  			if (parts [0] == "en") {  				SearchResultEn++;  				SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  			}  			if (parts [0] == "es") {  				SearchResultEs++;  				SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  			}  			if (parts [0] == "fr") {  				SearchResultFr++;  				SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  			}  			//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  			Coordinate coordinate = (Coordinate)page.coordinates.First ();  			if (coordinate.globe.ToLower () == "earth") {  				//Pushpin pin = new Pushpin();  				//pin.Location = new Location(coordinate.lat' coordinate.lon);  				//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  				//pin.DataContext = page.title; // Category+":"+  				//WorldMap.Children.Add(pin);  				String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  				if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  					SearchResultListWithCoordinates.Add (SearchResult);  					InformationPushPin P = new InformationPushPin ();  					P.OnTouchDown += new EventHandler (P_OnTouchDown);  					P.OriginalLanguage = Language;  					P.WikiTitle = page.title;  					P.Category = Category;  					MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  					MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  					MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  					PinMapLayer2.Children.Add (P);  				}  			}  			else {  				SearchResultItemCount++;  				SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			}  		}  	}  	else {  		if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  			int ColonPos = page.title.IndexOf (":") + 1;  			string Category2 = page.title.Substring (ColonPos);  			int YearPos = Category2.IndexOf ("16");  			if (YearPos >= 0) {  				string YearFound = Category2.Substring (YearPos' 4);  				if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  					if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  						if (NewCategory (Category2' Language)) {  							// SwedishWikipediaURL  							//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  							if (Language == "sv") {  								SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "en") {  								SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "es") {  								SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  							else if (Language == "fr") {  								SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  							}  						}  					}  				}  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  			//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (page.coordinates != null) {  	if (SearchResultList.IndexOf (page.title) < 0) {  		SearchResultList.Add (page.title);  		if (parts [0] == "sv") {  			SearchResultSv++;  			SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  		}  		if (parts [0] == "en") {  			SearchResultEn++;  			SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  		}  		if (parts [0] == "es") {  			SearchResultEs++;  			SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  		}  		if (parts [0] == "fr") {  			SearchResultFr++;  			SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  		}  		//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  		Coordinate coordinate = (Coordinate)page.coordinates.First ();  		if (coordinate.globe.ToLower () == "earth") {  			//Pushpin pin = new Pushpin();  			//pin.Location = new Location(coordinate.lat' coordinate.lon);  			//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  			//pin.DataContext = page.title; // Category+":"+  			//WorldMap.Children.Add(pin);  			String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  			if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  				SearchResultListWithCoordinates.Add (SearchResult);  				InformationPushPin P = new InformationPushPin ();  				P.OnTouchDown += new EventHandler (P_OnTouchDown);  				P.OriginalLanguage = Language;  				P.WikiTitle = page.title;  				P.Category = Category;  				MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  				MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  				MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  				PinMapLayer2.Children.Add (P);  			}  		}  		else {  			SearchResultItemCount++;  			SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		}  	}  }  else {  	if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  		int ColonPos = page.title.IndexOf (":") + 1;  		string Category2 = page.title.Substring (ColonPos);  		int YearPos = Category2.IndexOf ("16");  		if (YearPos >= 0) {  			string YearFound = Category2.Substring (YearPos' 4);  			if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  				if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  					if (NewCategory (Category2' Language)) {  						// SwedishWikipediaURL  						//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  						if (Language == "sv") {  							SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "en") {  							SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "es") {  							SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  						else if (Language == "fr") {  							SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  						}  					}  				}  			}  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  		//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (SearchResultList.IndexOf (page.title) < 0) {  	SearchResultList.Add (page.title);  	if (parts [0] == "sv") {  		SearchResultSv++;  		SearchResultPinsSv.Text = SearchResultSv.ToString () + " svenska artiklar";  	}  	if (parts [0] == "en") {  		SearchResultEn++;  		SearchResultPinsEn.Text = SearchResultEn.ToString () + " engelska artiklar";  	}  	if (parts [0] == "es") {  		SearchResultEs++;  		SearchResultPinsEs.Text = SearchResultEs.ToString () + " spanska artiklar";  	}  	if (parts [0] == "fr") {  		SearchResultFr++;  		SearchResultPinsFr.Text = SearchResultFr.ToString () + " franska artiklar";  	}  	//SearchResult.Items.Add(":"+(string)e.UserState);//+"=>"+page.title+" - "+page.coordinates.ToString());  	Coordinate coordinate = (Coordinate)page.coordinates.First ();  	if (coordinate.globe.ToLower () == "earth") {  		//Pushpin pin = new Pushpin();  		//pin.Location = new Location(coordinate.lat' coordinate.lon);  		//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  		//pin.DataContext = page.title; // Category+":"+  		//WorldMap.Children.Add(pin);  		String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  		if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  			SearchResultListWithCoordinates.Add (SearchResult);  			InformationPushPin P = new InformationPushPin ();  			P.OnTouchDown += new EventHandler (P_OnTouchDown);  			P.OriginalLanguage = Language;  			P.WikiTitle = page.title;  			P.Category = Category;  			MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  			MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  			MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  			PinMapLayer2.Children.Add (P);  		}  	}  	else {  		SearchResultItemCount++;  		SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (coordinate.globe.ToLower () == "earth") {  	//Pushpin pin = new Pushpin();  	//pin.Location = new Location(coordinate.lat' coordinate.lon);  	//pin.TouchDown += new EventHandler<TouchEventArgs>(pin_TouchDown);  	//pin.DataContext = page.title; // Category+":"+  	//WorldMap.Children.Add(pin);  	String SearchResult = Category + ":" + page.title + ":" + coordinate.lat + ";" + coordinate.lon + ":" + Language;  	if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  		SearchResultListWithCoordinates.Add (SearchResult);  		InformationPushPin P = new InformationPushPin ();  		P.OnTouchDown += new EventHandler (P_OnTouchDown);  		P.OriginalLanguage = Language;  		P.WikiTitle = page.title;  		P.Category = Category;  		MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  		MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  		MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  		PinMapLayer2.Children.Add (P);  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (SearchResultListWithCoordinates.IndexOf (SearchResult) < 0) {  	SearchResultListWithCoordinates.Add (SearchResult);  	InformationPushPin P = new InformationPushPin ();  	P.OnTouchDown += new EventHandler (P_OnTouchDown);  	P.OriginalLanguage = Language;  	P.WikiTitle = page.title;  	P.Category = Category;  	MapLayer.SetPosition (P' new Location (Convert.ToDouble (coordinate.lat)' Convert.ToDouble (coordinate.lon)));  	MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  	MapLayer.SetPositionOffset (P' new Point (PinOffsetX' PinOffsetY));  	PinMapLayer2.Children.Add (P);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: MapLayer.SetZIndex (P' -(int)Math.Round (Convert.ToDouble (coordinate.lat) * 100));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  	int ColonPos = page.title.IndexOf (":") + 1;  	string Category2 = page.title.Substring (ColonPos);  	int YearPos = Category2.IndexOf ("16");  	if (YearPos >= 0) {  		string YearFound = Category2.Substring (YearPos' 4);  		if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  			if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  				if (NewCategory (Category2' Language)) {  					// SwedishWikipediaURL  					//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  					if (Language == "sv") {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "en") {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "es") {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "fr") {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  				}  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  	int ColonPos = page.title.IndexOf (":") + 1;  	string Category2 = page.title.Substring (ColonPos);  	int YearPos = Category2.IndexOf ("16");  	if (YearPos >= 0) {  		string YearFound = Category2.Substring (YearPos' 4);  		if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  			if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  				if (NewCategory (Category2' Language)) {  					// SwedishWikipediaURL  					//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  					if (Language == "sv") {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "en") {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "es") {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "fr") {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  				}  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  	int ColonPos = page.title.IndexOf (":") + 1;  	string Category2 = page.title.Substring (ColonPos);  	int YearPos = Category2.IndexOf ("16");  	if (YearPos >= 0) {  		string YearFound = Category2.Substring (YearPos' 4);  		if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  			if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  				if (NewCategory (Category2' Language)) {  					// SwedishWikipediaURL  					//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  					if (Language == "sv") {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "en") {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "es") {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "fr") {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  				}  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  	int ColonPos = page.title.IndexOf (":") + 1;  	string Category2 = page.title.Substring (ColonPos);  	int YearPos = Category2.IndexOf ("16");  	if (YearPos >= 0) {  		string YearFound = Category2.Substring (YearPos' 4);  		if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  			if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  				if (NewCategory (Category2' Language)) {  					// SwedishWikipediaURL  					//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  					if (Language == "sv") {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "en") {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "es") {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "fr") {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  				}  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  	int ColonPos = page.title.IndexOf (":") + 1;  	string Category2 = page.title.Substring (ColonPos);  	int YearPos = Category2.IndexOf ("16");  	if (YearPos >= 0) {  		string YearFound = Category2.Substring (YearPos' 4);  		if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  			if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  				if (NewCategory (Category2' Language)) {  					// SwedishWikipediaURL  					//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  					if (Language == "sv") {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "en") {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "es") {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "fr") {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  				}  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  	int ColonPos = page.title.IndexOf (":") + 1;  	string Category2 = page.title.Substring (ColonPos);  	int YearPos = Category2.IndexOf ("16");  	if (YearPos >= 0) {  		string YearFound = Category2.Substring (YearPos' 4);  		if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  			if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  				if (NewCategory (Category2' Language)) {  					// SwedishWikipediaURL  					//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  					if (Language == "sv") {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "en") {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "es") {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "fr") {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  				}  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((page.title.StartsWith ("Kategori:")) || (page.title.StartsWith ("Category:")) || (page.title.StartsWith ("Catégorie:")) || (page.title.StartsWith ("Categoría:"))) {  	int ColonPos = page.title.IndexOf (":") + 1;  	string Category2 = page.title.Substring (ColonPos);  	int YearPos = Category2.IndexOf ("16");  	if (YearPos >= 0) {  		string YearFound = Category2.Substring (YearPos' 4);  		if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  			if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  				if (NewCategory (Category2' Language)) {  					// SwedishWikipediaURL  					//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  					if (Language == "sv") {  						SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "en") {  						SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "es") {  						SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  					else if (Language == "fr") {  						SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  					}  				}  			}  		}  	}  }  else {  	SearchResultItemCount++;  	SearchResultCount.Text = SearchResultItemCount.ToString () + " utan koordinater";  	//SearchResult.Items.Add(":" + (string)e.UserState + "=>" + page.title + "....................");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (YearPos >= 0) {  	string YearFound = Category2.Substring (YearPos' 4);  	if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  		if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  			if (NewCategory (Category2' Language)) {  				// SwedishWikipediaURL  				//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  				if (Language == "sv") {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "en") {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "es") {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "fr") {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (YearPos >= 0) {  	string YearFound = Category2.Substring (YearPos' 4);  	if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  		if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  			if (NewCategory (Category2' Language)) {  				// SwedishWikipediaURL  				//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  				if (Language == "sv") {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "en") {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "es") {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "fr") {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (YearPos >= 0) {  	string YearFound = Category2.Substring (YearPos' 4);  	if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  		if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  			if (NewCategory (Category2' Language)) {  				// SwedishWikipediaURL  				//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  				if (Language == "sv") {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "en") {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "es") {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "fr") {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (YearPos >= 0) {  	string YearFound = Category2.Substring (YearPos' 4);  	if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  		if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  			if (NewCategory (Category2' Language)) {  				// SwedishWikipediaURL  				//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  				if (Language == "sv") {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "en") {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "es") {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "fr") {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (YearPos >= 0) {  	string YearFound = Category2.Substring (YearPos' 4);  	if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  		if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  			if (NewCategory (Category2' Language)) {  				// SwedishWikipediaURL  				//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  				if (Language == "sv") {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "en") {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "es") {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "fr") {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (YearPos >= 0) {  	string YearFound = Category2.Substring (YearPos' 4);  	if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  		if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  			if (NewCategory (Category2' Language)) {  				// SwedishWikipediaURL  				//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  				if (Language == "sv") {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "en") {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "es") {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "fr") {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if (YearPos >= 0) {  	string YearFound = Category2.Substring (YearPos' 4);  	if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  		if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  			if (NewCategory (Category2' Language)) {  				// SwedishWikipediaURL  				//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  				if (Language == "sv") {  					SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "en") {  					SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "es") {  					SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  				else if (Language == "fr") {  					SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  				}  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  	if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  		if (NewCategory (Category2' Language)) {  			// SwedishWikipediaURL  			//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  			if (Language == "sv") {  				SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "en") {  				SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "es") {  				SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "fr") {  				SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  	if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  		if (NewCategory (Category2' Language)) {  			// SwedishWikipediaURL  			//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  			if (Language == "sv") {  				SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "en") {  				SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "es") {  				SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "fr") {  				SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  	if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  		if (NewCategory (Category2' Language)) {  			// SwedishWikipediaURL  			//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  			if (Language == "sv") {  				SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "en") {  				SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "es") {  				SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "fr") {  				SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  	if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  		if (NewCategory (Category2' Language)) {  			// SwedishWikipediaURL  			//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  			if (Language == "sv") {  				SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "en") {  				SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "es") {  				SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "fr") {  				SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  	if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  		if (NewCategory (Category2' Language)) {  			// SwedishWikipediaURL  			//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  			if (Language == "sv") {  				SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "en") {  				SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "es") {  				SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "fr") {  				SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((YearFound [2] >= '0') && (YearFound [2] <= '9') && (YearFound [3] >= '0') && (YearFound [3] <= '9')) {  	if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  		if (NewCategory (Category2' Language)) {  			// SwedishWikipediaURL  			//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  			if (Language == "sv") {  				SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "en") {  				SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "es") {  				SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  			else if (Language == "fr") {  				SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  			}  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  	if (NewCategory (Category2' Language)) {  		// SwedishWikipediaURL  		//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  		if (Language == "sv") {  			SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  		else if (Language == "en") {  			SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  		else if (Language == "es") {  			SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  		else if (Language == "fr") {  			SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,client_DownloadStringCompleted,The following statement contains a magic number: if ((Convert.ToInt16 (YearFound) >= 1600) && (Convert.ToInt16 (YearFound) < 1650)) {  	if (NewCategory (Category2' Language)) {  		// SwedishWikipediaURL  		//SearchForWikiCoordinates(EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=100"' Category2);  		if (Language == "sv") {  			SearchForWikiCoordinates (SwedishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  		else if (Language == "en") {  			SearchForWikiCoordinates (EnglishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  		else if (Language == "es") {  			SearchForWikiCoordinates (SpanishWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  		else if (Language == "fr") {  			SearchForWikiCoordinates (FrenchWikipediaURL' "?action=query&prop=coordinates&format=json&colimit=10&generator=categorymembers&gcmtitle=Category%3A" + Category2 + "&gcmlimit=500"' Category2' Language);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SaveResult,The following statement contains a magic number: if (SearchCategoriesList.Count > 100) {  	System.IO.File.WriteAllLines ("CategoriesList.txt"' SearchCategoriesList);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SaveResult,The following statement contains a magic number: if (SearchResultList.Count > 100) {  	System.IO.File.WriteAllLines ("ResultList.txt"' SearchResultList);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,SaveResult,The following statement contains a magic number: if (SearchResultListWithCoordinates.Count > 100) {  	System.IO.File.WriteAllLines ("ResultListWithCoordinates.txt"' SearchResultListWithCoordinates);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: if (WorldMap.ZoomLevel < App.FirstWavePins) {  	WorldMap.SupportedManipulations = Manipulations2D.Scale;  	WorldMap.Center = new Location (OriginalLatitude' OriginalLongitude);  }  else {  	WorldMap.SupportedManipulations = (Manipulations2D)7;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: WorldMap.SupportedManipulations = (Manipulations2D)7;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: if (WorldMap.ZoomLevel > 15) {  	WorldMap.ZoomLevel = 15;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: if (WorldMap.ZoomLevel > 15) {  	WorldMap.ZoomLevel = 15;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: WorldMap.ZoomLevel = 15;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: if (OldMapLayer != null) {  	if (WorldMap.ZoomLevel < App.FirstWavePins) {  		PinMapLayer1.Visibility = System.Windows.Visibility.Hidden;  		PinMapLayer2.Visibility = System.Windows.Visibility.Hidden;  		PinMapLayer3.Visibility = System.Windows.Visibility.Hidden;  	}  	else {  		PinMapLayer1.Visibility = System.Windows.Visibility.Visible;  	}  	if (WorldMap.ZoomLevel < App.SecondWavePins) {  		PinMapLayer2.Visibility = System.Windows.Visibility.Hidden;  	}  	else {  		PinMapLayer2.Visibility = System.Windows.Visibility.Visible;  	}  	if (WorldMap.ZoomLevel < App.ThirdWavePins) {  		PinMapLayer3.Visibility = System.Windows.Visibility.Hidden;  	}  	else {  		PinMapLayer3.Visibility = System.Windows.Visibility.Visible;  	}  	if (WorldMap.ZoomLevel < App.FirstWavePins) {  		OldMapLayer.Visibility = System.Windows.Visibility.Visible;  		LeftMapImage.Visibility = System.Windows.Visibility.Visible;  		RightMapImage.Visibility = System.Windows.Visibility.Visible;  		OldMapLayer.Opacity = (App.FirstWavePins - WorldMap.ZoomLevel) / (App.FirstWavePins - OriginalZoomLevel);  		LeftMapImage.Opacity = OldMapLayer.Opacity;  		RightMapImage.Opacity = OldMapLayer.Opacity;  		PositionLeftAndRightMapImages ();  	}  	else {  		OldMapLayer.Visibility = System.Windows.Visibility.Hidden;  		LeftMapImage.Visibility = System.Windows.Visibility.Hidden;  		RightMapImage.Visibility = System.Windows.Visibility.Hidden;  		if (WorldMap.ZoomLevel < 6) {  			if (((AerialMode)WorldMap.Mode).Labels) {  				WorldMap.Mode = new AerialMode (false);  			}  		}  		else {  			if (!((AerialMode)WorldMap.Mode).Labels) {  				WorldMap.Mode = new AerialMode (true);  			}  		}  	}  	//OldMapImage.Visibility = System.Windows.Visibility.Hidden;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: if (WorldMap.ZoomLevel < App.FirstWavePins) {  	OldMapLayer.Visibility = System.Windows.Visibility.Visible;  	LeftMapImage.Visibility = System.Windows.Visibility.Visible;  	RightMapImage.Visibility = System.Windows.Visibility.Visible;  	OldMapLayer.Opacity = (App.FirstWavePins - WorldMap.ZoomLevel) / (App.FirstWavePins - OriginalZoomLevel);  	LeftMapImage.Opacity = OldMapLayer.Opacity;  	RightMapImage.Opacity = OldMapLayer.Opacity;  	PositionLeftAndRightMapImages ();  }  else {  	OldMapLayer.Visibility = System.Windows.Visibility.Hidden;  	LeftMapImage.Visibility = System.Windows.Visibility.Hidden;  	RightMapImage.Visibility = System.Windows.Visibility.Hidden;  	if (WorldMap.ZoomLevel < 6) {  		if (((AerialMode)WorldMap.Mode).Labels) {  			WorldMap.Mode = new AerialMode (false);  		}  	}  	else {  		if (!((AerialMode)WorldMap.Mode).Labels) {  			WorldMap.Mode = new AerialMode (true);  		}  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,WorldMap_ViewChangeOnFrame,The following statement contains a magic number: if (WorldMap.ZoomLevel < 6) {  	if (((AerialMode)WorldMap.Mode).Labels) {  		WorldMap.Mode = new AerialMode (false);  	}  }  else {  	if (!((AerialMode)WorldMap.Mode).Labels) {  		WorldMap.Mode = new AerialMode (true);  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Left = -28 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 710;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Left = -28 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 710;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Top = -23 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 400;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Top = -23 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 400;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: LeftMapImage.Height = 1107 + (WorldMap.ZoomLevel - OriginalZoomLevel) * 800;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: LeftMapImage.Height = 1107 + (WorldMap.ZoomLevel - OriginalZoomLevel) * 800;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Right = -19 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 705;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Right = -19 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 705;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Top = -23 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 400;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: T.Top = -23 - (WorldMap.ZoomLevel - OriginalZoomLevel) * 400;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: RightMapImage.Height = 1107 + (WorldMap.ZoomLevel - OriginalZoomLevel) * 800;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionLeftAndRightMapImages,The following statement contains a magic number: RightMapImage.Height = 1107 + (WorldMap.ZoomLevel - OriginalZoomLevel) * 800;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,StartMovingClouds,The following statement contains a magic number: CloudLatitude = 30;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,StartMovingClouds,The following statement contains a magic number: CloudLongitude = -140;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,StartMovingClouds,The following statement contains a magic number: CloudAnimation = new DoubleAnimation (1' 1' new Duration (TimeSpan.FromMilliseconds (100)));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionCloud,The following statement contains a magic number: MapLayer.SetPositionRectangle (Cloud' new LocationRect (CloudLatitude' CloudLongitude' CloudLatitude - 60' CloudLongitude + 60));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,PositionCloud,The following statement contains a magic number: MapLayer.SetPositionRectangle (Cloud' new LocationRect (CloudLatitude' CloudLongitude' CloudLatitude - 60' CloudLongitude + 60));  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	if (!IsSpinning) {  		SpinTouchRectangleStartPoint = e.TouchDevice.GetPosition (null);  		SpinTouchRectangleStartAngle = SpinRotate.Angle;  		double X;  		double Y;  		SpinTouchRectangleStartPointAngle = CalcAngle (SpinTouchRectangleStartPoint' out X' out Y);  		if (X > 0) {  			if (Y > 0) {  				SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  			}  			else {  				SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  			}  		}  		else {  			if (Y > 0) {  				SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  			}  			else {  				SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  			}  		}  		IsSpinning = true;  		e.Handled = true;  		App.LastUserInteraction = DateTime.Now;  		App.StoreAnalytics ("Categories"' "Spinning_Wheel"' "");  	}  	SpinTouchRectangle.CaptureTouch (e.TouchDevice);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	if (!IsSpinning) {  		SpinTouchRectangleStartPoint = e.TouchDevice.GetPosition (null);  		SpinTouchRectangleStartAngle = SpinRotate.Angle;  		double X;  		double Y;  		SpinTouchRectangleStartPointAngle = CalcAngle (SpinTouchRectangleStartPoint' out X' out Y);  		if (X > 0) {  			if (Y > 0) {  				SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  			}  			else {  				SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  			}  		}  		else {  			if (Y > 0) {  				SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  			}  			else {  				SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  			}  		}  		IsSpinning = true;  		e.Handled = true;  		App.LastUserInteraction = DateTime.Now;  		App.StoreAnalytics ("Categories"' "Spinning_Wheel"' "");  	}  	SpinTouchRectangle.CaptureTouch (e.TouchDevice);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	if (!IsSpinning) {  		SpinTouchRectangleStartPoint = e.TouchDevice.GetPosition (null);  		SpinTouchRectangleStartAngle = SpinRotate.Angle;  		double X;  		double Y;  		SpinTouchRectangleStartPointAngle = CalcAngle (SpinTouchRectangleStartPoint' out X' out Y);  		if (X > 0) {  			if (Y > 0) {  				SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  			}  			else {  				SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  			}  		}  		else {  			if (Y > 0) {  				SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  			}  			else {  				SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  			}  		}  		IsSpinning = true;  		e.Handled = true;  		App.LastUserInteraction = DateTime.Now;  		App.StoreAnalytics ("Categories"' "Spinning_Wheel"' "");  	}  	SpinTouchRectangle.CaptureTouch (e.TouchDevice);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (!IsSpinning) {  	SpinTouchRectangleStartPoint = e.TouchDevice.GetPosition (null);  	SpinTouchRectangleStartAngle = SpinRotate.Angle;  	double X;  	double Y;  	SpinTouchRectangleStartPointAngle = CalcAngle (SpinTouchRectangleStartPoint' out X' out Y);  	if (X > 0) {  		if (Y > 0) {  			SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  		}  		else {  			SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  		}  	}  	else {  		if (Y > 0) {  			SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  		}  		else {  			SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  		}  	}  	IsSpinning = true;  	e.Handled = true;  	App.LastUserInteraction = DateTime.Now;  	App.StoreAnalytics ("Categories"' "Spinning_Wheel"' "");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (!IsSpinning) {  	SpinTouchRectangleStartPoint = e.TouchDevice.GetPosition (null);  	SpinTouchRectangleStartAngle = SpinRotate.Angle;  	double X;  	double Y;  	SpinTouchRectangleStartPointAngle = CalcAngle (SpinTouchRectangleStartPoint' out X' out Y);  	if (X > 0) {  		if (Y > 0) {  			SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  		}  		else {  			SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  		}  	}  	else {  		if (Y > 0) {  			SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  		}  		else {  			SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  		}  	}  	IsSpinning = true;  	e.Handled = true;  	App.LastUserInteraction = DateTime.Now;  	App.StoreAnalytics ("Categories"' "Spinning_Wheel"' "");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (!IsSpinning) {  	SpinTouchRectangleStartPoint = e.TouchDevice.GetPosition (null);  	SpinTouchRectangleStartAngle = SpinRotate.Angle;  	double X;  	double Y;  	SpinTouchRectangleStartPointAngle = CalcAngle (SpinTouchRectangleStartPoint' out X' out Y);  	if (X > 0) {  		if (Y > 0) {  			SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  		}  		else {  			SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  		}  	}  	else {  		if (Y > 0) {  			SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  		}  		else {  			SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  		}  	}  	IsSpinning = true;  	e.Handled = true;  	App.LastUserInteraction = DateTime.Now;  	App.StoreAnalytics ("Categories"' "Spinning_Wheel"' "");  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (X > 0) {  	if (Y > 0) {  		SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  	}  	else {  		SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  	}  }  else {  	if (Y > 0) {  		SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  	}  	else {  		SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (X > 0) {  	if (Y > 0) {  		SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  	}  	else {  		SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  	}  }  else {  	if (Y > 0) {  		SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  	}  	else {  		SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (X > 0) {  	if (Y > 0) {  		SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  	}  	else {  		SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  	}  }  else {  	if (Y > 0) {  		SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  	}  	else {  		SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (Y > 0) {  	SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  }  else {  	SpinTouchRectangleStartPointAngle = -SpinTouchRectangleStartPointAngle;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (Y > 0) {  	SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  }  else {  	SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: if (Y > 0) {  	SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  }  else {  	SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: SpinTouchRectangleStartPointAngle = 180 - SpinTouchRectangleStartPointAngle;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchDown,The following statement contains a magic number: SpinTouchRectangleStartPointAngle = 360 - SpinTouchRectangleStartPointAngle;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	if (IsSpinning) {  		DebugAngle.Text = "OldAngle=" + Math.Round (SpinTouchRectangleStartAngle);  		Point P = e.TouchDevice.GetPosition (null);  		double X;  		double Y;  		double NewAngle = CalcAngle (P' out X' out Y);  		if (X > 0) {  			if (Y > 0) {  				NewAngle = 180 - NewAngle;  			}  			else {  				NewAngle = -NewAngle;  			}  		}  		else {  			if (Y > 0) {  				NewAngle = 180 - NewAngle;  			}  			else {  				NewAngle = 360 - NewAngle;  			}  		}  		SpinRotate.Angle = SpinTouchRectangleStartAngle + NewAngle - SpinTouchRectangleStartPointAngle;  		e.Handled = true;  		App.LastUserInteraction = DateTime.Now;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	if (IsSpinning) {  		DebugAngle.Text = "OldAngle=" + Math.Round (SpinTouchRectangleStartAngle);  		Point P = e.TouchDevice.GetPosition (null);  		double X;  		double Y;  		double NewAngle = CalcAngle (P' out X' out Y);  		if (X > 0) {  			if (Y > 0) {  				NewAngle = 180 - NewAngle;  			}  			else {  				NewAngle = -NewAngle;  			}  		}  		else {  			if (Y > 0) {  				NewAngle = 180 - NewAngle;  			}  			else {  				NewAngle = 360 - NewAngle;  			}  		}  		SpinRotate.Angle = SpinTouchRectangleStartAngle + NewAngle - SpinTouchRectangleStartPointAngle;  		e.Handled = true;  		App.LastUserInteraction = DateTime.Now;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	if (IsSpinning) {  		DebugAngle.Text = "OldAngle=" + Math.Round (SpinTouchRectangleStartAngle);  		Point P = e.TouchDevice.GetPosition (null);  		double X;  		double Y;  		double NewAngle = CalcAngle (P' out X' out Y);  		if (X > 0) {  			if (Y > 0) {  				NewAngle = 180 - NewAngle;  			}  			else {  				NewAngle = -NewAngle;  			}  		}  		else {  			if (Y > 0) {  				NewAngle = 180 - NewAngle;  			}  			else {  				NewAngle = 360 - NewAngle;  			}  		}  		SpinRotate.Angle = SpinTouchRectangleStartAngle + NewAngle - SpinTouchRectangleStartPointAngle;  		e.Handled = true;  		App.LastUserInteraction = DateTime.Now;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (IsSpinning) {  	DebugAngle.Text = "OldAngle=" + Math.Round (SpinTouchRectangleStartAngle);  	Point P = e.TouchDevice.GetPosition (null);  	double X;  	double Y;  	double NewAngle = CalcAngle (P' out X' out Y);  	if (X > 0) {  		if (Y > 0) {  			NewAngle = 180 - NewAngle;  		}  		else {  			NewAngle = -NewAngle;  		}  	}  	else {  		if (Y > 0) {  			NewAngle = 180 - NewAngle;  		}  		else {  			NewAngle = 360 - NewAngle;  		}  	}  	SpinRotate.Angle = SpinTouchRectangleStartAngle + NewAngle - SpinTouchRectangleStartPointAngle;  	e.Handled = true;  	App.LastUserInteraction = DateTime.Now;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (IsSpinning) {  	DebugAngle.Text = "OldAngle=" + Math.Round (SpinTouchRectangleStartAngle);  	Point P = e.TouchDevice.GetPosition (null);  	double X;  	double Y;  	double NewAngle = CalcAngle (P' out X' out Y);  	if (X > 0) {  		if (Y > 0) {  			NewAngle = 180 - NewAngle;  		}  		else {  			NewAngle = -NewAngle;  		}  	}  	else {  		if (Y > 0) {  			NewAngle = 180 - NewAngle;  		}  		else {  			NewAngle = 360 - NewAngle;  		}  	}  	SpinRotate.Angle = SpinTouchRectangleStartAngle + NewAngle - SpinTouchRectangleStartPointAngle;  	e.Handled = true;  	App.LastUserInteraction = DateTime.Now;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (IsSpinning) {  	DebugAngle.Text = "OldAngle=" + Math.Round (SpinTouchRectangleStartAngle);  	Point P = e.TouchDevice.GetPosition (null);  	double X;  	double Y;  	double NewAngle = CalcAngle (P' out X' out Y);  	if (X > 0) {  		if (Y > 0) {  			NewAngle = 180 - NewAngle;  		}  		else {  			NewAngle = -NewAngle;  		}  	}  	else {  		if (Y > 0) {  			NewAngle = 180 - NewAngle;  		}  		else {  			NewAngle = 360 - NewAngle;  		}  	}  	SpinRotate.Angle = SpinTouchRectangleStartAngle + NewAngle - SpinTouchRectangleStartPointAngle;  	e.Handled = true;  	App.LastUserInteraction = DateTime.Now;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (X > 0) {  	if (Y > 0) {  		NewAngle = 180 - NewAngle;  	}  	else {  		NewAngle = -NewAngle;  	}  }  else {  	if (Y > 0) {  		NewAngle = 180 - NewAngle;  	}  	else {  		NewAngle = 360 - NewAngle;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (X > 0) {  	if (Y > 0) {  		NewAngle = 180 - NewAngle;  	}  	else {  		NewAngle = -NewAngle;  	}  }  else {  	if (Y > 0) {  		NewAngle = 180 - NewAngle;  	}  	else {  		NewAngle = 360 - NewAngle;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (X > 0) {  	if (Y > 0) {  		NewAngle = 180 - NewAngle;  	}  	else {  		NewAngle = -NewAngle;  	}  }  else {  	if (Y > 0) {  		NewAngle = 180 - NewAngle;  	}  	else {  		NewAngle = 360 - NewAngle;  	}  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (Y > 0) {  	NewAngle = 180 - NewAngle;  }  else {  	NewAngle = -NewAngle;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: NewAngle = 180 - NewAngle;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (Y > 0) {  	NewAngle = 180 - NewAngle;  }  else {  	NewAngle = 360 - NewAngle;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: if (Y > 0) {  	NewAngle = 180 - NewAngle;  }  else {  	NewAngle = 360 - NewAngle;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: NewAngle = 180 - NewAngle;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,Rectangle_TouchMove,The following statement contains a magic number: NewAngle = 360 - NewAngle;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CalcAngle,The following statement contains a magic number: X = P.X - 960;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CalcAngle,The following statement contains a magic number: Y = P.Y - 500;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CalcAngle,The following statement contains a magic number: if (Y == 0) {  	Y = 0.000000001;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CalcAngle,The following statement contains a magic number: Y = 0.000000001;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,CalcAngle,The following statement contains a magic number: return Math.Atan (X / Y) * 180 / Math.PI;  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,ShowCard,The following statement contains a magic number: if (CardCanvas.Children.Count < 8) {  	CategoryInformationCard Card = new CategoryInformationCard ();  	Card.Setup (CategoryId' Angle' CardCanvas' ParentCanvas);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	double Top = Canvas.GetTop (BookmarkGrid);  	if (Top > -100) {  		DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	else {  		DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	e.Handled = true;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	double Top = Canvas.GetTop (BookmarkGrid);  	if (Top > -100) {  		DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	else {  		DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	e.Handled = true;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	double Top = Canvas.GetTop (BookmarkGrid);  	if (Top > -100) {  		DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	else {  		DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	e.Handled = true;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	double Top = Canvas.GetTop (BookmarkGrid);  	if (Top > -100) {  		DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	else {  		DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  		BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  	}  	e.Handled = true;  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (Top > -100) {  	DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  else {  	DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (Top > -100) {  	DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  else {  	DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (Top > -100) {  	DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  else {  	DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  
Magic Number,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,BookmarkHandle_TouchDown,The following statement contains a magic number: if (Top > -100) {  	DoubleAnimation DA = new DoubleAnimation (-788' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  else {  	DoubleAnimation DA = new DoubleAnimation (0' new Duration (TimeSpan.FromMilliseconds (500)));  	BookmarkGrid.BeginAnimation (Canvas.TopProperty' DA);  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "WikiInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.WikiInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.WikiInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.WikiInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: CategoryAngle = 180;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.WikiInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.WikiInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.WikiInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.WikiInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.WikiInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.WikiInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.WikiInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.WikiInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: Intro.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: SecondPageText.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	Intro.Text = App.WikiInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	Intro.Text = App.WikiInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.WikiInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: Intro.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: SecondPageText.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "VasaInfo") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.VasaInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.VasaInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.VasaInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: CategoryAngle = 180;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.VasaInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.VasaInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.VasaInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.VasaInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.VasaInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.VasaInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.VasaInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.VasaInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: Intro.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: SecondPageText.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	Intro.Text = App.VasaInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	Intro.Text = App.VasaInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.VasaInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: Intro.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: SecondPageText.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (CategoryId == "Info") {  	FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  	CategoryAngle = 180;  	if (Language == "sv") {  		Intro.Text = App.CategoryInfoTextSwedishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextSwedishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  	else if (Language == "en") {  		Intro.Text = App.CategoryInfoTextEnglishShort;  		Intro.FontSize = 18;  		SecondPageText.Text = App.CategoryInfoTextEnglishLong;  		SecondPageText.FontSize = 18;  		ShowMore ();  		ShowUpDownArrows ();  	}  }  else {  	FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  	int Index = Convert.ToInt16 (CategoryId);  	CategoryAngle = Index * 45;  	if (Language == "sv") {  		CategoryId = App.SvTextData [Index].FileNameAppendix;  		ShowImages (App.SvTextData [Index].ImageText' Language);  		Intro.Text = App.SvTextData [Index].ShortText;  		SecondPageText.Text = App.SvTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.SvTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "Med koppling till";  			foreach (var item in App.SvTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  	else if (Language == "en") {  		CategoryId = App.EnTextData [Index].FileNameAppendix;  		ShowImages (App.EnTextData [Index].ImageText' Language);  		Intro.Text = App.EnTextData [Index].ShortText;  		SecondPageText.Text = App.EnTextData [Index].LongText;  		ShowMore ();  		ShowUpDownArrows ();  		if (App.EnTextData [Index].CombinedTexts != null) {  			ConnectionsToText.Text = "With connection to";  			foreach (var item in App.EnTextData [Index].CombinedTexts) {  				AddCategoryLink (item.Index.ToString ());  			}  			ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  		}  		else  			ConnectionsToText.Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (25' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: CategoryAngle = 180;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.CategoryInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.CategoryInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.CategoryInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.CategoryInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.CategoryInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.CategoryInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	Intro.Text = App.CategoryInfoTextSwedishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextSwedishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  else if (Language == "en") {  	Intro.Text = App.CategoryInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: Intro.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: SecondPageText.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	Intro.Text = App.CategoryInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	Intro.Text = App.CategoryInfoTextEnglishShort;  	Intro.FontSize = 18;  	SecondPageText.Text = App.CategoryInfoTextEnglishLong;  	SecondPageText.FontSize = 18;  	ShowMore ();  	ShowUpDownArrows ();  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: Intro.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: SecondPageText.FontSize = 18;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: FontSizeChanger.Margin = new Thickness (80' 14' 0' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: CategoryAngle = Index * 45;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	CategoryId = App.SvTextData [Index].FileNameAppendix;  	ShowImages (App.SvTextData [Index].ImageText' Language);  	Intro.Text = App.SvTextData [Index].ShortText;  	SecondPageText.Text = App.SvTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.SvTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "Med koppling till";  		foreach (var item in App.SvTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  else if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	CategoryId = App.SvTextData [Index].FileNameAppendix;  	ShowImages (App.SvTextData [Index].ImageText' Language);  	Intro.Text = App.SvTextData [Index].ShortText;  	SecondPageText.Text = App.SvTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.SvTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "Med koppling till";  		foreach (var item in App.SvTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  else if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	CategoryId = App.SvTextData [Index].FileNameAppendix;  	ShowImages (App.SvTextData [Index].ImageText' Language);  	Intro.Text = App.SvTextData [Index].ShortText;  	SecondPageText.Text = App.SvTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.SvTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "Med koppling till";  		foreach (var item in App.SvTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  else if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	CategoryId = App.SvTextData [Index].FileNameAppendix;  	ShowImages (App.SvTextData [Index].ImageText' Language);  	Intro.Text = App.SvTextData [Index].ShortText;  	SecondPageText.Text = App.SvTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.SvTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "Med koppling till";  		foreach (var item in App.SvTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  else if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	CategoryId = App.SvTextData [Index].FileNameAppendix;  	ShowImages (App.SvTextData [Index].ImageText' Language);  	Intro.Text = App.SvTextData [Index].ShortText;  	SecondPageText.Text = App.SvTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.SvTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "Med koppling till";  		foreach (var item in App.SvTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  else if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "sv") {  	CategoryId = App.SvTextData [Index].FileNameAppendix;  	ShowImages (App.SvTextData [Index].ImageText' Language);  	Intro.Text = App.SvTextData [Index].ShortText;  	SecondPageText.Text = App.SvTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.SvTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "Med koppling till";  		foreach (var item in App.SvTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  else if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (App.SvTextData [Index].CombinedTexts != null) {  	ConnectionsToText.Text = "Med koppling till";  	foreach (var item in App.SvTextData [Index].CombinedTexts) {  		AddCategoryLink (item.Index.ToString ());  	}  	ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  }  else  	ConnectionsToText.Text = "";  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (App.SvTextData [Index].CombinedTexts != null) {  	ConnectionsToText.Text = "Med koppling till";  	foreach (var item in App.SvTextData [Index].CombinedTexts) {  		AddCategoryLink (item.Index.ToString ());  	}  	ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  }  else  	ConnectionsToText.Text = "";  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (App.SvTextData [Index].CombinedTexts != null) {  	ConnectionsToText.Text = "Med koppling till";  	foreach (var item in App.SvTextData [Index].CombinedTexts) {  		AddCategoryLink (item.Index.ToString ());  	}  	ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  }  else  	ConnectionsToText.Text = "";  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (Language == "en") {  	CategoryId = App.EnTextData [Index].FileNameAppendix;  	ShowImages (App.EnTextData [Index].ImageText' Language);  	Intro.Text = App.EnTextData [Index].ShortText;  	SecondPageText.Text = App.EnTextData [Index].LongText;  	ShowMore ();  	ShowUpDownArrows ();  	if (App.EnTextData [Index].CombinedTexts != null) {  		ConnectionsToText.Text = "With connection to";  		foreach (var item in App.EnTextData [Index].CombinedTexts) {  			AddCategoryLink (item.Index.ToString ());  		}  		ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  	}  	else  		ConnectionsToText.Text = "";  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (App.EnTextData [Index].CombinedTexts != null) {  	ConnectionsToText.Text = "With connection to";  	foreach (var item in App.EnTextData [Index].CombinedTexts) {  		AddCategoryLink (item.Index.ToString ());  	}  	ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  }  else  	ConnectionsToText.Text = "";  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (App.EnTextData [Index].CombinedTexts != null) {  	ConnectionsToText.Text = "With connection to";  	foreach (var item in App.EnTextData [Index].CombinedTexts) {  		AddCategoryLink (item.Index.ToString ());  	}  	ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  }  else  	ConnectionsToText.Text = "";  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: if (App.EnTextData [Index].CombinedTexts != null) {  	ConnectionsToText.Text = "With connection to";  	foreach (var item in App.EnTextData [Index].CombinedTexts) {  		AddCategoryLink (item.Index.ToString ());  	}  	ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  }  else  	ConnectionsToText.Text = "";  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,SetCategory,The following statement contains a magic number: ConnectionsToText.Margin = new Thickness (0' 0' 50 + CategoryLinkPanel.Children.Count * 30' 17);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: foreach (var row in rows) {  	string[] Details = row.Split (';');  	if (Details.Length > 1) {  		string FileName = //@"c:\Test.jpg";  		System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   		VasaData + Language + @"\" + Details [0];  		if (System.IO.File.Exists (FileName)) {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				InfoImage.Tag = Details [1];  				ImagePanel.Children.Add (InfoImage);  				if (ImagePanel.Children.Count > 3) {  					ReadMore.Margin = new Thickness (0' 0' 40' 110);  				}  				Page1Viewer.Height = 440;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: foreach (var row in rows) {  	string[] Details = row.Split (';');  	if (Details.Length > 1) {  		string FileName = //@"c:\Test.jpg";  		System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   		VasaData + Language + @"\" + Details [0];  		if (System.IO.File.Exists (FileName)) {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				InfoImage.Tag = Details [1];  				ImagePanel.Children.Add (InfoImage);  				if (ImagePanel.Children.Count > 3) {  					ReadMore.Margin = new Thickness (0' 0' 40' 110);  				}  				Page1Viewer.Height = 440;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: foreach (var row in rows) {  	string[] Details = row.Split (';');  	if (Details.Length > 1) {  		string FileName = //@"c:\Test.jpg";  		System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   		VasaData + Language + @"\" + Details [0];  		if (System.IO.File.Exists (FileName)) {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				InfoImage.Tag = Details [1];  				ImagePanel.Children.Add (InfoImage);  				if (ImagePanel.Children.Count > 3) {  					ReadMore.Margin = new Thickness (0' 0' 40' 110);  				}  				Page1Viewer.Height = 440;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: foreach (var row in rows) {  	string[] Details = row.Split (';');  	if (Details.Length > 1) {  		string FileName = //@"c:\Test.jpg";  		System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   		VasaData + Language + @"\" + Details [0];  		if (System.IO.File.Exists (FileName)) {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				InfoImage.Tag = Details [1];  				ImagePanel.Children.Add (InfoImage);  				if (ImagePanel.Children.Count > 3) {  					ReadMore.Margin = new Thickness (0' 0' 40' 110);  				}  				Page1Viewer.Height = 440;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: foreach (var row in rows) {  	string[] Details = row.Split (';');  	if (Details.Length > 1) {  		string FileName = //@"c:\Test.jpg";  		System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   		VasaData + Language + @"\" + Details [0];  		if (System.IO.File.Exists (FileName)) {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				InfoImage.Tag = Details [1];  				ImagePanel.Children.Add (InfoImage);  				if (ImagePanel.Children.Count > 3) {  					ReadMore.Margin = new Thickness (0' 0' 40' 110);  				}  				Page1Viewer.Height = 440;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: foreach (var row in rows) {  	string[] Details = row.Split (';');  	if (Details.Length > 1) {  		string FileName = //@"c:\Test.jpg";  		System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   		VasaData + Language + @"\" + Details [0];  		if (System.IO.File.Exists (FileName)) {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				InfoImage.Tag = Details [1];  				ImagePanel.Children.Add (InfoImage);  				if (ImagePanel.Children.Count > 3) {  					ReadMore.Margin = new Thickness (0' 0' 40' 110);  				}  				Page1Viewer.Height = 440;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: foreach (var row in rows) {  	string[] Details = row.Split (';');  	if (Details.Length > 1) {  		string FileName = //@"c:\Test.jpg";  		System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   		VasaData + Language + @"\" + Details [0];  		if (System.IO.File.Exists (FileName)) {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				InfoImage.Tag = Details [1];  				ImagePanel.Children.Add (InfoImage);  				if (ImagePanel.Children.Count > 3) {  					ReadMore.Margin = new Thickness (0' 0' 40' 110);  				}  				Page1Viewer.Height = 440;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (Details.Length > 1) {  	string FileName = //@"c:\Test.jpg";  	System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   	VasaData + Language + @"\" + Details [0];  	if (System.IO.File.Exists (FileName)) {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			InfoImage.Tag = Details [1];  			ImagePanel.Children.Add (InfoImage);  			if (ImagePanel.Children.Count > 3) {  				ReadMore.Margin = new Thickness (0' 0' 40' 110);  			}  			Page1Viewer.Height = 440;  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (Details.Length > 1) {  	string FileName = //@"c:\Test.jpg";  	System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   	VasaData + Language + @"\" + Details [0];  	if (System.IO.File.Exists (FileName)) {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			InfoImage.Tag = Details [1];  			ImagePanel.Children.Add (InfoImage);  			if (ImagePanel.Children.Count > 3) {  				ReadMore.Margin = new Thickness (0' 0' 40' 110);  			}  			Page1Viewer.Height = 440;  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (Details.Length > 1) {  	string FileName = //@"c:\Test.jpg";  	System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   	VasaData + Language + @"\" + Details [0];  	if (System.IO.File.Exists (FileName)) {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			InfoImage.Tag = Details [1];  			ImagePanel.Children.Add (InfoImage);  			if (ImagePanel.Children.Count > 3) {  				ReadMore.Margin = new Thickness (0' 0' 40' 110);  			}  			Page1Viewer.Height = 440;  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (Details.Length > 1) {  	string FileName = //@"c:\Test.jpg";  	System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   	VasaData + Language + @"\" + Details [0];  	if (System.IO.File.Exists (FileName)) {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			InfoImage.Tag = Details [1];  			ImagePanel.Children.Add (InfoImage);  			if (ImagePanel.Children.Count > 3) {  				ReadMore.Margin = new Thickness (0' 0' 40' 110);  			}  			Page1Viewer.Height = 440;  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (Details.Length > 1) {  	string FileName = //@"c:\Test.jpg";  	System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   	VasaData + Language + @"\" + Details [0];  	if (System.IO.File.Exists (FileName)) {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			InfoImage.Tag = Details [1];  			ImagePanel.Children.Add (InfoImage);  			if (ImagePanel.Children.Count > 3) {  				ReadMore.Margin = new Thickness (0' 0' 40' 110);  			}  			Page1Viewer.Height = 440;  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (Details.Length > 1) {  	string FileName = //@"c:\Test.jpg";  	System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   	VasaData + Language + @"\" + Details [0];  	if (System.IO.File.Exists (FileName)) {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			InfoImage.Tag = Details [1];  			ImagePanel.Children.Add (InfoImage);  			if (ImagePanel.Children.Count > 3) {  				ReadMore.Margin = new Thickness (0' 0' 40' 110);  			}  			Page1Viewer.Height = 440;  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (Details.Length > 1) {  	string FileName = //@"c:\Test.jpg";  	System.AppDomain.CurrentDomain.BaseDirectory + //System.Reflection.Assembly.GetExecutingAssembly().Location +   	VasaData + Language + @"\" + Details [0];  	if (System.IO.File.Exists (FileName)) {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			InfoImage.Tag = Details [1];  			ImagePanel.Children.Add (InfoImage);  			if (ImagePanel.Children.Count > 3) {  				ReadMore.Margin = new Thickness (0' 0' 40' 110);  			}  			Page1Viewer.Height = 440;  		}  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (System.IO.File.Exists (FileName)) {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		InfoImage.Tag = Details [1];  		ImagePanel.Children.Add (InfoImage);  		if (ImagePanel.Children.Count > 3) {  			ReadMore.Margin = new Thickness (0' 0' 40' 110);  		}  		Page1Viewer.Height = 440;  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (System.IO.File.Exists (FileName)) {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		InfoImage.Tag = Details [1];  		ImagePanel.Children.Add (InfoImage);  		if (ImagePanel.Children.Count > 3) {  			ReadMore.Margin = new Thickness (0' 0' 40' 110);  		}  		Page1Viewer.Height = 440;  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (System.IO.File.Exists (FileName)) {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		InfoImage.Tag = Details [1];  		ImagePanel.Children.Add (InfoImage);  		if (ImagePanel.Children.Count > 3) {  			ReadMore.Margin = new Thickness (0' 0' 40' 110);  		}  		Page1Viewer.Height = 440;  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (System.IO.File.Exists (FileName)) {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		InfoImage.Tag = Details [1];  		ImagePanel.Children.Add (InfoImage);  		if (ImagePanel.Children.Count > 3) {  			ReadMore.Margin = new Thickness (0' 0' 40' 110);  		}  		Page1Viewer.Height = 440;  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (System.IO.File.Exists (FileName)) {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		InfoImage.Tag = Details [1];  		ImagePanel.Children.Add (InfoImage);  		if (ImagePanel.Children.Count > 3) {  			ReadMore.Margin = new Thickness (0' 0' 40' 110);  		}  		Page1Viewer.Height = 440;  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (System.IO.File.Exists (FileName)) {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		InfoImage.Tag = Details [1];  		ImagePanel.Children.Add (InfoImage);  		if (ImagePanel.Children.Count > 3) {  			ReadMore.Margin = new Thickness (0' 0' 40' 110);  		}  		Page1Viewer.Height = 440;  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (System.IO.File.Exists (FileName)) {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		InfoImage.Tag = Details [1];  		ImagePanel.Children.Add (InfoImage);  		if (ImagePanel.Children.Count > 3) {  			ReadMore.Margin = new Thickness (0' 0' 40' 110);  		}  		Page1Viewer.Height = 440;  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	InfoImage.Tag = Details [1];  	ImagePanel.Children.Add (InfoImage);  	if (ImagePanel.Children.Count > 3) {  		ReadMore.Margin = new Thickness (0' 0' 40' 110);  	}  	Page1Viewer.Height = 440;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	InfoImage.Tag = Details [1];  	ImagePanel.Children.Add (InfoImage);  	if (ImagePanel.Children.Count > 3) {  		ReadMore.Margin = new Thickness (0' 0' 40' 110);  	}  	Page1Viewer.Height = 440;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	InfoImage.Tag = Details [1];  	ImagePanel.Children.Add (InfoImage);  	if (ImagePanel.Children.Count > 3) {  		ReadMore.Margin = new Thickness (0' 0' 40' 110);  	}  	Page1Viewer.Height = 440;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	InfoImage.Tag = Details [1];  	ImagePanel.Children.Add (InfoImage);  	if (ImagePanel.Children.Count > 3) {  		ReadMore.Margin = new Thickness (0' 0' 40' 110);  	}  	Page1Viewer.Height = 440;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	InfoImage.Tag = Details [1];  	ImagePanel.Children.Add (InfoImage);  	if (ImagePanel.Children.Count > 3) {  		ReadMore.Margin = new Thickness (0' 0' 40' 110);  	}  	Page1Viewer.Height = 440;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	InfoImage.Tag = Details [1];  	ImagePanel.Children.Add (InfoImage);  	if (ImagePanel.Children.Count > 3) {  		ReadMore.Margin = new Thickness (0' 0' 40' 110);  	}  	Page1Viewer.Height = 440;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (FileName' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	InfoImage.Tag = Details [1];  	ImagePanel.Children.Add (InfoImage);  	if (ImagePanel.Children.Count > 3) {  		ReadMore.Margin = new Thickness (0' 0' 40' 110);  	}  	Page1Viewer.Height = 440;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: InfoImage.Height = 50;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: InfoImage.Margin = new Thickness (2);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count > 3) {  	ReadMore.Margin = new Thickness (0' 0' 40' 110);  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count > 3) {  	ReadMore.Margin = new Thickness (0' 0' 40' 110);  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: if (ImagePanel.Children.Count > 3) {  	ReadMore.Margin = new Thickness (0' 0' 40' 110);  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: ReadMore.Margin = new Thickness (0' 0' 40' 110);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: ReadMore.Margin = new Thickness (0' 0' 40' 110);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowImages,The following statement contains a magic number: Page1Viewer.Height = 440;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowMore,The following statement contains a magic number: if (SecondPageText.Text.Length > 10) {  	ReadMore.Visibility = Visibility.Visible;  }  else {  	ReadMore.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,AddCategoryLink,The following statement contains a magic number: CI.Margin = new Thickness (-5' 0' -5' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,AddCategoryLink,The following statement contains a magic number: CI.Margin = new Thickness (-5' 0' -5' 0);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 400 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 400 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 400 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 400 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 400 - 350;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 400 - 350;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 400 - 350;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: GoalY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 400 - 350;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 1000 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 1000 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 1000 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartX = 960 + Math.Sin (NewAngle * Math.PI / 180) * 1000 - 250;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 1000 - 300;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 1000 - 300;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 1000 - 300;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: StartY = 540 - Math.Cos (NewAngle * Math.PI / 180) * 1000 - 300;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,StartApperence,The following statement contains a magic number: Rotate.Angle = NewAngle + 180;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,UserControl_Loaded,The following statement contains a magic number: ScreenSaverTimer = new DoubleAnimation (1' 1' new Duration (TimeSpan.FromSeconds (10)));  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,UpArrowText_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset - 20);  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,UpArrowText_TouchDown,The following statement contains a magic number: Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset - 20);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,DownArrowText_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset + 20);  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,DownArrowText_TouchDown,The following statement contains a magic number: Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset + 20);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,Page1UpArrowText_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	Page1Viewer.ScrollToVerticalOffset (Page1Viewer.VerticalOffset - 20);  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,Page1UpArrowText_TouchDown,The following statement contains a magic number: Page1Viewer.ScrollToVerticalOffset (Page1Viewer.VerticalOffset - 20);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,Page1DownArrowText_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	Page1Viewer.ScrollToVerticalOffset (Page1Viewer.VerticalOffset + 20);  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,Page1DownArrowText_TouchDown,The following statement contains a magic number: Page1Viewer.ScrollToVerticalOffset (Page1Viewer.VerticalOffset + 20);  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: if (Viewer.ScrollableHeight > 0) {  	Canvas.SetTop (ScrollPosition' 30 + 470 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  	ScrollPosition.Visibility = Visibility.Visible;  	if (Viewer.VerticalOffset > 0) {  		UpArrowText.Visibility = Visibility.Visible;  	}  	else {  		UpArrowText.Visibility = Visibility.Hidden;  	}  	if (Viewer.VerticalOffset < Viewer.ScrollableHeight) {  		DownArrowText.Visibility = Visibility.Visible;  	}  	else {  		DownArrowText.Visibility = Visibility.Hidden;  	}  }  else {  	UpArrowText.Visibility = Visibility.Hidden;  	DownArrowText.Visibility = Visibility.Hidden;  	ScrollPosition.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: if (Viewer.ScrollableHeight > 0) {  	Canvas.SetTop (ScrollPosition' 30 + 470 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  	ScrollPosition.Visibility = Visibility.Visible;  	if (Viewer.VerticalOffset > 0) {  		UpArrowText.Visibility = Visibility.Visible;  	}  	else {  		UpArrowText.Visibility = Visibility.Hidden;  	}  	if (Viewer.VerticalOffset < Viewer.ScrollableHeight) {  		DownArrowText.Visibility = Visibility.Visible;  	}  	else {  		DownArrowText.Visibility = Visibility.Hidden;  	}  }  else {  	UpArrowText.Visibility = Visibility.Hidden;  	DownArrowText.Visibility = Visibility.Hidden;  	ScrollPosition.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: Canvas.SetTop (ScrollPosition' 30 + 470 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: Canvas.SetTop (ScrollPosition' 30 + 470 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowPage1UpDownArrows,The following statement contains a magic number: if (Page1Viewer.ScrollableHeight > 0) {  	Canvas.SetTop (Page1ScrollPosition' 30 + 470 * (Page1Viewer.VerticalOffset / Page1Viewer.ScrollableHeight));  	Page1ScrollPosition.Visibility = Visibility.Visible;  	if (Page1Viewer.VerticalOffset > 0) {  		Page1UpArrowText.Visibility = Visibility.Visible;  	}  	else {  		Page1UpArrowText.Visibility = Visibility.Hidden;  	}  	if (Page1Viewer.VerticalOffset < Page1Viewer.ScrollableHeight) {  		Page1DownArrowText.Visibility = Visibility.Visible;  	}  	else {  		Page1DownArrowText.Visibility = Visibility.Hidden;  	}  }  else {  	Page1UpArrowText.Visibility = Visibility.Hidden;  	Page1DownArrowText.Visibility = Visibility.Hidden;  	Page1ScrollPosition.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowPage1UpDownArrows,The following statement contains a magic number: if (Page1Viewer.ScrollableHeight > 0) {  	Canvas.SetTop (Page1ScrollPosition' 30 + 470 * (Page1Viewer.VerticalOffset / Page1Viewer.ScrollableHeight));  	Page1ScrollPosition.Visibility = Visibility.Visible;  	if (Page1Viewer.VerticalOffset > 0) {  		Page1UpArrowText.Visibility = Visibility.Visible;  	}  	else {  		Page1UpArrowText.Visibility = Visibility.Hidden;  	}  	if (Page1Viewer.VerticalOffset < Page1Viewer.ScrollableHeight) {  		Page1DownArrowText.Visibility = Visibility.Visible;  	}  	else {  		Page1DownArrowText.Visibility = Visibility.Hidden;  	}  }  else {  	Page1UpArrowText.Visibility = Visibility.Hidden;  	Page1DownArrowText.Visibility = Visibility.Hidden;  	Page1ScrollPosition.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowPage1UpDownArrows,The following statement contains a magic number: Canvas.SetTop (Page1ScrollPosition' 30 + 470 * (Page1Viewer.VerticalOffset / Page1Viewer.ScrollableHeight));  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,ShowPage1UpDownArrows,The following statement contains a magic number: Canvas.SetTop (Page1ScrollPosition' 30 + 470 * (Page1Viewer.VerticalOffset / Page1Viewer.ScrollableHeight));  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (Intro.FontSize < 20) {  	OldFontSize = Intro.FontSize;  	Intro.FontSize = 20;  	SecondPageText.FontSize = 20;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowLargeFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  	}  }  else {  	if (OldFontSize > 0) {  		OldFontSize = 16;  	}  	Intro.FontSize = OldFontSize;  	SecondPageText.FontSize = OldFontSize;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowSmallFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (Intro.FontSize < 20) {  	OldFontSize = Intro.FontSize;  	Intro.FontSize = 20;  	SecondPageText.FontSize = 20;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowLargeFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  	}  }  else {  	if (OldFontSize > 0) {  		OldFontSize = 16;  	}  	Intro.FontSize = OldFontSize;  	SecondPageText.FontSize = OldFontSize;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowSmallFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (Intro.FontSize < 20) {  	OldFontSize = Intro.FontSize;  	Intro.FontSize = 20;  	SecondPageText.FontSize = 20;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowLargeFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  	}  }  else {  	if (OldFontSize > 0) {  		OldFontSize = 16;  	}  	Intro.FontSize = OldFontSize;  	SecondPageText.FontSize = OldFontSize;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowSmallFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (Intro.FontSize < 20) {  	OldFontSize = Intro.FontSize;  	Intro.FontSize = 20;  	SecondPageText.FontSize = 20;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowLargeFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  	}  }  else {  	if (OldFontSize > 0) {  		OldFontSize = 16;  	}  	Intro.FontSize = OldFontSize;  	SecondPageText.FontSize = OldFontSize;  	if (App.ShowCategories > 0) {  		App.StoreAnalytics ("Categories"' "ShowSmallFont"' CurrentLanguage);  	}  	else {  		App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  	}  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: Intro.FontSize = 20;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: SecondPageText.FontSize = 20;  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (OldFontSize > 0) {  	OldFontSize = 16;  }  
Magic Number,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: OldFontSize = 16;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: if (QRImage.Source == null) {  	Link = App.FixTitleForWiki (Link);  	QrEncoder encoder = new QrEncoder (ErrorCorrectionLevel.M);  	QrCode qrCode;  	encoder.TryEncode (Link' out qrCode);  	//http://sv.wikipedia.org/wiki/Regalskeppet_Vasa  	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White);  	DrawingBrush dBrush = dRenderer.DrawBrush (qrCode.Matrix);  	Rectangle rect = new Rectangle ();  	rect.Width = 150;  	rect.Height = 150;  	rect.Fill = dBrush;  	//QrCode should be at center of rectangle' and Uniform stretched.   	//Put rectangle on boarder and set up boarder's background will sort light modules out.  	//Same as how to use stream geometry. It will be contain inside Path UIElement.   	MemoryStream ms = new MemoryStream ();  	dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.   	MemoryStream bms = new MemoryStream ();  	BitmapSource bSource = dRenderer.WriteToBitmapSource (qrCode.Matrix' new Point (96' 96));  	PngBitmapEncoder pngEncoder = new PngBitmapEncoder ();  	QRImage.Source = bSource;  	//pngEncoder.Interlace = PngInterlaceOption.On;  	//pngEncoder.Frames.Add(BitmapFrame.Create(bSource));  	//pngEncoder.Save(bms);  	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.   }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: if (QRImage.Source == null) {  	Link = App.FixTitleForWiki (Link);  	QrEncoder encoder = new QrEncoder (ErrorCorrectionLevel.M);  	QrCode qrCode;  	encoder.TryEncode (Link' out qrCode);  	//http://sv.wikipedia.org/wiki/Regalskeppet_Vasa  	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White);  	DrawingBrush dBrush = dRenderer.DrawBrush (qrCode.Matrix);  	Rectangle rect = new Rectangle ();  	rect.Width = 150;  	rect.Height = 150;  	rect.Fill = dBrush;  	//QrCode should be at center of rectangle' and Uniform stretched.   	//Put rectangle on boarder and set up boarder's background will sort light modules out.  	//Same as how to use stream geometry. It will be contain inside Path UIElement.   	MemoryStream ms = new MemoryStream ();  	dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.   	MemoryStream bms = new MemoryStream ();  	BitmapSource bSource = dRenderer.WriteToBitmapSource (qrCode.Matrix' new Point (96' 96));  	PngBitmapEncoder pngEncoder = new PngBitmapEncoder ();  	QRImage.Source = bSource;  	//pngEncoder.Interlace = PngInterlaceOption.On;  	//pngEncoder.Frames.Add(BitmapFrame.Create(bSource));  	//pngEncoder.Save(bms);  	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.   }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: if (QRImage.Source == null) {  	Link = App.FixTitleForWiki (Link);  	QrEncoder encoder = new QrEncoder (ErrorCorrectionLevel.M);  	QrCode qrCode;  	encoder.TryEncode (Link' out qrCode);  	//http://sv.wikipedia.org/wiki/Regalskeppet_Vasa  	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White);  	DrawingBrush dBrush = dRenderer.DrawBrush (qrCode.Matrix);  	Rectangle rect = new Rectangle ();  	rect.Width = 150;  	rect.Height = 150;  	rect.Fill = dBrush;  	//QrCode should be at center of rectangle' and Uniform stretched.   	//Put rectangle on boarder and set up boarder's background will sort light modules out.  	//Same as how to use stream geometry. It will be contain inside Path UIElement.   	MemoryStream ms = new MemoryStream ();  	dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.   	MemoryStream bms = new MemoryStream ();  	BitmapSource bSource = dRenderer.WriteToBitmapSource (qrCode.Matrix' new Point (96' 96));  	PngBitmapEncoder pngEncoder = new PngBitmapEncoder ();  	QRImage.Source = bSource;  	//pngEncoder.Interlace = PngInterlaceOption.On;  	//pngEncoder.Frames.Add(BitmapFrame.Create(bSource));  	//pngEncoder.Save(bms);  	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.   }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: if (QRImage.Source == null) {  	Link = App.FixTitleForWiki (Link);  	QrEncoder encoder = new QrEncoder (ErrorCorrectionLevel.M);  	QrCode qrCode;  	encoder.TryEncode (Link' out qrCode);  	//http://sv.wikipedia.org/wiki/Regalskeppet_Vasa  	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White);  	DrawingBrush dBrush = dRenderer.DrawBrush (qrCode.Matrix);  	Rectangle rect = new Rectangle ();  	rect.Width = 150;  	rect.Height = 150;  	rect.Fill = dBrush;  	//QrCode should be at center of rectangle' and Uniform stretched.   	//Put rectangle on boarder and set up boarder's background will sort light modules out.  	//Same as how to use stream geometry. It will be contain inside Path UIElement.   	MemoryStream ms = new MemoryStream ();  	dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.   	MemoryStream bms = new MemoryStream ();  	BitmapSource bSource = dRenderer.WriteToBitmapSource (qrCode.Matrix' new Point (96' 96));  	PngBitmapEncoder pngEncoder = new PngBitmapEncoder ();  	QRImage.Source = bSource;  	//pngEncoder.Interlace = PngInterlaceOption.On;  	//pngEncoder.Frames.Add(BitmapFrame.Create(bSource));  	//pngEncoder.Save(bms);  	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.   }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: if (QRImage.Source == null) {  	Link = App.FixTitleForWiki (Link);  	QrEncoder encoder = new QrEncoder (ErrorCorrectionLevel.M);  	QrCode qrCode;  	encoder.TryEncode (Link' out qrCode);  	//http://sv.wikipedia.org/wiki/Regalskeppet_Vasa  	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White);  	DrawingBrush dBrush = dRenderer.DrawBrush (qrCode.Matrix);  	Rectangle rect = new Rectangle ();  	rect.Width = 150;  	rect.Height = 150;  	rect.Fill = dBrush;  	//QrCode should be at center of rectangle' and Uniform stretched.   	//Put rectangle on boarder and set up boarder's background will sort light modules out.  	//Same as how to use stream geometry. It will be contain inside Path UIElement.   	MemoryStream ms = new MemoryStream ();  	dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.   	MemoryStream bms = new MemoryStream ();  	BitmapSource bSource = dRenderer.WriteToBitmapSource (qrCode.Matrix' new Point (96' 96));  	PngBitmapEncoder pngEncoder = new PngBitmapEncoder ();  	QRImage.Source = bSource;  	//pngEncoder.Interlace = PngInterlaceOption.On;  	//pngEncoder.Frames.Add(BitmapFrame.Create(bSource));  	//pngEncoder.Save(bms);  	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.   }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: if (QRImage.Source == null) {  	Link = App.FixTitleForWiki (Link);  	QrEncoder encoder = new QrEncoder (ErrorCorrectionLevel.M);  	QrCode qrCode;  	encoder.TryEncode (Link' out qrCode);  	//http://sv.wikipedia.org/wiki/Regalskeppet_Vasa  	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White);  	DrawingBrush dBrush = dRenderer.DrawBrush (qrCode.Matrix);  	Rectangle rect = new Rectangle ();  	rect.Width = 150;  	rect.Height = 150;  	rect.Fill = dBrush;  	//QrCode should be at center of rectangle' and Uniform stretched.   	//Put rectangle on boarder and set up boarder's background will sort light modules out.  	//Same as how to use stream geometry. It will be contain inside Path UIElement.   	MemoryStream ms = new MemoryStream ();  	dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.   	MemoryStream bms = new MemoryStream ();  	BitmapSource bSource = dRenderer.WriteToBitmapSource (qrCode.Matrix' new Point (96' 96));  	PngBitmapEncoder pngEncoder = new PngBitmapEncoder ();  	QRImage.Source = bSource;  	//pngEncoder.Interlace = PngInterlaceOption.On;  	//pngEncoder.Frames.Add(BitmapFrame.Create(bSource));  	//pngEncoder.Save(bms);  	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.   }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: if (QRImage.Source == null) {  	Link = App.FixTitleForWiki (Link);  	QrEncoder encoder = new QrEncoder (ErrorCorrectionLevel.M);  	QrCode qrCode;  	encoder.TryEncode (Link' out qrCode);  	//http://sv.wikipedia.org/wiki/Regalskeppet_Vasa  	DrawingBrushRenderer dRenderer = new DrawingBrushRenderer (new FixedModuleSize (2' QuietZoneModules.Two)' Brushes.Black' Brushes.White);  	DrawingBrush dBrush = dRenderer.DrawBrush (qrCode.Matrix);  	Rectangle rect = new Rectangle ();  	rect.Width = 150;  	rect.Height = 150;  	rect.Fill = dBrush;  	//QrCode should be at center of rectangle' and Uniform stretched.   	//Put rectangle on boarder and set up boarder's background will sort light modules out.  	//Same as how to use stream geometry. It will be contain inside Path UIElement.   	MemoryStream ms = new MemoryStream ();  	dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  	//new Point(96' 96) is for DPI X and DPI Y. You can use WriteToStream(BitMatrix' ImageFormatEnum' Stream) to construct image at default DPI 96 96.   	MemoryStream bms = new MemoryStream ();  	BitmapSource bSource = dRenderer.WriteToBitmapSource (qrCode.Matrix' new Point (96' 96));  	PngBitmapEncoder pngEncoder = new PngBitmapEncoder ();  	QRImage.Source = bSource;  	//pngEncoder.Interlace = PngInterlaceOption.On;  	//pngEncoder.Frames.Add(BitmapFrame.Create(bSource));  	//pngEncoder.Save(bms);  	//This is example how to get bitmap source and use bitmap encoder to encode. Different bitmap encoder will have it's own specific option when encode image file.   }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: rect.Width = 150;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: rect.Height = 150;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CreateQrCode,The following statement contains a magic number: dRenderer.WriteToStream (qrCode.Matrix' ImageFormatEnum.PNG' ms' new Point (96' 96));  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (ImagePanel.Children.Count == 0) {  	Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLength;  	}  	else {  		MaxChars = MaxContentLengthLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 40);  }  else {  	Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  	if (Content.FontSize < 17) {  		MaxChars = MaxContentLengthWhenImagesExists;  	}  	else {  		MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  	}  	ReadMore.Margin = new Thickness (0' 0' 40' 85);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: Content.Height = 300 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (Content.FontSize < 17) {  	MaxChars = MaxContentLength;  }  else {  	MaxChars = MaxContentLengthLargeFont;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: ReadMore.Margin = new Thickness (0' 0' 40' 40);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: ReadMore.Margin = new Thickness (0' 0' 40' 40);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: Content.Height = 270 - Title.ActualHeight - CategoryText.ActualHeight - FlagPanel.ActualHeight;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (Content.FontSize < 17) {  	MaxChars = MaxContentLengthWhenImagesExists;  }  else {  	MaxChars = MaxContentLengthWhenImagesExistsLargeFont;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: ReadMore.Margin = new Thickness (0' 0' 40' 85);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: ReadMore.Margin = new Thickness (0' 0' 40' 85);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (SeconPageText.Text.Length > MaxChars) {  	Content.Text = SeconPageText.Text.Substring (0' MaxChars - 3) + "...";  	ReadMore.Visibility = Visibility.Visible;  	Content.Height -= 30;  }  else {  	Content.Text = SeconPageText.Text;  	ReadMore.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: if (SeconPageText.Text.Length > MaxChars) {  	Content.Text = SeconPageText.Text.Substring (0' MaxChars - 3) + "...";  	ReadMore.Visibility = Visibility.Visible;  	Content.Height -= 30;  }  else {  	Content.Text = SeconPageText.Text;  	ReadMore.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: Content.Text = SeconPageText.Text.Substring (0' MaxChars - 3) + "...";  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,SetFirstPageText,The following statement contains a magic number: Content.Height -= 30;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (Redirect > 0) {  	string Language = WikiTitle.Substring (0' 2);  	string title = JsonText.Substring (Redirect + 12);  	Redirect = title.IndexOf ("]]");  	if (Redirect > 0) {  		title = App.DecodeText (title.Substring (0' Redirect));  	}  	SearchForArticleContent (Language' title);  	return "";  }  else if (Missing > 0) {  	if (WikiTitle.StartsWith ("sv:")) {  		return "Sidan \"" + WikiTitle + "\" finns inte på svenska Wikipedia!";  	}  	else if (WikiTitle.StartsWith ("en:")) {  		return "Article \"" + WikiTitle + "\" does not exists on English Wikipedia!";  	}  	if (WikiTitle.StartsWith ("de:")) {  		return "Seite \"" + WikiTitle + "\" existiert nicht in Deutsch Wikipedia!";  	}  	if (WikiTitle.StartsWith ("fr:")) {  		return "L'article \"" + WikiTitle + "\" n'existe pas dans Wikipedia français!";  	}  	else {  		return "Article \"" + WikiTitle + "\" does not exists on Wikipedia!";  	}  }  else {  	int PagesPosition = JsonText.IndexOf ("\"pages\":{");  	if (PagesPosition > 0) {  		string Pages = JsonText.Substring (PagesPosition + 9);  		int ContentPosition = Pages.IndexOf ("\"*\":");  		string Page = Pages.Substring (ContentPosition + 5);  		//int EnPagePosition = Page.IndexOf("]}}");  		//Page = Page.Substring(0' EnPagePosition);  		string PageContent = GetTextContent (Page);  		PageContent = PageContent.Replace ("  "' " ");  		return PageContent;  	}  	else {  		return "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (Redirect > 0) {  	string Language = WikiTitle.Substring (0' 2);  	string title = JsonText.Substring (Redirect + 12);  	Redirect = title.IndexOf ("]]");  	if (Redirect > 0) {  		title = App.DecodeText (title.Substring (0' Redirect));  	}  	SearchForArticleContent (Language' title);  	return "";  }  else if (Missing > 0) {  	if (WikiTitle.StartsWith ("sv:")) {  		return "Sidan \"" + WikiTitle + "\" finns inte på svenska Wikipedia!";  	}  	else if (WikiTitle.StartsWith ("en:")) {  		return "Article \"" + WikiTitle + "\" does not exists on English Wikipedia!";  	}  	if (WikiTitle.StartsWith ("de:")) {  		return "Seite \"" + WikiTitle + "\" existiert nicht in Deutsch Wikipedia!";  	}  	if (WikiTitle.StartsWith ("fr:")) {  		return "L'article \"" + WikiTitle + "\" n'existe pas dans Wikipedia français!";  	}  	else {  		return "Article \"" + WikiTitle + "\" does not exists on Wikipedia!";  	}  }  else {  	int PagesPosition = JsonText.IndexOf ("\"pages\":{");  	if (PagesPosition > 0) {  		string Pages = JsonText.Substring (PagesPosition + 9);  		int ContentPosition = Pages.IndexOf ("\"*\":");  		string Page = Pages.Substring (ContentPosition + 5);  		//int EnPagePosition = Page.IndexOf("]}}");  		//Page = Page.Substring(0' EnPagePosition);  		string PageContent = GetTextContent (Page);  		PageContent = PageContent.Replace ("  "' " ");  		return PageContent;  	}  	else {  		return "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (Redirect > 0) {  	string Language = WikiTitle.Substring (0' 2);  	string title = JsonText.Substring (Redirect + 12);  	Redirect = title.IndexOf ("]]");  	if (Redirect > 0) {  		title = App.DecodeText (title.Substring (0' Redirect));  	}  	SearchForArticleContent (Language' title);  	return "";  }  else if (Missing > 0) {  	if (WikiTitle.StartsWith ("sv:")) {  		return "Sidan \"" + WikiTitle + "\" finns inte på svenska Wikipedia!";  	}  	else if (WikiTitle.StartsWith ("en:")) {  		return "Article \"" + WikiTitle + "\" does not exists on English Wikipedia!";  	}  	if (WikiTitle.StartsWith ("de:")) {  		return "Seite \"" + WikiTitle + "\" existiert nicht in Deutsch Wikipedia!";  	}  	if (WikiTitle.StartsWith ("fr:")) {  		return "L'article \"" + WikiTitle + "\" n'existe pas dans Wikipedia français!";  	}  	else {  		return "Article \"" + WikiTitle + "\" does not exists on Wikipedia!";  	}  }  else {  	int PagesPosition = JsonText.IndexOf ("\"pages\":{");  	if (PagesPosition > 0) {  		string Pages = JsonText.Substring (PagesPosition + 9);  		int ContentPosition = Pages.IndexOf ("\"*\":");  		string Page = Pages.Substring (ContentPosition + 5);  		//int EnPagePosition = Page.IndexOf("]}}");  		//Page = Page.Substring(0' EnPagePosition);  		string PageContent = GetTextContent (Page);  		PageContent = PageContent.Replace ("  "' " ");  		return PageContent;  	}  	else {  		return "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (Redirect > 0) {  	string Language = WikiTitle.Substring (0' 2);  	string title = JsonText.Substring (Redirect + 12);  	Redirect = title.IndexOf ("]]");  	if (Redirect > 0) {  		title = App.DecodeText (title.Substring (0' Redirect));  	}  	SearchForArticleContent (Language' title);  	return "";  }  else if (Missing > 0) {  	if (WikiTitle.StartsWith ("sv:")) {  		return "Sidan \"" + WikiTitle + "\" finns inte på svenska Wikipedia!";  	}  	else if (WikiTitle.StartsWith ("en:")) {  		return "Article \"" + WikiTitle + "\" does not exists on English Wikipedia!";  	}  	if (WikiTitle.StartsWith ("de:")) {  		return "Seite \"" + WikiTitle + "\" existiert nicht in Deutsch Wikipedia!";  	}  	if (WikiTitle.StartsWith ("fr:")) {  		return "L'article \"" + WikiTitle + "\" n'existe pas dans Wikipedia français!";  	}  	else {  		return "Article \"" + WikiTitle + "\" does not exists on Wikipedia!";  	}  }  else {  	int PagesPosition = JsonText.IndexOf ("\"pages\":{");  	if (PagesPosition > 0) {  		string Pages = JsonText.Substring (PagesPosition + 9);  		int ContentPosition = Pages.IndexOf ("\"*\":");  		string Page = Pages.Substring (ContentPosition + 5);  		//int EnPagePosition = Page.IndexOf("]}}");  		//Page = Page.Substring(0' EnPagePosition);  		string PageContent = GetTextContent (Page);  		PageContent = PageContent.Replace ("  "' " ");  		return PageContent;  	}  	else {  		return "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (Missing > 0) {  	if (WikiTitle.StartsWith ("sv:")) {  		return "Sidan \"" + WikiTitle + "\" finns inte på svenska Wikipedia!";  	}  	else if (WikiTitle.StartsWith ("en:")) {  		return "Article \"" + WikiTitle + "\" does not exists on English Wikipedia!";  	}  	if (WikiTitle.StartsWith ("de:")) {  		return "Seite \"" + WikiTitle + "\" existiert nicht in Deutsch Wikipedia!";  	}  	if (WikiTitle.StartsWith ("fr:")) {  		return "L'article \"" + WikiTitle + "\" n'existe pas dans Wikipedia français!";  	}  	else {  		return "Article \"" + WikiTitle + "\" does not exists on Wikipedia!";  	}  }  else {  	int PagesPosition = JsonText.IndexOf ("\"pages\":{");  	if (PagesPosition > 0) {  		string Pages = JsonText.Substring (PagesPosition + 9);  		int ContentPosition = Pages.IndexOf ("\"*\":");  		string Page = Pages.Substring (ContentPosition + 5);  		//int EnPagePosition = Page.IndexOf("]}}");  		//Page = Page.Substring(0' EnPagePosition);  		string PageContent = GetTextContent (Page);  		PageContent = PageContent.Replace ("  "' " ");  		return PageContent;  	}  	else {  		return "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (Missing > 0) {  	if (WikiTitle.StartsWith ("sv:")) {  		return "Sidan \"" + WikiTitle + "\" finns inte på svenska Wikipedia!";  	}  	else if (WikiTitle.StartsWith ("en:")) {  		return "Article \"" + WikiTitle + "\" does not exists on English Wikipedia!";  	}  	if (WikiTitle.StartsWith ("de:")) {  		return "Seite \"" + WikiTitle + "\" existiert nicht in Deutsch Wikipedia!";  	}  	if (WikiTitle.StartsWith ("fr:")) {  		return "L'article \"" + WikiTitle + "\" n'existe pas dans Wikipedia français!";  	}  	else {  		return "Article \"" + WikiTitle + "\" does not exists on Wikipedia!";  	}  }  else {  	int PagesPosition = JsonText.IndexOf ("\"pages\":{");  	if (PagesPosition > 0) {  		string Pages = JsonText.Substring (PagesPosition + 9);  		int ContentPosition = Pages.IndexOf ("\"*\":");  		string Page = Pages.Substring (ContentPosition + 5);  		//int EnPagePosition = Page.IndexOf("]}}");  		//Page = Page.Substring(0' EnPagePosition);  		string PageContent = GetTextContent (Page);  		PageContent = PageContent.Replace ("  "' " ");  		return PageContent;  	}  	else {  		return "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (PagesPosition > 0) {  	string Pages = JsonText.Substring (PagesPosition + 9);  	int ContentPosition = Pages.IndexOf ("\"*\":");  	string Page = Pages.Substring (ContentPosition + 5);  	//int EnPagePosition = Page.IndexOf("]}}");  	//Page = Page.Substring(0' EnPagePosition);  	string PageContent = GetTextContent (Page);  	PageContent = PageContent.Replace ("  "' " ");  	return PageContent;  }  else {  	return "";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetPageContent,The following statement contains a magic number: if (PagesPosition > 0) {  	string Pages = JsonText.Substring (PagesPosition + 9);  	int ContentPosition = Pages.IndexOf ("\"*\":");  	string Page = Pages.Substring (ContentPosition + 5);  	//int EnPagePosition = Page.IndexOf("]}}");  	//Page = Page.Substring(0' EnPagePosition);  	string PageContent = GetTextContent (Page);  	PageContent = PageContent.Replace ("  "' " ");  	return PageContent;  }  else {  	return "";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: foreach (var item in PageParts) {  	if (item.StartsWith (":")) {  	}  	else if (item.ToLower () == "__notoc__") {  	}  	else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  	}  	else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  		if (item.IndexOf ("bildtext") > 0) {  		}  		else if (item.IndexOf ("bild") > 0) {  			GetImagePath (item);  		}  		else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  			string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  			if (Year.Length > 0) {  				Result += "Grundades " + item + "\n\r";  			}  		}  	}  	else if (item.StartsWith ("{|")) {  	}  	else if (item.StartsWith ("{{")) {  	}  	else if (item.StartsWith ("*")) {  	}  	else if (item.Trim ().StartsWith ("}}")) {  	}  	else if (item.StartsWith ("==")) {  	}  	else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  		GetImagePath (item);  	}  	else if (item.StartsWith ("[[Kategori:")) {  		string Year = item.Substring (5' 4);  		if (Year.Substring (0' 2) == "16") {  			if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  			}  		}  	}  	else {  		Result += MakeTextPretty (item' false);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: foreach (var item in PageParts) {  	if (item.StartsWith (":")) {  	}  	else if (item.ToLower () == "__notoc__") {  	}  	else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  	}  	else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  		if (item.IndexOf ("bildtext") > 0) {  		}  		else if (item.IndexOf ("bild") > 0) {  			GetImagePath (item);  		}  		else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  			string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  			if (Year.Length > 0) {  				Result += "Grundades " + item + "\n\r";  			}  		}  	}  	else if (item.StartsWith ("{|")) {  	}  	else if (item.StartsWith ("{{")) {  	}  	else if (item.StartsWith ("*")) {  	}  	else if (item.Trim ().StartsWith ("}}")) {  	}  	else if (item.StartsWith ("==")) {  	}  	else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  		GetImagePath (item);  	}  	else if (item.StartsWith ("[[Kategori:")) {  		string Year = item.Substring (5' 4);  		if (Year.Substring (0' 2) == "16") {  			if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  			}  		}  	}  	else {  		Result += MakeTextPretty (item' false);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: foreach (var item in PageParts) {  	if (item.StartsWith (":")) {  	}  	else if (item.ToLower () == "__notoc__") {  	}  	else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  	}  	else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  		if (item.IndexOf ("bildtext") > 0) {  		}  		else if (item.IndexOf ("bild") > 0) {  			GetImagePath (item);  		}  		else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  			string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  			if (Year.Length > 0) {  				Result += "Grundades " + item + "\n\r";  			}  		}  	}  	else if (item.StartsWith ("{|")) {  	}  	else if (item.StartsWith ("{{")) {  	}  	else if (item.StartsWith ("*")) {  	}  	else if (item.Trim ().StartsWith ("}}")) {  	}  	else if (item.StartsWith ("==")) {  	}  	else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  		GetImagePath (item);  	}  	else if (item.StartsWith ("[[Kategori:")) {  		string Year = item.Substring (5' 4);  		if (Year.Substring (0' 2) == "16") {  			if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  			}  		}  	}  	else {  		Result += MakeTextPretty (item' false);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: foreach (var item in PageParts) {  	if (item.StartsWith (":")) {  	}  	else if (item.ToLower () == "__notoc__") {  	}  	else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  	}  	else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  		if (item.IndexOf ("bildtext") > 0) {  		}  		else if (item.IndexOf ("bild") > 0) {  			GetImagePath (item);  		}  		else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  			string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  			if (Year.Length > 0) {  				Result += "Grundades " + item + "\n\r";  			}  		}  	}  	else if (item.StartsWith ("{|")) {  	}  	else if (item.StartsWith ("{{")) {  	}  	else if (item.StartsWith ("*")) {  	}  	else if (item.Trim ().StartsWith ("}}")) {  	}  	else if (item.StartsWith ("==")) {  	}  	else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  		GetImagePath (item);  	}  	else if (item.StartsWith ("[[Kategori:")) {  		string Year = item.Substring (5' 4);  		if (Year.Substring (0' 2) == "16") {  			if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  			}  		}  	}  	else {  		Result += MakeTextPretty (item' false);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: foreach (var item in PageParts) {  	if (item.StartsWith (":")) {  	}  	else if (item.ToLower () == "__notoc__") {  	}  	else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  	}  	else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  		if (item.IndexOf ("bildtext") > 0) {  		}  		else if (item.IndexOf ("bild") > 0) {  			GetImagePath (item);  		}  		else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  			string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  			if (Year.Length > 0) {  				Result += "Grundades " + item + "\n\r";  			}  		}  	}  	else if (item.StartsWith ("{|")) {  	}  	else if (item.StartsWith ("{{")) {  	}  	else if (item.StartsWith ("*")) {  	}  	else if (item.Trim ().StartsWith ("}}")) {  	}  	else if (item.StartsWith ("==")) {  	}  	else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  		GetImagePath (item);  	}  	else if (item.StartsWith ("[[Kategori:")) {  		string Year = item.Substring (5' 4);  		if (Year.Substring (0' 2) == "16") {  			if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  			}  		}  	}  	else {  		Result += MakeTextPretty (item' false);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: foreach (var item in PageParts) {  	if (item.StartsWith (":")) {  	}  	else if (item.ToLower () == "__notoc__") {  	}  	else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  	}  	else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  		if (item.IndexOf ("bildtext") > 0) {  		}  		else if (item.IndexOf ("bild") > 0) {  			GetImagePath (item);  		}  		else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  			string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  			if (Year.Length > 0) {  				Result += "Grundades " + item + "\n\r";  			}  		}  	}  	else if (item.StartsWith ("{|")) {  	}  	else if (item.StartsWith ("{{")) {  	}  	else if (item.StartsWith ("*")) {  	}  	else if (item.Trim ().StartsWith ("}}")) {  	}  	else if (item.StartsWith ("==")) {  	}  	else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  		GetImagePath (item);  	}  	else if (item.StartsWith ("[[Kategori:")) {  		string Year = item.Substring (5' 4);  		if (Year.Substring (0' 2) == "16") {  			if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  			}  		}  	}  	else {  		Result += MakeTextPretty (item' false);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: foreach (var item in PageParts) {  	if (item.StartsWith (":")) {  	}  	else if (item.ToLower () == "__notoc__") {  	}  	else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  	}  	else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  		if (item.IndexOf ("bildtext") > 0) {  		}  		else if (item.IndexOf ("bild") > 0) {  			GetImagePath (item);  		}  		else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  			string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  			if (Year.Length > 0) {  				Result += "Grundades " + item + "\n\r";  			}  		}  	}  	else if (item.StartsWith ("{|")) {  	}  	else if (item.StartsWith ("{{")) {  	}  	else if (item.StartsWith ("*")) {  	}  	else if (item.Trim ().StartsWith ("}}")) {  	}  	else if (item.StartsWith ("==")) {  	}  	else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  		GetImagePath (item);  	}  	else if (item.StartsWith ("[[Kategori:")) {  		string Year = item.Substring (5' 4);  		if (Year.Substring (0' 2) == "16") {  			if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  			}  		}  	}  	else {  		Result += MakeTextPretty (item' false);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith (":")) {  }  else if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith (":")) {  }  else if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith (":")) {  }  else if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith (":")) {  }  else if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith (":")) {  }  else if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith (":")) {  }  else if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith (":")) {  }  else if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.ToLower () == "__notoc__") {  }  else if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if ((item.IndexOf ("|") > 0) && (item.IndexOf ("|") < 10) && (item.IndexOf (" = ") > 0)) {  }  else if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("!") || item.StartsWith ("|") || item.StartsWith (" |") || (item.StartsWith (" ") && (item.IndexOf ("=") > 0))) {  	if (item.IndexOf ("bildtext") > 0) {  	}  	else if (item.IndexOf ("bild") > 0) {  		GetImagePath (item);  	}  	else if ((item.IndexOf ("grundades") > 0) && (item.IndexOf ("=") > 0)) {  		string Year = item.Substring (item.IndexOf ("=") + 1).Trim ();  		if (Year.Length > 0) {  			Result += "Grundades " + item + "\n\r";  		}  	}  }  else if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{|")) {  }  else if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("{{")) {  }  else if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("*")) {  }  else if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.Trim ().StartsWith ("}}")) {  }  else if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("==")) {  }  else if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[") && (item.IndexOf (":") > 0) && ((item.ToLower ().IndexOf (".png") > 0) || (item.ToLower ().IndexOf (".jpg") > 0) || (item.ToLower ().IndexOf (".svg") > 0))) {  	GetImagePath (item);  }  else if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (item.StartsWith ("[[Kategori:")) {  	string Year = item.Substring (5' 4);  	if (Year.Substring (0' 2) == "16") {  		if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  		}  	}  }  else {  	Result += MakeTextPretty (item' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (Year.Substring (0' 2) == "16") {  	if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (Year.Substring (0' 2) == "16") {  	if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (Year.Substring (0' 2) == "16") {  	if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (Year.Substring (0' 2) == "16") {  	if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetTextContent,The following statement contains a magic number: if (Convert.ToInt16 (Year.Substring (2' 2)) < 50) {  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImagePath,The following statement contains a magic number: if (PipePosition > 0) {  	ImageText = ImagePath.Substring (PipePosition);  	ImagePath = ImagePath.Substring (0' PipePosition);  	int Position = ImageText.IndexOf ("|");  	while ((Position >= 0) && (Position < 10)) {  		ImageText = ImageText.Substring (ImageText.IndexOf ("|") + 1);  		Position = ImageText.IndexOf ("|");  	}  	ImageText = MakeTextPretty (ImageText' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImagePath,The following statement contains a magic number: while ((Position >= 0) && (Position < 10)) {  	ImageText = ImageText.Substring (ImageText.IndexOf ("|") + 1);  	Position = ImageText.IndexOf ("|");  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else if (e.Error != null) {  }  else if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else if (e.Error != null) {  }  else if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Cancelled) {  }  else if (e.Error != null) {  }  else if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Error != null) {  }  else if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Error != null) {  }  else if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Error != null) {  }  else if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (e.Result != null) {  	string result = e.Result;  	string ImageUrl = FindImageUrl (result);  	if (ImageUrl.Length > 0) {  		try {  			if (ImagePanel.Children.Count < 10) {  				BitmapImage B = new BitmapImage ();  				B.BeginInit ();  				B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  				B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  				B.EndInit ();  				Image InfoImage = new Image ();  				InfoImage.Source = B;  				InfoImage.Height = 50;  				InfoImage.TouchDown += InfoImage_TouchDown;  				InfoImage.Margin = new Thickness (2);  				//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  				//{  				//    InfoImage.Tag = (string)e.UserState;  				//}  				//else  				//{  				InfoImage.Tag = GetImageDescription (result);  				//}  				ImagePanel.Children.Add (InfoImage);  				CheckImages ();  				SetFirstPageText ();  			}  		}  		catch {  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (ImageUrl.Length > 0) {  	try {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  			//{  			//    InfoImage.Tag = (string)e.UserState;  			//}  			//else  			//{  			InfoImage.Tag = GetImageDescription (result);  			//}  			ImagePanel.Children.Add (InfoImage);  			CheckImages ();  			SetFirstPageText ();  		}  	}  	catch {  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (ImageUrl.Length > 0) {  	try {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  			//{  			//    InfoImage.Tag = (string)e.UserState;  			//}  			//else  			//{  			InfoImage.Tag = GetImageDescription (result);  			//}  			ImagePanel.Children.Add (InfoImage);  			CheckImages ();  			SetFirstPageText ();  		}  	}  	catch {  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (ImageUrl.Length > 0) {  	try {  		if (ImagePanel.Children.Count < 10) {  			BitmapImage B = new BitmapImage ();  			B.BeginInit ();  			B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  			B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  			B.EndInit ();  			Image InfoImage = new Image ();  			InfoImage.Source = B;  			InfoImage.Height = 50;  			InfoImage.TouchDown += InfoImage_TouchDown;  			InfoImage.Margin = new Thickness (2);  			//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  			//{  			//    InfoImage.Tag = (string)e.UserState;  			//}  			//else  			//{  			InfoImage.Tag = GetImageDescription (result);  			//}  			ImagePanel.Children.Add (InfoImage);  			CheckImages ();  			SetFirstPageText ();  		}  	}  	catch {  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: try {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  		//{  		//    InfoImage.Tag = (string)e.UserState;  		//}  		//else  		//{  		InfoImage.Tag = GetImageDescription (result);  		//}  		ImagePanel.Children.Add (InfoImage);  		CheckImages ();  		SetFirstPageText ();  	}  }  catch {  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: try {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  		//{  		//    InfoImage.Tag = (string)e.UserState;  		//}  		//else  		//{  		InfoImage.Tag = GetImageDescription (result);  		//}  		ImagePanel.Children.Add (InfoImage);  		CheckImages ();  		SetFirstPageText ();  	}  }  catch {  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: try {  	if (ImagePanel.Children.Count < 10) {  		BitmapImage B = new BitmapImage ();  		B.BeginInit ();  		B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  		B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  		B.EndInit ();  		Image InfoImage = new Image ();  		InfoImage.Source = B;  		InfoImage.Height = 50;  		InfoImage.TouchDown += InfoImage_TouchDown;  		InfoImage.Margin = new Thickness (2);  		//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  		//{  		//    InfoImage.Tag = (string)e.UserState;  		//}  		//else  		//{  		InfoImage.Tag = GetImageDescription (result);  		//}  		ImagePanel.Children.Add (InfoImage);  		CheckImages ();  		SetFirstPageText ();  	}  }  catch {  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  	//{  	//    InfoImage.Tag = (string)e.UserState;  	//}  	//else  	//{  	InfoImage.Tag = GetImageDescription (result);  	//}  	ImagePanel.Children.Add (InfoImage);  	CheckImages ();  	SetFirstPageText ();  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  	//{  	//    InfoImage.Tag = (string)e.UserState;  	//}  	//else  	//{  	InfoImage.Tag = GetImageDescription (result);  	//}  	ImagePanel.Children.Add (InfoImage);  	CheckImages ();  	SetFirstPageText ();  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: if (ImagePanel.Children.Count < 10) {  	BitmapImage B = new BitmapImage ();  	B.BeginInit ();  	B.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;  	B.UriSource = new Uri (ImageUrl' UriKind.RelativeOrAbsolute);  	B.EndInit ();  	Image InfoImage = new Image ();  	InfoImage.Source = B;  	InfoImage.Height = 50;  	InfoImage.TouchDown += InfoImage_TouchDown;  	InfoImage.Margin = new Thickness (2);  	//if ((e.UserState != null) && (((string)e.UserState).Length > 0))  	//{  	//    InfoImage.Tag = (string)e.UserState;  	//}  	//else  	//{  	InfoImage.Tag = GetImageDescription (result);  	//}  	ImagePanel.Children.Add (InfoImage);  	CheckImages ();  	SetFirstPageText ();  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: InfoImage.Height = 50;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ImageClient_DownloadStringCompleted,The following statement contains a magic number: InfoImage.Margin = new Thickness (2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/3.0/") > 0) {  	Result = " License: CC-BY-SA 3.0";  }  else if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/3.0/") > 0) {  	Result = " License: CC-BY-SA 3.0";  }  else if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/3.0/") > 0) {  	Result = " License: CC-BY-SA 3.0";  }  else if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/3.0/") > 0) {  	Result = " License: CC-BY-SA 3.0";  }  else if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/3.0/") > 0) {  	Result = " License: CC-BY-SA 3.0";  }  else if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/3.0/") > 0) {  	Result = " License: CC-BY-SA 3.0";  }  else if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (result.IndexOf ("creativecommons.org/licenses/by-sa/2.0/") > 0) {  	Result = " License: CC-BY-SA 2.0";  }  else {  	int copyright = result.IndexOf ("<link rel=\"copyright\" href=\"");  	if (copyright > 0) {  		string License = result.Substring (copyright + 28);  		copyright = License.IndexOf ("\"");  		if (copyright > 0) {  			License = License.Substring (0' copyright - 1);  			if (License.StartsWith ("//")) {  				Result = " License:";  				string[] parts = License.Split ('/');  				if (parts.Length > 2) {  					switch (parts [2]) {  					case "creativecommons.org":  						Result += "CC-" + parts [4] + parts [5];  						break;  					default:  						Result += parts [2];  						break;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	string License = result.Substring (copyright + 28);  	copyright = License.IndexOf ("\"");  	if (copyright > 0) {  		License = License.Substring (0' copyright - 1);  		if (License.StartsWith ("//")) {  			Result = " License:";  			string[] parts = License.Split ('/');  			if (parts.Length > 2) {  				switch (parts [2]) {  				case "creativecommons.org":  					Result += "CC-" + parts [4] + parts [5];  					break;  				default:  					Result += parts [2];  					break;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	string License = result.Substring (copyright + 28);  	copyright = License.IndexOf ("\"");  	if (copyright > 0) {  		License = License.Substring (0' copyright - 1);  		if (License.StartsWith ("//")) {  			Result = " License:";  			string[] parts = License.Split ('/');  			if (parts.Length > 2) {  				switch (parts [2]) {  				case "creativecommons.org":  					Result += "CC-" + parts [4] + parts [5];  					break;  				default:  					Result += parts [2];  					break;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	string License = result.Substring (copyright + 28);  	copyright = License.IndexOf ("\"");  	if (copyright > 0) {  		License = License.Substring (0' copyright - 1);  		if (License.StartsWith ("//")) {  			Result = " License:";  			string[] parts = License.Split ('/');  			if (parts.Length > 2) {  				switch (parts [2]) {  				case "creativecommons.org":  					Result += "CC-" + parts [4] + parts [5];  					break;  				default:  					Result += parts [2];  					break;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	string License = result.Substring (copyright + 28);  	copyright = License.IndexOf ("\"");  	if (copyright > 0) {  		License = License.Substring (0' copyright - 1);  		if (License.StartsWith ("//")) {  			Result = " License:";  			string[] parts = License.Split ('/');  			if (parts.Length > 2) {  				switch (parts [2]) {  				case "creativecommons.org":  					Result += "CC-" + parts [4] + parts [5];  					break;  				default:  					Result += parts [2];  					break;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	string License = result.Substring (copyright + 28);  	copyright = License.IndexOf ("\"");  	if (copyright > 0) {  		License = License.Substring (0' copyright - 1);  		if (License.StartsWith ("//")) {  			Result = " License:";  			string[] parts = License.Split ('/');  			if (parts.Length > 2) {  				switch (parts [2]) {  				case "creativecommons.org":  					Result += "CC-" + parts [4] + parts [5];  					break;  				default:  					Result += parts [2];  					break;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	string License = result.Substring (copyright + 28);  	copyright = License.IndexOf ("\"");  	if (copyright > 0) {  		License = License.Substring (0' copyright - 1);  		if (License.StartsWith ("//")) {  			Result = " License:";  			string[] parts = License.Split ('/');  			if (parts.Length > 2) {  				switch (parts [2]) {  				case "creativecommons.org":  					Result += "CC-" + parts [4] + parts [5];  					break;  				default:  					Result += parts [2];  					break;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	License = License.Substring (0' copyright - 1);  	if (License.StartsWith ("//")) {  		Result = " License:";  		string[] parts = License.Split ('/');  		if (parts.Length > 2) {  			switch (parts [2]) {  			case "creativecommons.org":  				Result += "CC-" + parts [4] + parts [5];  				break;  			default:  				Result += parts [2];  				break;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	License = License.Substring (0' copyright - 1);  	if (License.StartsWith ("//")) {  		Result = " License:";  		string[] parts = License.Split ('/');  		if (parts.Length > 2) {  			switch (parts [2]) {  			case "creativecommons.org":  				Result += "CC-" + parts [4] + parts [5];  				break;  			default:  				Result += parts [2];  				break;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	License = License.Substring (0' copyright - 1);  	if (License.StartsWith ("//")) {  		Result = " License:";  		string[] parts = License.Split ('/');  		if (parts.Length > 2) {  			switch (parts [2]) {  			case "creativecommons.org":  				Result += "CC-" + parts [4] + parts [5];  				break;  			default:  				Result += parts [2];  				break;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	License = License.Substring (0' copyright - 1);  	if (License.StartsWith ("//")) {  		Result = " License:";  		string[] parts = License.Split ('/');  		if (parts.Length > 2) {  			switch (parts [2]) {  			case "creativecommons.org":  				Result += "CC-" + parts [4] + parts [5];  				break;  			default:  				Result += parts [2];  				break;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (copyright > 0) {  	License = License.Substring (0' copyright - 1);  	if (License.StartsWith ("//")) {  		Result = " License:";  		string[] parts = License.Split ('/');  		if (parts.Length > 2) {  			switch (parts [2]) {  			case "creativecommons.org":  				Result += "CC-" + parts [4] + parts [5];  				break;  			default:  				Result += parts [2];  				break;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (License.StartsWith ("//")) {  	Result = " License:";  	string[] parts = License.Split ('/');  	if (parts.Length > 2) {  		switch (parts [2]) {  		case "creativecommons.org":  			Result += "CC-" + parts [4] + parts [5];  			break;  		default:  			Result += parts [2];  			break;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (License.StartsWith ("//")) {  	Result = " License:";  	string[] parts = License.Split ('/');  	if (parts.Length > 2) {  		switch (parts [2]) {  		case "creativecommons.org":  			Result += "CC-" + parts [4] + parts [5];  			break;  		default:  			Result += parts [2];  			break;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (License.StartsWith ("//")) {  	Result = " License:";  	string[] parts = License.Split ('/');  	if (parts.Length > 2) {  		switch (parts [2]) {  		case "creativecommons.org":  			Result += "CC-" + parts [4] + parts [5];  			break;  		default:  			Result += parts [2];  			break;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (License.StartsWith ("//")) {  	Result = " License:";  	string[] parts = License.Split ('/');  	if (parts.Length > 2) {  		switch (parts [2]) {  		case "creativecommons.org":  			Result += "CC-" + parts [4] + parts [5];  			break;  		default:  			Result += parts [2];  			break;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (License.StartsWith ("//")) {  	Result = " License:";  	string[] parts = License.Split ('/');  	if (parts.Length > 2) {  		switch (parts [2]) {  		case "creativecommons.org":  			Result += "CC-" + parts [4] + parts [5];  			break;  		default:  			Result += parts [2];  			break;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (parts.Length > 2) {  	switch (parts [2]) {  	case "creativecommons.org":  		Result += "CC-" + parts [4] + parts [5];  		break;  	default:  		Result += parts [2];  		break;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (parts.Length > 2) {  	switch (parts [2]) {  	case "creativecommons.org":  		Result += "CC-" + parts [4] + parts [5];  		break;  	default:  		Result += parts [2];  		break;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (parts.Length > 2) {  	switch (parts [2]) {  	case "creativecommons.org":  		Result += "CC-" + parts [4] + parts [5];  		break;  	default:  		Result += parts [2];  		break;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (parts.Length > 2) {  	switch (parts [2]) {  	case "creativecommons.org":  		Result += "CC-" + parts [4] + parts [5];  		break;  	default:  		Result += parts [2];  		break;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (parts.Length > 2) {  	switch (parts [2]) {  	case "creativecommons.org":  		Result += "CC-" + parts [4] + parts [5];  		break;  	default:  		Result += parts [2];  		break;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: switch (parts [2]) {  case "creativecommons.org":  	Result += "CC-" + parts [4] + parts [5];  	break;  default:  	Result += parts [2];  	break;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: switch (parts [2]) {  case "creativecommons.org":  	Result += "CC-" + parts [4] + parts [5];  	break;  default:  	Result += parts [2];  	break;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: switch (parts [2]) {  case "creativecommons.org":  	Result += "CC-" + parts [4] + parts [5];  	break;  default:  	Result += parts [2];  	break;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: switch (parts [2]) {  case "creativecommons.org":  	Result += "CC-" + parts [4] + parts [5];  	break;  default:  	Result += parts [2];  	break;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: Result += "CC-" + parts [4] + parts [5];  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: Result += "CC-" + parts [4] + parts [5];  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: Result += parts [2];  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	End = DescriptionText.IndexOf ("\n");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		Start = DescriptionText.IndexOf ("href=");  		if ((Start > 0) && (Start < End)) {  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  			}  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  		else {  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				int User = DescriptionText.ToLower ().IndexOf ("[[user:");  				if (User > 0) {  					DescriptionText = DescriptionText.Substring (User + 7);  					End = DescriptionText.IndexOf ("]]");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					End = DescriptionText.IndexOf ("|");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					return "Author:" + DescriptionText + Result;  				}  				else {  					return DescriptionText + Result;  				}  			}  			else {  				DescriptionText = DescriptionText.Substring (0' 20);  				return DescriptionText + Result;  			}  		}  	}  }  else {  	Start = result.IndexOf ("Author=User <a href");  	if (Start <= 0) {  		Start = result.IndexOf ("title=\"User:");  	}  	if (Start > 0) {  		string DescriptionText = result.Substring (Start);  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  	}  	else {  		Start = result.IndexOf ("licensetpl_short");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start);  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "License:" + DescriptionText;  				}  			}  		}  		else {  			Start = result.IndexOf ("Author =");  			if (Start > 0) {  				string DescriptionText = result.Substring (Start + 8);  				End = DescriptionText.IndexOf ("==");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  				}  			}  			else {  				Start = result.IndexOf ("Universal Authority File");  				if (Start > 0) {  					string DescriptionText = result.Substring (Start + 8);  					End = DescriptionText.IndexOf ("==");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  						return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	End = DescriptionText.IndexOf ("\n");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		Start = DescriptionText.IndexOf ("href=");  		if ((Start > 0) && (Start < End)) {  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  			}  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  		else {  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				int User = DescriptionText.ToLower ().IndexOf ("[[user:");  				if (User > 0) {  					DescriptionText = DescriptionText.Substring (User + 7);  					End = DescriptionText.IndexOf ("]]");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					End = DescriptionText.IndexOf ("|");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					return "Author:" + DescriptionText + Result;  				}  				else {  					return DescriptionText + Result;  				}  			}  			else {  				DescriptionText = DescriptionText.Substring (0' 20);  				return DescriptionText + Result;  			}  		}  	}  }  else {  	Start = result.IndexOf ("Author=User <a href");  	if (Start <= 0) {  		Start = result.IndexOf ("title=\"User:");  	}  	if (Start > 0) {  		string DescriptionText = result.Substring (Start);  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  	}  	else {  		Start = result.IndexOf ("licensetpl_short");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start);  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "License:" + DescriptionText;  				}  			}  		}  		else {  			Start = result.IndexOf ("Author =");  			if (Start > 0) {  				string DescriptionText = result.Substring (Start + 8);  				End = DescriptionText.IndexOf ("==");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  				}  			}  			else {  				Start = result.IndexOf ("Universal Authority File");  				if (Start > 0) {  					string DescriptionText = result.Substring (Start + 8);  					End = DescriptionText.IndexOf ("==");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  						return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	End = DescriptionText.IndexOf ("\n");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		Start = DescriptionText.IndexOf ("href=");  		if ((Start > 0) && (Start < End)) {  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  			}  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  		else {  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				int User = DescriptionText.ToLower ().IndexOf ("[[user:");  				if (User > 0) {  					DescriptionText = DescriptionText.Substring (User + 7);  					End = DescriptionText.IndexOf ("]]");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					End = DescriptionText.IndexOf ("|");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					return "Author:" + DescriptionText + Result;  				}  				else {  					return DescriptionText + Result;  				}  			}  			else {  				DescriptionText = DescriptionText.Substring (0' 20);  				return DescriptionText + Result;  			}  		}  	}  }  else {  	Start = result.IndexOf ("Author=User <a href");  	if (Start <= 0) {  		Start = result.IndexOf ("title=\"User:");  	}  	if (Start > 0) {  		string DescriptionText = result.Substring (Start);  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  	}  	else {  		Start = result.IndexOf ("licensetpl_short");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start);  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "License:" + DescriptionText;  				}  			}  		}  		else {  			Start = result.IndexOf ("Author =");  			if (Start > 0) {  				string DescriptionText = result.Substring (Start + 8);  				End = DescriptionText.IndexOf ("==");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  				}  			}  			else {  				Start = result.IndexOf ("Universal Authority File");  				if (Start > 0) {  					string DescriptionText = result.Substring (Start + 8);  					End = DescriptionText.IndexOf ("==");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  						return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	End = DescriptionText.IndexOf ("\n");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		Start = DescriptionText.IndexOf ("href=");  		if ((Start > 0) && (Start < End)) {  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  			}  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  		else {  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				int User = DescriptionText.ToLower ().IndexOf ("[[user:");  				if (User > 0) {  					DescriptionText = DescriptionText.Substring (User + 7);  					End = DescriptionText.IndexOf ("]]");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					End = DescriptionText.IndexOf ("|");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  					}  					return "Author:" + DescriptionText + Result;  				}  				else {  					return DescriptionText + Result;  				}  			}  			else {  				DescriptionText = DescriptionText.Substring (0' 20);  				return DescriptionText + Result;  			}  		}  	}  }  else {  	Start = result.IndexOf ("Author=User <a href");  	if (Start <= 0) {  		Start = result.IndexOf ("title=\"User:");  	}  	if (Start > 0) {  		string DescriptionText = result.Substring (Start);  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  	}  	else {  		Start = result.IndexOf ("licensetpl_short");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start);  			Start = DescriptionText.IndexOf (">");  			if (Start > 0) {  				DescriptionText = DescriptionText.Substring (Start + 1);  				End = DescriptionText.IndexOf ("<");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "License:" + DescriptionText;  				}  			}  		}  		else {  			Start = result.IndexOf ("Author =");  			if (Start > 0) {  				string DescriptionText = result.Substring (Start + 8);  				End = DescriptionText.IndexOf ("==");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  				}  			}  			else {  				Start = result.IndexOf ("Universal Authority File");  				if (Start > 0) {  					string DescriptionText = result.Substring (Start + 8);  					End = DescriptionText.IndexOf ("==");  					if (End > 0) {  						DescriptionText = DescriptionText.Substring (0' End);  						return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  					}  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (End > 0) {  	DescriptionText = DescriptionText.Substring (0' End);  	Start = DescriptionText.IndexOf ("href=");  	if ((Start > 0) && (Start < End)) {  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  			}  		}  		return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  	}  	else {  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			int User = DescriptionText.ToLower ().IndexOf ("[[user:");  			if (User > 0) {  				DescriptionText = DescriptionText.Substring (User + 7);  				End = DescriptionText.IndexOf ("]]");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  				End = DescriptionText.IndexOf ("|");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  				return "Author:" + DescriptionText + Result;  			}  			else {  				return DescriptionText + Result;  			}  		}  		else {  			DescriptionText = DescriptionText.Substring (0' 20);  			return DescriptionText + Result;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (End > 0) {  	DescriptionText = DescriptionText.Substring (0' End);  	Start = DescriptionText.IndexOf ("href=");  	if ((Start > 0) && (Start < End)) {  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  			}  		}  		return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  	}  	else {  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			int User = DescriptionText.ToLower ().IndexOf ("[[user:");  			if (User > 0) {  				DescriptionText = DescriptionText.Substring (User + 7);  				End = DescriptionText.IndexOf ("]]");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  				End = DescriptionText.IndexOf ("|");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  				}  				return "Author:" + DescriptionText + Result;  			}  			else {  				return DescriptionText + Result;  			}  		}  		else {  			DescriptionText = DescriptionText.Substring (0' 20);  			return DescriptionText + Result;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if ((Start > 0) && (Start < End)) {  	Start = DescriptionText.IndexOf (">");  	if (Start > 0) {  		DescriptionText = DescriptionText.Substring (Start + 1);  		End = DescriptionText.IndexOf ("<");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  		}  	}  	return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  }  else {  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		int User = DescriptionText.ToLower ().IndexOf ("[[user:");  		if (User > 0) {  			DescriptionText = DescriptionText.Substring (User + 7);  			End = DescriptionText.IndexOf ("]]");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  			}  			End = DescriptionText.IndexOf ("|");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  			}  			return "Author:" + DescriptionText + Result;  		}  		else {  			return DescriptionText + Result;  		}  	}  	else {  		DescriptionText = DescriptionText.Substring (0' 20);  		return DescriptionText + Result;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if ((Start > 0) && (Start < End)) {  	Start = DescriptionText.IndexOf (">");  	if (Start > 0) {  		DescriptionText = DescriptionText.Substring (Start + 1);  		End = DescriptionText.IndexOf ("<");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  		}  	}  	return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  }  else {  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		int User = DescriptionText.ToLower ().IndexOf ("[[user:");  		if (User > 0) {  			DescriptionText = DescriptionText.Substring (User + 7);  			End = DescriptionText.IndexOf ("]]");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  			}  			End = DescriptionText.IndexOf ("|");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  			}  			return "Author:" + DescriptionText + Result;  		}  		else {  			return DescriptionText + Result;  		}  	}  	else {  		DescriptionText = DescriptionText.Substring (0' 20);  		return DescriptionText + Result;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (End > 0) {  	DescriptionText = DescriptionText.Substring (0' End);  	int User = DescriptionText.ToLower ().IndexOf ("[[user:");  	if (User > 0) {  		DescriptionText = DescriptionText.Substring (User + 7);  		End = DescriptionText.IndexOf ("]]");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  		}  		End = DescriptionText.IndexOf ("|");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  		}  		return "Author:" + DescriptionText + Result;  	}  	else {  		return DescriptionText + Result;  	}  }  else {  	DescriptionText = DescriptionText.Substring (0' 20);  	return DescriptionText + Result;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (End > 0) {  	DescriptionText = DescriptionText.Substring (0' End);  	int User = DescriptionText.ToLower ().IndexOf ("[[user:");  	if (User > 0) {  		DescriptionText = DescriptionText.Substring (User + 7);  		End = DescriptionText.IndexOf ("]]");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  		}  		End = DescriptionText.IndexOf ("|");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  		}  		return "Author:" + DescriptionText + Result;  	}  	else {  		return DescriptionText + Result;  	}  }  else {  	DescriptionText = DescriptionText.Substring (0' 20);  	return DescriptionText + Result;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (User > 0) {  	DescriptionText = DescriptionText.Substring (User + 7);  	End = DescriptionText.IndexOf ("]]");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  	}  	End = DescriptionText.IndexOf ("|");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  	}  	return "Author:" + DescriptionText + Result;  }  else {  	return DescriptionText + Result;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: DescriptionText = DescriptionText.Substring (User + 7);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: DescriptionText = DescriptionText.Substring (0' 20);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	Start = DescriptionText.IndexOf (">");  	if (Start > 0) {  		DescriptionText = DescriptionText.Substring (Start + 1);  		End = DescriptionText.IndexOf ("<");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  	}  }  else {  	Start = result.IndexOf ("licensetpl_short");  	if (Start > 0) {  		string DescriptionText = result.Substring (Start);  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "License:" + DescriptionText;  			}  		}  	}  	else {  		Start = result.IndexOf ("Author =");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start + 8);  			End = DescriptionText.IndexOf ("==");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  		else {  			Start = result.IndexOf ("Universal Authority File");  			if (Start > 0) {  				string DescriptionText = result.Substring (Start + 8);  				End = DescriptionText.IndexOf ("==");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	Start = DescriptionText.IndexOf (">");  	if (Start > 0) {  		DescriptionText = DescriptionText.Substring (Start + 1);  		End = DescriptionText.IndexOf ("<");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  	}  }  else {  	Start = result.IndexOf ("licensetpl_short");  	if (Start > 0) {  		string DescriptionText = result.Substring (Start);  		Start = DescriptionText.IndexOf (">");  		if (Start > 0) {  			DescriptionText = DescriptionText.Substring (Start + 1);  			End = DescriptionText.IndexOf ("<");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "License:" + DescriptionText;  			}  		}  	}  	else {  		Start = result.IndexOf ("Author =");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start + 8);  			End = DescriptionText.IndexOf ("==");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  		else {  			Start = result.IndexOf ("Universal Authority File");  			if (Start > 0) {  				string DescriptionText = result.Substring (Start + 8);  				End = DescriptionText.IndexOf ("==");  				if (End > 0) {  					DescriptionText = DescriptionText.Substring (0' End);  					return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  				}  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	Start = DescriptionText.IndexOf (">");  	if (Start > 0) {  		DescriptionText = DescriptionText.Substring (Start + 1);  		End = DescriptionText.IndexOf ("<");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "License:" + DescriptionText;  		}  	}  }  else {  	Start = result.IndexOf ("Author =");  	if (Start > 0) {  		string DescriptionText = result.Substring (Start + 8);  		End = DescriptionText.IndexOf ("==");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  	}  	else {  		Start = result.IndexOf ("Universal Authority File");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start + 8);  			End = DescriptionText.IndexOf ("==");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start);  	Start = DescriptionText.IndexOf (">");  	if (Start > 0) {  		DescriptionText = DescriptionText.Substring (Start + 1);  		End = DescriptionText.IndexOf ("<");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "License:" + DescriptionText;  		}  	}  }  else {  	Start = result.IndexOf ("Author =");  	if (Start > 0) {  		string DescriptionText = result.Substring (Start + 8);  		End = DescriptionText.IndexOf ("==");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  	}  	else {  		Start = result.IndexOf ("Universal Authority File");  		if (Start > 0) {  			string DescriptionText = result.Substring (Start + 8);  			End = DescriptionText.IndexOf ("==");  			if (End > 0) {  				DescriptionText = DescriptionText.Substring (0' End);  				return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  			}  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start + 8);  	End = DescriptionText.IndexOf ("==");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  	}  }  else {  	Start = result.IndexOf ("Universal Authority File");  	if (Start > 0) {  		string DescriptionText = result.Substring (Start + 8);  		End = DescriptionText.IndexOf ("==");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start + 8);  	End = DescriptionText.IndexOf ("==");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  	}  }  else {  	Start = result.IndexOf ("Universal Authority File");  	if (Start > 0) {  		string DescriptionText = result.Substring (Start + 8);  		End = DescriptionText.IndexOf ("==");  		if (End > 0) {  			DescriptionText = DescriptionText.Substring (0' End);  			return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetImageDescription,The following statement contains a magic number: if (Start > 0) {  	string DescriptionText = result.Substring (Start + 8);  	End = DescriptionText.IndexOf ("==");  	if (End > 0) {  		DescriptionText = DescriptionText.Substring (0' End);  		return "Author:" + RemoveUser (App.DecodeText (DescriptionText)) + Result;  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveUser,The following statement contains a magic number: if (Author >= 0) {  	AuthorText = AuthorText.Substring (Author + 7);  	int End = AuthorText.ToLower ().IndexOf ("\"");  	if (End > 0) {  		AuthorText = AuthorText.Substring (0' End);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveUser,The following statement contains a magic number: AuthorText = AuthorText.Substring (Author + 7);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveUser,The following statement contains a magic number: if (Pos >= 0) {  	AuthorText = AuthorText.Remove (Pos' 5);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveUser,The following statement contains a magic number: AuthorText = AuthorText.Remove (Pos' 5);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveUser,The following statement contains a magic number: if (Amp > 0) {  	AuthorText = AuthorText.Remove (Amp' 5);  	AuthorText = AuthorText.Insert (Amp' "&");  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveUser,The following statement contains a magic number: AuthorText = AuthorText.Remove (Amp' 5);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CheckImages,The following statement contains a magic number: if (ImagePanel.ActualWidth > 300) {  	double NewHeight = 30;  	Image I1 = ImagePanel.Children [0] as Image;  	if (I1 != null) {  		NewHeight = I1.Height - 5;  	}  	foreach (var item in ImagePanel.Children) {  		Image I = item as Image;  		if (I != null) {  			I.Height = NewHeight;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CheckImages,The following statement contains a magic number: if (ImagePanel.ActualWidth > 300) {  	double NewHeight = 30;  	Image I1 = ImagePanel.Children [0] as Image;  	if (I1 != null) {  		NewHeight = I1.Height - 5;  	}  	foreach (var item in ImagePanel.Children) {  		Image I = item as Image;  		if (I != null) {  			I.Height = NewHeight;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CheckImages,The following statement contains a magic number: if (ImagePanel.ActualWidth > 300) {  	double NewHeight = 30;  	Image I1 = ImagePanel.Children [0] as Image;  	if (I1 != null) {  		NewHeight = I1.Height - 5;  	}  	foreach (var item in ImagePanel.Children) {  		Image I = item as Image;  		if (I != null) {  			I.Height = NewHeight;  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CheckImages,The following statement contains a magic number: if (I1 != null) {  	NewHeight = I1.Height - 5;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,CheckImages,The following statement contains a magic number: NewHeight = I1.Height - 5;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,InfoImage_TouchDown,The following statement contains a magic number: if (BigImageText.Text.Length > 45) {  	BigImageText.Text = BigImageText.Text.Substring (0' 45) + "...";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,InfoImage_TouchDown,The following statement contains a magic number: if (BigImageText.Text.Length > 45) {  	BigImageText.Text = BigImageText.Text.Substring (0' 45) + "...";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,InfoImage_TouchDown,The following statement contains a magic number: BigImageText.Text = BigImageText.Text.Substring (0' 45) + "...";  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FindImageUrl,The following statement contains a magic number: if (FullImageClassPos > 0) {  	ImageUrl = result.Substring (FullImageClassPos);  	int HrefPos = ImageUrl.IndexOf ("<a href=\"");  	if (HrefPos > 0) {  		ImageUrl = ImageUrl.Substring (HrefPos + 9);  		int EndLinkPos = ImageUrl.IndexOf ("\"");  		if (EndLinkPos > 0) {  			ImageUrl = "http:" + ImageUrl.Substring (0' EndLinkPos);  		}  		else {  			ImageUrl = "";  		}  	}  	else {  		ImageUrl = "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FindImageUrl,The following statement contains a magic number: if (HrefPos > 0) {  	ImageUrl = ImageUrl.Substring (HrefPos + 9);  	int EndLinkPos = ImageUrl.IndexOf ("\"");  	if (EndLinkPos > 0) {  		ImageUrl = "http:" + ImageUrl.Substring (0' EndLinkPos);  	}  	else {  		ImageUrl = "";  	}  }  else {  	ImageUrl = "";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FindImageUrl,The following statement contains a magic number: ImageUrl = ImageUrl.Substring (HrefPos + 9);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text != null) {  	while (Text.Length > 0) {  		if (Text.StartsWith ("'''")) {  			// Title  			int EndOfTitle = Text.Substring (3).IndexOf ("'''");  			if (EndOfTitle > 0) {  				Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  				Text = Text.Substring (EndOfTitle + 6);  			}  			else {  				Text = Text.Substring (3);  			}  		}  		else if (Text.StartsWith ("{{lang")) {  			// LanguageRef  			int EndOfLanguageRef = Text.IndexOf ("}}");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfLanguageRef + 2);  		}  		else if (Text.StartsWith ("<!--")) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("<sup>")) {  			Text = Text.Substring (5);  			int EndOfSup = Text.IndexOf ("</sup>");  			if (EndOfSup > 0) {  				string Sup = Text.Substring (0' EndOfSup);  				switch (Sup) {  				case "2":  					Result += "²";  					break;  				case "3":  					Result += "³";  					break;  				default:  					Result += Sup;  					break;  				}  				Text = Text.Substring (EndOfSup + 6);  			}  			else {  				Text = "";  			}  		}  		else if (Text.IndexOf ("-->") >= 0) {  			int EndOfComment = Text.IndexOf ("-->");  			if (EndOfComment > 0) {  				Text = Text.Substring (EndOfComment + 3);  			}  			else {  				Text = "";  			}  		}  		else if (Text.StartsWith ("]]")) {  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("([[")) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			Text = Text.Substring (EndOfParentes + 1);  		}  		else if (Text.StartsWith ("(") && (!AllowParentesis)) {  			// LanguageRef  			int EndOfParentes = Text.IndexOf (")");  			//Result += Text.Substring(2' EndOfLanguageRef);  			if (EndOfParentes > 0) {  				Text = Text.Substring (EndOfParentes + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("\\u")) {  			string CodedChar = Text.Substring (0' 6);  			Result += App.DecodeChar (CodedChar);  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("[[Datei")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("[[")) {  			// Link  			int EndOfLink = Text.IndexOf ("]]");  			if (EndOfLink >= 0) {  				int MiddleOfLink = Text.IndexOf ("|");  				if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  					Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  				}  				else {  					Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  				}  				Text = Text.Substring (EndOfLink + 2);  			}  			else {  				Text = Text.Substring (2);  			}  		}  		else if (Text.StartsWith ("<ref")) {  			// Referense  			int EndOfRef = Text.IndexOf ("</ref>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 6);  			}  			else {  				EndOfRef = Text.IndexOf ("/>");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = "";  				}  			}  			//Result += Text.Substring(2' EndOfRef - 2);  		}  		else if (Text.StartsWith ("[{{")) {  			// Referense  			int EndOf = Text.IndexOf ("}}]");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 3);  			}  			else {  				EndOf = Text.IndexOf ("}");  				if (EndOf >= 0) {  					Text = Text.Substring (EndOf + 1);  				}  				else {  					Text = Text.Substring (3);  				}  			}  		}  		else if (Text.StartsWith ("==")) {  			Text = "";  		}  		else if (Text.StartsWith ("{{3e}}")) {  			Result += "3:e";  			Text = Text.Substring (6);  		}  		else if (Text.StartsWith ("{{formatnum:")) {  			// Referense  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Num = Text.Substring (12' EndOfRef - 12);  				if (Num.IndexOf ("{{") < 0) {  					Result += Num;  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  				}  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else if (Text.StartsWith ("{{JULGREGDATUM")) {  			Text = Text.Substring (15);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if (Text.StartsWith ("{{Date")) {  			Text = Text.Substring (6);  			int EndOfRef = Text.IndexOf ("}}");  			string Date = Text.Substring (0' EndOfRef);  			string[] DateParts = Date.Split ('|');  			Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  			Text = Text.Substring (EndOfRef + 2);  		}  		else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  			Text = Text.Substring (10);  			int EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				string Convert = Text.Substring (0' EndOfRef);  				if (!Convert.StartsWith ("{{")) {  					string[] ConvertParts = Convert.Split ('|');  					Result += ConvertParts [0] + " " + ConvertParts [1];  					Text = Text.Substring (EndOfRef + 2);  				}  				else {  					Text = RemoveStuff (Text' "{{"' "}}");  					EndOfRef = Text.IndexOf ("}}");  					if (EndOfRef > 0) {  						Text = Text.Substring (EndOfRef + 2);  					}  				}  			}  		}  		else if (Text.StartsWith ("{{")) {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  		else if (Text.StartsWith ("\\\"")) {  			Result += "\"";  			Text = Text.Substring (2);  		}  		else if (Text.StartsWith ("{")) {  			int EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (1);  			}  		}  		else if (Text.StartsWith ("}")) {  			Text = Text.Substring (1);  		}  		else if (Text.StartsWith ("&nbsp;")) {  			Result += " ";  			Text = Text.Substring (6);  		}  		else {  			Result += Text.Substring (0' 1);  			Text = Text.Substring (1);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: while (Text.Length > 0) {  	if (Text.StartsWith ("'''")) {  		// Title  		int EndOfTitle = Text.Substring (3).IndexOf ("'''");  		if (EndOfTitle > 0) {  			Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  			Text = Text.Substring (EndOfTitle + 6);  		}  		else {  			Text = Text.Substring (3);  		}  	}  	else if (Text.StartsWith ("{{lang")) {  		// LanguageRef  		int EndOfLanguageRef = Text.IndexOf ("}}");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfLanguageRef + 2);  	}  	else if (Text.StartsWith ("<!--")) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("<sup>")) {  		Text = Text.Substring (5);  		int EndOfSup = Text.IndexOf ("</sup>");  		if (EndOfSup > 0) {  			string Sup = Text.Substring (0' EndOfSup);  			switch (Sup) {  			case "2":  				Result += "²";  				break;  			case "3":  				Result += "³";  				break;  			default:  				Result += Sup;  				break;  			}  			Text = Text.Substring (EndOfSup + 6);  		}  		else {  			Text = "";  		}  	}  	else if (Text.IndexOf ("-->") >= 0) {  		int EndOfComment = Text.IndexOf ("-->");  		if (EndOfComment > 0) {  			Text = Text.Substring (EndOfComment + 3);  		}  		else {  			Text = "";  		}  	}  	else if (Text.StartsWith ("]]")) {  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("([[")) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		Text = Text.Substring (EndOfParentes + 1);  	}  	else if (Text.StartsWith ("(") && (!AllowParentesis)) {  		// LanguageRef  		int EndOfParentes = Text.IndexOf (")");  		//Result += Text.Substring(2' EndOfLanguageRef);  		if (EndOfParentes > 0) {  			Text = Text.Substring (EndOfParentes + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("\\u")) {  		string CodedChar = Text.Substring (0' 6);  		Result += App.DecodeChar (CodedChar);  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("[[Datei")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("[[")) {  		// Link  		int EndOfLink = Text.IndexOf ("]]");  		if (EndOfLink >= 0) {  			int MiddleOfLink = Text.IndexOf ("|");  			if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  				Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  			}  			else {  				Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  			}  			Text = Text.Substring (EndOfLink + 2);  		}  		else {  			Text = Text.Substring (2);  		}  	}  	else if (Text.StartsWith ("<ref")) {  		// Referense  		int EndOfRef = Text.IndexOf ("</ref>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 6);  		}  		else {  			EndOfRef = Text.IndexOf ("/>");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = "";  			}  		}  		//Result += Text.Substring(2' EndOfRef - 2);  	}  	else if (Text.StartsWith ("[{{")) {  		// Referense  		int EndOf = Text.IndexOf ("}}]");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 3);  		}  		else {  			EndOf = Text.IndexOf ("}");  			if (EndOf >= 0) {  				Text = Text.Substring (EndOf + 1);  			}  			else {  				Text = Text.Substring (3);  			}  		}  	}  	else if (Text.StartsWith ("==")) {  		Text = "";  	}  	else if (Text.StartsWith ("{{3e}}")) {  		Result += "3:e";  		Text = Text.Substring (6);  	}  	else if (Text.StartsWith ("{{formatnum:")) {  		// Referense  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Num = Text.Substring (12' EndOfRef - 12);  			if (Num.IndexOf ("{{") < 0) {  				Result += Num;  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  			}  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else if (Text.StartsWith ("{{JULGREGDATUM")) {  		Text = Text.Substring (15);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if (Text.StartsWith ("{{Date")) {  		Text = Text.Substring (6);  		int EndOfRef = Text.IndexOf ("}}");  		string Date = Text.Substring (0' EndOfRef);  		string[] DateParts = Date.Split ('|');  		Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  		Text = Text.Substring (EndOfRef + 2);  	}  	else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  		Text = Text.Substring (10);  		int EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			string Convert = Text.Substring (0' EndOfRef);  			if (!Convert.StartsWith ("{{")) {  				string[] ConvertParts = Convert.Split ('|');  				Result += ConvertParts [0] + " " + ConvertParts [1];  				Text = Text.Substring (EndOfRef + 2);  			}  			else {  				Text = RemoveStuff (Text' "{{"' "}}");  				EndOfRef = Text.IndexOf ("}}");  				if (EndOfRef > 0) {  					Text = Text.Substring (EndOfRef + 2);  				}  			}  		}  	}  	else if (Text.StartsWith ("{{")) {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  	else if (Text.StartsWith ("\\\"")) {  		Result += "\"";  		Text = Text.Substring (2);  	}  	else if (Text.StartsWith ("{")) {  		int EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (1);  		}  	}  	else if (Text.StartsWith ("}")) {  		Text = Text.Substring (1);  	}  	else if (Text.StartsWith ("&nbsp;")) {  		Result += " ";  		Text = Text.Substring (6);  	}  	else {  		Result += Text.Substring (0' 1);  		Text = Text.Substring (1);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("'''")) {  	// Title  	int EndOfTitle = Text.Substring (3).IndexOf ("'''");  	if (EndOfTitle > 0) {  		Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  		Text = Text.Substring (EndOfTitle + 6);  	}  	else {  		Text = Text.Substring (3);  	}  }  else if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfTitle > 0) {  	Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  	Text = Text.Substring (EndOfTitle + 6);  }  else {  	Text = Text.Substring (3);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfTitle > 0) {  	Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  	Text = Text.Substring (EndOfTitle + 6);  }  else {  	Text = Text.Substring (3);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfTitle > 0) {  	Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  	Text = Text.Substring (EndOfTitle + 6);  }  else {  	Text = Text.Substring (3);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += MakeTextPretty (Text.Substring (3' EndOfTitle)' false);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfTitle + 6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (3);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{lang")) {  	// LanguageRef  	int EndOfLanguageRef = Text.IndexOf ("}}");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfLanguageRef + 2);  }  else if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfLanguageRef + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<!--")) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfComment > 0) {  	Text = Text.Substring (EndOfComment + 3);  }  else {  	Text = "";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfComment + 3);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<sup>")) {  	Text = Text.Substring (5);  	int EndOfSup = Text.IndexOf ("</sup>");  	if (EndOfSup > 0) {  		string Sup = Text.Substring (0' EndOfSup);  		switch (Sup) {  		case "2":  			Result += "²";  			break;  		case "3":  			Result += "³";  			break;  		default:  			Result += Sup;  			break;  		}  		Text = Text.Substring (EndOfSup + 6);  	}  	else {  		Text = "";  	}  }  else if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (5);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfSup > 0) {  	string Sup = Text.Substring (0' EndOfSup);  	switch (Sup) {  	case "2":  		Result += "²";  		break;  	case "3":  		Result += "³";  		break;  	default:  		Result += Sup;  		break;  	}  	Text = Text.Substring (EndOfSup + 6);  }  else {  	Text = "";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfSup + 6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.IndexOf ("-->") >= 0) {  	int EndOfComment = Text.IndexOf ("-->");  	if (EndOfComment > 0) {  		Text = Text.Substring (EndOfComment + 3);  	}  	else {  		Text = "";  	}  }  else if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfComment > 0) {  	Text = Text.Substring (EndOfComment + 3);  }  else {  	Text = "";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfComment + 3);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("]]")) {  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("([[")) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	Text = Text.Substring (EndOfParentes + 1);  }  else if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("(") && (!AllowParentesis)) {  	// LanguageRef  	int EndOfParentes = Text.IndexOf (")");  	//Result += Text.Substring(2' EndOfLanguageRef);  	if (EndOfParentes > 0) {  		Text = Text.Substring (EndOfParentes + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\u")) {  	string CodedChar = Text.Substring (0' 6);  	Result += App.DecodeChar (CodedChar);  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[Datei")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfLink >= 0) {  	Text = Text.Substring (EndOfLink + 2);  }  else {  	Text = Text.Substring (2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfLink >= 0) {  	Text = Text.Substring (EndOfLink + 2);  }  else {  	Text = Text.Substring (2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfLink + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[[")) {  	// Link  	int EndOfLink = Text.IndexOf ("]]");  	if (EndOfLink >= 0) {  		int MiddleOfLink = Text.IndexOf ("|");  		if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  			Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  		}  		else {  			Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  		}  		Text = Text.Substring (EndOfLink + 2);  	}  	else {  		Text = Text.Substring (2);  	}  }  else if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfLink >= 0) {  	int MiddleOfLink = Text.IndexOf ("|");  	if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  		Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  	}  	else {  		Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  	}  	Text = Text.Substring (EndOfLink + 2);  }  else {  	Text = Text.Substring (2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfLink >= 0) {  	int MiddleOfLink = Text.IndexOf ("|");  	if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  		Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  	}  	else {  		Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  	}  	Text = Text.Substring (EndOfLink + 2);  }  else {  	Text = Text.Substring (2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfLink >= 0) {  	int MiddleOfLink = Text.IndexOf ("|");  	if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  		Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  	}  	else {  		Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  	}  	Text = Text.Substring (EndOfLink + 2);  }  else {  	Text = Text.Substring (2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfLink >= 0) {  	int MiddleOfLink = Text.IndexOf ("|");  	if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  		Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  	}  	else {  		Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  	}  	Text = Text.Substring (EndOfLink + 2);  }  else {  	Text = Text.Substring (2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  	Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  }  else {  	Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if ((MiddleOfLink > 0) && (MiddleOfLink < EndOfLink)) {  	Result += MakeTextPretty (Text.Substring (MiddleOfLink + 1' EndOfLink - MiddleOfLink - 1)' false);  }  else {  	Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += MakeTextPretty (Text.Substring (2' EndOfLink - 2)' false);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfLink + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("<ref")) {  	// Referense  	int EndOfRef = Text.IndexOf ("</ref>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 6);  	}  	else {  		EndOfRef = Text.IndexOf ("/>");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = "";  		}  	}  	//Result += Text.Substring(2' EndOfRef - 2);  }  else if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	Text = Text.Substring (EndOfRef + 6);  }  else {  	EndOfRef = Text.IndexOf ("/>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 2);  	}  	else {  		Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	Text = Text.Substring (EndOfRef + 6);  }  else {  	EndOfRef = Text.IndexOf ("/>");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 2);  	}  	else {  		Text = "";  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfRef + 6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	Text = Text.Substring (EndOfRef + 2);  }  else {  	Text = "";  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfRef + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("[{{")) {  	// Referense  	int EndOf = Text.IndexOf ("}}]");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 3);  	}  	else {  		EndOf = Text.IndexOf ("}");  		if (EndOf >= 0) {  			Text = Text.Substring (EndOf + 1);  		}  		else {  			Text = Text.Substring (3);  		}  	}  }  else if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOf >= 0) {  	Text = Text.Substring (EndOf + 3);  }  else {  	EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (3);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOf >= 0) {  	Text = Text.Substring (EndOf + 3);  }  else {  	EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (3);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOf + 3);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOf >= 0) {  	Text = Text.Substring (EndOf + 1);  }  else {  	Text = Text.Substring (3);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (3);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("==")) {  	Text = "";  }  else if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{3e}}")) {  	Result += "3:e";  	Text = Text.Substring (6);  }  else if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{formatnum:")) {  	// Referense  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Num = Text.Substring (12' EndOfRef - 12);  		if (Num.IndexOf ("{{") < 0) {  			Result += Num;  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  		}  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	string Num = Text.Substring (12' EndOfRef - 12);  	if (Num.IndexOf ("{{") < 0) {  		Result += Num;  		Text = Text.Substring (EndOfRef + 2);  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else {  	Text = RemoveStuff (Text' "{{"' "}}");  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	string Num = Text.Substring (12' EndOfRef - 12);  	if (Num.IndexOf ("{{") < 0) {  		Result += Num;  		Text = Text.Substring (EndOfRef + 2);  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else {  	Text = RemoveStuff (Text' "{{"' "}}");  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	string Num = Text.Substring (12' EndOfRef - 12);  	if (Num.IndexOf ("{{") < 0) {  		Result += Num;  		Text = Text.Substring (EndOfRef + 2);  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  	}  }  else {  	Text = RemoveStuff (Text' "{{"' "}}");  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Num.IndexOf ("{{") < 0) {  	Result += Num;  	Text = Text.Substring (EndOfRef + 2);  }  else {  	Text = RemoveStuff (Text' "{{"' "}}");  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfRef + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{JULGREGDATUM")) {  	Text = Text.Substring (15);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (15);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += DateParts [2] + "-" + DateParts [0].PadLeft (1' '0') + "-" + DateParts [1].PadLeft (2' '0');  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfRef + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{Date")) {  	Text = Text.Substring (6);  	int EndOfRef = Text.IndexOf ("}}");  	string Date = Text.Substring (0' EndOfRef);  	string[] DateParts = Date.Split ('|');  	Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  	Text = Text.Substring (EndOfRef + 2);  }  else if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Result += DateParts [3] + "-" + DateParts [1].PadLeft (2' '0') + "-" + DateParts [2].PadLeft (2' '0');  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfRef + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if ((Text.StartsWith ("{{convert")) || (Text.StartsWith ("{{Convert"))) {  	Text = Text.Substring (10);  	int EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		string Convert = Text.Substring (0' EndOfRef);  		if (!Convert.StartsWith ("{{")) {  			string[] ConvertParts = Convert.Split ('|');  			Result += ConvertParts [0] + " " + ConvertParts [1];  			Text = Text.Substring (EndOfRef + 2);  		}  		else {  			Text = RemoveStuff (Text' "{{"' "}}");  			EndOfRef = Text.IndexOf ("}}");  			if (EndOfRef > 0) {  				Text = Text.Substring (EndOfRef + 2);  			}  		}  	}  }  else if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (10);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	string Convert = Text.Substring (0' EndOfRef);  	if (!Convert.StartsWith ("{{")) {  		string[] ConvertParts = Convert.Split ('|');  		Result += ConvertParts [0] + " " + ConvertParts [1];  		Text = Text.Substring (EndOfRef + 2);  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  		EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	string Convert = Text.Substring (0' EndOfRef);  	if (!Convert.StartsWith ("{{")) {  		string[] ConvertParts = Convert.Split ('|');  		Result += ConvertParts [0] + " " + ConvertParts [1];  		Text = Text.Substring (EndOfRef + 2);  	}  	else {  		Text = RemoveStuff (Text' "{{"' "}}");  		EndOfRef = Text.IndexOf ("}}");  		if (EndOfRef > 0) {  			Text = Text.Substring (EndOfRef + 2);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (!Convert.StartsWith ("{{")) {  	string[] ConvertParts = Convert.Split ('|');  	Result += ConvertParts [0] + " " + ConvertParts [1];  	Text = Text.Substring (EndOfRef + 2);  }  else {  	Text = RemoveStuff (Text' "{{"' "}}");  	EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 2);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (!Convert.StartsWith ("{{")) {  	string[] ConvertParts = Convert.Split ('|');  	Result += ConvertParts [0] + " " + ConvertParts [1];  	Text = Text.Substring (EndOfRef + 2);  }  else {  	Text = RemoveStuff (Text' "{{"' "}}");  	EndOfRef = Text.IndexOf ("}}");  	if (EndOfRef > 0) {  		Text = Text.Substring (EndOfRef + 2);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfRef + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (EndOfRef > 0) {  	Text = Text.Substring (EndOfRef + 2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (EndOfRef + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{{")) {  	Text = RemoveStuff (Text' "{{"' "}}");  }  else if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("\\\"")) {  	Result += "\"";  	Text = Text.Substring (2);  }  else if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("{")) {  	int EndOf = Text.IndexOf ("}");  	if (EndOf >= 0) {  		Text = Text.Substring (EndOf + 1);  	}  	else {  		Text = Text.Substring (1);  	}  }  else if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("}")) {  	Text = Text.Substring (1);  }  else if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: if (Text.StartsWith ("&nbsp;")) {  	Result += " ";  	Text = Text.Substring (6);  }  else {  	Result += Text.Substring (0' 1);  	Text = Text.Substring (1);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,MakeTextPretty,The following statement contains a magic number: Text = Text.Substring (6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (StartInt >= 0) {  	Data = Data.Substring (StartInt + 2);  	int EndInt = Data.IndexOf (End);  	if (EndInt > 0) {  		if (Data.IndexOf (Start) < EndInt) {  			Data = RemoveStuff (Data' Start' End);  			EndInt = Data.IndexOf (End);  			if (EndInt >= 0) {  				Data = Data.Substring (EndInt + 2);  			}  		}  		else {  			Data = Data.Substring (EndInt + 2);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (StartInt >= 0) {  	Data = Data.Substring (StartInt + 2);  	int EndInt = Data.IndexOf (End);  	if (EndInt > 0) {  		if (Data.IndexOf (Start) < EndInt) {  			Data = RemoveStuff (Data' Start' End);  			EndInt = Data.IndexOf (End);  			if (EndInt >= 0) {  				Data = Data.Substring (EndInt + 2);  			}  		}  		else {  			Data = Data.Substring (EndInt + 2);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (StartInt >= 0) {  	Data = Data.Substring (StartInt + 2);  	int EndInt = Data.IndexOf (End);  	if (EndInt > 0) {  		if (Data.IndexOf (Start) < EndInt) {  			Data = RemoveStuff (Data' Start' End);  			EndInt = Data.IndexOf (End);  			if (EndInt >= 0) {  				Data = Data.Substring (EndInt + 2);  			}  		}  		else {  			Data = Data.Substring (EndInt + 2);  		}  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: Data = Data.Substring (StartInt + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (EndInt > 0) {  	if (Data.IndexOf (Start) < EndInt) {  		Data = RemoveStuff (Data' Start' End);  		EndInt = Data.IndexOf (End);  		if (EndInt >= 0) {  			Data = Data.Substring (EndInt + 2);  		}  	}  	else {  		Data = Data.Substring (EndInt + 2);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (EndInt > 0) {  	if (Data.IndexOf (Start) < EndInt) {  		Data = RemoveStuff (Data' Start' End);  		EndInt = Data.IndexOf (End);  		if (EndInt >= 0) {  			Data = Data.Substring (EndInt + 2);  		}  	}  	else {  		Data = Data.Substring (EndInt + 2);  	}  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (Data.IndexOf (Start) < EndInt) {  	Data = RemoveStuff (Data' Start' End);  	EndInt = Data.IndexOf (End);  	if (EndInt >= 0) {  		Data = Data.Substring (EndInt + 2);  	}  }  else {  	Data = Data.Substring (EndInt + 2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (Data.IndexOf (Start) < EndInt) {  	Data = RemoveStuff (Data' Start' End);  	EndInt = Data.IndexOf (End);  	if (EndInt >= 0) {  		Data = Data.Substring (EndInt + 2);  	}  }  else {  	Data = Data.Substring (EndInt + 2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: if (EndInt >= 0) {  	Data = Data.Substring (EndInt + 2);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: Data = Data.Substring (EndInt + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,RemoveStuff,The following statement contains a magic number: Data = Data.Substring (EndInt + 2);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,StartTimer,The following statement contains a magic number: ScreenSaverTimer = new DoubleAnimation (1' 1' new Duration (TimeSpan.FromSeconds (3)));  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetLanguageList,The following statement contains a magic number: while (NextLanguagePosition > 0) {  	JsonText = JsonText.Substring (NextLanguagePosition + 6);  	WikipediaLanguageLink Language = ParseLanguage (JsonText);  	LinkList.Add (Language);  	NextLanguagePosition = JsonText.IndexOf ("lang=\"");  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,GetLanguageList,The following statement contains a magic number: JsonText = JsonText.Substring (NextLanguagePosition + 6);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: if (BackTurned) {  	BackTurned = false;  	FirstPageGrid.Visibility = Visibility.Visible;  	SecondPageImageGrid.Visibility = Visibility.Hidden;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;  	ImagePanel.Margin = new Thickness (40' 0' 40' 40);  }  else {  	BackTurned = true;  	FirstPageGrid.Visibility = Visibility.Hidden;  	SecondPageImageGrid.Visibility = Visibility.Visible;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	ImagePanel.Margin = new Thickness (20' 50' 20' 0);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: if (BackTurned) {  	BackTurned = false;  	FirstPageGrid.Visibility = Visibility.Visible;  	SecondPageImageGrid.Visibility = Visibility.Hidden;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;  	ImagePanel.Margin = new Thickness (40' 0' 40' 40);  }  else {  	BackTurned = true;  	FirstPageGrid.Visibility = Visibility.Hidden;  	SecondPageImageGrid.Visibility = Visibility.Visible;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	ImagePanel.Margin = new Thickness (20' 50' 20' 0);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: if (BackTurned) {  	BackTurned = false;  	FirstPageGrid.Visibility = Visibility.Visible;  	SecondPageImageGrid.Visibility = Visibility.Hidden;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;  	ImagePanel.Margin = new Thickness (40' 0' 40' 40);  }  else {  	BackTurned = true;  	FirstPageGrid.Visibility = Visibility.Hidden;  	SecondPageImageGrid.Visibility = Visibility.Visible;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	ImagePanel.Margin = new Thickness (20' 50' 20' 0);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: if (BackTurned) {  	BackTurned = false;  	FirstPageGrid.Visibility = Visibility.Visible;  	SecondPageImageGrid.Visibility = Visibility.Hidden;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;  	ImagePanel.Margin = new Thickness (40' 0' 40' 40);  }  else {  	BackTurned = true;  	FirstPageGrid.Visibility = Visibility.Hidden;  	SecondPageImageGrid.Visibility = Visibility.Visible;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	ImagePanel.Margin = new Thickness (20' 50' 20' 0);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: if (BackTurned) {  	BackTurned = false;  	FirstPageGrid.Visibility = Visibility.Visible;  	SecondPageImageGrid.Visibility = Visibility.Hidden;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;  	ImagePanel.Margin = new Thickness (40' 0' 40' 40);  }  else {  	BackTurned = true;  	FirstPageGrid.Visibility = Visibility.Hidden;  	SecondPageImageGrid.Visibility = Visibility.Visible;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	ImagePanel.Margin = new Thickness (20' 50' 20' 0);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: if (BackTurned) {  	BackTurned = false;  	FirstPageGrid.Visibility = Visibility.Visible;  	SecondPageImageGrid.Visibility = Visibility.Hidden;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;  	ImagePanel.Margin = new Thickness (40' 0' 40' 40);  }  else {  	BackTurned = true;  	FirstPageGrid.Visibility = Visibility.Hidden;  	SecondPageImageGrid.Visibility = Visibility.Visible;  	SecondPageTextGrid.Visibility = Visibility.Hidden;  	ImagePanel.Visibility = Visibility.Visible;  	ImagePanel.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	ImagePanel.Margin = new Thickness (20' 50' 20' 0);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: ImagePanel.Margin = new Thickness (40' 0' 40' 40);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: ImagePanel.Margin = new Thickness (40' 0' 40' 40);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: ImagePanel.Margin = new Thickness (40' 0' 40' 40);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: ImagePanel.Margin = new Thickness (20' 50' 20' 0);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: ImagePanel.Margin = new Thickness (20' 50' 20' 0);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: ImagePanel.Margin = new Thickness (20' 50' 20' 0);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: Scale.CenterX = 443 / 2;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForImages_Completed,The following statement contains a magic number: Scale.CenterX = 443 / 2;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForText_Completed,The following statement contains a magic number: Scale.CenterX = 443 / 2;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,TurnCardForText_Completed,The following statement contains a magic number: Scale.CenterX = 443 / 2;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	if (Content.FontSize > 17) {  		Content.FontSize = 15;  		App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  	}  	else {  		Content.FontSize = 20;  		App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  	}  	SetFirstPageText ();  	SeconPageText.FontSize = Content.FontSize;  	ShowUpDownArrows ();  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	if (Content.FontSize > 17) {  		Content.FontSize = 15;  		App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  	}  	else {  		Content.FontSize = 20;  		App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  	}  	SetFirstPageText ();  	SeconPageText.FontSize = Content.FontSize;  	ShowUpDownArrows ();  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	if (Content.FontSize > 17) {  		Content.FontSize = 15;  		App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  	}  	else {  		Content.FontSize = 20;  		App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  	}  	SetFirstPageText ();  	SeconPageText.FontSize = Content.FontSize;  	ShowUpDownArrows ();  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (Content.FontSize > 17) {  	Content.FontSize = 15;  	App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  }  else {  	Content.FontSize = 20;  	App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (Content.FontSize > 17) {  	Content.FontSize = 15;  	App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  }  else {  	Content.FontSize = 20;  	App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: if (Content.FontSize > 17) {  	Content.FontSize = 15;  	App.StoreAnalytics ("Map"' "ShowLargeFont"' CurrentLanguage);  }  else {  	Content.FontSize = 20;  	App.StoreAnalytics ("Map"' "ShowSmallFont"' CurrentLanguage);  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: Content.FontSize = 15;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,FontSizeChanger_TouchDown,The following statement contains a magic number: Content.FontSize = 20;  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,UpArrowText_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset - 20);  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,UpArrowText_TouchDown,The following statement contains a magic number: Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset - 20);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,DownArrowText_TouchDown,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	App.LastUserInteraction = DateTime.Now;  	LastUserInteraction = DateTime.Now;  	Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset + 20);  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,DownArrowText_TouchDown,The following statement contains a magic number: Viewer.ScrollToVerticalOffset (Viewer.VerticalOffset + 20);  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: if (Viewer.ScrollableHeight > 0) {  	Canvas.SetTop (ScrollPosition' 30 + 240 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  	if (Viewer.VerticalOffset > 0) {  		UpArrowText.Visibility = Visibility.Visible;  	}  	else {  		UpArrowText.Visibility = Visibility.Hidden;  	}  	if (Viewer.VerticalOffset < Viewer.ScrollableHeight) {  		DownArrowText.Visibility = Visibility.Visible;  	}  	else {  		DownArrowText.Visibility = Visibility.Hidden;  	}  }  else {  	UpArrowText.Visibility = Visibility.Hidden;  	DownArrowText.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: if (Viewer.ScrollableHeight > 0) {  	Canvas.SetTop (ScrollPosition' 30 + 240 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  	if (Viewer.VerticalOffset > 0) {  		UpArrowText.Visibility = Visibility.Visible;  	}  	else {  		UpArrowText.Visibility = Visibility.Hidden;  	}  	if (Viewer.VerticalOffset < Viewer.ScrollableHeight) {  		DownArrowText.Visibility = Visibility.Visible;  	}  	else {  		DownArrowText.Visibility = Visibility.Hidden;  	}  }  else {  	UpArrowText.Visibility = Visibility.Hidden;  	DownArrowText.Visibility = Visibility.Hidden;  }  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: Canvas.SetTop (ScrollPosition' 30 + 240 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  
Magic Number,MeanWhile.UserControls,InfoCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InfoCard.xaml.cs,ShowUpDownArrows,The following statement contains a magic number: Canvas.SetTop (ScrollPosition' 30 + 240 * (Viewer.VerticalOffset / Viewer.ScrollableHeight));  
Magic Number,MeanWhile.UserControls,InformationPushPin,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InformationPushPin.xaml.cs,Grid_TouchUp,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	Point P = this.PointToScreen (e.TouchDevice.GetPosition (null));  	if ((DownScreenPoint != null) && (Math.Abs (P.X - DownScreenPoint.X) < 10) && (Math.Abs (P.Y - DownScreenPoint.Y) < 10)) {  		if (OnTouchDown != null) {  			OnTouchDown (this' null);  		}  		e.Handled = true;  	}  }  
Magic Number,MeanWhile.UserControls,InformationPushPin,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InformationPushPin.xaml.cs,Grid_TouchUp,The following statement contains a magic number: if (e.TouchDevice.GetIsFingerRecognized ()) {  	Point P = this.PointToScreen (e.TouchDevice.GetPosition (null));  	if ((DownScreenPoint != null) && (Math.Abs (P.X - DownScreenPoint.X) < 10) && (Math.Abs (P.Y - DownScreenPoint.Y) < 10)) {  		if (OnTouchDown != null) {  			OnTouchDown (this' null);  		}  		e.Handled = true;  	}  }  
Magic Number,MeanWhile.UserControls,InformationPushPin,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InformationPushPin.xaml.cs,Grid_TouchUp,The following statement contains a magic number: if ((DownScreenPoint != null) && (Math.Abs (P.X - DownScreenPoint.X) < 10) && (Math.Abs (P.Y - DownScreenPoint.Y) < 10)) {  	if (OnTouchDown != null) {  		OnTouchDown (this' null);  	}  	e.Handled = true;  }  
Magic Number,MeanWhile.UserControls,InformationPushPin,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\InformationPushPin.xaml.cs,Grid_TouchUp,The following statement contains a magic number: if ((DownScreenPoint != null) && (Math.Abs (P.X - DownScreenPoint.X) < 10) && (Math.Abs (P.Y - DownScreenPoint.Y) < 10)) {  	if (OnTouchDown != null) {  		OnTouchDown (this' null);  	}  	e.Handled = true;  }  
Missing Default,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,DecodeChar,The following switch statement is missing a default case: switch (CodedChar) {  case "\\u0022":  	return "\"";  case "\\u0023":  	return "#";  case "\\u0024":  	return "$";  case "\\u0025":  	return "%";  case "\\u0026":  	return "&";  case "\\u003c":  	return "<";  case "\\u003e":  	return ">";  case "\\u00a0":  	return " ";  case "\\u00a1":  	return "¡";  case "\\u00a2":  	return "¢";  case "\\u00a3":  	return "£";  case "\\u00a4":  	return "¤";  case "\\u00a5":  	return "¥";  case "\\u00a6":  	return "¦";  case "\\u00a7":  	return "§";  case "\\u00a8":  	return "¨";  case "\\u00a9":  	return "©";  case "\\u00aa":  	return "ª";  case "\\u00ab":  	return "«";  case "\\u00ac":  	return "¬";  case "\\u00ad":  	return "";  // &shy; ­  &#173;   case "\\u00ae":  	return "®";  case "\\u00af":  	return "¯";  case "\\u00b0":  	return "°";  case "\\u00b1":  	return "±";  case "\\u00b2":  	return "²";  case "\\u00b3":  	return "³";  case "\\u00b4":  	return "´";  case "\\u00b5":  	return "µ";  case "\\u00b6":  	return "¶";  case "\\u00b7":  	return "·";  case "\\u00b8":  	return "¸";  case "\\u00b9":  	return "¹";  case "\\u00ba":  	return "º";  case "\\u00bb":  	return "»";  case "\\u00bc":  	return "¼";  case "\\u00bd":  	return "½";  case "\\u00be":  	return "¾";  case "\\u00bf":  	return "¿";  case "\\u00c0":  	return "À";  case "\\u00c1":  	return "Á";  case "\\u00c2":  	return "Â";  case "\\u00c3":  	return "Ã";  case "\\u00c4":  	return "ä";  case "\\u00c5":  	return "å";  case "\\u00c6":  	return "Æ";  case "\\u00c7":  	return "Ç";  case "\\u00c8":  	return "È";  case "\\u00c9":  	return "é";  case "\\u00ca":  	return "Ê";  case "\\u00cb":  	return "Ë";  case "\\u00cc":  	return "Ì";  case "\\u00cd":  	return "Í";  case "\\u00ce":  	return "Î";  case "\\u00cf":  	return "Ï";  case "\\u00d0":  	return "Ð";  case "\\u00d1":  	return "Ñ";  case "\\u00d2":  	return "Ò";  case "\\u00d3":  	return "Ó";  case "\\u00d4":  	return "Ô";  case "\\u00d5":  	return "Õ";  case "\\u00d6":  	return "ö";  case "\\u00d7":  	return "×";  case "\\u00d8":  	return "Ø";  case "\\u00d9":  	return "Ù";  case "\\u00da":  	return "Ú";  case "\\u00db":  	return "Û";  case "\\u00dc":  	return "ü";  case "\\u00de":  	return "Þ";  case "\\u00df":  	return "ß";  case "\\u00e0":  	return "à";  case "\\u00e1":  	return "á";  case "\\u00e2":  	return "â";  case "\\u00e3":  	return "ã";  case "\\u00e4":  	return "ä";  case "\\u00e5":  	return "å";  case "\\u00e6":  	return "æ";  case "\\u00e7":  	return "ç";  case "\\u00e8":  	return "è";  case "\\u00e9":  	return "é";  case "\\u00ea":  	return "ê";  case "\\u00eb":  	return "ë";  case "\\u00ec":  	return "ì";  case "\\u00ed":  	return "í";  case "\\u00ee":  	return "î";  case "\\u00ef":  	return "ï";  case "\\u00f0":  	return "ð";  case "\\u00f1":  	return "ñ";  case "\\u00f2":  	return "ò";  case "\\u00f3":  	return "ó";  case "\\u00f4":  	return "ô";  case "\\u00f5":  	return "õ";  case "\\u00f6":  	return "ö";  case "\\u00f7":  	return "÷";  case "\\u00f8":  	return "ø";  case "\\u00f9":  	return "ù";  case "\\u00fa":  	return "ú";  case "\\u00fb":  	return "û";  case "\\u00fc":  	return "ü";  case "\\u00fd":  	return "ý";  case "\\u00fe":  	return "þ";  case "\\u00ff":  	return "ÿ";  case "\\u0100":  	return "Ā";  case "\\u0101":  	return "ā";  case "\\u0102":  	return "Ă";  case "\\u0103":  	return "ă";  case "\\u0104":  	return "Ą";  case "\\u0105":  	return "ą";  case "\\u0106":  	return "Ć";  case "\\u0107":  	return "ć";  case "\\u0108":  	return "Ĉ";  case "\\u0109":  	return "ĉ";  case "\\u010a":  	return "Ċ";  case "\\u010b":  	return "ċ";  case "\\u010c":  	return "Č";  case "\\u010d":  	return "č";  case "\\u010e":  	return "Ď";  case "\\u010f":  	return "ď";  case "\\u0110":  	return "Đ";  case "\\u0111":  	return "đ";  case "\\u0112":  	return "Ē";  case "\\u0113":  	return "ē";  case "\\u0114":  	return "Ĕ";  case "\\u0115":  	return "ĕ";  case "\\u0116":  	return "Ė";  case "\\u0117":  	return "ė";  case "\\u0118":  	return "Ę";  case "\\u0119":  	return "ę";  case "\\u011a":  	return "Ě";  case "\\u011b":  	return "ě";  case "\\u011c":  	return "Ĝ";  case "\\u011d":  	return "ĝ";  case "\\u011e":  	return "Ğ";  case "\\u011f":  	return "ğ";  case "\\u0120":  	return "Ġ";  case "\\u0121":  	return "ġ";  case "\\u0122":  	return "Ģ";  case "\\u0123":  	return "ģ";  case "\\u0124":  	return "Ĥ";  case "\\u0125":  	return "ĥ";  case "\\u0126":  	return "Ħ";  case "\\u0127":  	return "ħ";  case "\\u0128":  	return "Ĩ";  case "\\u0129":  	return "ĩ";  case "\\u012a":  	return "Ī";  case "\\u012b":  	return "ī";  case "\\u012c":  	return "Ĭ";  case "\\u012d":  	return "ĭ";  case "\\u012e":  	return "Į";  case "\\u012f":  	return "į";  case "\\u0130":  	return "I";  case "\\u0131":  	return "ı";  case "\\u0132":  	return "Ĳ";  case "\\u0133":  	return "ĳ";  case "\\u0134":  	return "Ĵ";  case "\\u0135":  	return "ĵ";  case "\\u0136":  	return "Ķ";  case "\\u0137":  	return "ķ";  case "\\u0138":  	return "ĸ";  case "\\u0139":  	return "Ĺ";  case "\\u013a":  	return "ĺ";  case "\\u013b":  	return "Ļ";  case "\\u013c":  	return "ļ";  case "\\u013d":  	return "Ľ";  case "\\u013e":  	return "ľ";  case "\\u013f":  	return "Ŀ";  case "\\u0140":  	return "ŀ";  case "\\u0141":  	return "Ł";  case "\\u0142":  	return "ł";  case "\\u0143":  	return "Ń";  case "\\u0144":  	return "ń";  case "\\u0145":  	return "Ņ";  case "\\u0146":  	return "ņ";  case "\\u0147":  	return "Ň";  case "\\u0148":  	return "ň";  case "\\u0149":  	return "ŉ";  case "\\u014a":  	return "Ŋ";  case "\\u014b":  	return "ŋ";  case "\\u014c":  	return "Ō";  case "\\u014d":  	return "ō";  case "\\u014e":  	return "Ŏ";  case "\\u014f":  	return "ŏ";  case "\\u0150":  	return "Ő";  case "\\u0151":  	return "ő";  case "\\u0152":  	return "Œ";  case "\\u0153":  	return "œ";  case "\\u0154":  	return "Ŕ";  case "\\u0155":  	return "ŕ";  case "\\u0156":  	return "Ŗ";  case "\\u0157":  	return "ŗ";  case "\\u0158":  	return "Ř";  case "\\u0159":  	return "ř";  case "\\u015a":  	return "Ś";  case "\\u015b":  	return "ś";  case "\\u015c":  	return "Ŝ";  case "\\u015d":  	return "ŝ";  case "\\u015e":  	return "Ş";  case "\\u015f":  	return "ş";  case "\\u0160":  	return "Š";  case "\\u0161":  	return "š";  case "\\u0162":  	return "Ţ";  case "\\u0163":  	return "ţ";  case "\\u0164":  	return "Ť";  case "\\u0165":  	return "ť";  //http://www.fileformat.info/info/unicode/char/0165/index.htm  case "\\u0166":  	return "";  case "\\u0167":  	return "";  case "\\u0168":  	return "";  case "\\u0169":  	return "";  case "\\u016a":  	return "";  case "\\u016b":  	return "ū";  case "\\u017a":  	return "ź";  case "\\u017c":  	return "ż";  case "\\u01ce":  	return "ǎ";  case "\\u01d0":  	return "ǐ";  case "\\u0192":  	return "ƒ";  case "\\u02dc":  	return "˜";  case "\\u02c6":  	return "ˆ";  case "\\u02c8":  	return "ˈ";  case "\\u0252":  	return "ɒ";  case "\\u0259":  	return "ə";  case "\\u02cc":  	return "ˌ";  case "\\u0391":  	return "α";  case "\\u0392":  	return "β";  case "\\u0393":  	return "γ";  case "\\u0394":  	return "δ";  case "\\u0395":  	return "ε";  case "\\u0396":  	return "ζ";  case "\\u0397":  	return "η";  case "\\u0399":  	return "ι";  case "\\u039a":  	return "κ";  case "\\u039b":  	return "λ";  case "\\u039c":  	return "μ";  case "\\u039d":  	return "ν";  case "\\u039e":  	return "ξ";  case "\\u039f":  	return "ο";  case "\\u03a0":  	return "π";  case "\\u03a1":  	return "ρ";  case "\\u03a3":  	return "σ";  case "\\u03a4":  	return "τ";  case "\\u03a5":  	return "υ";  case "\\u03a6":  	return "f";  case "\\u03a7":  	return "χ";  case "\\u03a8":  	return "ψ";  case "\\u03a9":  	return "ω";  case "\\u03b1":  	return "α";  case "\\u03b2":  	return "β";  case "\\u03b3":  	return "γ";  case "\\u03b4":  	return "d";  case "\\u03b5":  	return "ε";  case "\\u03b6":  	return "ζ";  case "\\u03b7":  	return "η";  case "\\u03b9":  	return "ι";  case "\\u03ba":  	return "κ";  case "\\u03bb":  	return "λ";  case "\\u03bc":  	return "µ";  case "\\u03bd":  	return "ν";  case "\\u03be":  	return "ξ";  case "\\u03bf":  	return "ο";  case "\\u03c0":  	return "p";  case "\\u03c1":  	return "ρ";  case "\\u03c3":  	return "σ";  case "\\u03c4":  	return "τ";  case "\\u03c5":  	return "υ";  case "\\u03c6":  	return "f";  case "\\u03c7":  	return "χ";  case "\\u03c8":  	return "ψ";  case "\\u03c9":  	return "ω";  case "\\u2013":  	return "-";  case "\\u2014":  	return "—";  case "\\u2018":  	return "‘";  case "\\u2019":  	return "'";  case "\\u201a":  	return "‚";  case "\\u201c":  	return "“";  case "\\u201d":  	return "”";  case "\\u201e":  	return "„";  case "\\u2020":  	return "†";  case "\\u2022":  	return "•";  case "\\u2026":  	return "…";  case "\\u2030":  	return "‰";  case "\\u2032":  	return "'";  case "\\u2033":  	return "″";  case "\\u2039":  	return "‹";  case "\\u203a":  	return "›";  case "\\u203e":  	return "‾";  case "\\u2044":  	return "⁄";  case "\\u20ac":  	return "€";  case "\\u2122":  	return "™";  case "\\u2153":  	return "⅓";  case "\\u215b":  	return "⅛";  case "\\u215c":  	return "⅜";  case "\\u215d":  	return "⅝";  case "\\u215e":  	return "⅞";  case "\\u2190":  	return "←";  case "\\u2191":  	return "↑";  case "\\u2192":  	return "→";  case "\\u2193":  	return "↓";  case "\\u2194":  	return "↔";  case "\\u2211":  	return "∑";  case "\\u2212":  	return "-";  case "\\u221a":  	return "v";  case "\\u221e":  	return "⧜";  case "\\u222b":  	return "∫";  case "\\u2234":  	return "∴";  case "\\u2248":  	return "≈";  case "\\u2260":  	return "≠";  case "\\u2261":  	return "=";  case "\\u2264":  	return "=";  case "\\u2265":  	return "=";  case "\\u2295":  	return "⊕";  case "\\u2660":  	return "♠";  case "\\u2663":  	return "♣";  case "\\u2665":  	return "♥";  case "\\u2666":  	return "♦";  case "\\u5b97":  	return "宗";  case "\\u5d07":  	return "崇";  case "\\u601d":  	return "思";  case "\\u6731":  	return "朱";  case "\\u68c0":  	return "检";  case "\\u6aa2":  	return "檢";  case "\\u7531":  	return "由";  case "\\u798e":  	return "禎";  case "\\u8470":  	return "ࢨ";  }  
Missing Default,MeanWhile,App,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\App.xaml.cs,HitTypeToString,The following switch statement is missing a default case: switch (hit_type) {  case HitType.AppView:  	return "appview";  case HitType.Event:  	return "event";  case HitType.Exception:  	return "exception";  case HitType.Item:  	return "item";  case HitType.PageView:  	return "pageview";  case HitType.Social:  	return "social";  case HitType.Timing:  	return "timing";  case HitType.Transaction:  	return "transaction";  }  
Missing Default,MeanWhile,MainWindow,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\MainWindow.xaml.cs,LoadSettings,The following switch statement is missing a default case: switch (Parts [0].ToLower ()) {  case "screensaver":  	ScreenSaverSeconds = Convert.ToInt16 (Parts [1]);  	break;  case "wikicardseconds":  	App.WikiCardsSeconds = Convert.ToInt16 (Parts [1]);  	break;  case "infocardseconds":  	App.InfoCardsSeconds = Convert.ToInt16 (Parts [1]);  	break;  case "cardturnmilliseconds":  	App.CardTurnMilliseconds = Convert.ToInt16 (Parts [1]);  	break;  case "firstwavepins":  	Parts [1] = Parts [1].Replace ('.'' ''');  	App.FirstWavePins = Convert.ToDouble (Parts [1]);  	break;  case "secondwavepins":  	Parts [1] = Parts [1].Replace ('.'' ''');  	App.SecondWavePins = Convert.ToDouble (Parts [1]);  	break;  case "thirdwavepins":  	Parts [1] = Parts [1].Replace ('.'' ''');  	App.ThirdWavePins = Convert.ToDouble (Parts [1]);  	break;  case "showcategories":  	App.ShowCategories = Convert.ToInt32 (Parts [1]);  	break;  case "googleanalyticscid":  	App.GoogleAnalyticsCID = Parts [1];  	break;  }  
Missing Default,MeanWhile.UserControls,CategoryIcon,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryIcon.xaml.cs,SetCategory,The following switch statement is missing a default case: switch (CategoryId) {  case "WikiInfo":  	U = new Uri ("/Images/Categories/Wasa 2.png"' UriKind.RelativeOrAbsolute);  	break;  case "VasaInfo":  case "Info":  	U = new Uri ("/Images/Categories/Information.png"' UriKind.RelativeOrAbsolute);  	break;  case "0":  	U = new Uri ("/Images/Categories/Slavery.png"' UriKind.RelativeOrAbsolute);  	break;  case "1":  	U = new Uri ("/Images/Categories/Globalization.png"' UriKind.RelativeOrAbsolute);  	break;  case "2":  	U = new Uri ("/Images/Categories/Trade.png"' UriKind.RelativeOrAbsolute);  	break;  case "3":  	U = new Uri ("/Images/Categories/Hierarchies.png"' UriKind.RelativeOrAbsolute);  	break;  case "4":  	U = new Uri ("/Images/Categories/Environment.png"' UriKind.RelativeOrAbsolute);  	break;  case "5":  	U = new Uri ("/Images/Categories/Religion.png"' UriKind.RelativeOrAbsolute);  	break;  case "6":  	U = new Uri ("/Images/Categories/Language.png"' UriKind.RelativeOrAbsolute);  	break;  case "7":  	U = new Uri ("/Images/Categories/Violence.png"' UriKind.RelativeOrAbsolute);  	break;  }  
Missing Default,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,GetCategoryTitle,The following switch statement is missing a default case: switch (CategoryId) {  case "0":  	return "Slaveri";  case "1":  	return "Globalisering";  case "2":  	return "Handel";  case "3":  	return "Hierarkier";  case "4":  	return "Miljö";  case "5":  	return "Religion";  case "6":  	return "Språk";  case "7":  	return "Våld";  }  
Missing Default,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,GetCategoryTitle,The following switch statement is missing a default case: switch (CategoryId) {  case "0":  	return "Slavery";  case "1":  	return "Globalization";  case "2":  	return "Trade";  case "3":  	return "Hierarchies";  case "4":  	return "Environment";  case "5":  	return "Religion";  case "6":  	return "Language";  case "7":  	return "Violence";  }  
Missing Default,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,GetCategoryTitleSource,The following switch statement is missing a default case: switch (CategoryId) {  case "0":  	uriString = "Slaveri";  	break;  case "1":  	uriString = "Globalisering";  	break;  case "2":  	uriString = "HAndel";  	break;  case "3":  	uriString = "Hierarkier";  	break;  case "4":  	uriString = "Miljo";  	break;  case "5":  	uriString = "Religion";  	break;  case "6":  	uriString = "Sprak";  	break;  case "7":  	uriString = "Vald";  	break;  }  
Missing Default,MeanWhile.UserControls,CategoryInformationCard,C:\repos\Statens-maritima-museer_MeanWhile\MeanWhile\UserControls\CategoryInformationCard.xaml.cs,GetCategoryTitleSource,The following switch statement is missing a default case: switch (CategoryId) {  case "0":  	uriString = "Title_Slavery";  	break;  case "1":  	uriString = "Title_Globalisation";  	break;  case "2":  	uriString = "Title_Trade";  	break;  case "3":  	uriString = "Title_Hierarchies";  	break;  case "4":  	uriString = "Title_Environment";  	break;  case "5":  	uriString = "Title_Religion";  	break;  case "6":  	uriString = "Title_Language";  	break;  case "7":  	uriString = "Title_Violence";  	break;  }  
