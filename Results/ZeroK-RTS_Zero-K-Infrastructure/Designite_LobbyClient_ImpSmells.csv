Implementation smell,Namespace,Class,File,Method,Description
Long Method,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,DispatchServerCommandOnGuiThread,The method has 166 lines of code.
Complex Method,LobbyClient,Battle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Battle.cs,UpdateWith,Cyclomatic complexity of the method is 15
Complex Method,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,talker_SpringEvent,Cyclomatic complexity of the method is 32
Complex Method,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,Cyclomatic complexity of the method is 19
Complex Method,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,Cyclomatic complexity of the method is 17
Complex Method,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,Say,Cyclomatic complexity of the method is 12
Complex Method,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,DispatchServerCommandOnGuiThread,Cyclomatic complexity of the method is 33
Long Parameter List,LobbyClient,Battle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Battle.cs,Battle,The method has 7 parameters. Parameters: engineVersion' password' port' maxplayers' mapName' title' modname
Long Parameter List,LobbyClient,ScriptGenerator,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\ScriptGenerator.cs,ScriptAddBot,The method has 6 parameters. Parameters: script' aiNum' teamNum' userNum' botAI' botName
Long Parameter List,LobbyClient,ScriptGenerator,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\ScriptGenerator.cs,ScriptAddUser,The method has 5 parameters. Parameters: script' userNum' pteam' teamNum' customParameters
Long Parameter List,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ConnectGame,The method has 5 parameters. Parameters: ip' port' myName' myPassword' engine
Long Parameter List,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,HostGame,The method has 5 parameters. Parameters: startContext' host' port' myName' myPassword
Long Parameter List,LobbyClient,SpringBattleContext,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.SpringBattleContext.cs,SetForConnecting,The method has 5 parameters. Parameters: ip' port' myUser' myPassword' engineVersion
Long Parameter List,LobbyClient,SpringBattleContext,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.SpringBattleContext.cs,SetForHosting,The method has 5 parameters. Parameters: startContext' ip' port' myUser' myPassword
Long Parameter List,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,Say,The method has 5 parameters. Parameters: place' channel' inputtext' isEmote' isRing
Long Parameter List,LobbyClient,BattleInfoEventArgs,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient_structures.cs,BattleInfoEventArgs,The method has 5 parameters. Parameters: battleID' spectatorCount' mapName' mapHash' isLocked
Long Parameter List,LobbyClient,TasSayEventArgs,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient_structures.cs,TasSayEventArgs,The method has 5 parameters. Parameters: place' channel' username' text' isEmote
Long Parameter List,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,TasClient,The method has 5 parameters. Parameters: guiThreadInvoker' appName' cpu' invokeUserStatusChangedOnExtensions' ipOverride
Long Parameter List,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,Say,The method has 5 parameters. Parameters: place' channel' inputtext' isEmote' linePrefix
Long Parameter List,LobbyClient.Legacy,TasSayEventArgs,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient_structures.cs,TasSayEventArgs,The method has 6 parameters. Parameters: origin' place' channel' username' text' isEmote
Long Identifier,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,TasClient,The length of the parameter invokeUserStatusChangedOnExtensions is 35.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,HostGame,The length of the statement  "            if (!File.Exists(paths.GetDedicatedServerPath(startContext.EngineVersion))) throw new ApplicationException($"Dedicated server executable not found: {paths.GetDedicatedServerPath(startContext.EngineVersion)}"); " is 209.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,dedicatedProcess_Exited,The length of the statement  "                    int playersReportingAwards = gamePrivateMessages.Where(x => x.Key.StartsWith("award")).SelectMany(x => x.Value).Distinct().Count(); " is 131.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,dedicatedProcess_Exited,The length of the statement  "                    Context.OutputExtras = gamePrivateMessages.Where(x => x.Value.Count >= playersReportingAwards / 2 + 1).Select(x => x.Key).ToList(); " is 131.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,HandleSpecialMessages,The length of the statement  "                if (gamePrivateMessages[text].Count() != Context.LobbyStartContext.Players.Count() / 2 + 1) return; // only accept messages if count matches N/2+1 exactly " is 154.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,MarkPlayerDead,The length of the statement  "                sp.LoseTime = isDead ? (int)DateTime.UtcNow.Subtract(Context.IngameStartTime ?? Context.StartTime).TotalSeconds : (int?)null; " is 125.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,talker_SpringEvent,The length of the statement  "                                foreach (var ally in e.winningAllyTeams) foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == ally))) p.IsVictoryTeam = true; " is 158.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,talker_SpringEvent,The length of the statement  "                                foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.LoseTime == null))) foreach (var q in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == p.AllyNumber))) q.IsVictoryTeam = true; " is 217.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,talker_SpringEvent,The length of the statement  "                        Context.PlayersUnreadyOnStart = Context.ActualPlayers.Where(x => !x.IsSpectator && !(x.IsIngameReady && x.IsIngame)).Select(x => x.Name).ToList(); " is 146.
Long Statement,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,timer_Elapsed,The length of the statement  "                    else if (timeSinceStart > timeToWarn) SayGame($"Game will be force started in {Math.Max(20' timeToWait - Math.Round(timeSinceStart))} seconds"); " is 144.
Long Statement,LobbyClient,User,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Protocol\Messages.cs,CanUserPlanetWars,The length of the statement  "            return !string.IsNullOrEmpty(Faction) && Level >= GlobalConst.MinPlanetWarsLevel && EffectiveMmElo > GlobalConst.MinPlanetWarsElo; " is 130.
Long Statement,LobbyClient,ServerConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\ServerConnection.cs,SendCommand,The length of the statement  "                    CommandSent(this' new EventArgs<KeyValuePair<string' object[]>>(new KeyValuePair<string' object[]>(command' parameters))); " is 122.
Long Statement,LobbyClient,ServerConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\ServerConnection.cs,PrepareCommand,The length of the statement  "                if (!string.IsNullOrEmpty(s) && s[0] == '\t') sb.Append(s);// if parameter starts with \t it's sentence seperator and we will ommit space " is 137.
Long Statement,LobbyClient,ScriptGenerator,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\ScriptGenerator.cs,GenerateHostScript,The length of the statement  "                if (!string.IsNullOrEmpty(context.MyPassword) || !string.IsNullOrEmpty(context.MyUserName)) script.AppendFormat("  MyPasswd={0};\n"' context.MyPassword??context.MyUserName); " is 173.
Long Statement,LobbyClient,ScriptGenerator,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\ScriptGenerator.cs,ScriptAddUser,The length of the statement  "            if (customParameters != null) foreach (var kvp in customParameters) script.AppendFormat("     {0}={1};\n"' kvp.Key' kvp.Value); " is 127.
Long Statement,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,HostGame,The length of the statement  "            if (!File.Exists(paths.GetSpringExecutablePath(startContext.EngineVersion))) throw new ApplicationException($"Spring executable not found: {paths.GetSpringExecutablePath(startContext.EngineVersion)}"); " is 201.
Long Statement,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The length of the statement  "                    if (string.IsNullOrEmpty(LobbyStartContext.Map) && line.StartsWith("Using map"' true' null)) LobbyStartContext.Map = line.Substring(10).Trim(); " is 143.
Long Statement,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The length of the statement  "                    //else if (line.StartsWith("[DedicatedServer] recording demo")) demoFileName = Path.GetFileName(line.Substring(33).Trim());    // 95.0 and later " is 144.
Long Statement,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The length of the statement  "                    if (line.StartsWith("GameID: "' true' null) && (Context.EngineBattleID == null)) Context.EngineBattleID = line.Substring(8).Trim(); " is 131.
Long Statement,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The length of the statement  "                    if (line.StartsWith("Cheating!"' true' null) || line.StartsWith("Cheating is enabled!"' true' null)) Context.IsCheating = true; " is 127.
Long Statement,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,SendText,The length of the statement  "                var bytes = Encoding.UTF8.GetBytes(s.Substring(0' Math.Min(s.Length' 250))); // take only first 250 characters to prevent crashes " is 129.
Long Statement,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The length of the statement  "                            if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length); " is 147.
Long Statement,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The length of the statement  "                            if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length); " is 143.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,AdminSetChannelPassword,The length of the statement  "            if (string.IsNullOrEmpty(password)) Say(SayPlace.User' "ChanServ"' string.Format("!lock #{0} {1}"' channel' password)' false); " is 126.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,ChangeMyBattleStatus,The length of the statement  "                var status = new UpdateUserBattleStatus() { IsSpectator = spectate' Sync = syncStatus' AllyNumber = ally' Name = UserName }; " is 124.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,GetUserCaseInsensitive,The length of the statement  "            return ExistingUsers.Values.FirstOrDefault(u => string.Equals(u.Name' userName' StringComparison.InvariantCultureIgnoreCase)); " is 126.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,OnConnectionClosed,The length of the statement  "            ConnectionLost(this' new TasEventArgs(string.Format("Connection {0}"' wasRequested ? "closed on user request" : "disconnected"))); " is 130.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,Register,The length of the statement  "            return SendCommand(new Register() { Name = username' PasswordHash = Utils.HashLobbyPassword(password)' UserID = Utils.GetMyUserID()}); " is 134.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,Say,The length of the statement  "                var say = new Say() { Target = args.Channel' Place = args.SayPlace' Text = args.Text' IsEmote = args.IsEmote' Ring = isRing }; " is 126.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,SetRelation,The length of the statement  "            if (rel == Relation.Friend) if (!friends.Contains(target)) return SendCommand(new SetAccountRelation() { Relation = rel' TargetName = target }); " is 144.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,SetRelation,The length of the statement  "            if (rel == Relation.Ignore) if (!ignores.Contains(target)) return SendCommand(new SetAccountRelation() { Relation = rel' TargetName = target }); " is 144.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,Process,The length of the statement  "                await Process(new ChannelUserAdded() { UserName = user.Name' ChannelName = "zk" }); // silly hacky thing to make all Users appear in #zk remove later " is 149.
Long Statement,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,Process,The length of the statement  "                    if (!string.IsNullOrEmpty(chan.Topic.Text)) ChannelTopicChanged(this' new ChangeTopic() { ChannelName = chan.Name' Topic = chan.Topic }); " is 137.
Long Statement,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,GetUserCaseInsensitive,The length of the statement  "            return ExistingUsers.Values.FirstOrDefault(u => String.Equals(u.Name' userName' StringComparison.InvariantCultureIgnoreCase)); " is 126.
Long Statement,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,GetMyUserID,The length of the statement  "            var nics = NetworkInterface.GetAllNetworkInterfaces().Where(x=> !String.IsNullOrWhiteSpace(x.GetPhysicalAddress().ToString()) " is 125.
Long Statement,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,Login,The length of the statement  "            con.SendCommand("LOGIN"' userName' Utils.HashLobbyPassword(password)' cpu' localIp' appName' "\t" + GetMyUserID()' "\ta sp m cl p"); " is 132.
Long Statement,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,DispatchServerCommandOnGuiThread,The length of the statement  "                Trace.TraceError("TASC error: Error was thrown while processing chat command {0} \"{1}\" (check if chat event trigger faulty code in application): {2}"' command' Utils.Glue(args)' e); " is 183.
Long Statement,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnServerMsg,The length of the statement  "            InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server' TasSayEventArgs.Places.Server' ""' ""' Utils.Glue(args' 0)' false)); " is 131.
Long Statement,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnMotd,The length of the statement  "            if (args.Length > 0) InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server' TasSayEventArgs.Places.Motd' ""' ""' Utils.Glue(args' 0)' false)); " is 150.
Long Statement,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnAddUser,The length of the statement  "                Trace.TraceError("Error was thrown while processing chat command ADDUSER (check if this event trigger faulty code in application): " + e); " is 138.
Empty Catch Block,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,SayGame,The method has an empty catch block.
Empty Catch Block,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,dedicatedProcess_Exited,The method has an empty catch block.
Empty Catch Block,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,dedicatedProcess_Exited,The method has an empty catch block.
Empty Catch Block,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,springProcess_Exited,The method has an empty catch block.
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,ExitGame,The following statement contains a magic number: process.WaitForExit(20000);
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,ExitGame,The following statement contains a magic number: process.WaitForExit(1000);
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,dedicatedProcess_Exited,The following statement contains a magic number: !process.WaitForExit(2000)
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,dedicatedProcess_Exited,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,dedicatedProcess_Exited,The following statement contains a magic number: Context.OutputExtras = gamePrivateMessages.Where(x => x.Value.Count >= playersReportingAwards / 2 + 1).Select(x => x.Key).ToList();
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,HandleSpecialMessages,The following statement contains a magic number: var text = e.Text.Substring(9);
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,HandleSpecialMessages,The following statement contains a magic number: var name = text.Substring(6);
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,HandleSpecialMessages,The following statement contains a magic number: gamePrivateMessages[text].Count() != Context.LobbyStartContext.Players.Count() / 2 + 1
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,talker_SpringEvent,The following statement contains a magic number: switch (e.EventType)                  {                      case Talker.SpringEventType.PLAYER_JOINED:                          var entry = Context?.GetOrAddPlayer(e.PlayerName);                          if (entry != null) entry.IsIngame = true;                          PlayerJoined?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.PLAYER_LEFT:                          entry = Context?.GetOrAddPlayer(e.PlayerName);                          if (entry != null)                          {                              entry.IsIngame = false;                              entry.QuitTime = (int)DateTime.UtcNow.Subtract(Context.IngameStartTime ?? Context.StartTime).TotalSeconds;                          }                          if (e.Param == 0) PlayerDisconnected?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          PlayerLeft?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.GAME_LUAMSG:                          HandleSpecialMessages(e);                          break;                        case Talker.SpringEventType.PLAYER_CHAT:                          if (e.Param == 255) HandleSpecialMessages(e);                          else AddToLogs(e);                                                    if ((PlayerSaid != null) && !string.IsNullOrEmpty(e.PlayerName))                          {                              SpringChatLocation location = SpringChatLocation.Private;                              if (((e.Param == Talker.TO_EVERYONE) || (e.Param == Talker.TO_EVERYONE_LEGACY))) location = SpringChatLocation.Public;                              if (e.Param == Talker.TO_ALLIES) location = SpringChatLocation.Allies;                              if (e.Param == Talker.TO_SPECTATORS) location = SpringChatLocation.Spectators;                              PlayerSaid(this' new SpringChatEventArgs(e.PlayerName' e.Text' location));                          }                          break;                        case Talker.SpringEventType.PLAYER_DEFEATED:                          MarkPlayerDead(e.PlayerName' true);                          if (PlayerLost != null) PlayerLost(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.SERVER_GAMEOVER:                          if (!Context.GameEndedOk) // server gameover runs multiple times                          {                              foreach (var p in Context.ActualPlayers)                              {                                  if (!p.IsIngame && !p.IsSpectator) MarkPlayerDead(p.Name' true);                                  p.IsIngame = false;                              }                                // set victory team for all allied with currently alive                              if (e.winningAllyTeams.Length > 0) {                                  foreach (var ally in e.winningAllyTeams) foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == ally))) p.IsVictoryTeam = true;                              } else { // Fallback' shouldn't happen                                  foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.LoseTime == null))) foreach (var q in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == p.AllyNumber))) q.IsVictoryTeam = true;                              }                                if (Context.IngameStartTime != null)                              {                                  Context.GameEndedOk = true;                                  Context.Duration = (int)DateTime.UtcNow.Subtract(Context.IngameStartTime ?? Context.StartTime).TotalSeconds;                                    GameOver?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                              }                              else Trace.TraceWarning("recieved GAMEOVER before STARTPLAYING!");                                Task.Delay(10000).ContinueWith(x => ExitGame());                          }                          break;                        case Talker.SpringEventType.PLAYER_READY:                          if (e.Param == 1)                          {                              entry = Context.GetOrAddPlayer(e.PlayerName);                              if (entry != null) entry.IsIngameReady = true;                          }                          break;                        case Talker.SpringEventType.SERVER_STARTPLAYING:                          Context.ReplayName = e.ReplayFileName;                          Context.EngineBattleID = e.GameID;                          Context.IngameStartTime = DateTime.UtcNow;                          Context.PlayersUnreadyOnStart = Context.ActualPlayers.Where(x => !x.IsSpectator && !(x.IsIngameReady && x.IsIngame)).Select(x => x.Name).ToList();                          foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator)) p.IsIngameReady = true;                            process.PriorityClass = ProcessPriorityClass.High;                            BattleStarted(this' Context);                          break;                        case Talker.SpringEventType.SERVER_QUIT:                          if (LobbyStartContext != null) foreach (var p in Context.ActualPlayers) p.IsIngame = false;                          //if (GameOver != null) GameOver(this' new SpringLogEventArgs(e.PlayerName));                          break;                  }
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,talker_SpringEvent,The following statement contains a magic number: switch (e.EventType)                  {                      case Talker.SpringEventType.PLAYER_JOINED:                          var entry = Context?.GetOrAddPlayer(e.PlayerName);                          if (entry != null) entry.IsIngame = true;                          PlayerJoined?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.PLAYER_LEFT:                          entry = Context?.GetOrAddPlayer(e.PlayerName);                          if (entry != null)                          {                              entry.IsIngame = false;                              entry.QuitTime = (int)DateTime.UtcNow.Subtract(Context.IngameStartTime ?? Context.StartTime).TotalSeconds;                          }                          if (e.Param == 0) PlayerDisconnected?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          PlayerLeft?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.GAME_LUAMSG:                          HandleSpecialMessages(e);                          break;                        case Talker.SpringEventType.PLAYER_CHAT:                          if (e.Param == 255) HandleSpecialMessages(e);                          else AddToLogs(e);                                                    if ((PlayerSaid != null) && !string.IsNullOrEmpty(e.PlayerName))                          {                              SpringChatLocation location = SpringChatLocation.Private;                              if (((e.Param == Talker.TO_EVERYONE) || (e.Param == Talker.TO_EVERYONE_LEGACY))) location = SpringChatLocation.Public;                              if (e.Param == Talker.TO_ALLIES) location = SpringChatLocation.Allies;                              if (e.Param == Talker.TO_SPECTATORS) location = SpringChatLocation.Spectators;                              PlayerSaid(this' new SpringChatEventArgs(e.PlayerName' e.Text' location));                          }                          break;                        case Talker.SpringEventType.PLAYER_DEFEATED:                          MarkPlayerDead(e.PlayerName' true);                          if (PlayerLost != null) PlayerLost(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.SERVER_GAMEOVER:                          if (!Context.GameEndedOk) // server gameover runs multiple times                          {                              foreach (var p in Context.ActualPlayers)                              {                                  if (!p.IsIngame && !p.IsSpectator) MarkPlayerDead(p.Name' true);                                  p.IsIngame = false;                              }                                // set victory team for all allied with currently alive                              if (e.winningAllyTeams.Length > 0) {                                  foreach (var ally in e.winningAllyTeams) foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == ally))) p.IsVictoryTeam = true;                              } else { // Fallback' shouldn't happen                                  foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.LoseTime == null))) foreach (var q in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == p.AllyNumber))) q.IsVictoryTeam = true;                              }                                if (Context.IngameStartTime != null)                              {                                  Context.GameEndedOk = true;                                  Context.Duration = (int)DateTime.UtcNow.Subtract(Context.IngameStartTime ?? Context.StartTime).TotalSeconds;                                    GameOver?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                              }                              else Trace.TraceWarning("recieved GAMEOVER before STARTPLAYING!");                                Task.Delay(10000).ContinueWith(x => ExitGame());                          }                          break;                        case Talker.SpringEventType.PLAYER_READY:                          if (e.Param == 1)                          {                              entry = Context.GetOrAddPlayer(e.PlayerName);                              if (entry != null) entry.IsIngameReady = true;                          }                          break;                        case Talker.SpringEventType.SERVER_STARTPLAYING:                          Context.ReplayName = e.ReplayFileName;                          Context.EngineBattleID = e.GameID;                          Context.IngameStartTime = DateTime.UtcNow;                          Context.PlayersUnreadyOnStart = Context.ActualPlayers.Where(x => !x.IsSpectator && !(x.IsIngameReady && x.IsIngame)).Select(x => x.Name).ToList();                          foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator)) p.IsIngameReady = true;                            process.PriorityClass = ProcessPriorityClass.High;                            BattleStarted(this' Context);                          break;                        case Talker.SpringEventType.SERVER_QUIT:                          if (LobbyStartContext != null) foreach (var p in Context.ActualPlayers) p.IsIngame = false;                          //if (GameOver != null) GameOver(this' new SpringLogEventArgs(e.PlayerName));                          break;                  }
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,timer_Elapsed,The following statement contains a magic number: const int timeToWait = 160;
Magic Number,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,timer_Elapsed,The following statement contains a magic number: const int timeToWarn = 100;
Magic Number,LobbyClient,ScriptGenerator,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\ScriptGenerator.cs,GenerateHostScript,The following statement contains a magic number: script.AppendFormat("  StartPosType={0};\n"' context.LobbyStartContext.IsMission ? 3 : 2);
Magic Number,LobbyClient,ScriptGenerator,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\ScriptGenerator.cs,GenerateHostScript,The following statement contains a magic number: script.AppendFormat("  StartPosType={0};\n"' context.LobbyStartContext.IsMission ? 3 : 2);
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ExitGame,The following statement contains a magic number: process.WaitForExit(1000);
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: line = line.Substring(idx + 2);
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: LobbyStartContext.Map = line.Substring(10).Trim();
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: var archiveNameIndex = line.IndexOf("(archive"' 11);
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: LobbyStartContext.Mod = line.Substring(11' archiveNameIndex - 11).Trim();
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: LobbyStartContext.Mod = line.Substring(11' archiveNameIndex - 11).Trim();
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: Context.ReplayName = Path.GetFileName(line.Substring(15).Trim());
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: Context.EngineBattleID = line.Substring(8).Trim();
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,ParseInfolog,The following statement contains a magic number: Context.OutputExtras.Add(line.Substring(6));
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,springProcess_Exited,The following statement contains a magic number: !process.WaitForExit(2000)
Magic Number,LobbyClient,Spring,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.cs,springProcess_Exited,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,LobbyClient,SpringBattleContext,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.SpringBattleContext.cs,SetForHosting,The following statement contains a magic number: Port = port ?? 8452;
Magic Number,LobbyClient,SpringBattleContext,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Spring.SpringBattleContext.cs,SetForSelfHosting,The following statement contains a magic number: Port = 8452;
Magic Number,LobbyClient,SpringSettings,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\SpringSettings.cs,GetEngineConfigOptions,The following statement contains a magic number: p.WaitForExit(3000);
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Close,The following statement contains a magic number: thread.Join(1000);
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,SendText,The following statement contains a magic number: var bytes = Encoding.UTF8.GetBytes(s.Substring(0' Math.Min(s.Length' 250)));
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following statement contains a magic number: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Magic Number,LobbyClient,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\TasClient.cs,TasClient,The following statement contains a magic number: pingTimer = new Timer(pingInterval * 1000) { AutoReset = true };
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,TasClient,The following statement contains a magic number: pingTimer = new Timer(pingInterval*1000) { AutoReset = true };
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,DispatchServerCommandOnGuiThread,The following statement contains a magic number: switch (command)                  {                      case "TASServer": // happens after connecting to server                          OnTasServer(args);                          break;                        case "ACCEPTED": // Login accepted                          OnAccepted(args);                          break;                        case "DENIED": // login denied                          OnDenied(args);                          break;                        case "JOIN": // channel joined                          OnJoin(args);                          break;                        case "JOINFAILED": // channel join failed                          ChannelJoinFailed(this' new TasEventArgs(Utils.Glue(args)));                          break;                        case "CHANNEL": // iterating channels                          OnChannel(args);                          break;                        case "ENDOFCHANNELS": // end of channel list iteration                          OnEndOfChannels();                          break;                        case "ADDUSER": // new user joined ta server                          OnAddUser(args);                          break;                        case "FORCELEAVECHANNEL":                          OnForceLeaveChannel(args);                          break;                        case "KICKUSER":                          OnKickUser(args);                          break;                        case "REMOVEUSER": // user left ta server                          OnRemoveUser(args);                          break;                        case "MOTD": // server motd                          OnMotd(args);                          break;                        case "SERVERMSG": // server message                          OnServerMsg(args);                          break;                        case "SERVERMSGBOX": // server messagebox                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.MessageBox'                                                         ""'                                                         ""'                                                         Utils.Glue(args' 0)'                                                         false));                          break;                        case "CHANNELMESSAGE": // server broadcast to channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         ""'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAID": // someone said something in channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         args[1]'                                                         Utils.Glue(args' 2)'                                                         false));                          break;                          case "SAIDEX": // someone said something with emote in channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         args[1]'                                                         Utils.Glue(args' 2)'                                                         true));                          break;                        case "SAYPRIVATE": // sent back from sever when user sends private message                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Normal'                                                         args[0]'                                                         username'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDPRIVATE": // someone said something to me                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Normal'                                                         args[0]'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDBATTLE": // someone said something in battle                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Battle'                                                         ""'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDBATTLEEX": // someone said in battle with emote                            InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Battle'                                                         ""'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         true));                          break;                      case "BROADCAST": // server sends urgent broadcast                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.Broadcast'                                                         ""'                                                         ""'                                                         Utils.Glue(args' 0)'                                                         false));                          break;                        case "REDIRECT": // server sends backup IP                          OnRedirect(args);                          break;                        case "CLIENTSTATUS": // client's status changed                          OnClientStatus(args);                          break;                        case "CLIENTS": // client list sent after channel join                          OnClients(args);                          break;                        case "JOINED": // user joined one of my channels                          OnJoined(args);                          break;                        case "LEFT": // user left one of my channels                          OnLeft(args);                          break;                                                case "AGREEMENT":                          OnAgreement(args);                          break;                        case "PONG":                          lastPong = DateTime.UtcNow;                          break;                        case "AGREEMENTEND":                          OnAgreementEnd();                          break;                        case "REGISTRATIONDENIED":                          RegistrationDenied(this' new TasEventArgs(Utils.Glue(args)));                          break;                        case "REGISTRATIONACCEPTED":                          RegistrationAccepted(this' new TasEventArgs(args));                          break;                    }
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,DispatchServerCommandOnGuiThread,The following statement contains a magic number: switch (command)                  {                      case "TASServer": // happens after connecting to server                          OnTasServer(args);                          break;                        case "ACCEPTED": // Login accepted                          OnAccepted(args);                          break;                        case "DENIED": // login denied                          OnDenied(args);                          break;                        case "JOIN": // channel joined                          OnJoin(args);                          break;                        case "JOINFAILED": // channel join failed                          ChannelJoinFailed(this' new TasEventArgs(Utils.Glue(args)));                          break;                        case "CHANNEL": // iterating channels                          OnChannel(args);                          break;                        case "ENDOFCHANNELS": // end of channel list iteration                          OnEndOfChannels();                          break;                        case "ADDUSER": // new user joined ta server                          OnAddUser(args);                          break;                        case "FORCELEAVECHANNEL":                          OnForceLeaveChannel(args);                          break;                        case "KICKUSER":                          OnKickUser(args);                          break;                        case "REMOVEUSER": // user left ta server                          OnRemoveUser(args);                          break;                        case "MOTD": // server motd                          OnMotd(args);                          break;                        case "SERVERMSG": // server message                          OnServerMsg(args);                          break;                        case "SERVERMSGBOX": // server messagebox                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.MessageBox'                                                         ""'                                                         ""'                                                         Utils.Glue(args' 0)'                                                         false));                          break;                        case "CHANNELMESSAGE": // server broadcast to channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         ""'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAID": // someone said something in channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         args[1]'                                                         Utils.Glue(args' 2)'                                                         false));                          break;                          case "SAIDEX": // someone said something with emote in channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         args[1]'                                                         Utils.Glue(args' 2)'                                                         true));                          break;                        case "SAYPRIVATE": // sent back from sever when user sends private message                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Normal'                                                         args[0]'                                                         username'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDPRIVATE": // someone said something to me                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Normal'                                                         args[0]'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDBATTLE": // someone said something in battle                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Battle'                                                         ""'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDBATTLEEX": // someone said in battle with emote                            InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Battle'                                                         ""'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         true));                          break;                      case "BROADCAST": // server sends urgent broadcast                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.Broadcast'                                                         ""'                                                         ""'                                                         Utils.Glue(args' 0)'                                                         false));                          break;                        case "REDIRECT": // server sends backup IP                          OnRedirect(args);                          break;                        case "CLIENTSTATUS": // client's status changed                          OnClientStatus(args);                          break;                        case "CLIENTS": // client list sent after channel join                          OnClients(args);                          break;                        case "JOINED": // user joined one of my channels                          OnJoined(args);                          break;                        case "LEFT": // user left one of my channels                          OnLeft(args);                          break;                                                case "AGREEMENT":                          OnAgreement(args);                          break;                        case "PONG":                          lastPong = DateTime.UtcNow;                          break;                        case "AGREEMENTEND":                          OnAgreementEnd();                          break;                        case "REGISTRATIONDENIED":                          RegistrationDenied(this' new TasEventArgs(Utils.Glue(args)));                          break;                        case "REGISTRATIONACCEPTED":                          RegistrationAccepted(this' new TasEventArgs(args));                          break;                    }
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnLeft,The following statement contains a magic number: var reason = Utils.Glue(args' 2);
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnKickUser,The following statement contains a magic number: string reason = args.Length > 2 ? string.Join(" "' args' 2) : null;
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnKickUser,The following statement contains a magic number: string reason = args.Length > 2 ? string.Join(" "' args' 2) : null;
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnAddUser,The following statement contains a magic number: int.TryParse(args[2]' out cpu);
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnAddUser,The following statement contains a magic number: u.LobbyID = Convert.ToInt32(args[3]);
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnChannel,The following statement contains a magic number: c.topic = Utils.Glue(args' 2);
Magic Number,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,OnChannel,The following statement contains a magic number: args.Length >= 3
Magic Number,LobbyClient.Legacy,User,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\User.cs,FromInt,The following statement contains a magic number: IsAway = (status & 2) > 0;
Magic Number,LobbyClient.Legacy,User,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\User.cs,FromInt,The following statement contains a magic number: IsAdmin = (status & 32) > 0;
Magic Number,LobbyClient.Legacy,User,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\User.cs,FromInt,The following statement contains a magic number: IsBot = (status & 64) > 0;
Magic Number,LobbyClient.Legacy,User,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\User.cs,FromInt,The following statement contains a magic number: Rank = (status & 28) >> 2;
Magic Number,LobbyClient.Legacy,User,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\User.cs,FromInt,The following statement contains a magic number: Rank = (status & 28) >> 2;
Magic Number,LobbyClient.Legacy,User,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\User.cs,ToInt,The following statement contains a magic number: res |= IsAway ? 2 : 0;
Missing Default,LobbyClient,DedicatedServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\DedicatedServer.cs,talker_SpringEvent,The following switch statement is missing a default case: switch (e.EventType)                  {                      case Talker.SpringEventType.PLAYER_JOINED:                          var entry = Context?.GetOrAddPlayer(e.PlayerName);                          if (entry != null) entry.IsIngame = true;                          PlayerJoined?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.PLAYER_LEFT:                          entry = Context?.GetOrAddPlayer(e.PlayerName);                          if (entry != null)                          {                              entry.IsIngame = false;                              entry.QuitTime = (int)DateTime.UtcNow.Subtract(Context.IngameStartTime ?? Context.StartTime).TotalSeconds;                          }                          if (e.Param == 0) PlayerDisconnected?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          PlayerLeft?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.GAME_LUAMSG:                          HandleSpecialMessages(e);                          break;                        case Talker.SpringEventType.PLAYER_CHAT:                          if (e.Param == 255) HandleSpecialMessages(e);                          else AddToLogs(e);                                                    if ((PlayerSaid != null) && !string.IsNullOrEmpty(e.PlayerName))                          {                              SpringChatLocation location = SpringChatLocation.Private;                              if (((e.Param == Talker.TO_EVERYONE) || (e.Param == Talker.TO_EVERYONE_LEGACY))) location = SpringChatLocation.Public;                              if (e.Param == Talker.TO_ALLIES) location = SpringChatLocation.Allies;                              if (e.Param == Talker.TO_SPECTATORS) location = SpringChatLocation.Spectators;                              PlayerSaid(this' new SpringChatEventArgs(e.PlayerName' e.Text' location));                          }                          break;                        case Talker.SpringEventType.PLAYER_DEFEATED:                          MarkPlayerDead(e.PlayerName' true);                          if (PlayerLost != null) PlayerLost(this' new SpringLogEventArgs(e.PlayerName));                          break;                        case Talker.SpringEventType.SERVER_GAMEOVER:                          if (!Context.GameEndedOk) // server gameover runs multiple times                          {                              foreach (var p in Context.ActualPlayers)                              {                                  if (!p.IsIngame && !p.IsSpectator) MarkPlayerDead(p.Name' true);                                  p.IsIngame = false;                              }                                // set victory team for all allied with currently alive                              if (e.winningAllyTeams.Length > 0) {                                  foreach (var ally in e.winningAllyTeams) foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == ally))) p.IsVictoryTeam = true;                              } else { // Fallback' shouldn't happen                                  foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.LoseTime == null))) foreach (var q in Context.ActualPlayers.Where(x => !x.IsSpectator && (x.AllyNumber == p.AllyNumber))) q.IsVictoryTeam = true;                              }                                if (Context.IngameStartTime != null)                              {                                  Context.GameEndedOk = true;                                  Context.Duration = (int)DateTime.UtcNow.Subtract(Context.IngameStartTime ?? Context.StartTime).TotalSeconds;                                    GameOver?.Invoke(this' new SpringLogEventArgs(e.PlayerName));                              }                              else Trace.TraceWarning("recieved GAMEOVER before STARTPLAYING!");                                Task.Delay(10000).ContinueWith(x => ExitGame());                          }                          break;                        case Talker.SpringEventType.PLAYER_READY:                          if (e.Param == 1)                          {                              entry = Context.GetOrAddPlayer(e.PlayerName);                              if (entry != null) entry.IsIngameReady = true;                          }                          break;                        case Talker.SpringEventType.SERVER_STARTPLAYING:                          Context.ReplayName = e.ReplayFileName;                          Context.EngineBattleID = e.GameID;                          Context.IngameStartTime = DateTime.UtcNow;                          Context.PlayersUnreadyOnStart = Context.ActualPlayers.Where(x => !x.IsSpectator && !(x.IsIngameReady && x.IsIngame)).Select(x => x.Name).ToList();                          foreach (var p in Context.ActualPlayers.Where(x => !x.IsSpectator)) p.IsIngameReady = true;                            process.PriorityClass = ProcessPriorityClass.High;                            BattleStarted(this' Context);                          break;                        case Talker.SpringEventType.SERVER_QUIT:                          if (LobbyStartContext != null) foreach (var p in Context.ActualPlayers) p.IsIngame = false;                          //if (GameOver != null) GameOver(this' new SpringLogEventArgs(e.PlayerName));                          break;                  }
Missing Default,LobbyClient,Talker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Talker.cs,Listener,The following switch statement is missing a default case: switch (sea.EventType) {                          case SpringEventType.PLAYER_JOINED:                              sea.PlayerNumber = data[1];                              sea.PlayerName = Encoding.ASCII.GetString(data' 2' data.Length - 2);                              playerIdToName[sea.PlayerNumber] = sea.PlayerName;                              break;                          case SpringEventType.PLAYER_LEFT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_READY:                              sea.PlayerNumber = data[1];                              if (data.Length <= 2) sea.EventType = SpringEventType.PLAYER_DEFEATED; // hack for spring                               else sea.Param = data[2];                              break;                            case SpringEventType.PLAYER_CHAT:                              sea.PlayerNumber = data[1];                              sea.Param = data[2];                              sea.Text = Encoding.UTF8.GetString(data' 3' data.Length - 3);                              break;                            case SpringEventType.PLAYER_DEFEATED:                              sea.PlayerNumber = data[1];                              break;                            case SpringEventType.SERVER_STARTPLAYING:                              msgSize = data[1] + (data[2]<<8) + (data[3]<<16) + (data[4]<<24);                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on STARTPLAYING"' msgSize' data.Length);                              sea.GameID = data.Skip(5).Take(16).ToArray().ToHex();                              sea.ReplayFileName = Encoding.UTF8.GetString(data' 21' data.Length - 21);                              break;                                                        case SpringEventType.SERVER_GAMEOVER:                              msgSize = data[1];                              sea.PlayerNumber = data[2];                              if (msgSize != data.Length) Trace.TraceWarning("Warning spring message size mismatch' expected {0} got {1} on GAMEOVER"' msgSize' data.Length);                              sea.winningAllyTeams = data.Skip(3).Take(msgSize - 3).ToArray();                              break;                            case SpringEventType.SERVER_MESSAGE:                                break;                            case SpringEventType.GAME_LUAMSG:                              sea.PlayerNumber = data[1];                              sea.Param = data[4];                              sea.Text = Encoding.ASCII.GetString(data' 5' data.Length - 5);                              break;                      }
Missing Default,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,Say,The following switch statement is missing a default case: switch (place)                  {                      case SayPlace.Channel:                          if (!JoinedChannels.ContainsKey(args.Channel)) JoinChannel(args.Channel);                          if (args.IsEmote) await con.SendCommand("SAYEX"' args.Channel' args.Text);                          else await con.SendCommand("SAY"' args.Channel' args.Text);                          break;                        case SayPlace.User:                          await con.SendCommand("SAYPRIVATE"' args.Channel' args.Text);                          break;                        case SayPlace.Battle:                          if (args.IsEmote) await con.SendCommand("SAYBATTLEEX"' args.Text);                          else await con.SendCommand("SAYBATTLE"' args.Text);                          break;                      case SayPlace.BattlePrivate:                          if (args.IsEmote) await con.SendCommand("SAYBATTLEPRIVATEEX"' channel' args.Text);                          else await con.SendCommand("SAYBATTLEPRIVATE"' channel' args.Text);                          break;                  }
Missing Default,LobbyClient.Legacy,TasClient,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\LobbyClient\Legacy\TasClient.cs,DispatchServerCommandOnGuiThread,The following switch statement is missing a default case: switch (command)                  {                      case "TASServer": // happens after connecting to server                          OnTasServer(args);                          break;                        case "ACCEPTED": // Login accepted                          OnAccepted(args);                          break;                        case "DENIED": // login denied                          OnDenied(args);                          break;                        case "JOIN": // channel joined                          OnJoin(args);                          break;                        case "JOINFAILED": // channel join failed                          ChannelJoinFailed(this' new TasEventArgs(Utils.Glue(args)));                          break;                        case "CHANNEL": // iterating channels                          OnChannel(args);                          break;                        case "ENDOFCHANNELS": // end of channel list iteration                          OnEndOfChannels();                          break;                        case "ADDUSER": // new user joined ta server                          OnAddUser(args);                          break;                        case "FORCELEAVECHANNEL":                          OnForceLeaveChannel(args);                          break;                        case "KICKUSER":                          OnKickUser(args);                          break;                        case "REMOVEUSER": // user left ta server                          OnRemoveUser(args);                          break;                        case "MOTD": // server motd                          OnMotd(args);                          break;                        case "SERVERMSG": // server message                          OnServerMsg(args);                          break;                        case "SERVERMSGBOX": // server messagebox                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.MessageBox'                                                         ""'                                                         ""'                                                         Utils.Glue(args' 0)'                                                         false));                          break;                        case "CHANNELMESSAGE": // server broadcast to channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         ""'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAID": // someone said something in channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         args[1]'                                                         Utils.Glue(args' 2)'                                                         false));                          break;                          case "SAIDEX": // someone said something with emote in channel                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Channel'                                                         args[0]'                                                         args[1]'                                                         Utils.Glue(args' 2)'                                                         true));                          break;                        case "SAYPRIVATE": // sent back from sever when user sends private message                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Normal'                                                         args[0]'                                                         username'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDPRIVATE": // someone said something to me                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Normal'                                                         args[0]'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDBATTLE": // someone said something in battle                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Battle'                                                         ""'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         false));                          break;                        case "SAIDBATTLEEX": // someone said in battle with emote                            InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Player'                                                         TasSayEventArgs.Places.Battle'                                                         ""'                                                         args[0]'                                                         Utils.Glue(args' 1)'                                                         true));                          break;                      case "BROADCAST": // server sends urgent broadcast                          InvokeSaid(new TasSayEventArgs(TasSayEventArgs.Origins.Server'                                                         TasSayEventArgs.Places.Broadcast'                                                         ""'                                                         ""'                                                         Utils.Glue(args' 0)'                                                         false));                          break;                        case "REDIRECT": // server sends backup IP                          OnRedirect(args);                          break;                        case "CLIENTSTATUS": // client's status changed                          OnClientStatus(args);                          break;                        case "CLIENTS": // client list sent after channel join                          OnClients(args);                          break;                        case "JOINED": // user joined one of my channels                          OnJoined(args);                          break;                        case "LEFT": // user left one of my channels                          OnLeft(args);                          break;                                                case "AGREEMENT":                          OnAgreement(args);                          break;                        case "PONG":                          lastPong = DateTime.UtcNow;                          break;                        case "AGREEMENTEND":                          OnAgreementEnd();                          break;                        case "REGISTRATIONDENIED":                          RegistrationDenied(this' new TasEventArgs(Utils.Glue(args)));                          break;                        case "REGISTRATIONACCEPTED":                          RegistrationAccepted(this' new TasEventArgs(args));                          break;                    }
