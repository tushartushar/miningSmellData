Implementation smell,Namespace,Class,File,Method,Description
Long Method,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Client\STUN_Client.cs,Query,The method has 140 lines of code.
Long Method,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The method has 147 lines of code.
Long Method,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The method has 106 lines of code.
Complex Method,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,TimerOnElapsed,Cyclomatic complexity of the method is 9
Complex Method,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,Prepare,Cyclomatic complexity of the method is 11
Complex Method,ChobbyLauncher,Program,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Program.cs,RunWrapper,Cyclomatic complexity of the method is 9
Long Parameter List,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,LaunchChobby,The method has 5 parameters. Parameters: paths' internalName' engineVersion' loopbackPort' writer
Long Parameter List,ChobbyLauncher,FrameBorderRenderer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,FillRectangleTiled,The method has 6 parameters. Parameters: g' brush' x' y' w' h
Long Statement,ChobbyLauncher,CrashReportHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\CrashReportHelper.cs,ReportCrash,The length of the statement  "                    client.Issue.Create("ZeroK-RTS"' "CrashReports"' new NewIssue($"Spring {(isDesync ? "desync" : "crash")} [{engine}]") { Body = $"```{infolog}```"' }) " is 149.
Long Statement,ChobbyLauncher,CrashReportHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\CrashReportHelper.cs,IsDesyncMessage,The length of the statement  "            return !string.IsNullOrEmpty(msg) && msg.Contains(" Sync error for ") && msg.Contains(" in frame ") && msg.Contains(" correct is "); " is 132.
Long Statement,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The length of the statement  "                Listener.SendCommand(new SteamHostGameFailed() { CausedBySteamID = GetSteamID().ToString()' Reason = "Host cannot open UDP port" }); " is 132.
Long Statement,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The length of the statement  "                var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault(); " is 123.
Long Statement,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,OnSteamOnline,The length of the statement  "            lobbyJoinRequestCallback = new Callback<GameLobbyJoinRequested_t>(t => { JoinFriendRequest(t.m_steamIDFriend.m_SteamID); }); " is 124.
Long Statement,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,OnSteamOnline,The length of the statement  "            newConnectionCallback = Callback<P2PSessionRequest_t>.Create(t => SteamNetworking.AcceptP2PSessionWithUser(t.m_steamIDRemote)); " is 127.
Long Statement,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,ProcessMessage,The length of the statement  "            if (Listener != null) Listener.SendCommand(new SteamFriendJoinedMe() { FriendSteamID = remoteUser.ToString()' FriendSteamName = cmd.JoinerName }); " is 146.
Long Statement,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,ProcessMessage,The length of the statement  "            if ((result == null) || (result.NetType == STUN_NetType.UdpBlocked)) SendSteamMessage(remoteUser' new SteamP2PClientPort()); " is 124.
Long Statement,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,Prepare,The length of the statement  "                        if (!await downloader.DownloadFile("Checking for chobby update"' DownloadType.RAPID' chobbyTag' Progress' 2)) return false; " is 123.
Long Statement,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,Prepare,The length of the statement  "                        if (!await downloader.DownloadFile("Checking for game update"' DownloadType.RAPID' GlobalConst.DefaultZkTag' Progress' 2)) return false; " is 136.
Long Statement,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,Prepare,The length of the statement  "                engine = engine ?? GetSteamEngine() ?? QueryDefaultEngine() ?? ExtractEngineFromLua(ver) ?? GlobalConst.DefaultEngineOverride; " is 126.
Long Statement,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,LaunchChobby,The length of the statement  "                    Trace.TraceWarning("Spring exit code is: {0}' {1}"' process.ExitCode' isHangKilled ? "user-killed during hang" : "assuming crash"); " is 131.
Long Statement,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ChobbylaForm)); " is 132.
Long Statement,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 16F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 156.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The length of the statement  "                    SendCommand(new DownloadImageDone() { TargetPath = args.TargetPath' ImageUrl = args.ImageUrl' RequestToken = args.RequestToken }); " is 130.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The length of the statement  "                    if (!string.IsNullOrEmpty(args.Progression3)) GameAnalytics.AddProgressionEvent(args.Status' args.Progression1' args.Progression2' args.Progression3' args.Score.Value); " is 168.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The length of the statement  "                    else if (!string.IsNullOrEmpty(args.Progression2)) GameAnalytics.AddProgressionEvent(args.Status' args.Progression1' args.Progression2' args.Score.Value); " is 154.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The length of the statement  "                    if (!string.IsNullOrEmpty(args.Progression3)) GameAnalytics.AddProgressionEvent(args.Status' args.Progression1' args.Progression2' args.Progression3); " is 150.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The length of the statement  "                    else if (!string.IsNullOrEmpty(args.Progression2)) GameAnalytics.AddProgressionEvent(args.Status' args.Progression1' args.Progression2); " is 136.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,ReportDownloadResult,The length of the statement  "                await SendCommand(new DownloadFileDone() { Name = args.Name' FileType = args.FileType' IsSuccess = down?.IsComplete == true' IsAborted = down?.IsAborted == true}); " is 163.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The length of the statement  "                    if (!await chobbyla.downloader.DownloadFile(DownloadType.ENGINE' args.Engine' null)) Trace.TraceWarning("Download of engine {0} has failed"' args.Engine); " is 154.
Long Statement,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The length of the statement  "                        if (!args.StartDemoName.EndsWith(".sdfz") && !args.StartDemoName.EndsWith(".sdf")) args.StartDemoName = args.StartDemoName + ".sdfz"; " is 133.
Long Statement,ChobbyLauncher,FrameBorderRenderer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "                if (style.N != null) northBrush = new TextureBrush(style.N.GetResizedWithCache(n.Width' n.Height' style.Interpolation)' WrapMode.TileFlipY); " is 140.
Long Statement,ChobbyLauncher,FrameBorderRenderer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "                if (style.S != null) southBrush = new TextureBrush(style.S.GetResizedWithCache(s.Width' s.Height' style.Interpolation)' WrapMode.TileFlipY); " is 140.
Long Statement,ChobbyLauncher,FrameBorderRenderer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "                if (style.E != null) eastBrush = new TextureBrush(style.E.GetResizedWithCache(e.Width' e.Height' style.Interpolation)' WrapMode.TileFlipX); " is 139.
Long Statement,ChobbyLauncher,FrameBorderRenderer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "                if (style.W != null) westBrush = new TextureBrush(style.W.GetResizedWithCache(w.Width' w.Height' style.Interpolation)' WrapMode.TileFlipX); " is 139.
Long Statement,ChobbyLauncher,FrameBorderRenderer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "                            if (southBrush != null) FillRectangleTiled(g' southBrush' sw.Width' r.Height - s.Height - 1' r.Width - sw.Width - se.Width - 1' s.Height); " is 138.
Long Statement,ChobbyLauncher,FrameBorderRenderer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "                            if (eastBrush != null) FillRectangleTiled(g' eastBrush' r.Width - e.Width - 1' ne.Height' e.Width' r.Height - ne.Height - se.Height - 1); " is 137.
Long Statement,ChobbyLauncher,TextToSpeechBase,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\TextToSpeechBase.cs,Create,The length of the statement  "                if (Environment.OSVersion.Platform != PlatformID.Unix) ret = Activator.CreateInstance(Type.GetType("ChobbyLauncher.TextToSpeechWindows")) as TextToSpeechBase; " is 158.
Long Statement,ChobbyLauncher,Program,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Program.cs,ParseCommandLine,The length of the statement  "                        "Zero-K.exe [rapid_tag] [engine_override] \n\nUse zkmenu:stable or chobby:test\nTo run local dev version use Zero-K.exe dev"); " is 126.
Long Statement,ChobbyLauncher,Program,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Program.cs,ParseCommandLine,The length of the statement  "                        "Zero-K.exe [rapid_tag] [engine_override] \n\nUse zkmenu:stable or chobby:test\nTo run local dev version use Zero-K.exe dev"); " is 126.
Long Statement,ChobbyLauncher,Program,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Program.cs,RunWrapper,The length of the statement  "                MessageBox.Show("You have outdated graphics card drivers!\r\nPlease try finding ones for your graphics card and updating them."' "Outdate graphics card driver detected"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 216.
Long Statement,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The length of the statement  "                msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                " is 128.
Empty Catch Block,ChobbyLauncher,Program,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Program.cs,RunWrapper,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Client\STUN_Client.cs,DoTransaction,The method has an empty catch block.
Magic Number,ChobbyLauncher,CrashReportHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\CrashReportHelper.cs,Truncate,The following statement contains a magic number: if (infolog.Length > maxSize) // truncate infolog in middle              {                  var lines = infolog.Lines();                  var firstPart = new List<string>();                  var lastPart = new List<string>();                  int desyncFirst = -1;                    for (int a = 0; a < lines.Length;a++)                      if (IsDesyncMessage(lines[a]))                      {                          desyncFirst = a;                          break;                      }                    if (desyncFirst != -1)                  {                      var sumSize = 0;                      var firstIndex = desyncFirst;                      var lastIndex = desyncFirst + 1;                      do                      {                          if (firstIndex >= 0)                          {                              firstPart.Add(lines[firstIndex]);                              sumSize += lines[firstIndex].Length;                          }                          if (lastIndex < lines.Length)                          {                              lastPart.Add(lines[lastIndex]);                              sumSize += lines[lastIndex].Length;                          }                            firstIndex--;                          lastIndex++;                        } while (sumSize < MaxInfologSize && (firstIndex > 0 || lastIndex < lines.Length));                      if (lastIndex < lines.Length) lastPart.Add(TruncatedString);                      if (firstIndex > 0) firstPart.Add(TruncatedString);                      firstPart.Reverse();                  }                  else                  {                        var sumSize = 0;                        for (int i = 0; i < lines.Length; i++)                      {                          int index = i%2 == 0 ? i/2 : lines.Length - i/2 - 1;                          if (sumSize + lines[index].Length < maxSize)                          {                              if (i%2 == 0) firstPart.Add(lines[index]);                              else lastPart.Add(lines[index]);                          }                          else                          {                              firstPart.Add(TruncatedString);                              break;                          }                          sumSize += lines[index].Length;                      }                      lastPart.Reverse();                  }                    infolog = string.Join("\r\n"' firstPart) + "\r\n" + string.Join("\r\n"' lastPart);              }
Magic Number,ChobbyLauncher,CrashReportHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\CrashReportHelper.cs,Truncate,The following statement contains a magic number: if (infolog.Length > maxSize) // truncate infolog in middle              {                  var lines = infolog.Lines();                  var firstPart = new List<string>();                  var lastPart = new List<string>();                  int desyncFirst = -1;                    for (int a = 0; a < lines.Length;a++)                      if (IsDesyncMessage(lines[a]))                      {                          desyncFirst = a;                          break;                      }                    if (desyncFirst != -1)                  {                      var sumSize = 0;                      var firstIndex = desyncFirst;                      var lastIndex = desyncFirst + 1;                      do                      {                          if (firstIndex >= 0)                          {                              firstPart.Add(lines[firstIndex]);                              sumSize += lines[firstIndex].Length;                          }                          if (lastIndex < lines.Length)                          {                              lastPart.Add(lines[lastIndex]);                              sumSize += lines[lastIndex].Length;                          }                            firstIndex--;                          lastIndex++;                        } while (sumSize < MaxInfologSize && (firstIndex > 0 || lastIndex < lines.Length));                      if (lastIndex < lines.Length) lastPart.Add(TruncatedString);                      if (firstIndex > 0) firstPart.Add(TruncatedString);                      firstPart.Reverse();                  }                  else                  {                        var sumSize = 0;                        for (int i = 0; i < lines.Length; i++)                      {                          int index = i%2 == 0 ? i/2 : lines.Length - i/2 - 1;                          if (sumSize + lines[index].Length < maxSize)                          {                              if (i%2 == 0) firstPart.Add(lines[index]);                              else lastPart.Add(lines[index]);                          }                          else                          {                              firstPart.Add(TruncatedString);                              break;                          }                          sumSize += lines[index].Length;                      }                      lastPart.Reverse();                  }                    infolog = string.Join("\r\n"' firstPart) + "\r\n" + string.Join("\r\n"' lastPart);              }
Magic Number,ChobbyLauncher,CrashReportHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\CrashReportHelper.cs,Truncate,The following statement contains a magic number: if (infolog.Length > maxSize) // truncate infolog in middle              {                  var lines = infolog.Lines();                  var firstPart = new List<string>();                  var lastPart = new List<string>();                  int desyncFirst = -1;                    for (int a = 0; a < lines.Length;a++)                      if (IsDesyncMessage(lines[a]))                      {                          desyncFirst = a;                          break;                      }                    if (desyncFirst != -1)                  {                      var sumSize = 0;                      var firstIndex = desyncFirst;                      var lastIndex = desyncFirst + 1;                      do                      {                          if (firstIndex >= 0)                          {                              firstPart.Add(lines[firstIndex]);                              sumSize += lines[firstIndex].Length;                          }                          if (lastIndex < lines.Length)                          {                              lastPart.Add(lines[lastIndex]);                              sumSize += lines[lastIndex].Length;                          }                            firstIndex--;                          lastIndex++;                        } while (sumSize < MaxInfologSize && (firstIndex > 0 || lastIndex < lines.Length));                      if (lastIndex < lines.Length) lastPart.Add(TruncatedString);                      if (firstIndex > 0) firstPart.Add(TruncatedString);                      firstPart.Reverse();                  }                  else                  {                        var sumSize = 0;                        for (int i = 0; i < lines.Length; i++)                      {                          int index = i%2 == 0 ? i/2 : lines.Length - i/2 - 1;                          if (sumSize + lines[index].Length < maxSize)                          {                              if (i%2 == 0) firstPart.Add(lines[index]);                              else lastPart.Add(lines[index]);                          }                          else                          {                              firstPart.Add(TruncatedString);                              break;                          }                          sumSize += lines[index].Length;                      }                      lastPart.Reverse();                  }                    infolog = string.Join("\r\n"' firstPart) + "\r\n" + string.Join("\r\n"' lastPart);              }
Magic Number,ChobbyLauncher,CrashReportHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\CrashReportHelper.cs,Truncate,The following statement contains a magic number: if (infolog.Length > maxSize) // truncate infolog in middle              {                  var lines = infolog.Lines();                  var firstPart = new List<string>();                  var lastPart = new List<string>();                  int desyncFirst = -1;                    for (int a = 0; a < lines.Length;a++)                      if (IsDesyncMessage(lines[a]))                      {                          desyncFirst = a;                          break;                      }                    if (desyncFirst != -1)                  {                      var sumSize = 0;                      var firstIndex = desyncFirst;                      var lastIndex = desyncFirst + 1;                      do                      {                          if (firstIndex >= 0)                          {                              firstPart.Add(lines[firstIndex]);                              sumSize += lines[firstIndex].Length;                          }                          if (lastIndex < lines.Length)                          {                              lastPart.Add(lines[lastIndex]);                              sumSize += lines[lastIndex].Length;                          }                            firstIndex--;                          lastIndex++;                        } while (sumSize < MaxInfologSize && (firstIndex > 0 || lastIndex < lines.Length));                      if (lastIndex < lines.Length) lastPart.Add(TruncatedString);                      if (firstIndex > 0) firstPart.Add(TruncatedString);                      firstPart.Reverse();                  }                  else                  {                        var sumSize = 0;                        for (int i = 0; i < lines.Length; i++)                      {                          int index = i%2 == 0 ? i/2 : lines.Length - i/2 - 1;                          if (sumSize + lines[index].Length < maxSize)                          {                              if (i%2 == 0) firstPart.Add(lines[index]);                              else lastPart.Add(lines[index]);                          }                          else                          {                              firstPart.Add(TruncatedString);                              break;                          }                          sumSize += lines[index].Length;                      }                      lastPart.Reverse();                  }                    infolog = string.Join("\r\n"' firstPart) + "\r\n" + string.Join("\r\n"' lastPart);              }
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,ConnectToSteam,The following statement contains a magic number: timer = new Timer(100);
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  // wait 30s for all clients to respond                  while (clientPorts.Any(x => x.Value == null))                  {                      if (DateTime.UtcNow.Subtract(startWait).TotalSeconds > 30)                          Listener.SendCommand(new SteamHostGameFailed()                          {                              CausedBySteamID = clientPorts.Where(x => x.Value == null).Select(x => x.Key).FirstOrDefault().ToString()'                              Reason = "Client didn't send his UDP port"                          });                        Task.Delay(100);                  }                    // any client without valid ip/port ?                  var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault();                  if (failedClient != 0)                      Listener.SendCommand(new SteamHostGameFailed()                      {                          CausedBySteamID = failedClient.ToString()'                          Reason = "Client could not resolve his NAT/firewall"                      });                    var hostExtPort = hostResolve.PublicEndPoint.Port;                  var hostExtIP = hostResolve.PublicEndPoint.Address.ToString();                  var hostLocalPort = ((IPEndPoint)udpClient.Client.LocalEndPoint).Port;                    var buffer = new byte[] { 1' 2' 3' 4' 5' 6 };                  foreach (var cli in clientPorts)                  {                      var player = request.Players.First(x => x.SteamID == cli.Key.ToString());                        // send some packets to each client's external IP/port to punch NAT                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                        // tell clients to connect to server's external port/IP                      SendSteamMessage(cli.Key'                          new SteamP2PDirectConnectRequest()                          {                              HostPort = hostExtPort'                              HostIP = hostExtIP'                              Name = player.Name'                              Engine = request.Engine'                              Game = request.Game'                              Map = request.Map'                              ScriptPassword = player.ScriptPassword                          });                  }                                      udpClient.Close(); // release socket                    Listener.SendCommand(new SteamHostGameSuccess() { HostPort = hostLocalPort });              });
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  // wait 30s for all clients to respond                  while (clientPorts.Any(x => x.Value == null))                  {                      if (DateTime.UtcNow.Subtract(startWait).TotalSeconds > 30)                          Listener.SendCommand(new SteamHostGameFailed()                          {                              CausedBySteamID = clientPorts.Where(x => x.Value == null).Select(x => x.Key).FirstOrDefault().ToString()'                              Reason = "Client didn't send his UDP port"                          });                        Task.Delay(100);                  }                    // any client without valid ip/port ?                  var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault();                  if (failedClient != 0)                      Listener.SendCommand(new SteamHostGameFailed()                      {                          CausedBySteamID = failedClient.ToString()'                          Reason = "Client could not resolve his NAT/firewall"                      });                    var hostExtPort = hostResolve.PublicEndPoint.Port;                  var hostExtIP = hostResolve.PublicEndPoint.Address.ToString();                  var hostLocalPort = ((IPEndPoint)udpClient.Client.LocalEndPoint).Port;                    var buffer = new byte[] { 1' 2' 3' 4' 5' 6 };                  foreach (var cli in clientPorts)                  {                      var player = request.Players.First(x => x.SteamID == cli.Key.ToString());                        // send some packets to each client's external IP/port to punch NAT                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                        // tell clients to connect to server's external port/IP                      SendSteamMessage(cli.Key'                          new SteamP2PDirectConnectRequest()                          {                              HostPort = hostExtPort'                              HostIP = hostExtIP'                              Name = player.Name'                              Engine = request.Engine'                              Game = request.Game'                              Map = request.Map'                              ScriptPassword = player.ScriptPassword                          });                  }                                      udpClient.Close(); // release socket                    Listener.SendCommand(new SteamHostGameSuccess() { HostPort = hostLocalPort });              });
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  // wait 30s for all clients to respond                  while (clientPorts.Any(x => x.Value == null))                  {                      if (DateTime.UtcNow.Subtract(startWait).TotalSeconds > 30)                          Listener.SendCommand(new SteamHostGameFailed()                          {                              CausedBySteamID = clientPorts.Where(x => x.Value == null).Select(x => x.Key).FirstOrDefault().ToString()'                              Reason = "Client didn't send his UDP port"                          });                        Task.Delay(100);                  }                    // any client without valid ip/port ?                  var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault();                  if (failedClient != 0)                      Listener.SendCommand(new SteamHostGameFailed()                      {                          CausedBySteamID = failedClient.ToString()'                          Reason = "Client could not resolve his NAT/firewall"                      });                    var hostExtPort = hostResolve.PublicEndPoint.Port;                  var hostExtIP = hostResolve.PublicEndPoint.Address.ToString();                  var hostLocalPort = ((IPEndPoint)udpClient.Client.LocalEndPoint).Port;                    var buffer = new byte[] { 1' 2' 3' 4' 5' 6 };                  foreach (var cli in clientPorts)                  {                      var player = request.Players.First(x => x.SteamID == cli.Key.ToString());                        // send some packets to each client's external IP/port to punch NAT                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                        // tell clients to connect to server's external port/IP                      SendSteamMessage(cli.Key'                          new SteamP2PDirectConnectRequest()                          {                              HostPort = hostExtPort'                              HostIP = hostExtIP'                              Name = player.Name'                              Engine = request.Engine'                              Game = request.Game'                              Map = request.Map'                              ScriptPassword = player.ScriptPassword                          });                  }                                      udpClient.Close(); // release socket                    Listener.SendCommand(new SteamHostGameSuccess() { HostPort = hostLocalPort });              });
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  // wait 30s for all clients to respond                  while (clientPorts.Any(x => x.Value == null))                  {                      if (DateTime.UtcNow.Subtract(startWait).TotalSeconds > 30)                          Listener.SendCommand(new SteamHostGameFailed()                          {                              CausedBySteamID = clientPorts.Where(x => x.Value == null).Select(x => x.Key).FirstOrDefault().ToString()'                              Reason = "Client didn't send his UDP port"                          });                        Task.Delay(100);                  }                    // any client without valid ip/port ?                  var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault();                  if (failedClient != 0)                      Listener.SendCommand(new SteamHostGameFailed()                      {                          CausedBySteamID = failedClient.ToString()'                          Reason = "Client could not resolve his NAT/firewall"                      });                    var hostExtPort = hostResolve.PublicEndPoint.Port;                  var hostExtIP = hostResolve.PublicEndPoint.Address.ToString();                  var hostLocalPort = ((IPEndPoint)udpClient.Client.LocalEndPoint).Port;                    var buffer = new byte[] { 1' 2' 3' 4' 5' 6 };                  foreach (var cli in clientPorts)                  {                      var player = request.Players.First(x => x.SteamID == cli.Key.ToString());                        // send some packets to each client's external IP/port to punch NAT                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                        // tell clients to connect to server's external port/IP                      SendSteamMessage(cli.Key'                          new SteamP2PDirectConnectRequest()                          {                              HostPort = hostExtPort'                              HostIP = hostExtIP'                              Name = player.Name'                              Engine = request.Engine'                              Game = request.Game'                              Map = request.Map'                              ScriptPassword = player.ScriptPassword                          });                  }                                      udpClient.Close(); // release socket                    Listener.SendCommand(new SteamHostGameSuccess() { HostPort = hostLocalPort });              });
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  // wait 30s for all clients to respond                  while (clientPorts.Any(x => x.Value == null))                  {                      if (DateTime.UtcNow.Subtract(startWait).TotalSeconds > 30)                          Listener.SendCommand(new SteamHostGameFailed()                          {                              CausedBySteamID = clientPorts.Where(x => x.Value == null).Select(x => x.Key).FirstOrDefault().ToString()'                              Reason = "Client didn't send his UDP port"                          });                        Task.Delay(100);                  }                    // any client without valid ip/port ?                  var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault();                  if (failedClient != 0)                      Listener.SendCommand(new SteamHostGameFailed()                      {                          CausedBySteamID = failedClient.ToString()'                          Reason = "Client could not resolve his NAT/firewall"                      });                    var hostExtPort = hostResolve.PublicEndPoint.Port;                  var hostExtIP = hostResolve.PublicEndPoint.Address.ToString();                  var hostLocalPort = ((IPEndPoint)udpClient.Client.LocalEndPoint).Port;                    var buffer = new byte[] { 1' 2' 3' 4' 5' 6 };                  foreach (var cli in clientPorts)                  {                      var player = request.Players.First(x => x.SteamID == cli.Key.ToString());                        // send some packets to each client's external IP/port to punch NAT                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                        // tell clients to connect to server's external port/IP                      SendSteamMessage(cli.Key'                          new SteamP2PDirectConnectRequest()                          {                              HostPort = hostExtPort'                              HostIP = hostExtIP'                              Name = player.Name'                              Engine = request.Engine'                              Game = request.Game'                              Map = request.Map'                              ScriptPassword = player.ScriptPassword                          });                  }                                      udpClient.Close(); // release socket                    Listener.SendCommand(new SteamHostGameSuccess() { HostPort = hostLocalPort });              });
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  // wait 30s for all clients to respond                  while (clientPorts.Any(x => x.Value == null))                  {                      if (DateTime.UtcNow.Subtract(startWait).TotalSeconds > 30)                          Listener.SendCommand(new SteamHostGameFailed()                          {                              CausedBySteamID = clientPorts.Where(x => x.Value == null).Select(x => x.Key).FirstOrDefault().ToString()'                              Reason = "Client didn't send his UDP port"                          });                        Task.Delay(100);                  }                    // any client without valid ip/port ?                  var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault();                  if (failedClient != 0)                      Listener.SendCommand(new SteamHostGameFailed()                      {                          CausedBySteamID = failedClient.ToString()'                          Reason = "Client could not resolve his NAT/firewall"                      });                    var hostExtPort = hostResolve.PublicEndPoint.Port;                  var hostExtIP = hostResolve.PublicEndPoint.Address.ToString();                  var hostLocalPort = ((IPEndPoint)udpClient.Client.LocalEndPoint).Port;                    var buffer = new byte[] { 1' 2' 3' 4' 5' 6 };                  foreach (var cli in clientPorts)                  {                      var player = request.Players.First(x => x.SteamID == cli.Key.ToString());                        // send some packets to each client's external IP/port to punch NAT                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                        // tell clients to connect to server's external port/IP                      SendSteamMessage(cli.Key'                          new SteamP2PDirectConnectRequest()                          {                              HostPort = hostExtPort'                              HostIP = hostExtIP'                              Name = player.Name'                              Engine = request.Engine'                              Game = request.Game'                              Map = request.Map'                              ScriptPassword = player.ScriptPassword                          });                  }                                      udpClient.Close(); // release socket                    Listener.SendCommand(new SteamHostGameSuccess() { HostPort = hostLocalPort });              });
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,PrepareToHostP2PGame,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  // wait 30s for all clients to respond                  while (clientPorts.Any(x => x.Value == null))                  {                      if (DateTime.UtcNow.Subtract(startWait).TotalSeconds > 30)                          Listener.SendCommand(new SteamHostGameFailed()                          {                              CausedBySteamID = clientPorts.Where(x => x.Value == null).Select(x => x.Key).FirstOrDefault().ToString()'                              Reason = "Client didn't send his UDP port"                          });                        Task.Delay(100);                  }                    // any client without valid ip/port ?                  var failedClient = clientPorts.Where(x => (x.Value.IP == null) || (x.Value.Port == 0)).Select(x => x.Key).FirstOrDefault();                  if (failedClient != 0)                      Listener.SendCommand(new SteamHostGameFailed()                      {                          CausedBySteamID = failedClient.ToString()'                          Reason = "Client could not resolve his NAT/firewall"                      });                    var hostExtPort = hostResolve.PublicEndPoint.Port;                  var hostExtIP = hostResolve.PublicEndPoint.Address.ToString();                  var hostLocalPort = ((IPEndPoint)udpClient.Client.LocalEndPoint).Port;                    var buffer = new byte[] { 1' 2' 3' 4' 5' 6 };                  foreach (var cli in clientPorts)                  {                      var player = request.Players.First(x => x.SteamID == cli.Key.ToString());                        // send some packets to each client's external IP/port to punch NAT                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                      udpClient.Send(buffer' buffer.Length' cli.Value.IP' cli.Value.Port);                        // tell clients to connect to server's external port/IP                      SendSteamMessage(cli.Key'                          new SteamP2PDirectConnectRequest()                          {                              HostPort = hostExtPort'                              HostIP = hostExtIP'                              Name = player.Name'                              Engine = request.Engine'                              Game = request.Game'                              Map = request.Map'                              ScriptPassword = player.ScriptPassword                          });                  }                                      udpClient.Close(); // release socket                    Listener.SendCommand(new SteamHostGameSuccess() { HostPort = hostLocalPort });              });
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,CreateLobbyAsync,The following statement contains a magic number: if (IsOnline)              {                  var onLobbyCreated = new CallResult<LobbyCreated_t>();                  var callID = SteamMatchmaking.CreateLobby(ELobbyType.k_ELobbyTypeFriendsOnly' 16);                  onLobbyCreated.Set(callID'                      (t' failure) =>                      {                          if (!failure && (t.m_eResult == EResult.k_EResultOK)) onCreated?.Invoke(t.m_ulSteamIDLobby);                          else onCreated?.Invoke((ulong?)null);                      });              }
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,GetClientAuthToken,The following statement contains a magic number: var buf = new byte[256];
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,OnSteamOnline,The following statement contains a magic number: ev.WaitOne(2000);
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,StunUDP,The following statement contains a magic number: foreach (var server in servers)              {                  var host = server.Split(':').FirstOrDefault();                  try                  {                      int port;                      if (!int.TryParse(server.Split(':').LastOrDefault()' out port) || (port == 0)) port = 3478;                        return STUN_Client.Query(host' port' socket.Client);                  }                  catch (Exception ex)                  {                      Trace.TraceWarning("STUN request to {0} failed : {1}"' host' ex);                  }              }
Magic Number,ChobbyLauncher,SteamClientHelper,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\SteamClient.cs,TimerOnElapsed,The following statement contains a magic number: try              {                  if (isDisposed) return;                  timer?.Stop();                  if (tickCounter % 50 == 0)                      if (!IsOnline)                          if (SteamAPI.Init() && SteamAPI.IsSteamRunning())                          {                              IsOnline = true;                                OnSteamOnline();                          }                  if (IsOnline)                      if (SteamAPI.IsSteamRunning())                      {                          SteamAPI.RunCallbacks();                            uint networkSize;                          while (SteamNetworking.IsP2PPacketAvailable(out networkSize))                              try                              {                                  var buf = new byte[networkSize];                                  CSteamID remoteUser;                                  if (SteamNetworking.ReadP2PPacket(buf' networkSize' out networkSize' out remoteUser))                                  {                                      var str = Encoding.UTF8.GetString(buf);                                      Trace.TraceInformation("SteamP2P << {0} : {1}"' remoteUser.m_SteamID' str);                                      dynamic cmd = steamCommandSerializer.DeserializeLine(str);                                      ProcessMessage(remoteUser.m_SteamID' cmd);                                  }                              }                              catch (Exception ex)                              {                                  Trace.TraceError("Error processing steam P2P message: {0}"' ex);                              }                      }                      else                      {                          IsOnline = false;                          SteamOffline();                      }              }              catch (DllNotFoundException ex)              {                  Trace.TraceWarning("Error initializing steam' disabling susbystem: {0} library not found"' ex.Message);                  if (timer != null) timer.Dispose();              }              catch (Exception ex)              {                  Trace.TraceError(ex.ToString());              }              finally              {                  tickCounter++;                  if (!isDisposed) timer?.Start();              }
Magic Number,ChobbyLauncher,TextToSpeechLinux,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\TextToSpeechLinux.cs,Say,The following statement contains a magic number: var volint = ((int)volume.Clamp(0' 100) * 2 - 100.0).Clamp(-100' 100);
Magic Number,ChobbyLauncher,TextToSpeechLinux,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\TextToSpeechLinux.cs,Say,The following statement contains a magic number: var volint = ((int)volume.Clamp(0' 100) * 2 - 100.0).Clamp(-100' 100);
Magic Number,ChobbyLauncher,TextToSpeechLinux,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\TextToSpeechLinux.cs,Say,The following statement contains a magic number: var volint = ((int)volume.Clamp(0' 100) * 2 - 100.0).Clamp(-100' 100);
Magic Number,ChobbyLauncher,TextToSpeechLinux,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\TextToSpeechLinux.cs,Say,The following statement contains a magic number: var volint = ((int)volume.Clamp(0' 100) * 2 - 100.0).Clamp(-100' 100);
Magic Number,ChobbyLauncher,TextToSpeechLinux,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\TextToSpeechLinux.cs,Say,The following statement contains a magic number: var volint = ((int)volume.Clamp(0' 100) * 2 - 100.0).Clamp(-100' 100);
Magic Number,ChobbyLauncher,TextToSpeechWindows,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\TextToSpeechWindows.cs,SetVolume,The following statement contains a magic number: volume = volume.Clamp(0' 100);
Magic Number,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,Prepare,The following statement contains a magic number: try              {                  PackageDownloader.Version ver = null;                  internalName = null;                    if (!isDev)                  {                      if (!Debugger.IsAttached && !IsSteamFolder)                      {                          Status = "Checking for self-upgrade";                          var selfUpdater = new SelfUpdater("Zero-K");                          selfUpdater.ProgramUpdated += delegate                          {                              Process.Start(Application.ExecutablePath' string.Join(" "' Environment.GetCommandLineArgs().Skip(1)));                              Environment.Exit(0);                          };                          var task = new Task<bool>(() => selfUpdater.CheckForUpdate());                          task.Start();                          await task;                      }                        if (!IsSteamFolder)                      {                          downloader.RapidHandling = RapidHandling.SdzNameHash;                            if (!await downloader.DownloadFile("Checking for chobby update"' DownloadType.RAPID' chobbyTag' Progress' 2)) return false;                          if (!await downloader.DownloadFile("Checking for game update"' DownloadType.RAPID' GlobalConst.DefaultZkTag' Progress' 2)) return false;                            downloader.RapidHandling = RapidHandling.DefaultSdp;                            ver = downloader.PackageDownloader.GetByTag(chobbyTag);                          internalName = ver.InternalName;                      }                      else                      {                          internalName = GetSteamChobby();                          ver = downloader.PackageDownloader.GetByInternalName(internalName) ?? downloader.PackageDownloader.GetByTag(chobbyTag);                      }                        if (ver == null)                      {                          Status = "Rapid package appears to be corrupted' please clear the folder";                          return false;                      }                    }                  else internalName = "Chobby $VERSION";                      engine = engine ?? GetSteamEngine() ?? QueryDefaultEngine() ?? ExtractEngineFromLua(ver) ?? GlobalConst.DefaultEngineOverride;                    try                  {                      GameAnalytics.ConfigureGameEngineVersion(internalName);                      GameAnalytics.ConfigureSdkGameEngineVersion(engine);                  }                  catch (Exception ex)                  {                      Trace.TraceWarning("Game analytics failed to configure version: {0}"' ex);                  }                      if (!IsSteamFolder)                  {                      if (!await downloader.DownloadFile("Downloading engine"' DownloadType.ENGINE' engine' Progress' 2)) return false;                        if (!await downloader.UpdateMissions(Progress))                      {                          Trace.TraceWarning("Mission update has failed");                          Status = "Error updating missions";                      }                  }                    downloader.UpdatePublicCommunityInfo(Progress);                                    if (!isDev)                  {                      Status = "Reseting configs and deploying AIs";                      ConfigVersions.DeployAndResetConfigs(paths' ver);                  }                      return true;              }              catch (Exception ex)              {                  Trace.TraceError("Unexpected error: {0}"' ex);                  GameAnalytics.AddErrorEvent(EGAErrorSeverity.Error' $"Unexpected error {Status}: {ex}");                  Status = "Unexpected error preparing chobby launch: " + ex.Message;                  return false;              }
Magic Number,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,Prepare,The following statement contains a magic number: try              {                  PackageDownloader.Version ver = null;                  internalName = null;                    if (!isDev)                  {                      if (!Debugger.IsAttached && !IsSteamFolder)                      {                          Status = "Checking for self-upgrade";                          var selfUpdater = new SelfUpdater("Zero-K");                          selfUpdater.ProgramUpdated += delegate                          {                              Process.Start(Application.ExecutablePath' string.Join(" "' Environment.GetCommandLineArgs().Skip(1)));                              Environment.Exit(0);                          };                          var task = new Task<bool>(() => selfUpdater.CheckForUpdate());                          task.Start();                          await task;                      }                        if (!IsSteamFolder)                      {                          downloader.RapidHandling = RapidHandling.SdzNameHash;                            if (!await downloader.DownloadFile("Checking for chobby update"' DownloadType.RAPID' chobbyTag' Progress' 2)) return false;                          if (!await downloader.DownloadFile("Checking for game update"' DownloadType.RAPID' GlobalConst.DefaultZkTag' Progress' 2)) return false;                            downloader.RapidHandling = RapidHandling.DefaultSdp;                            ver = downloader.PackageDownloader.GetByTag(chobbyTag);                          internalName = ver.InternalName;                      }                      else                      {                          internalName = GetSteamChobby();                          ver = downloader.PackageDownloader.GetByInternalName(internalName) ?? downloader.PackageDownloader.GetByTag(chobbyTag);                      }                        if (ver == null)                      {                          Status = "Rapid package appears to be corrupted' please clear the folder";                          return false;                      }                    }                  else internalName = "Chobby $VERSION";                      engine = engine ?? GetSteamEngine() ?? QueryDefaultEngine() ?? ExtractEngineFromLua(ver) ?? GlobalConst.DefaultEngineOverride;                    try                  {                      GameAnalytics.ConfigureGameEngineVersion(internalName);                      GameAnalytics.ConfigureSdkGameEngineVersion(engine);                  }                  catch (Exception ex)                  {                      Trace.TraceWarning("Game analytics failed to configure version: {0}"' ex);                  }                      if (!IsSteamFolder)                  {                      if (!await downloader.DownloadFile("Downloading engine"' DownloadType.ENGINE' engine' Progress' 2)) return false;                        if (!await downloader.UpdateMissions(Progress))                      {                          Trace.TraceWarning("Mission update has failed");                          Status = "Error updating missions";                      }                  }                    downloader.UpdatePublicCommunityInfo(Progress);                                    if (!isDev)                  {                      Status = "Reseting configs and deploying AIs";                      ConfigVersions.DeployAndResetConfigs(paths' ver);                  }                      return true;              }              catch (Exception ex)              {                  Trace.TraceError("Unexpected error: {0}"' ex);                  GameAnalytics.AddErrorEvent(EGAErrorSeverity.Error' $"Unexpected error {Status}: {ex}");                  Status = "Unexpected error preparing chobby launch: " + ex.Message;                  return false;              }
Magic Number,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,Prepare,The following statement contains a magic number: try              {                  PackageDownloader.Version ver = null;                  internalName = null;                    if (!isDev)                  {                      if (!Debugger.IsAttached && !IsSteamFolder)                      {                          Status = "Checking for self-upgrade";                          var selfUpdater = new SelfUpdater("Zero-K");                          selfUpdater.ProgramUpdated += delegate                          {                              Process.Start(Application.ExecutablePath' string.Join(" "' Environment.GetCommandLineArgs().Skip(1)));                              Environment.Exit(0);                          };                          var task = new Task<bool>(() => selfUpdater.CheckForUpdate());                          task.Start();                          await task;                      }                        if (!IsSteamFolder)                      {                          downloader.RapidHandling = RapidHandling.SdzNameHash;                            if (!await downloader.DownloadFile("Checking for chobby update"' DownloadType.RAPID' chobbyTag' Progress' 2)) return false;                          if (!await downloader.DownloadFile("Checking for game update"' DownloadType.RAPID' GlobalConst.DefaultZkTag' Progress' 2)) return false;                            downloader.RapidHandling = RapidHandling.DefaultSdp;                            ver = downloader.PackageDownloader.GetByTag(chobbyTag);                          internalName = ver.InternalName;                      }                      else                      {                          internalName = GetSteamChobby();                          ver = downloader.PackageDownloader.GetByInternalName(internalName) ?? downloader.PackageDownloader.GetByTag(chobbyTag);                      }                        if (ver == null)                      {                          Status = "Rapid package appears to be corrupted' please clear the folder";                          return false;                      }                    }                  else internalName = "Chobby $VERSION";                      engine = engine ?? GetSteamEngine() ?? QueryDefaultEngine() ?? ExtractEngineFromLua(ver) ?? GlobalConst.DefaultEngineOverride;                    try                  {                      GameAnalytics.ConfigureGameEngineVersion(internalName);                      GameAnalytics.ConfigureSdkGameEngineVersion(engine);                  }                  catch (Exception ex)                  {                      Trace.TraceWarning("Game analytics failed to configure version: {0}"' ex);                  }                      if (!IsSteamFolder)                  {                      if (!await downloader.DownloadFile("Downloading engine"' DownloadType.ENGINE' engine' Progress' 2)) return false;                        if (!await downloader.UpdateMissions(Progress))                      {                          Trace.TraceWarning("Mission update has failed");                          Status = "Error updating missions";                      }                  }                    downloader.UpdatePublicCommunityInfo(Progress);                                    if (!isDev)                  {                      Status = "Reseting configs and deploying AIs";                      ConfigVersions.DeployAndResetConfigs(paths' ver);                  }                      return true;              }              catch (Exception ex)              {                  Trace.TraceError("Unexpected error: {0}"' ex);                  GameAnalytics.AddErrorEvent(EGAErrorSeverity.Error' $"Unexpected error {Status}: {ex}");                  Status = "Unexpected error preparing chobby launch: " + ex.Message;                  return false;              }
Magic Number,ChobbyLauncher,Chobbyla,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\Chobbyla.cs,LaunchChobby,The following statement contains a magic number: process.Exited += (sender' args) =>              {                  var isCrash = process.ExitCode != 0;                  var isHangKilled = (process.ExitCode == -805306369); // hanged' drawn and quartered                  if (isCrash)                  {                      Trace.TraceWarning("Spring exit code is: {0}' {1}"' process.ExitCode' isHangKilled ? "user-killed during hang" : "assuming crash");                  }                  tcs.TrySetResult(!isCrash);              };
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,ChobbylaForm,The following statement contains a magic number: btnCancel.Image = Shraka.exit.GetResized(16'16);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,ChobbylaForm,The following statement contains a magic number: btnCancel.Image = Shraka.exit.GetResized(16'16);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,OnPaintBackground,The following statement contains a magic number: e.Graphics.Clear(Color.FromArgb(255' 0' 30' 40));
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,OnPaintBackground,The following statement contains a magic number: e.Graphics.Clear(Color.FromArgb(255' 0' 30' 40));
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,OnPaintBackground,The following statement contains a magic number: e.Graphics.Clear(Color.FromArgb(255' 0' 30' 40));
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,ChobbylaForm_Closing,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,timer1_Tick,The following statement contains a magic number: if (cd != null)              {                  lb1.Text = $"Downloading {cd.Name}  {cd.CurrentSpeed / 1024}kB/s  ETA: {cd.TimeRemaining}";                  progressBar1.Value = Math.Max(0' Math.Min(100' (int)Math.Round(cd.TotalProgress)));              }
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,timer1_Tick,The following statement contains a magic number: if (cd != null)              {                  lb1.Text = $"Downloading {cd.Name}  {cd.CurrentSpeed / 1024}kB/s  ETA: {cd.TimeRemaining}";                  progressBar1.Value = Math.Max(0' Math.Min(100' (int)Math.Round(cd.TotalProgress)));              }
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Location = new System.Drawing.Point(29' 63);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Location = new System.Drawing.Point(29' 63);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Size = new System.Drawing.Size(52' 13);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Size = new System.Drawing.Size(52' 13);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point(32' 89);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point(32' 89);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size(306' 23);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size(306' 23);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.timer1.Interval = 200;
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 16F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(27' 19);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(27' 19);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(310' 26);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(310' 26);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(344' 4);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(344' 4);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(16' 16);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(16' 16);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 2;
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(371' 178);
Magic Number,ChobbyLauncher,ChobbylaForm,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(371' 178);
Magic Number,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,ChobbylaLocalListener,The following statement contains a magic number: timer = new Timer((o)=>OnTimerTick()' this' 500' 500);
Magic Number,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,ChobbylaLocalListener,The following statement contains a magic number: timer = new Timer((o)=>OnTimerTick()' this' 500' 500);
Magic Number,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The following statement contains a magic number: try              {                  switch (args.Level)                  {                      case 3:                          GameAnalytics.ConfigureAvailableCustomDimensions03(args.List);                          break;                      case 2:                          GameAnalytics.ConfigureAvailableCustomDimensions02(args.List);                          break;                      case 1:                      default:                          GameAnalytics.ConfigureAvailableCustomDimensions03(args.List);                          break;                  }              }              catch (Exception ex)              {                  Trace.TraceError("Error configuring GA custom dimensions: {0}"' ex);              }
Magic Number,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The following statement contains a magic number: try              {                  switch (args.Level)                  {                      case 3:                          GameAnalytics.ConfigureAvailableCustomDimensions03(args.List);                          break;                      case 2:                          GameAnalytics.ConfigureAvailableCustomDimensions02(args.List);                          break;                      case 1:                      default:                          GameAnalytics.ConfigureAvailableCustomDimensions03(args.List);                          break;                  }              }              catch (Exception ex)              {                  Trace.TraceError("Error configuring GA custom dimensions: {0}"' ex);              }
Magic Number,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The following statement contains a magic number: try              {                  switch (args.Level)                  {                      case 3:                          GameAnalytics.SetCustomDimension03(args.Value);                          break;                      case 2:                          GameAnalytics.SetCustomDimension02(args.Value);                          break;                      case 1:                      default:                          GameAnalytics.SetCustomDimension01(args.Value);                          break;                  }              }              catch (Exception ex)              {                  Trace.TraceError("Error setting GA custom dimensions: {0}"' ex);              }
Magic Number,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,Process,The following statement contains a magic number: try              {                  switch (args.Level)                  {                      case 3:                          GameAnalytics.SetCustomDimension03(args.Value);                          break;                      case 2:                          GameAnalytics.SetCustomDimension02(args.Value);                          break;                      case 1:                      default:                          GameAnalytics.SetCustomDimension01(args.Value);                          break;                  }              }              catch (Exception ex)              {                  Trace.TraceError("Error setting GA custom dimensions: {0}"' ex);              }
Magic Number,ChobbyLauncher,ChobbylaLocalListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\ChobbylaLocalListener.cs,ReportDownloadResult,The following statement contains a magic number: try              {                  if (down != null)                  {                      await down.WaitHandle.AsTask(TimeSpan.FromMinutes(30));                  }                  await SendCommand(new DownloadFileDone() { Name = args.Name' FileType = args.FileType' IsSuccess = down?.IsComplete == true' IsAborted = down?.IsAborted == true});              }              catch (Exception ex)              {                  Trace.TraceError("Error processing download result for file {0} : {1}"' args.Name' ex);              }
Magic Number,ChobbyLauncher,CacheKey,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = Rectangle.GetHashCode();                      hashCode = (hashCode*397) ^ (int)Style;                      hashCode = (hashCode*397) ^ OverlayStyle.GetHashCode();                      return hashCode;                  }
Magic Number,ChobbyLauncher,CacheKey,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\FrameBorderRenderer.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = Rectangle.GetHashCode();                      hashCode = (hashCode*397) ^ (int)Style;                      hashCode = (hashCode*397) ^ OverlayStyle.GetHashCode();                      return hashCode;                  }
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Client\STUN_Client.cs,Query,The following statement contains a magic number: socket.ReceiveTimeout = 3000;
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Client\STUN_Client.cs,Query,The following statement contains a magic number: socket.SendTimeout = 3000;
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Client\STUN_Client.cs,DoTransaction,The following statement contains a magic number: while(startTime.AddSeconds(2) > DateTime.Now){                  try{                      socket.SendTo(requestBytes'remoteEndPoint);                        // We got response.                      if(socket.Poll(100'SelectMode.SelectRead)){                          byte[] receiveBuffer = new byte[512];                          socket.Receive(receiveBuffer);                            // Parse message                          STUN_Message response = new STUN_Message();                          response.Parse(receiveBuffer);                            // Check that transaction ID matches or not response what we want.                          if(request.TransactionID.Equals(response.TransactionID)){                              return response;                          }                      }                  }                  catch{                  }              }
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Client\STUN_Client.cs,DoTransaction,The following statement contains a magic number: while(startTime.AddSeconds(2) > DateTime.Now){                  try{                      socket.SendTo(requestBytes'remoteEndPoint);                        // We got response.                      if(socket.Poll(100'SelectMode.SelectRead)){                          byte[] receiveBuffer = new byte[512];                          socket.Receive(receiveBuffer);                            // Parse message                          STUN_Message response = new STUN_Message();                          response.Parse(receiveBuffer);                            // Check that transaction ID matches or not response what we want.                          if(request.TransactionID.Equals(response.TransactionID)){                              return response;                          }                      }                  }                  catch{                  }              }
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Client\STUN_Client.cs,DoTransaction,The following statement contains a magic number: while(startTime.AddSeconds(2) > DateTime.Now){                  try{                      socket.SendTo(requestBytes'remoteEndPoint);                        // We got response.                      if(socket.Poll(100'SelectMode.SelectRead)){                          byte[] receiveBuffer = new byte[512];                          socket.Receive(receiveBuffer);                            // Parse message                          STUN_Message response = new STUN_Message();                          response.Parse(receiveBuffer);                            // Check that transaction ID matches or not response what we want.                          if(request.TransactionID.Equals(response.TransactionID)){                              return response;                          }                      }                  }                  catch{                  }              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: if(data.Length < 20){                  throw new ArgumentException("Invalid STUN message value !");              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: int messageType = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: int messageLength = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: byte[] guid = new byte[16];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: Array.Copy(data'offset'guid'0'16);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: offset += 16;
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: while((offset - 20) < messageLength){                  ParseAttribute(data'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: byte[] msg = new byte[512];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[offset++] = (byte)((int)this.Type >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: Array.Copy(m_pTransactionID.ToByteArray()'0'msg'offset'16);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: offset += 16;
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: AttributeType type = (AttributeType)(data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: int length = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: int port = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: byte[] ip = new byte[4];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: ip[2] = data[offset++];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: ip[3] = data[offset++];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)((int)type >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = 8;
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ChobbyLauncher\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)(endPoint.Port >> 8);
