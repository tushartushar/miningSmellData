Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,RenderToGraphics,The method has 83 lines of code.
Long Method,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The method has 104 lines of code.
Long Method,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The method has 79 lines of code.
Long Method,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,CreateTopRightMiniIcons,The method has 81 lines of code.
Long Method,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The method has 88 lines of code.
Long Method,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The method has 110 lines of code.
Long Method,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The method has 209 lines of code.
Long Method,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The method has 86 lines of code.
Long Method,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,The method has 67 lines of code.
Long Method,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The method has 172 lines of code.
Long Method,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The method has 182 lines of code.
Long Method,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The method has 74 lines of code.
Long Method,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,ParseTable,The method has 232 lines of code.
Long Method,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The method has 102 lines of code.
Long Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadMissionSlot,The method has 66 lines of code.
Long Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadOptionsTable,The method has 117 lines of code.
Long Method,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The method has 95 lines of code.
Long Method,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The method has 96 lines of code.
Long Method,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The method has 71 lines of code.
Long Method,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The method has 397 lines of code.
Long Method,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The method has 105 lines of code.
Long Method,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The method has 94 lines of code.
Long Method,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The method has 152 lines of code.
Long Method,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetChannelContextMenu,The method has 71 lines of code.
Long Method,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetPlayerContextMenu,The method has 69 lines of code.
Long Method,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetPrivateMessageContextMenu,The method has 64 lines of code.
Long Method,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The method has 137 lines of code.
Long Method,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The method has 508 lines of code.
Long Method,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The method has 89 lines of code.
Long Method,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The method has 80 lines of code.
Long Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The method has 108 lines of code.
Long Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The method has 106 lines of code.
Long Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The method has 236 lines of code.
Long Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The method has 76 lines of code.
Long Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The method has 100 lines of code.
Long Method,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The method has 88 lines of code.
Long Method,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,AddTab,The method has 76 lines of code.
Long Method,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,ChatControl,The method has 76 lines of code.
Long Method,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The method has 235 lines of code.
Long Method,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The method has 82 lines of code.
Long Method,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The method has 83 lines of code.
Long Method,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The method has 127 lines of code.
Long Method,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The method has 113 lines of code.
Long Method,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The method has 186 lines of code.
Long Method,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The method has 180 lines of code.
Complex Method,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,Cyclomatic complexity of the method is 38
Complex Method,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,RenderToGraphics,Cyclomatic complexity of the method is 28
Complex Method,ZeroKLobby,ExtendedWebBrowser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ExtendedWebBrowser.cs,WndProc,Cyclomatic complexity of the method is 10
Complex Method,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,StartScriptMission,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,RecordingFunc,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,Configure,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,ApplyFileChanges,Cyclomatic complexity of the method is 11
Complex Method,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,GetAndSetConfigValue,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,NotifyUser,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,AddToHistory,Cyclomatic complexity of the method is 8
Complex Method,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,Cyclomatic complexity of the method is 13
Complex Method,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,Cyclomatic complexity of the method is 20
Complex Method,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,Cyclomatic complexity of the method is 24
Complex Method,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,FinalizeShutdown,Cyclomatic complexity of the method is 8
Complex Method,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,Cyclomatic complexity of the method is 12
Complex Method,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,CreateDesktopShortcut,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,UploadFile,Cyclomatic complexity of the method is 10
Complex Method,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,Cyclomatic complexity of the method is 16
Complex Method,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,MoveThumb,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.Controls,SoundPalette,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\SoundPalette.cs,Play,Cyclomatic complexity of the method is 14
Complex Method,ZeroKLobby.Controls,SwitchPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\SwitchPanel.cs,SwitchContent,Cyclomatic complexity of the method is 8
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,Cyclomatic complexity of the method is 50
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,MakeInfoLabel,Cyclomatic complexity of the method is 10
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,ParseTable,Cyclomatic complexity of the method is 40
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,SaveKeyValuePair,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetSpringAIs,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,Cyclomatic complexity of the method is 16
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadSideInfo,Cyclomatic complexity of the method is 16
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadMissionSlot,Cyclomatic complexity of the method is 37
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetAIInfo,Cyclomatic complexity of the method is 16
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadLuaAI,Cyclomatic complexity of the method is 13
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ParseModInfo,Cyclomatic complexity of the method is 34
Complex Method,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadOptionsTable,Cyclomatic complexity of the method is 64
Complex Method,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,Cyclomatic complexity of the method is 13
Complex Method,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorWords,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,timedUpdate_Tick,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,BattleWordFilter,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,OnMouseDown,Cyclomatic complexity of the method is 10
Complex Method,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,FilterSpecialWordCheck,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,client_Said,Cyclomatic complexity of the method is 11
Complex Method,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,Cyclomatic complexity of the method is 13
Complex Method,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetBotContextMenu,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetPlayerContextMenu,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,ModStore,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModStore.cs,GetModOptionSummary,Cyclomatic complexity of the method is 18
Complex Method,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,GetProposedChanges,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,Cyclomatic complexity of the method is 29
Complex Method,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,SetModOptions,Cyclomatic complexity of the method is 20
Complex Method,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,PlayerBox_MouseClick,Cyclomatic complexity of the method is 11
Complex Method,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,RenderPlayers,Cyclomatic complexity of the method is 10
Complex Method,ZeroKLobby.MicroLobby,DudeRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\DudeRenderer.cs,GetImage,Cyclomatic complexity of the method is 13
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseMove,Cyclomatic complexity of the method is 10
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseUp,Cyclomatic complexity of the method is 10
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,Cyclomatic complexity of the method is 19
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,Cyclomatic complexity of the method is 28
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,Cyclomatic complexity of the method is 79
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,Cyclomatic complexity of the method is 11
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,Cyclomatic complexity of the method is 19
Complex Method,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,Cyclomatic complexity of the method is 9
Complex Method,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,OnPreviewKeyDown,Cyclomatic complexity of the method is 16
Complex Method,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,CompleteNick,Cyclomatic complexity of the method is 8
Complex Method,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,SetHilite,Cyclomatic complexity of the method is 11
Complex Method,ZeroKLobby.MicroLobby,PlayerListBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListBox.cs,RealItemsOnCollectionChanged,Cyclomatic complexity of the method is 7
Complex Method,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,FilterPlayers,Cyclomatic complexity of the method is 11
Complex Method,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,FilterSpecialWordCheck,Cyclomatic complexity of the method is 12
Complex Method,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,DrawThemeCloseButton,Cyclomatic complexity of the method is 12
Complex Method,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,Cyclomatic complexity of the method is 18
Complex Method,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,Cyclomatic complexity of the method is 11
Complex Method,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,UpdateGui,Cyclomatic complexity of the method is 12
Complex Method,ZeroKLobby.Steam,SteamClientHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamClientHelper.cs,TimerOnElapsed,Cyclomatic complexity of the method is 8
Long Parameter List,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,HostBattle,The method has 5 parameters.
Long Parameter List,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,StartReplay,The method has 4 parameters.
Long Parameter List,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,FillRectangleTiled,The method has 6 parameters.
Long Parameter List,ZeroKLobby,NewWindow3EventArgs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ExtendedWebBrowser.cs,NewWindow3EventArgs,The method has 5 parameters.
Long Parameter List,ZeroKLobby,IHTMLDocument2,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ExtendedWebBrowser.cs,Open,The method has 4 parameters.
Long Parameter List,ZeroKLobby,IHTMLWindow2,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ExtendedWebBrowser.cs,Open,The method has 4 parameters.
Long Parameter List,ZeroKLobby,ExtendedWebBrowser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ExtendedWebBrowser.cs,OnNewWindow3,The method has 5 parameters.
Long Parameter List,ZeroKLobby,GlobalHook,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\GlobalHook.cs,CallNextHookEx,The method has 4 parameters.
Long Parameter List,ZeroKLobby,GlobalHook,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\GlobalHook.cs,SetWindowsHookEx,The method has 4 parameters.
Long Parameter List,ZeroKLobby,ReplayStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ReplayStarter.cs,StartReplay,The method has 4 parameters.
Long Parameter List,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,PlaySoundFromNetworkData,The method has 5 parameters.
Long Parameter List,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,NotifyUser,The method has 4 parameters.
Long Parameter List,ZeroKLobby,LogTraceListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\FormLog.cs,TraceEvent,The method has 5 parameters.
Long Parameter List,ZeroKLobby,LogTraceListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\FormLog.cs,TraceEvent,The method has 6 parameters.
Long Parameter List,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,UploadFile,The method has 6 parameters.
Long Parameter List,ZeroKLobby.Controls,SwitchPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\SwitchPanel.cs,SlideLeft,The method has 4 parameters.
Long Parameter List,ZeroKLobby.Controls,SwitchPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\SwitchPanel.cs,SlideBottom,The method has 4 parameters.
Long Parameter List,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,ParseTable,The method has 5 parameters.
Long Parameter List,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,CaptureChar,The method has 4 parameters.
Long Parameter List,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,UndoCaptureThisChar,The method has 4 parameters.
Long Parameter List,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,SaveKeyValuePair,The method has 9 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintDivider,The method has 4 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintOpenBattleButton,The method has 5 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintBattle,The method has 6 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,DudeRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\DudeRenderer.cs,GetImage,The method has 8 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,DT,The method has 7 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,DT,The method has 7 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,AddTab,The method has 6 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The method has 5 parameters.
Long Parameter List,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,SendMessage,The method has 4 parameters.
Long Statement,ZeroKLobby,BrowserInterop,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\BrowserInterop.cs,AddAuthToUrl,The length of the statement  "		if (url.ToLower ().Contains (GlobalConst.BaseSiteUrl) && !url.ToLower ().Contains (string.Format ("{0}="' GlobalConst.SessionTokenVariable))) { " is 143.
Long Statement,ZeroKLobby,BrowserInterop,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\BrowserInterop.cs,AddAuthToUrl,The length of the statement  "			url = url + string.Format ("{0}={1}&{2}=1&zkl=1"' GlobalConst.SessionTokenVariable' Program.TasClient.SessionToken' GlobalConst.LobbyAccessCookieName); " is 151.
Long Statement,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "			northBrush = new TextureBrush (style.N.GetResizedWithCache (n.Width' n.Height' style.Interpolation)' WrapMode.TileFlipY); " is 121.
Long Statement,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "			southBrush = new TextureBrush (style.S.GetResizedWithCache (s.Width' s.Height' style.Interpolation)' WrapMode.TileFlipY); " is 121.
Long Statement,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "			eastBrush = new TextureBrush (style.E.GetResizedWithCache (e.Width' e.Height' style.Interpolation)' WrapMode.TileFlipX); " is 120.
Long Statement,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "			westBrush = new TextureBrush (style.W.GetResizedWithCache (w.Width' w.Height' style.Interpolation)' WrapMode.TileFlipX); " is 120.
Long Statement,ZeroKLobby,FrameBorderRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\FrameBorderRenderer.cs,RenderToGraphics,The length of the statement  "					g.FillRectangle (final' nw.Width + tl.Width' nw.Height + tl.Height' r.Width - nw.Width - ne.Width - 1 - br.Width - tl.Width' r.Height - sw.Height - nw.Height - 1 - br.Height - tl.Height); " is 187.
Long Statement,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,StartMission,The length of the statement  "	var engine = Program.Downloader.GetResource (DownloadType.ENGINE' Program.TasClient.ServerWelcome.Engine ?? GlobalConst.DefaultEngineOverride); " is 143.
Long Statement,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,StartMission,The length of the statement  "	spring.RunLocalScriptGame (modInfo.MissionScript' Program.TasClient.ServerWelcome.Engine ?? GlobalConst.DefaultEngineOverride); " is 127.
Long Statement,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,StartScriptMission,The length of the statement  "	downloads.Add (Program.Downloader.GetResource (DownloadType.ENGINE' Program.TasClient.ServerWelcome.Engine ?? GlobalConst.DefaultEngineOverride)); " is 146.
Long Statement,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,StartScriptMission,The length of the statement  "	spring.RunLocalScriptGame (profile.StartScript.Replace ("%MOD%"' profile.ModName).Replace ("%MAP%"' profile.MapName).Replace ("%NAME%"' name)' Program.TasClient.ServerWelcome.Engine ?? GlobalConst.DefaultEngineOverride); " is 220.
Long Statement,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,RecordMissionResult,The length of the statement  "					service.SubmitMissionScore (Program.Conf.LobbyPlayerName' ZkData.Utils.HashLobbyPassword (Program.Conf.LobbyPlayerPassword)' modInfo.Name' spring.Context.MissionScore ?? 0' spring.Context.MissionFrame / 30' spring.Context.MissionVars); " is 235.
Long Statement,ZeroKLobby,ReplayStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ReplayStarter.cs,StartReplay,The length of the statement  "			Process.Start (springFilename' string.Format ("\"{0}\" --config \"{1}\""' path' Program.SpringPaths.GetSpringConfigPath ())); " is 125.
Long Statement,ZeroKLobby,ReplayStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ReplayStarter.cs,StartReplay,The length of the statement  "			Process.Start (optirun' string.Format ("\"{0}\" \"{1}\" --config \"{2}\""' springFilename' path' Program.SpringPaths.GetSpringConfigPath ())); " is 142.
Long Statement,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,btnOk_Click,The length of the statement  "		if (MessageBox.Show (this' "Folder does not exist' do you want to create it?"' "Create folder?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.No) " is 166.
Long Statement,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The length of the statement  "	this.tbFolder.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 187.
Long Statement,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The length of the statement  "	this.btnOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 141.
Long Statement,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The length of the statement  "	this.btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The length of the statement  "	this.browseFolderbutton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 154.
Long Statement,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,Init,The length of the statement  "	newConnectionCallback = Callback<P2PSessionRequest_t>.Create (t => SteamNetworking.AcceptP2PSessionWithUser (t.m_steamIDRemote)); " is 129.
Long Statement,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,PlaySoundFromNetworkData,The length of the statement  "			if (SteamUser.DecompressVoice (inputBuffer' networkSize - 1' decompressBuffer' (uint)decompressBuffer.Length' out decompressSize' sampleRate) == EVoiceResult.k_EVoiceResultOK) { " is 177.
Long Statement,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,RecordingFunc,The length of the statement  "		if (SteamAPI.IsSteamRunning () && SteamUser.GetVoice (true' buf' (uint)buf.Length' out cbs' false' null' 0' out ubs' sampleRate) == EVoiceResult.k_EVoiceResultOK) { " is 164.
Long Statement,ZeroKLobby,BitmapButton,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\BitmapButton.cs,OnPaint,The length of the statement  "		BackgroundImage = FrameBorderRenderer.Instance.GetImageWithCache (DisplayRectangle' ButtonStyle' mouseOver ? FrameBorderRenderer.Styles [ButtonStyle].HoverStyle : null); " is 169.
Long Statement,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,GetAndSetConfigValue,The length of the statement  "			if (match.Success && string.Equals (match.Groups [1].Value.Trim ()' key' StringComparison.InvariantCultureIgnoreCase)) { " is 120.
Long Statement,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,GetHoveredControl,The length of the statement  "		//random crash with NULL error on line 140' is weird since already have NULL check (high probability in Linux when we changed focus) " is 132.
Long Statement,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,NotifyUser,The length of the statement  "	var showBalloon = !((Program.Conf.DisableChannelBubble && navigationPath.Contains ("chat/channel/")) || (Program.Conf.DisablePmBubble && navigationPath.Contains ("chat/user/"))); " is 178.
Long Statement,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,SwitchMusicOnOff,The length of the statement  "			NavigationControl.Instance.sndButton.Image = Buttons.soundOff.GetResizedWithCache (NavigationControl.TopRightMiniIconSize' NavigationControl.TopRightMiniIconSize); " is 163.
Long Statement,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,SwitchMusicOnOff,The length of the statement  "			NavigationControl.Instance.sndButton.Image = Buttons.soundOn.GetResizedWithCache (NavigationControl.TopRightMiniIconSize' NavigationControl.TopRightMiniIconSize); " is 162.
Long Statement,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The length of the statement  "	if (finishNavigation)//if HintNewNavigation() was never called (meaning user's navigation was by clicking URL' and not thru UrlBox and not thru NavigationControl.cs button): Will do the following processing: " is 207.
Long Statement,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The length of the statement  "		if (string.IsNullOrEmpty (e.TargetFrameName) && url.StartsWith (GlobalConst.BaseSiteUrl) && !url.StartsWith ("javascript:"))//if navigation is within Zero-K " is 156.
Long Statement,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The length of the statement  "				//if url belong to this TAB or not other TAB' or is posting comment in this TAB' continue this browser instance uninterupted " is 124.
Long Statement,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The length of the statement  "			//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission)) " is 154.
Long Statement,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,browser_DocumentCompleted,The length of the statement  "		//The following code store previously visited URL for checking in TryNavigate() later. The checking determine which TAB "own" the URL. " is 134.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,InitializeTabPageContent,The length of the statement  "			AddTabPage (new BrowserTab (GlobalConst.BaseSiteUrl + "/Missions"' true' GlobalConst.BaseSiteUrl + "/Missions?no_menu=1")' "sp"); " is 129.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,HilitePath,The length of the statement  "	var navigable = tabControl.Controls.OfType<object> ().Select (GetINavigatableFromControl).First (x => x != null && navigationPath.Contains (x.PathHead)); " is 153.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The length of the statement  "	using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90)) " is 127.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The length of the statement  "	using (var lb = new LinearGradientBrush (new Rectangle (rect.X' rect.Y - 1' rect.Width' rect.Height + 1)' Color.FromArgb (255' 10' 30' 40)' Color.FromArgb (255' 0' 0' 0)' 90)) " is 175.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigateToUrlBoxText,The length of the statement  "	if (navig != null && navig.CanReload && (urlString.StartsWith ("http") || urlString.StartsWith ("www.") || urlString.StartsWith ("file://")))//check if current TAB can handle website " is 182.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigateToUrlBoxText,The length of the statement  "			//we hint the BrowserTab's this way because it have trouble differentiating between Advertisement's URL and urlBox's URL " is 120.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,urlBox_MouseDown,The length of the statement  "	//10'000 ticks is a milisecond' therefore 2'000'000 ticks is 200milisecond . http://msdn.microsoft.com/en-us/library/system.datetime.ticks.aspx " is 143.
Long Statement,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,urlBox_MouseDown,The length of the statement  "	//double click time: http://msdn.microsoft.com/en-us/library/system.windows.forms.systeminformation.doubleclicktime(v=vs.110).aspx " is 130.
Long Statement,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The length of the statement  "		TextRenderer.DrawText (g' text' font' new Point (x' y + ToolTipHandler.TEXT_Y_OFFSET)' Config.TextColor' TextFormatFlags.LeftAndRightPadding); " is 142.
Long Statement,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The length of the statement  "	if (Program.TasClient.MyBattle != null && battle.BattleID == Program.TasClient.MyBattle.BattleID && !String.IsNullOrEmpty (Program.ModStore.ChangedOptions)) { " is 158.
Long Statement,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,GetSize,The length of the statement  "	if (Program.TasClient.MyBattle != null && battle.BattleID == Program.TasClient.MyBattle.BattleID && !String.IsNullOrEmpty (Program.ModStore.ChangedOptions)) { " is 158.
Long Statement,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The length of the statement  "		TextRenderer.DrawText (g' text' font' new Point (x + 1' y + ToolTipHandler.TEXT_Y_OFFSET)' Config.TextColor' TextFormatFlags.LeftAndRightPadding); " is 146.
Long Statement,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The length of the statement  "		TextRenderer.DrawText (g' text' font' new Point (x' y + ToolTipHandler.TEXT_Y_OFFSET)' Config.TextColor' TextFormatFlags.LeftAndRightPadding); " is 142.
Long Statement,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The length of the statement  "		TextRenderer.DrawText (g' text' font' new Point (x' y + ToolTipHandler.TEXT_Y_OFFSET)' color' TextFormatFlags.LeftAndRightPadding); " is 131.
Long Statement,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The length of the statement  "		TextRenderer.DrawText (g' user.Name' boldFont' new Point (x' y)' Config.TextColor' TextFormatFlags.LeftAndRightPadding); " is 120.
Long Statement,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The length of the statement  "                            string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));" is 149.
Long Statement,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The length of the statement  "                        */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile)); " is 156.
Long Statement,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,GetNetVersionFromRegistry,The length of the statement  "		using (var ndpKey = RegistryKey.OpenBaseKey (RegistryHive.LocalMachine' RegistryView.Registry32).OpenSubKey ("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\")) { " is 172.
Long Statement,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The length of the statement  "				}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 169.
Long Statement,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The length of the statement  "		}' "WARNING: Zero-K lobby is now obsolete. Starting Chobby instead' ok? "' "WARNING: launcher obsolete"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 177.
Long Statement,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The length of the statement  "		MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height)); " is 176.
Long Statement,ZeroKLobby,ZklSteamHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\ZklSteamHandler.cs,OnLoggedToBothSteamAndTas,The length of the statement  "	foreach (User u in tas.ExistingUsers.Values.ToList ().Where (x => x.SteamID != null && friends.Contains (ulong.Parse (x.SteamID)))) " is 131.
Long Statement,ZeroKLobby,TextTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\TextTooltipRenderer.cs,Draw,The length of the statement  "	TextRenderer.DrawText (g' text' font' new Rectangle (0' 0' size.Width + 20' size.Height + 20)' foreColor' TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter | TextFormatFlags.WordBreak); " is 201.
Long Statement,ZeroKLobby,TextTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\TextTooltipRenderer.cs,GetSize,The length of the statement  "	var size = TextRenderer.MeasureText (text' font' new Size (300' 40)' TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter | TextFormatFlags.WordBreak); " is 164.
Long Statement,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaintBackground,The length of the statement  "			FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanelHollow); " is 124.
Long Statement,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The length of the statement  "	if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) { " is 188.
Long Statement,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,UpdateTooltip,The length of the statement  "		if ((Program.Conf.DisablePlayerTooltip && s.StartsWith ("#user#")) || (Program.Conf.DisableBattleTooltip && s.StartsWith ("#battle#")) || (Program.Conf.DisableMapTooltip && s.StartsWith ("#map#")) || (Program.Conf.DisableTextTooltip && (s [0] != '#' || !(s.StartsWith ("#user#") || s.StartsWith ("#battle#") || s.StartsWith ("#map#"))))) { " is 339.
Long Statement,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,SetIeCompatibility,The length of the statement  "		//Note: write to HKCU (HKEY_CURRENT_USER) instead of HKLM (HKEY_LOCAL_MACHINE) because HKLM need admin privilege while HKCU do not. Ref:http://stackoverflow.com/questions/4612255/regarding-ie9-webbrowser-control " is 211.
Long Statement,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,SetIeCompatibility,The length of the statement  "		Registry.SetValue (@"HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION"' fileName' compatibilityCode); " is 153.
Long Statement,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,SetIeCompatibility,The length of the statement  "		Registry.SetValue (@"HKEY_CURRENT_USER\SOFTWARE\Wow6432Node\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION"' fileName' compatibilityCode); " is 165.
Long Statement,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,GetHoveredControl,The length of the statement  "	while ((child = thisControl.GetChildAtPoint (relativePos' GetChildAtPointSkip.Disabled | GetChildAtPointSkip.Invisible)) != null)//| GetChildAtPointSkip.Transparent)) != null) //this hide tooltip for BitmapButton on Linux! " is 222.
Long Statement,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,RenderControlBgImage,The length of the statement  "		e.Graphics.DrawImage (source.BackgroundImage' e.ClipRectangle' loc.X + e.ClipRectangle.X' loc.Y + e.ClipRectangle.Y' e.ClipRectangle.Width' e.ClipRectangle.Height' GraphicsUnit.Pixel); " is 184.
Long Statement,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The length of the statement  "	e.Graphics.FillRectangle (channelBorderBrush' new Rectangle (0' UpArrowImage.Height' 1' (this.Height - DownArrowImage.Height))); " is 128.
Long Statement,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The length of the statement  "	e.Graphics.FillRectangle (channelBorderBrush' new Rectangle (this.Width - 1' UpArrowImage.Height' 1' (this.Height - DownArrowImage.Height))); " is 141.
Long Statement,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The length of the statement  "	e.Graphics.FillRectangle (channelBrush' new Rectangle (1' UpArrowImage.Height' this.Width - 2' (this.Height - DownArrowImage.Height))); " is 135.
Long Statement,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The length of the statement  "		e.Graphics.DrawImage (DownArrowImage' new Rectangle (new Point (0' (this.Height - DownArrowImage.Height))' new Size (this.Width' DownArrowImage.Height))); " is 154.
Long Statement,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,The length of the statement  "	Rectangle downarrowrect = new Rectangle (new Point (1' UpArrowImage.Height + nTrackHeight)' new Size (UpArrowImage.Width' UpArrowImage.Height)); " is 144.
Long Statement,ZeroKLobby.Controls,RightPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\RightPanel.cs,OnPaintBackground,The length of the statement  "				FrameBorderRenderer.Instance.RenderToGraphics (g' new Rectangle (0' 0' Width' Height)' FrameBorderRenderer.StyleType.Shraka); " is 125.
Long Statement,ZeroKLobby.Controls,SwitchPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\SwitchPanel.cs,SetupTabPage,The length of the statement  "	var tab = Controls.OfType<TransparentTabPage> ().FirstOrDefault (x => x.Controls.OfType<Control> ().First () == content); " is 121.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The length of the statement  "				//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName); " is 333.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,listBoxDemoList_KeyUp,The length of the statement  "	if (MessageBox.Show (this' "Are you sure you want to permanently delete this replay?"' "Delete File"' MessageBoxButtons.YesNo' icon' defaultButton) == DialogResult.Yes) { " is 170.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,GetRightClickMenu,The length of the statement  "		if (MessageBox.Show (this' "Are you sure you want to permanently delete this replay?"' "Delete File"' MessageBoxButtons.YesNo' icon' defaultButton) == DialogResult.Yes) { " is 170.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The length of the statement  "	this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Right))); " is 187.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The length of the statement  "	this.buttonRefresh.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The length of the statement  "	this.listBoxDemoList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 239.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The length of the statement  "	this.btnLaunch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,ParseTable,The length of the statement  "			bool saved = SaveKeyValuePair (prefix' contentIndex' capturedValue1' capturedValue2' capturedObject1' capture2isByStringChar' filePath' detectedEqualSign' ref contentList); " is 172.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,ParseTable,The length of the statement  "			SaveKeyValuePair (prefix' contentIndex' capturedValue1' capturedValue2' capturedObject1' capture2isByStringChar' filePath' detectedEqualSign' ref contentList); " is 159.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,ParseTable,The length of the statement  "			bool saved = SaveKeyValuePair (prefix' contentIndex' capturedValue1' capturedValue2' capturedObject1' capture2isByStringChar' filePath' detectedEqualSign' ref contentList); " is 172.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,SaveKeyValuePair,The length of the statement  "			System.Diagnostics.Trace.TraceWarning ("CrudeLUAReader: detected duplicate value in " + filePath + " : " + capturedValue1 + "=" + contentList [capturedValue1]); " is 160.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The length of the statement  "	scoredItem.Sort (delegate (object[] x' object[] y)//Reference: http://msdn.microsoft.com/en-us/library/b0zbh7b6(v=vs.110).aspx " is 126.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetSpringAis_Internal,The length of the statement  "	//    foreach (var bot in Program.SpringScanner.unitSync.GetAis()) //IEnumberable can't be serialized' so convert to List. Ref: http://stackoverflow.com/questions/9102234/xmlserializer-in-c-sharp-wont-serialize-ienumerable  " is 222.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The length of the statement  "					var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8; " is 131.
Long Statement,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadSideInfo,The length of the statement  "						using (FileStream fileStream2 = File.OpenRead (picList.First (x => SkirmishControlTool.GetFolderOrFileName (x).StartsWith (name' StringComparison.InvariantCultureIgnoreCase)))) { " is 178.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,sendBox2_TextChanged,The length of the statement  "		//Reference2: http://social.msdn.microsoft.com/Forums/vstudio/en-US/786480e4-f020-41a7-a545-8f691b646ba1/convert-string-to-hex " is 126.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,sendBox1_TextChanged,The length of the statement  "		//Char to Hex(1). Reference: http://social.msdn.microsoft.com/Forums/vstudio/en-US/786480e4-f020-41a7-a545-8f691b646ba1/convert-string-to-hex " is 141.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,sendBox1_TextChanged,The length of the statement  "		//Char to Hex(2). Reference: http://social.msdn.microsoft.com/Forums/vstudio/en-US/9a09cb14-5eb3-4b74-9cf1-ac9e0ae641fc/convert-string-to-unicode " is 145.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(HexToUnicodeConverter)); " is 142.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The length of the statement  "	this.sendBox2.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 129.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The length of the statement  "	this.sendBox2.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 123.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The length of the statement  "	this.sendBox1.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 129.
Long Statement,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The length of the statement  "	this.sendBox1.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 123.
Long Statement,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AreYouReadyDialog)); " is 138.
Long Statement,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The length of the statement  "	this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The length of the statement  "	this.okButton.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The length of the statement  "	this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The length of the statement  "	this.lb1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 227.
Long Statement,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(StartMatchMakerDialog)); " is 142.
Long Statement,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The length of the statement  "	this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The length of the statement  "	this.okButton.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The length of the statement  "	this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The length of the statement  "			sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00")); " is 128.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The length of the statement  "			sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00")); " is 128.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorWords,The length of the statement  "	while (selectionStart < textLen && tempSubstring != " " && tempSubstring != "\t" && newLineChar == -1)//fast-forward over text " is 126.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.helpLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.pasteToChat.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.tableLayoutPanel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 241.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.tableLayoutPanel1.ColumnStyles.Add (new System.Windows.Forms.ColumnStyle (System.Windows.Forms.SizeType.Percent' 100F)); " is 125.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.sendBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 231.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.sendBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 128.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.sendBox.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 122.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.chatBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 231.
Long Statement,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The length of the statement  "	this.chatBox.Font = new System.Drawing.Font ("Verdana"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintOpenBattleButton,The length of the statement  "	TextRenderer.DrawText (g' "Open a new battle."' BattleIcon.TitleFont' new Point (x + scaledMapCellWidth' y + 3)' Config.TextColor); " is 131.
Long Statement,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,FilterBattles,The length of the statement  "		view = model.Where (icon => orParts.Any (filterPart => BattleWordFilter (icon.Battle' filterPart.Split (' ')))).ToList (); " is 122.
Long Statement,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,OpenGameButtonHitTest,The length of the statement  "	return x > openBattlePosition.X + (int)3 && x < openBattlePosition.X + (int)71 && y > openBattlePosition.Y + (int)3 && y < openBattlePosition.Y + (int)71; " is 154.
Long Statement,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,client_Said,The length of the statement  "		if (pmControl == null && Program.Conf.BlockNonFriendPm && !Program.TasClient.Friends.Contains (otherUserName) && !Program.TasClient.ExistingUsers [e.UserName].IsBot) { " is 167.
Long Statement,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,client_Said,The length of the statement  "				Program.TasClient.Say (SayPlace.User' otherUserName' "Sorry' I'm busy and do not receive messages. If you want to ask something' use #zk channel. If you have issue to report use https://github.com/ZeroK-RTS/Zero-K/issues"' false); " is 230.
Long Statement,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,client_Said,The length of the statement  "				MainWindow.Instance.NotifyUser ("chat/user/" + otherUserName' string.Format ("{0}: {1}"' otherUserName' e.Text)' false' true); " is 126.
Long Statement,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TasClient_UserAdded,The length of the statement  "		toolTabs.SetIcon (userName' Program.TasClient.Friends.Contains (userName) ? ZklResources.friend : TextImage.GetUserImage (userName)' true); " is 139.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,applyButton_Click,The length of the statement  "		if (controlWithName [0] != null)//CHECK in case the setting wasn't found (ie: when the new setting differ from previous list) then skip this one. Anti-bug. " is 155.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,engineDefaultButton_Click,The length of the statement  "		if (controlWithName [0] != null)//CHECK in case the setting wasn't found (ie: when the new setting differ from previous list) then skip this one. Anti-bug. " is 155.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The length of the statement  "		settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride); " is 120.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The length of the statement  "		foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp " is 200.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The length of the statement  "			var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase); " is 178.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The length of the statement  "			//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx " is 165.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The length of the statement  "			var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine; " is 158.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The length of the statement  "			NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine; " is 128.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The length of the statement  "			Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine); " is 154.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,button1_Click,The length of the statement  "		if (controlWithName [0] != null)//CHECK in case the setting wasn't found (ie: when the new setting differ from previous list) then skip this one. Anti-bug. " is 155.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,textBox1_TextChanged,The length of the statement  "	//Reference3: http://stackoverflow.com/questions/7545775/how-to-loop-through-all-controls-in-a-windows-forms-form-or-how-to-find-if-a-par " is 137.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,textBox1_TextChanged,The length of the statement  "		if (keyNameLowercase.Contains (filterTerm) || keyTextLowercase.Contains (filterTerm) || textAssignedToTooltip.Contains (filterTerm)) { " is 134.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SpringsettingForm)); " is 138.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The length of the statement  "	this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 230.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The length of the statement  "	this.applyButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The length of the statement  "	this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 150.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The length of the statement  "	this.engineDefaultButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 157.
Long Statement,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The length of the statement  "	this.engineDefaultButton.BackgroundImage = ((System.Drawing.Image)(resources.GetObject ("engineDefaultButton.BackgroundImage"))); " is 129.
Long Statement,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,AddAIToTeam,The length of the statement  "	var botNumber = Enumerable.Range (1' int.MaxValue).First (i => !Program.TasClient.MyBattle.Bots.Values.Any (bt => bt.Name == "Bot_" + i)); " is 138.
Long Statement,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,AddAIToTeam,The length of the statement  "	var allyNumber = Enumerable.Range (0' TasClient.MaxAlliances - 1).FirstOrDefault (x => x != Program.TasClient.MyBattleStatus.AllyNumber); " is 137.
Long Statement,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetAddBotItems,The length of the statement  "				springAi = SkirmishControlTool.GetSpringAIs (Program.SpringPaths.GetEngineFolderByVersion (GlobalConst.DefaultEngineOverride)); " is 127.
Long Statement,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetPlayerContextMenu,The length of the statement  "			details.Click += (s' e) => NavigationControl.Instance.Path = string.Format ("{1}/Users/LobbyDetail/{0}"' user.AccountID' GlobalConst.BaseSiteUrl); " is 146.
Long Statement,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetPlayerContextMenu,The length of the statement  "			reportUser.Click += (s' e) => NavigationControl.Instance.Path = string.Format ("{1}/Users/ReportToAdminFromLobby/{0}"' user.Name' GlobalConst.BaseSiteUrl); " is 155.
Long Statement,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetPrivateMessageContextMenu,The length of the statement  "		details.Click += (s' e) => NavigationControl.Instance.Path = string.Format ("{1}/Users/LobbyDetail/{0}"' control.UserName' GlobalConst.BaseSiteUrl); " is 148.
Long Statement,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetPrivateMessageContextMenu,The length of the statement  "		reportUser.Click += (s' e) => NavigationControl.Instance.Path = string.Format ("{1}/Users/ReportToAdminFromLobby/{0}"' control.UserName' GlobalConst.BaseSiteUrl); " is 162.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(HostDialog)); " is 131.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.label1.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.label2.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.battleTitleBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 193.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.battleTitleBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(30))))' ((int)(((byte)(40))))); " is 131.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.passwordBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 190.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.passwordBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(30))))' ((int)(((byte)(40))))); " is 128.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.okButton.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The length of the statement  "	this.label3.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,ZeroKLobby.MicroLobby,ModStore,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModStore.cs,GetModOptionSummary,The length of the statement  "		var sectionNames = mod.Options.Where (o => o.Type == OptionType.Section).ToDictionary (o => o.Key.ToUpper ()' o => o.Name); " is 123.
Long Statement,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,RefreshConfig,The length of the statement  "	if (Program.EngineConfigurator.GetConfigValue ("Fullscreen") == "0" && Program.EngineConfigurator.GetConfigValue ("WindowBorderless") == "1") " is 141.
Long Statement,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,helpButton_MouseUp,The length of the statement  "	foreach (var admin in Program.TasClient.ExistingUsers.Values.Where (u => (u.IsAdmin) && !u.IsBot).OrderBy (u => u.IsAway ? 1 : 0)) { " is 132.
Long Statement,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,btnDefaults_Click,The length of the statement  "	if (MessageBox.Show (this' "Do you want to reset configuration to defaults and delete all cached content?"' "Local data reset"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning' defaultButton) == DialogResult.Yes) { " is 214.
Long Statement,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The length of the statement  "	this.splitContainerAtMid.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 243.
Long Statement,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The length of the statement  "	this.propertyGrid1.PropertyValueChanged += new System.Windows.Forms.PropertyValueChangedEventHandler (this.propertyGrid1_PropertyValueChanged); " is 143.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,GetProposedChanges,The length of the statement  "		changes = setVals.Where (x => (!offlineOptions.ContainsKey (x.Key) && x.Value != mod.Options.First (y => y.Key == x.Key).Default) || (offlineOptions.ContainsKey (x.Key) && x.Value != offlineOptions [x.Key])); " is 208.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,GetProposedChanges,The length of the statement  "		changes = setVals.Where (x => (!mb.ModOptions.ContainsKey (x.Key) && x.Value != mod.Options.First (y => y.Key == x.Key).Default) || (mb.ModOptions.ContainsKey (x.Key) && x.Value != mb.ModOptions [x.Key])); " is 205.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,GetProposedChanges,The length of the statement  "		proposedLabel.Text = string.Format (" Change: {0}"' string.Join ("' "' changes.Select (x => string.Format ("{0}={1}"' options [x.Key].Name' x.Value)).ToArray ())); " is 163.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The length of the statement  "		var sectionNames = mod.Options.Where (option => option.Type == OptionType.Section).ToDictionary (option => option.Key' option => option.Name); " is 142.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,SetModOptions,The length of the statement  "				numeric.Value = decimal.Parse (setOption.Value' CultureInfo.InvariantCulture).Constrain (numeric.Minimum' numeric.Maximum); " is 123.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The length of the statement  "	this.tabControl.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 234.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The length of the statement  "	this.butApplyChanges.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The length of the statement  "	this.proposedLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 195.
Long Statement,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,applyChanges_Click,The length of the statement  "	Program.TasClient.Say (SayPlace.Battle' ""' "!setoptions " + string.Join ("'"' vals.Select (x => string.Format ("{0}={1}"' x.Key' x.Value)))' false); " is 149.
Long Statement,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AskBattlePasswordForm)); " is 142.
Long Statement,ZeroKLobby.MicroLobby,ChatBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatBox.cs,Reset,The length of the statement  "	// clear() seems to be more efficient than new List because it just reset index. Reference: http://stackoverflow.com/questions/5358129/how-is-list-clear-implemented-in-c ; " is 171.
Long Statement,ZeroKLobby.MicroLobby,HistoryManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HistoryManager.cs,LogLine,The length of the statement  "	var lineStr = line is ChimeLine ? "*** " + ((ChimeLine)line).Date.ToString (System.Globalization.CultureInfo.CurrentCulture) : line.Text.StripAllCodes (); " is 154.
Long Statement,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,TasClient_Said,The length of the statement  "		if (e.Text.Contains (Program.Conf.LobbyPlayerName) && !Program.TasClient.MyUser.IsInGame && !e.IsEmote && e.UserName != GlobalConst.NightwatchName && !e.Text.StartsWith (string.Format ("[{0}]"' Program.TasClient.UserName))) { " is 225.
Long Statement,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,RenderPlayers,The length of the statement  "	playersBoxImage = DudeRenderer.GetImage (currentPlayers - friends - admins - mes' friends' admins' 0' maxPlayers' mes > 0' (int)playersBoxSize.Width' (int)playersBoxSize.Height); " is 178.
Long Statement,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The length of the statement  "			TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor); " is 129.
Long Statement,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The length of the statement  "			TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor); " is 181.
Long Statement,ZeroKLobby.MicroLobby,BattleIconManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIconManager.cs,TasClientOnFriendListUpdated,The length of the statement  "	foreach (var battleID in Program.TasClient.ExistingUsers.Values.Where (b => friends.Contains (b.Name) && b.BattleID.HasValue).Select (x => x.BattleID)) { " is 153.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,DT,The length of the statement  "		TextRenderer.DrawText (g' buildString' font' new Point (startX' startY)' TextColor.GetColor (foreColor)' TextFormatFlags.NoPadding | TextFormatFlags.SingleLine); " is 161.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,DT,The length of the statement  "		TextRenderer.DrawText (g' buildString' font' new Point (startX' startY)' TextColor.GetColor (foreColor)' TextColor.GetColor (backColor)' TextFormatFlags.NoPadding | TextFormatFlags.SingleLine); " is 193.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The length of the statement  "				Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace); " is 140.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The length of the statement  "				Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace); " is 140.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,MS,The length of the statement  "	var ret = TextRenderer.MeasureText (g' buildString' font' Size.Empty' TextFormatFlags.NoPadding | TextFormatFlags.SingleLine).Width; " is 132.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The length of the statement  "			//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences " is 152.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The length of the statement  "								//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)  " is 137.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The length of the statement  "								if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) { " is 307.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The length of the statement  "								} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) { " is 314.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The length of the statement  "		ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal); " is 147.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ParseUrl,The length of the statement  "		data = data.Replace (TextColor.StripCodes (m.Value)' TextColor.UrlStart + TextColor.StripCodes (m.Value) + TextColor.UrlEnd); " is 125.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The length of the statement  "	var parseIrcCodes = new Regex (parseBackColor + "|" + parseForeColor + "|" + parseColorChar + "|" + parseColorResetChar); " is 121.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The length of the statement  "			//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor " is 152.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The length of the statement  "			//do line-width check once if "x" is greater than line width' else check every character for the correct position where "x" is pointing at.  " is 139.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The length of the statement  "			//int width = MS(g' line' Font' 0' sf).Width; //<-- you can uncomment this and comment the next line. The bad thing is: it underestimate end position if there's emotIcon' it cut some char during selection " is 204.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The length of the statement  "					//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff) " is 142.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The length of the statement  "				if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right) " is 206.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The length of the statement  "			//int width = MS(g' lineEmot' Font' 0' sf).Width; / //<-- you can uncomment this and comment the previous line. The bad thing is: will overestimate hyperlinks ending' which make you able to click empty space " is 207.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The length of the statement  "					//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff) " is 142.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The length of the statement  "					//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter) " is 137.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,UpdateScrollBar,The length of the statement  "			// maximum value that can be reached through UI is: 1 + Maximum - LargeChange. Ref: http://msdn.microsoft.com/en-us/library/system.windows.forms.scrollbar.maximum(v=vs.110).aspx " is 177.
Long Statement,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,InitializeComponent,The length of the statement  "	this.Font = new System.Drawing.Font ("Verdana"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 137.
Long Statement,ZeroKLobby.MicroLobby,Images,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\Images.cs,GetRank,The length of the statement  "	var clampedLevel = System.Math.Max (0' System.Math.Min (rankImages.GetLength (0) - 1' (int)System.Math.Floor ((-0.12 / Math.Cosh ((level - 61.9) / 7.08) + 1) * 2.93 * Math.Log (Math.Exp (-2.31) * level + 1) - 0.89 / Math.Cosh ((level - 28.55) / 3.4)))); " is 253.
Long Statement,ZeroKLobby.MicroLobby,Images,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\Images.cs,GetRank,The length of the statement  "	var clampedSkill = System.Math.Max (0' System.Math.Min (rankImages.GetLength (1) - 1' (int)System.Math.Floor ((elo - 1000.0) / 200))); " is 134.
Long Statement,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,AddLine,The length of the statement  "	if ((line is SaidLine && Program.TasClient.Ignores.Contains (((SaidLine)line).AuthorName)) || (line is SaidExLine && Program.TasClient.Ignores.Contains (((SaidExLine)line).AuthorName))) " is 185.
Long Statement,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,AddLine,The length of the statement  "	if (saidLine != null && WindowsApi.IdleTime.TotalMinutes > Program.Conf.IdleTime && (DateTime.Now - lastAnsweringMessageTime).TotalMinutes > Program.Conf.IdleTime) { " is 165.
Long Statement,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,AddLine,The length of the statement  "			Program.TasClient.Say (SayPlace.User' UserName' String.Format ("Answering machine: I have been idle for {0} minutes."' (int)WindowsApi.IdleTime.TotalMinutes)' false); " is 166.
Long Statement,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,autoscrollRichTextBox1_MouseUp,The length of the statement  "		var user = Program.TasClient.ExistingUsers.Values.SingleOrDefault (x => x.Name.ToString ().ToUpper () == word.ToUpper ()); " is 122.
Long Statement,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The length of the statement  "			else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2) " is 121.
Long Statement,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,OnKeyPress,The length of the statement  "		//block ENTER because we already sent the text' no need to add newline character to textbox. We send it now rather than waiting the newline at OnKeyUp of ENTER (because we dont want this delay). " is 194.
Long Statement,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,OnPreviewKeyDown,The length of the statement  "	//if (e.KeyCode == Keys.Return) SelectionStart = Text.Length; //Prevent cutting line in half when sending. note: no longer needed because we instantly send text when Enter is pressed " is 182.
Long Statement,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,CompleteNick,The length of the statement  "		//in Linux Mono (not sure which version)' OnKeyPress() is called after text is entered when different than in MS Windows " is 120.
Long Statement,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,OnMouseDown,The length of the statement  "	//10'000 ticks is a milisecond' therefore 2'000'000 ticks is 200milisecond . http://msdn.microsoft.com/en-us/library/system.datetime.ticks.aspx " is 143.
Long Statement,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,OnMouseDown,The length of the statement  "	//double click time: http://msdn.microsoft.com/en-us/library/system.windows.forms.systeminformation.doubleclicktime(v=vs.110).aspx " is 130.
Long Statement,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,SetHilite,The length of the statement  "	//ChatControl.client_said           -> MainWindow.NotifyUser -> NavigationControl.HilitePath -> ChatTab.Hilite -> this.SetHiLite " is 128.
Long Statement,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,SetHilite,The length of the statement  "	//BattleChatControl.TasClient_Said  -> MainWindow.NotifyUser -> NavigationControl.HilitePath -> ChatTab.Hilite -> this.SetHiLite " is 128.
Long Statement,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,SetHilite,The length of the statement  "	//ChatTab.client_said               -> MainWindow.NotifyUser -> NavigationControl.HilitePath -> ChatTab.Hilite -> this.SetHiLite " is 128.
Long Statement,ZeroKLobby.MicroLobby,PlayerListBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListBox.cs,SelectUser,The length of the statement  "		var toSelect = Items.Cast<PlayerListItem> ().FirstOrDefault (x => x.UserName != null && x.UserName.ToLower () == userName.ToLower ()); " is 134.
Long Statement,ZeroKLobby.MicroLobby,PlayerListBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListBox.cs,OnPaint,The length of the statement  "				if ((SelectionMode == SelectionMode.One && SelectedIndex == i) || (SelectionMode == SelectionMode.MultiSimple && SelectedIndices.Contains (i)) || (SelectionMode == SelectionMode.MultiExtended && SelectedIndices.Contains (i))) " is 225.
Long Statement,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,AddLine,The length of the statement  "	if (ChannelName != "zkadmin" && ((line is SaidLine && Program.TasClient.Ignores.Contains (((SaidLine)line).AuthorName)) || (line is SaidExLine && Program.TasClient.Ignores.Contains (((SaidExLine)line).AuthorName)))) " is 215.
Long Statement,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,chatBox_MouseUp,The length of the statement  "		var user = Program.TasClient.ExistingUsers.Values.SingleOrDefault (x => x.Name.ToString ().ToUpper () == word.ToUpper ()); " is 122.
Long Statement,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,client_Said,The length of the statement  "				Program.MainWindow.NotifyUser ("chat/channel/" + e.Channel' string.Format ("{0}: {1}"' e.UserName' e.Text)' false' true); " is 121.
Long Statement,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,OnPaintBackground,The length of the statement  "		var DestRect = new Rectangle (windowRect.Right - BackgroundImage.Width' windowRect.Bottom - BackgroundImage.Height' BackgroundImage.Width' BackgroundImage.Height); " is 163.
Long Statement,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The length of the statement  "	NotifyMessage.Anchor = ((AnchorStyles)((((AnchorStyles.Top | AnchorStyles.Bottom) | AnchorStyles.Left) | AnchorStyles.Right))); " is 127.
Long Statement,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The length of the statement  "		TextRenderer.DrawText (g' text' font' new Point (bounds.Left + x' bounds.Top - 2)' color' TextFormatFlags.PreserveGraphicsTranslateTransform); " is 142.
Long Statement,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The length of the statement  "		TextRenderer.DrawText (g' Title' font' bounds' textColor' TextFormatFlags.HorizontalCenter | TextFormatFlags.PreserveGraphicsTranslateTransform); " is 145.
Long Statement,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The length of the statement  "		TextRenderer.DrawText (g' Button' font' bounds' textColor' TextFormatFlags.HorizontalCenter | TextFormatFlags.PreserveGraphicsTranslateTransform); " is 146.
Long Statement,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The length of the statement  "		if (userStatus.IsSpectator && (Program.TasClient.MyBattle == null || Program.TasClient.MyBattle.FounderName == userStatus.Name)) " is 128.
Long Statement,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,The length of the statement  "						var mi = xplat.GetMethod ("SendMessage"' BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod' null' new[] { " is 128.
Long Statement,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,UpdateGui,The length of the statement  "	if (pw != null && !string.IsNullOrEmpty (tas.MyUser.Faction) && tas.MyUser.Level >= GlobalConst.MinPlanetWarsLevel && tas.MyUser.EffectiveMmElo >= GlobalConst.MinPlanetWarsElo) { " is 178.
Long Statement,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,UpdateGui,The length of the statement  "				headerLabel.Text = string.Format ("{0} attacks planet {2}' {1} defends"' pw.AttackerFaction' string.Join ("'"' pw.DefenderFactions)' opt.PlanetName); " is 149.
Long Statement,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,UpdateGui,The length of the statement  "				if (pw.DefenderFactions.Contains (tas.MyUser.Faction))// NOTE this is for cases where nightwatch self faction info is delayed " is 125.
Long Statement,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,AddButtonClick,The length of the statement  "			tas.Say (SayPlace.Channel' tas.MyUser.Faction' string.Format ("wants to play {0}' but lacks the map.."' opt1.PlanetID)' true); " is 126.
Long Statement,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The length of the statement  "	this.lbText.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 153.
Long Statement,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The length of the statement  "	this.bitmapButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(VoteBar)); " is 128.
Long Statement,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The length of the statement  "	this.pbYes.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 184.
Long Statement,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The length of the statement  "	this.pbNo.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 183.
Long Statement,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The length of the statement  "	this.lbQuestion.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 160.
Long Statement,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,LoginWithDialog,The length of the statement  "	} while (string.IsNullOrEmpty (Program.Conf.LobbyPlayerName) || string.IsNullOrEmpty (Program.Conf.LobbyPlayerPassword)); " is 121.
Long Statement,ZeroKLobby.Notifications,ZklNotifyBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ZklNotifyBar.cs,OnPaintBackground,The length of the statement  "	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanelHollow); " is 124.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,StartManualBattle,The length of the statement  "			tas.Say (SayPlace.Battle' ""' string.Format ("Going to {0} zk://@join_player:{1}"' battle.Title' battle.FounderName)' true); " is 124.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,AutoRespond,The length of the statement  "	if (client.MyBattle != null && client.MyBattleStatus != null && client.MyBattleStatus.SyncStatus != SyncStatuses.Synced) { " is 122.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,AutoRespond,The length of the statement  "			client.Say (SayPlace.Battle' ""' string.Format ("Mod download progress: {0}%' eta: {1}"' Math.Round (moddl.TotalProgress)' moddl.TimeRemaining)' true); " is 151.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,AutoRespond,The length of the statement  "			client.Say (SayPlace.Battle' ""' string.Format ("Map download progress: {0}%' eta: {1}"' Math.Round (mapdl.TotalProgress)' mapdl.TimeRemaining)' true); " is 151.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,HasAllResources,The length of the statement  "		return Program.SpringScanner.HasResource (battle.MapName) && Program.SpringScanner.HasResource (battle.ModName) && Program.SpringPaths.HasEngineVersion (battle.EngineVersion); " is 175.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(BattleBar)); " is 130.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject ("imageList1.ImageStream"))); " is 121.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	this.btnLeave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	this.picoChat.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 187.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	this.picoChat.Font = new System.Drawing.Font ("Verdana"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 148.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	this.radioPlaySpecContainer.ColumnStyles.Add (new System.Windows.Forms.ColumnStyle (System.Windows.Forms.SizeType.Absolute' 20F)); " is 130.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	this.radioPlaySpecContainer.RowStyles.Add (new System.Windows.Forms.RowStyle (System.Windows.Forms.SizeType.Percent' 50F)); " is 123.
Long Statement,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The length of the statement  "	this.radioPlaySpecContainer.RowStyles.Add (new System.Windows.Forms.RowStyle (System.Windows.Forms.SizeType.Percent' 50F)); " is 123.
Long Statement,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The length of the statement  "	this.lbText.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 153.
Long Statement,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The length of the statement  "	this.bitmapButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Complex Conditional,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigateToUrlBoxText,The conditional expression  "navig != null && navig.CanReload && (urlString.StartsWith ("http") || urlString.StartsWith ("www.") || urlString.StartsWith ("file://"))"  is complex.
Complex Conditional,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The conditional expression  "Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized"  is complex.
Complex Conditional,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,UpdateTooltip,The conditional expression  "(Program.Conf.DisablePlayerTooltip && s.StartsWith ("#user#")) || (Program.Conf.DisableBattleTooltip && s.StartsWith ("#battle#")) || (Program.Conf.DisableMapTooltip && s.StartsWith ("#map#")) || (Program.Conf.DisableTextTooltip && (s [0] != '#' || !(s.StartsWith ("#user#") || s.StartsWith ("#battle#") || s.StartsWith ("#map#"))))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The conditional expression  "mod.Options != null || mod.ModAis != null || mod.MissionScript != null || mod.Sides != null"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,BattleWordFilter,The conditional expression  "(!negation && !isSpecialWordMatch) || (negation && isSpecialWordMatch)"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,BattleWordFilter,The conditional expression  "!(playerFound || titleFound || modFound || mapFound)"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,BattleWordFilter,The conditional expression  "playerFound || titleFound || modFound || mapFound"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,client_Said,The conditional expression  "pmControl == null && Program.Conf.BlockNonFriendPm && !Program.TasClient.Friends.Contains (otherUserName) && !Program.TasClient.ExistingUsers [e.UserName].IsBot"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,HistoryManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HistoryManager.cs,LogLine,The conditional expression  "line is JoinLine || line is LeaveLine || line is HistoryLine || line is TopicLine"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,TasClient_Said,The conditional expression  "e.Text.Contains (Program.Conf.LobbyPlayerName) && !Program.TasClient.MyUser.IsInGame && !e.IsEmote && e.UserName != GlobalConst.NightwatchName && !e.Text.StartsWith (string.Format ("[{0}]"' Program.TasClient.UserName))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The conditional expression  "needSpace && !isExpanding && (isFull || !isSpam)"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The conditional expression  "needSpace && !isFull && (isExpanding || isSpam)"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The conditional expression  "startHighLine >= 0 && //highlight is active  ((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  (curLine <= startHighLine && curLine >= curHighLine))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The conditional expression  "(curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The conditional expression  "(curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,AddLine,The conditional expression  "(line is SaidLine && Program.TasClient.Ignores.Contains (((SaidLine)line).AuthorName)) || (line is SaidExLine && Program.TasClient.Ignores.Contains (((SaidExLine)line).AuthorName))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The conditional expression  "(words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The conditional expression  "words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave""  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The conditional expression  "(words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,PlayerListBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListBox.cs,OnPaint,The conditional expression  "(SelectionMode == SelectionMode.One && SelectedIndex == i) || (SelectionMode == SelectionMode.MultiSimple && SelectedIndices.Contains (i)) || (SelectionMode == SelectionMode.MultiExtended && SelectedIndices.Contains (i))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,AddLine,The conditional expression  "ChannelName != "zkadmin" && ((line is SaidLine && Program.TasClient.Ignores.Contains (((SaidLine)line).AuthorName)) || (line is SaidExLine && Program.TasClient.Ignores.Contains (((SaidExLine)line).AuthorName)))"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,FilterPlayers,The conditional expression  "(!negation && !isSpecialWordMatch) || (negation && isSpecialWordMatch)"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,FilterPlayers,The conditional expression  "!(userNameFound || countryFound || countryNameFound || clanFound || factionFound)"  is complex.
Complex Conditional,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,FilterPlayers,The conditional expression  "userNameFound || countryFound || countryNameFound || clanFound || factionFound"  is complex.
Complex Conditional,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,UpdateGui,The conditional expression  "pw != null && !string.IsNullOrEmpty (tas.MyUser.Faction) && tas.MyUser.Level >= GlobalConst.MinPlanetWarsLevel && tas.MyUser.EffectiveMmElo >= GlobalConst.MinPlanetWarsElo"  is complex.
Complex Conditional,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The conditional expression  "(tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)"  is complex.
Complex Conditional,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The conditional expression  "args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  || (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  || (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  || args.Text.Contains ("Vote cancelled by")"  is complex.
Virtual Method Call from Constructor,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,ChatControl,The constructor "ChatControl" calls a virtual method "AddLine".
Empty Catch Block,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,InvokeFunc,The method has an empty catch block.
Empty Catch Block,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The method has an empty catch block.
Empty Catch Block,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,FinalizeShutdown,The method has an empty catch block.
Empty Catch Block,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Application_ThreadException,The method has an empty catch block.
Empty Catch Block,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,UnhandledException,The method has an empty catch block.
Empty Catch Block,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,CheckPath,The method has an empty catch block.
Empty Catch Block,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,RegisterProtocol,The method has an empty catch block.
Empty Catch Block,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The method has an empty catch block.
Empty Catch Block,ZeroKLobby.MicroLobby,HistoryManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HistoryManager.cs,OpenHistory,The method has an empty catch block.
Magic Number,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,The following statement contains a magic number: if (!String.IsNullOrEmpty (actionString)) {  	var idx = actionString.IndexOf (':');  	var command = actionString;  	var arg = "";  	if (idx > -1) {  		command = actionString.Substring (0' idx);  		arg = actionString.Substring (idx + 1);  	}  	switch (command) {  	case "logout":  		Program.TasClient.RequestDisconnect ();  		Program.Conf.LobbyPlayerName = "";  		Program.Conf.LobbyPlayerPassword = "";  		Program.ConnectBar.TryToConnectTasClient ();  		break;  	case "start_mission":  		StartMission (arg);  		break;  	case "start_replay":  		var parts = arg.Split (''');  		StartReplay (parts [0]' parts [1]' parts [2]' parts [3]);  		break;  	case "host_mission":  		HostBattle (game: arg);  		break;  	case "start_script_mission":  		StartScriptMission (arg);  		break;  	case "select_map":  		if (Program.TasClient.MyBattle != null)  			Program.TasClient.Say (SayPlace.Battle' null' "!map " + arg' false);  		else {  			HostBattle (map: arg);  		}  		break;  	case "add_friend":  		Program.TasClient.SetRelation (arg' Relation.Friend);  		break;  	case "join_battle":  		JoinPlayer (arg);  		break;  	case "join_player":  		JoinPlayer (arg);  		break;  	case "benchmark":  		var bench = new Benchmarker.MainForm (Program.SpringPaths' Program.SpringScanner' Program.Downloader);  		bench.Show ();  		break;  	}  }  
Magic Number,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,The following statement contains a magic number: if (!String.IsNullOrEmpty (actionString)) {  	var idx = actionString.IndexOf (':');  	var command = actionString;  	var arg = "";  	if (idx > -1) {  		command = actionString.Substring (0' idx);  		arg = actionString.Substring (idx + 1);  	}  	switch (command) {  	case "logout":  		Program.TasClient.RequestDisconnect ();  		Program.Conf.LobbyPlayerName = "";  		Program.Conf.LobbyPlayerPassword = "";  		Program.ConnectBar.TryToConnectTasClient ();  		break;  	case "start_mission":  		StartMission (arg);  		break;  	case "start_replay":  		var parts = arg.Split (''');  		StartReplay (parts [0]' parts [1]' parts [2]' parts [3]);  		break;  	case "host_mission":  		HostBattle (game: arg);  		break;  	case "start_script_mission":  		StartScriptMission (arg);  		break;  	case "select_map":  		if (Program.TasClient.MyBattle != null)  			Program.TasClient.Say (SayPlace.Battle' null' "!map " + arg' false);  		else {  			HostBattle (map: arg);  		}  		break;  	case "add_friend":  		Program.TasClient.SetRelation (arg' Relation.Friend);  		break;  	case "join_battle":  		JoinPlayer (arg);  		break;  	case "join_player":  		JoinPlayer (arg);  		break;  	case "benchmark":  		var bench = new Benchmarker.MainForm (Program.SpringPaths' Program.SpringScanner' Program.Downloader);  		bench.Show ();  		break;  	}  }  
Magic Number,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,The following statement contains a magic number: switch (command) {  case "logout":  	Program.TasClient.RequestDisconnect ();  	Program.Conf.LobbyPlayerName = "";  	Program.Conf.LobbyPlayerPassword = "";  	Program.ConnectBar.TryToConnectTasClient ();  	break;  case "start_mission":  	StartMission (arg);  	break;  case "start_replay":  	var parts = arg.Split (''');  	StartReplay (parts [0]' parts [1]' parts [2]' parts [3]);  	break;  case "host_mission":  	HostBattle (game: arg);  	break;  case "start_script_mission":  	StartScriptMission (arg);  	break;  case "select_map":  	if (Program.TasClient.MyBattle != null)  		Program.TasClient.Say (SayPlace.Battle' null' "!map " + arg' false);  	else {  		HostBattle (map: arg);  	}  	break;  case "add_friend":  	Program.TasClient.SetRelation (arg' Relation.Friend);  	break;  case "join_battle":  	JoinPlayer (arg);  	break;  case "join_player":  	JoinPlayer (arg);  	break;  case "benchmark":  	var bench = new Benchmarker.MainForm (Program.SpringPaths' Program.SpringScanner' Program.Downloader);  	bench.Show ();  	break;  }  
Magic Number,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,The following statement contains a magic number: switch (command) {  case "logout":  	Program.TasClient.RequestDisconnect ();  	Program.Conf.LobbyPlayerName = "";  	Program.Conf.LobbyPlayerPassword = "";  	Program.ConnectBar.TryToConnectTasClient ();  	break;  case "start_mission":  	StartMission (arg);  	break;  case "start_replay":  	var parts = arg.Split (''');  	StartReplay (parts [0]' parts [1]' parts [2]' parts [3]);  	break;  case "host_mission":  	HostBattle (game: arg);  	break;  case "start_script_mission":  	StartScriptMission (arg);  	break;  case "select_map":  	if (Program.TasClient.MyBattle != null)  		Program.TasClient.Say (SayPlace.Battle' null' "!map " + arg' false);  	else {  		HostBattle (map: arg);  	}  	break;  case "add_friend":  	Program.TasClient.SetRelation (arg' Relation.Friend);  	break;  case "join_battle":  	JoinPlayer (arg);  	break;  case "join_player":  	JoinPlayer (arg);  	break;  case "benchmark":  	var bench = new Benchmarker.MainForm (Program.SpringPaths' Program.SpringScanner' Program.Downloader);  	bench.Show ();  	break;  }  
Magic Number,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,The following statement contains a magic number: StartReplay (parts [0]' parts [1]' parts [2]' parts [3]);  
Magic Number,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,The following statement contains a magic number: StartReplay (parts [0]' parts [1]' parts [2]' parts [3]);  
Magic Number,ZeroKLobby,ButtonInfo,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ButtonInfo.cs,ButtonInfo,The following statement contains a magic number: Width = 100;  
Magic Number,ZeroKLobby,ButtonInfo,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ButtonInfo.cs,ButtonInfo,The following statement contains a magic number: Height = 25;  
Magic Number,ZeroKLobby,ButtonInfo,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ButtonInfo.cs,GetButton,The following statement contains a magic number: button.Margin = new Padding (0' 0' 0' 3);  
Magic Number,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,RecordMissionResult,The following statement contains a magic number: if (spring.Context.GameEndedOk && !spring.Context.IsCheating) {  	Trace.TraceInformation ("Submitting score for mission " + modInfo.Name);  	try {  		var service = GlobalConst.GetContentService ();  		Task.Factory.StartNew (() => {  			try {  				service.SubmitMissionScore (Program.Conf.LobbyPlayerName' ZkData.Utils.HashLobbyPassword (Program.Conf.LobbyPlayerPassword)' modInfo.Name' spring.Context.MissionScore ?? 0' spring.Context.MissionFrame / 30' spring.Context.MissionVars);  			} catch (Exception ex) {  				Trace.TraceError ("Error sending score: {0}"' ex);  			}  		});  	} catch (Exception ex) {  		Trace.TraceError ();  	}  }  
Magic Number,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,RecordMissionResult,The following statement contains a magic number: try {  	var service = GlobalConst.GetContentService ();  	Task.Factory.StartNew (() => {  		try {  			service.SubmitMissionScore (Program.Conf.LobbyPlayerName' ZkData.Utils.HashLobbyPassword (Program.Conf.LobbyPlayerPassword)' modInfo.Name' spring.Context.MissionScore ?? 0' spring.Context.MissionFrame / 30' spring.Context.MissionVars);  		} catch (Exception ex) {  			Trace.TraceError ("Error sending score: {0}"' ex);  		}  	});  } catch (Exception ex) {  	Trace.TraceError ();  }  
Magic Number,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,RecordMissionResult,The following statement contains a magic number: Task.Factory.StartNew (() => {  	try {  		service.SubmitMissionScore (Program.Conf.LobbyPlayerName' ZkData.Utils.HashLobbyPassword (Program.Conf.LobbyPlayerPassword)' modInfo.Name' spring.Context.MissionScore ?? 0' spring.Context.MissionFrame / 30' spring.Context.MissionVars);  	} catch (Exception ex) {  		Trace.TraceError ("Error sending score: {0}"' ex);  	}  });  
Magic Number,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,RecordMissionResult,The following statement contains a magic number: try {  	service.SubmitMissionScore (Program.Conf.LobbyPlayerName' ZkData.Utils.HashLobbyPassword (Program.Conf.LobbyPlayerPassword)' modInfo.Name' spring.Context.MissionScore ?? 0' spring.Context.MissionFrame / 30' spring.Context.MissionVars);  } catch (Exception ex) {  	Trace.TraceError ("Error sending score: {0}"' ex);  }  
Magic Number,ZeroKLobby,MissionStarter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MissionStarter.cs,RecordMissionResult,The following statement contains a magic number: service.SubmitMissionScore (Program.Conf.LobbyPlayerName' ZkData.Utils.HashLobbyPassword (Program.Conf.LobbyPlayerPassword)' modInfo.Name' spring.Context.MissionScore ?? 0' spring.Context.MissionFrame / 30' spring.Context.MissionVars);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.tbFolder.Location = new System.Drawing.Point (12' 36);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.tbFolder.Location = new System.Drawing.Point (12' 36);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.tbFolder.Size = new System.Drawing.Size (431' 20);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.tbFolder.Size = new System.Drawing.Size (431' 20);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.lbDescription.Location = new System.Drawing.Point (12' 13);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.lbDescription.Location = new System.Drawing.Point (12' 13);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.lbDescription.Size = new System.Drawing.Size (194' 13);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.lbDescription.Size = new System.Drawing.Size (194' 13);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point (287' 74);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point (287' 74);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.TabIndex = 3;  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (368' 74);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (368' 74);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 4;  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.browseFolderbutton.Location = new System.Drawing.Point (15' 74);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.browseFolderbutton.Location = new System.Drawing.Point (15' 74);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.browseFolderbutton.Size = new System.Drawing.Size (86' 23);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.browseFolderbutton.Size = new System.Drawing.Size (86' 23);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.browseFolderbutton.TabIndex = 5;  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (455' 105);  
Magic Number,ZeroKLobby,SelectWritableFolder,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\SelectWritableFolder.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (455' 105);  
Magic Number,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,Init,The following statement contains a magic number: silencer = new byte[(int)(new WaveFormat (sampleRate' 1).AverageBytesPerSecond * silencerBufferMs / 1000.0 / 2 * 2)];  
Magic Number,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,Init,The following statement contains a magic number: silencer = new byte[(int)(new WaveFormat (sampleRate' 1).AverageBytesPerSecond * silencerBufferMs / 1000.0 / 2 * 2)];  
Magic Number,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,Init,The following statement contains a magic number: silencer = new byte[(int)(new WaveFormat (sampleRate' 1).AverageBytesPerSecond * silencerBufferMs / 1000.0 / 2 * 2)];  
Magic Number,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,LoopbackFunc,The following statement contains a magic number: while (true) {  	if (Program.CloseOnNext)  		return;  	if (loopbackBufs.TryDequeue (out networkBuf)) {  		PlaySoundFromNetworkData (0' networkBuf' (uint)networkBuf.Length' inputBuffer' decompressBuffer);  		Thread.Sleep (rand.Next (200));  	}  	NotifyNotTalking ();  }  
Magic Number,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,LoopbackFunc,The following statement contains a magic number: if (loopbackBufs.TryDequeue (out networkBuf)) {  	PlaySoundFromNetworkData (0' networkBuf' (uint)networkBuf.Length' inputBuffer' decompressBuffer);  	Thread.Sleep (rand.Next (200));  }  
Magic Number,ZeroKLobby,SteamVoiceSystem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamVoiceSystem.cs,LoopbackFunc,The following statement contains a magic number: Thread.Sleep (rand.Next (200));  
Magic Number,ZeroKLobby,HeadlessTabControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\HeadlessTabControl.cs,SetRegion,The following statement contains a magic number: Region = new Region (new Rectangle (4' this.ItemSize.Height + 4' Width - 8' Height - this.ItemSize.Height - 8));  
Magic Number,ZeroKLobby,HeadlessTabControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\HeadlessTabControl.cs,SetRegion,The following statement contains a magic number: Region = new Region (new Rectangle (4' this.ItemSize.Height + 4' Width - 8' Height - this.ItemSize.Height - 8));  
Magic Number,ZeroKLobby,HeadlessTabControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\HeadlessTabControl.cs,SetRegion,The following statement contains a magic number: Region = new Region (new Rectangle (4' this.ItemSize.Height + 4' Width - 8' Height - this.ItemSize.Height - 8));  
Magic Number,ZeroKLobby,HeadlessTabControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\HeadlessTabControl.cs,SetRegion,The following statement contains a magic number: Region = new Region (new Rectangle (4' this.ItemSize.Height + 4' Width - 8' Height - this.ItemSize.Height - 8));  
Magic Number,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,GetAndSetConfigValue,The following statement contains a magic number: foreach (var f in FileInfos.Where (x => !string.IsNullOrEmpty (x.KeyValueRegex))) {  	var targetFile = Path.Combine (path' f.RelativePath);  	var targetLines = new List<string> ();  	foreach (var line in File.ReadAllLines (targetFile)) {  		var finalLine = line;  		var match = Regex.Match (line' f.KeyValueRegex' RegexOptions.IgnoreCase);  		if (match.Success && string.Equals (match.Groups [1].Value.Trim ()' key' StringComparison.InvariantCultureIgnoreCase)) {  			foundValue = match.Groups [2].Value.Trim ();  			if (newValue != null)  				finalLine = string.Format (f.KeyValueFormat' key' newValue);  		}  		targetLines.Add (finalLine);  	}  	// didnt find key' add as new line   	if (foundValue == null)  		targetLines.Add (string.Format (f.KeyValueFormat' key' newValue));  	if (newValue != null)  		File.WriteAllLines (targetFile' targetLines);  }  
Magic Number,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,GetAndSetConfigValue,The following statement contains a magic number: foreach (var line in File.ReadAllLines (targetFile)) {  	var finalLine = line;  	var match = Regex.Match (line' f.KeyValueRegex' RegexOptions.IgnoreCase);  	if (match.Success && string.Equals (match.Groups [1].Value.Trim ()' key' StringComparison.InvariantCultureIgnoreCase)) {  		foundValue = match.Groups [2].Value.Trim ();  		if (newValue != null)  			finalLine = string.Format (f.KeyValueFormat' key' newValue);  	}  	targetLines.Add (finalLine);  }  
Magic Number,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,GetAndSetConfigValue,The following statement contains a magic number: if (match.Success && string.Equals (match.Groups [1].Value.Trim ()' key' StringComparison.InvariantCultureIgnoreCase)) {  	foundValue = match.Groups [2].Value.Trim ();  	if (newValue != null)  		finalLine = string.Format (f.KeyValueFormat' key' newValue);  }  
Magic Number,ZeroKLobby,EngineConfigurator,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\EngineConfigurator.cs,GetAndSetConfigValue,The following statement contains a magic number: foundValue = match.Groups [2].Value.Trim ();  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The following statement contains a magic number: tableLayoutPanel2.RowCount = 2;  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The following statement contains a magic number: MinimumSize = new Size (1024' 700);  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The following statement contains a magic number: MinimumSize = new Size (1024' 700);  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The following statement contains a magic number: btnExit = new ToolStripMenuItem {  	Name = "btnExit"'  	Size = new Size (92' 22)'  	Text = "Exit"  };  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The following statement contains a magic number: btnExit = new ToolStripMenuItem {  	Name = "btnExit"'  	Size = new Size (92' 22)'  	Text = "Exit"  };  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The following statement contains a magic number: trayStrip.Size = new Size (93' 26);  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,MainWindow,The following statement contains a magic number: trayStrip.Size = new Size (93' 26);  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,NotifyUser,The following statement contains a magic number: if (isHidden || isPathDifferent) {  	if (!string.IsNullOrEmpty (message)) {  		baloonTipPath = navigationPath;  		if (showBalloon)  			systrayIcon.ShowBalloonTip (5000' "Zero-K"' TextColor.StripCodes (message)' ToolTipIcon.Info);  	}  }  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,NotifyUser,The following statement contains a magic number: if (!string.IsNullOrEmpty (message)) {  	baloonTipPath = navigationPath;  	if (showBalloon)  		systrayIcon.ShowBalloonTip (5000' "Zero-K"' TextColor.StripCodes (message)' ToolTipIcon.Info);  }  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,NotifyUser,The following statement contains a magic number: if (showBalloon)  	systrayIcon.ShowBalloonTip (5000' "Zero-K"' TextColor.StripCodes (message)' ToolTipIcon.Info);  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,NotifyUser,The following statement contains a magic number: systrayIcon.ShowBalloonTip (5000' "Zero-K"' TextColor.StripCodes (message)' ToolTipIcon.Info);  
Magic Number,ZeroKLobby,MainWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MainWindow.cs,UpdateSystrayToolTip,The following statement contains a magic number: systrayIcon.Text = str.Substring (0' Math.Min (str.Length' 64));  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (finishNavigation)//if HintNewNavigation() was never called (meaning user's navigation was by clicking URL' and not thru UrlBox and not thru NavigationControl.cs button): Will do the following processing:   {  	var url = e.Url.ToString ();  	if (string.IsNullOrEmpty (e.TargetFrameName) && url.StartsWith (GlobalConst.BaseSiteUrl) && !url.StartsWith ("javascript:"))//if navigation is within Zero-K  	 {  		var nav = Program.MainWindow.navigationControl.GetInavigatableByPath (url);  		//check which TAB this URL represent  		if (url.Contains ("@logout")) {  			//if Logout signature' perform logout  			e.Cancel = true;  			ActionHandler.PerformAction ("logout");  			Program.MainWindow.navigationControl.Path = url.Replace ("@logout"' "");  		} else if (nav == null || nav == this || url.Contains ("/SubmitPost?")) {  			//if url belong to this TAB or not other TAB' or is posting comment in this TAB' continue this browser instance uninterupted  			//HintNewNavigation(url);  		} else {  			// else' navigate to another tab actually  			e.Cancel = true;  			Program.MainWindow.navigationControl.Path = url;  		}  	} else if (url.StartsWith ("javascript:SendLobbyCommand('")) {  		// intercept & not trigger the javascript' instead execute it directly from the url   		//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  		e.Cancel = true;  		int endPosition = url.IndexOf ("');void(0);"' 29);  		//the end of string as read from Internet Browser status bar  		int commandLength = endPosition - 29;  		//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  		Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  	}  	if (!e.Cancel) {  		HintNewNavigation (url);  	}  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (finishNavigation)//if HintNewNavigation() was never called (meaning user's navigation was by clicking URL' and not thru UrlBox and not thru NavigationControl.cs button): Will do the following processing:   {  	var url = e.Url.ToString ();  	if (string.IsNullOrEmpty (e.TargetFrameName) && url.StartsWith (GlobalConst.BaseSiteUrl) && !url.StartsWith ("javascript:"))//if navigation is within Zero-K  	 {  		var nav = Program.MainWindow.navigationControl.GetInavigatableByPath (url);  		//check which TAB this URL represent  		if (url.Contains ("@logout")) {  			//if Logout signature' perform logout  			e.Cancel = true;  			ActionHandler.PerformAction ("logout");  			Program.MainWindow.navigationControl.Path = url.Replace ("@logout"' "");  		} else if (nav == null || nav == this || url.Contains ("/SubmitPost?")) {  			//if url belong to this TAB or not other TAB' or is posting comment in this TAB' continue this browser instance uninterupted  			//HintNewNavigation(url);  		} else {  			// else' navigate to another tab actually  			e.Cancel = true;  			Program.MainWindow.navigationControl.Path = url;  		}  	} else if (url.StartsWith ("javascript:SendLobbyCommand('")) {  		// intercept & not trigger the javascript' instead execute it directly from the url   		//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  		e.Cancel = true;  		int endPosition = url.IndexOf ("');void(0);"' 29);  		//the end of string as read from Internet Browser status bar  		int commandLength = endPosition - 29;  		//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  		Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  	}  	if (!e.Cancel) {  		HintNewNavigation (url);  	}  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (finishNavigation)//if HintNewNavigation() was never called (meaning user's navigation was by clicking URL' and not thru UrlBox and not thru NavigationControl.cs button): Will do the following processing:   {  	var url = e.Url.ToString ();  	if (string.IsNullOrEmpty (e.TargetFrameName) && url.StartsWith (GlobalConst.BaseSiteUrl) && !url.StartsWith ("javascript:"))//if navigation is within Zero-K  	 {  		var nav = Program.MainWindow.navigationControl.GetInavigatableByPath (url);  		//check which TAB this URL represent  		if (url.Contains ("@logout")) {  			//if Logout signature' perform logout  			e.Cancel = true;  			ActionHandler.PerformAction ("logout");  			Program.MainWindow.navigationControl.Path = url.Replace ("@logout"' "");  		} else if (nav == null || nav == this || url.Contains ("/SubmitPost?")) {  			//if url belong to this TAB or not other TAB' or is posting comment in this TAB' continue this browser instance uninterupted  			//HintNewNavigation(url);  		} else {  			// else' navigate to another tab actually  			e.Cancel = true;  			Program.MainWindow.navigationControl.Path = url;  		}  	} else if (url.StartsWith ("javascript:SendLobbyCommand('")) {  		// intercept & not trigger the javascript' instead execute it directly from the url   		//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  		e.Cancel = true;  		int endPosition = url.IndexOf ("');void(0);"' 29);  		//the end of string as read from Internet Browser status bar  		int commandLength = endPosition - 29;  		//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  		Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  	}  	if (!e.Cancel) {  		HintNewNavigation (url);  	}  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (string.IsNullOrEmpty (e.TargetFrameName) && url.StartsWith (GlobalConst.BaseSiteUrl) && !url.StartsWith ("javascript:"))//if navigation is within Zero-K   {  	var nav = Program.MainWindow.navigationControl.GetInavigatableByPath (url);  	//check which TAB this URL represent  	if (url.Contains ("@logout")) {  		//if Logout signature' perform logout  		e.Cancel = true;  		ActionHandler.PerformAction ("logout");  		Program.MainWindow.navigationControl.Path = url.Replace ("@logout"' "");  	} else if (nav == null || nav == this || url.Contains ("/SubmitPost?")) {  		//if url belong to this TAB or not other TAB' or is posting comment in this TAB' continue this browser instance uninterupted  		//HintNewNavigation(url);  	} else {  		// else' navigate to another tab actually  		e.Cancel = true;  		Program.MainWindow.navigationControl.Path = url;  	}  } else if (url.StartsWith ("javascript:SendLobbyCommand('")) {  	// intercept & not trigger the javascript' instead execute it directly from the url   	//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  	e.Cancel = true;  	int endPosition = url.IndexOf ("');void(0);"' 29);  	//the end of string as read from Internet Browser status bar  	int commandLength = endPosition - 29;  	//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  	Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (string.IsNullOrEmpty (e.TargetFrameName) && url.StartsWith (GlobalConst.BaseSiteUrl) && !url.StartsWith ("javascript:"))//if navigation is within Zero-K   {  	var nav = Program.MainWindow.navigationControl.GetInavigatableByPath (url);  	//check which TAB this URL represent  	if (url.Contains ("@logout")) {  		//if Logout signature' perform logout  		e.Cancel = true;  		ActionHandler.PerformAction ("logout");  		Program.MainWindow.navigationControl.Path = url.Replace ("@logout"' "");  	} else if (nav == null || nav == this || url.Contains ("/SubmitPost?")) {  		//if url belong to this TAB or not other TAB' or is posting comment in this TAB' continue this browser instance uninterupted  		//HintNewNavigation(url);  	} else {  		// else' navigate to another tab actually  		e.Cancel = true;  		Program.MainWindow.navigationControl.Path = url;  	}  } else if (url.StartsWith ("javascript:SendLobbyCommand('")) {  	// intercept & not trigger the javascript' instead execute it directly from the url   	//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  	e.Cancel = true;  	int endPosition = url.IndexOf ("');void(0);"' 29);  	//the end of string as read from Internet Browser status bar  	int commandLength = endPosition - 29;  	//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  	Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (string.IsNullOrEmpty (e.TargetFrameName) && url.StartsWith (GlobalConst.BaseSiteUrl) && !url.StartsWith ("javascript:"))//if navigation is within Zero-K   {  	var nav = Program.MainWindow.navigationControl.GetInavigatableByPath (url);  	//check which TAB this URL represent  	if (url.Contains ("@logout")) {  		//if Logout signature' perform logout  		e.Cancel = true;  		ActionHandler.PerformAction ("logout");  		Program.MainWindow.navigationControl.Path = url.Replace ("@logout"' "");  	} else if (nav == null || nav == this || url.Contains ("/SubmitPost?")) {  		//if url belong to this TAB or not other TAB' or is posting comment in this TAB' continue this browser instance uninterupted  		//HintNewNavigation(url);  	} else {  		// else' navigate to another tab actually  		e.Cancel = true;  		Program.MainWindow.navigationControl.Path = url;  	}  } else if (url.StartsWith ("javascript:SendLobbyCommand('")) {  	// intercept & not trigger the javascript' instead execute it directly from the url   	//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  	e.Cancel = true;  	int endPosition = url.IndexOf ("');void(0);"' 29);  	//the end of string as read from Internet Browser status bar  	int commandLength = endPosition - 29;  	//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  	Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (url.StartsWith ("javascript:SendLobbyCommand('")) {  	// intercept & not trigger the javascript' instead execute it directly from the url   	//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  	e.Cancel = true;  	int endPosition = url.IndexOf ("');void(0);"' 29);  	//the end of string as read from Internet Browser status bar  	int commandLength = endPosition - 29;  	//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  	Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (url.StartsWith ("javascript:SendLobbyCommand('")) {  	// intercept & not trigger the javascript' instead execute it directly from the url   	//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  	e.Cancel = true;  	int endPosition = url.IndexOf ("');void(0);"' 29);  	//the end of string as read from Internet Browser status bar  	int commandLength = endPosition - 29;  	//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  	Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: if (url.StartsWith ("javascript:SendLobbyCommand('")) {  	// intercept & not trigger the javascript' instead execute it directly from the url   	//(because for unknown reason mission/replay can't be triggered more than once using standard technique(javascript send text to lobby to trigger mission))  	e.Cancel = true;  	int endPosition = url.IndexOf ("');void(0);"' 29);  	//the end of string as read from Internet Browser status bar  	int commandLength = endPosition - 29;  	//NOTE: "javascript:SendLobbyCommand('" is 30 char. So the startPos in at 29th char  	Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  }  
Magic Number,ZeroKLobby,BrowserTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BrowserTab.cs,OnNavigating,The following statement contains a magic number: Program.MainWindow.navigationControl.Path = url.Substring (29' commandLength);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: table.ColumnCount = 2;  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: flowLayoutPanel.Padding = new Padding (13);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: Size = new Size (703' 219);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: Size = new Size (703' 219);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: isBusyTimer.Interval = 120;  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: tabControl.Top = flowLayoutPanel.Bottom + 10;  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: tabControl.Left = 10;  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: tabControl.Width = Width - 20;  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,NavigationControl,The following statement contains a magic number: tabControl.Height = Height - flowLayoutPanel.Height - 20;  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,CreateTopRightMiniIcons,The following statement contains a magic number: urlBox = new ZklTextBox {  	Size = new Size (110' 20)'  	TabIndex = 1'  	Font = Config.GeneralFontSmall'  	Margin = new Padding (10)  };  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,CreateTopRightMiniIcons,The following statement contains a magic number: urlBox = new ZklTextBox {  	Size = new Size (110' 20)'  	TabIndex = 1'  	Font = Config.GeneralFontSmall'  	Margin = new Padding (10)  };  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,CreateTopRightMiniIcons,The following statement contains a magic number: urlBox = new ZklTextBox {  	Size = new Size (110' 20)'  	TabIndex = 1'  	Font = Config.GeneralFontSmall'  	Margin = new Padding (10)  };  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,SetupTabButtons,The following statement contains a magic number: ButtonList = new List<ButtonInfo>//normal arrangement   {  	new ButtonInfo {  		Label = "MISSION"'  		TargetPath = string.Format ("{0}/Missions?no_menu=1"' GlobalConst.BaseSiteUrl)'  		Icon = Buttons.sp'  		Width = 200'  		Height = TabButtonHeight  	}'  	/*new ButtonInfo                 {                     Label = "SKIRMISH"'                     TargetPath = "skirmish"'                     Icon = Buttons.sp'                     Width = 200'                     Height = TabButtonHeight                 }'*/new ButtonInfo {  		Label = "MULTIPLAYER"'  		TargetPath = "battles"'  		Icon = Buttons.mp'  		Width = 250'  		Height = TabButtonHeight  	}'  	new ButtonInfo {  		Label = "WEB"'  		TargetPath = GlobalConst.BaseSiteUrl + "/"'  		Icon = Buttons.globe'  		Height = TabButtonHeight'  		Width = 150  	}'  	new ButtonInfo {  		Label = "CHAT"'  		TargetPath = "chat"'  		Icon = Buttons.chat'  		Height = TabButtonHeight'  		Width = 150  	}  };  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,SetupTabButtons,The following statement contains a magic number: ButtonList = new List<ButtonInfo>//normal arrangement   {  	new ButtonInfo {  		Label = "MISSION"'  		TargetPath = string.Format ("{0}/Missions?no_menu=1"' GlobalConst.BaseSiteUrl)'  		Icon = Buttons.sp'  		Width = 200'  		Height = TabButtonHeight  	}'  	/*new ButtonInfo                 {                     Label = "SKIRMISH"'                     TargetPath = "skirmish"'                     Icon = Buttons.sp'                     Width = 200'                     Height = TabButtonHeight                 }'*/new ButtonInfo {  		Label = "MULTIPLAYER"'  		TargetPath = "battles"'  		Icon = Buttons.mp'  		Width = 250'  		Height = TabButtonHeight  	}'  	new ButtonInfo {  		Label = "WEB"'  		TargetPath = GlobalConst.BaseSiteUrl + "/"'  		Icon = Buttons.globe'  		Height = TabButtonHeight'  		Width = 150  	}'  	new ButtonInfo {  		Label = "CHAT"'  		TargetPath = "chat"'  		Icon = Buttons.chat'  		Height = TabButtonHeight'  		Width = 150  	}  };  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,SetupTabButtons,The following statement contains a magic number: ButtonList = new List<ButtonInfo>//normal arrangement   {  	new ButtonInfo {  		Label = "MISSION"'  		TargetPath = string.Format ("{0}/Missions?no_menu=1"' GlobalConst.BaseSiteUrl)'  		Icon = Buttons.sp'  		Width = 200'  		Height = TabButtonHeight  	}'  	/*new ButtonInfo                 {                     Label = "SKIRMISH"'                     TargetPath = "skirmish"'                     Icon = Buttons.sp'                     Width = 200'                     Height = TabButtonHeight                 }'*/new ButtonInfo {  		Label = "MULTIPLAYER"'  		TargetPath = "battles"'  		Icon = Buttons.mp'  		Width = 250'  		Height = TabButtonHeight  	}'  	new ButtonInfo {  		Label = "WEB"'  		TargetPath = GlobalConst.BaseSiteUrl + "/"'  		Icon = Buttons.globe'  		Height = TabButtonHeight'  		Width = 150  	}'  	new ButtonInfo {  		Label = "CHAT"'  		TargetPath = "chat"'  		Icon = Buttons.chat'  		Height = TabButtonHeight'  		Width = 150  	}  };  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,SetupTabButtons,The following statement contains a magic number: ButtonList = new List<ButtonInfo>//normal arrangement   {  	new ButtonInfo {  		Label = "MISSION"'  		TargetPath = string.Format ("{0}/Missions?no_menu=1"' GlobalConst.BaseSiteUrl)'  		Icon = Buttons.sp'  		Width = 200'  		Height = TabButtonHeight  	}'  	/*new ButtonInfo                 {                     Label = "SKIRMISH"'                     TargetPath = "skirmish"'                     Icon = Buttons.sp'                     Width = 200'                     Height = TabButtonHeight                 }'*/new ButtonInfo {  		Label = "MULTIPLAYER"'  		TargetPath = "battles"'  		Icon = Buttons.mp'  		Width = 250'  		Height = TabButtonHeight  	}'  	new ButtonInfo {  		Label = "WEB"'  		TargetPath = GlobalConst.BaseSiteUrl + "/"'  		Icon = Buttons.globe'  		Height = TabButtonHeight'  		Width = 150  	}'  	new ButtonInfo {  		Label = "CHAT"'  		TargetPath = "chat"'  		Icon = Buttons.chat'  		Height = TabButtonHeight'  		Width = 150  	}  };  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (table.Bounds' Color.FromArgb (255' 19' 65' 73)' Color.FromArgb (255' 10' 30' 40)' 90))  	e.Graphics.FillRectangle (lb' table.Bounds);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (new Rectangle (rect.X' rect.Y - 1' rect.Width' rect.Height + 1)' Color.FromArgb (255' 10' 30' 40)' Color.FromArgb (255' 0' 0' 0)' 90))  	e.Graphics.FillRectangle (lb' rect);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (new Rectangle (rect.X' rect.Y - 1' rect.Width' rect.Height + 1)' Color.FromArgb (255' 10' 30' 40)' Color.FromArgb (255' 0' 0' 0)' 90))  	e.Graphics.FillRectangle (lb' rect);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (new Rectangle (rect.X' rect.Y - 1' rect.Width' rect.Height + 1)' Color.FromArgb (255' 10' 30' 40)' Color.FromArgb (255' 0' 0' 0)' 90))  	e.Graphics.FillRectangle (lb' rect);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (new Rectangle (rect.X' rect.Y - 1' rect.Width' rect.Height + 1)' Color.FromArgb (255' 10' 30' 40)' Color.FromArgb (255' 0' 0' 0)' 90))  	e.Graphics.FillRectangle (lb' rect);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (new Rectangle (rect.X' rect.Y - 1' rect.Width' rect.Height + 1)' Color.FromArgb (255' 10' 30' 40)' Color.FromArgb (255' 0' 0' 0)' 90))  	e.Graphics.FillRectangle (lb' rect);  
Magic Number,ZeroKLobby,NavigationControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\NavigationControl.cs,OnPaintBackground,The following statement contains a magic number: using (var lb = new LinearGradientBrush (new Rectangle (rect.X' rect.Y - 1' rect.Width' rect.Height + 1)' Color.FromArgb (255' 10' 30' 40)' Color.FromArgb (255' 0' 0' 0)' 90))  	e.Graphics.FillRectangle (lb' rect);  
Magic Number,ZeroKLobby,ServerImagesHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ServerImagesHandler.cs,GetImageItem,The following statement contains a magic number: lock (locker) {  	Item item;  	items.TryGetValue (urlPart' out item);  	if (item == null || item.IsError) {  		item = new Item {  			Name = urlPart  		};  		items [urlPart] = item;  		item.LocalPath = Utils.MakePath (basePath' urlPart);  		string dir = Path.GetDirectoryName (item.LocalPath);  		try {  			if (!Directory.Exists (dir))  				Directory.CreateDirectory (dir);  			if (File.Exists (item.LocalPath)) {  				item.Image = Image.FromStream (new MemoryStream (File.ReadAllBytes (item.LocalPath)));  				item.IsLoaded = true;  			}  		} catch (Exception ex) {  			Trace.TraceWarning ("Failed to load image:{0}"' ex.Message);  		}  		if (!item.IsLoaded || DateTime.Now.Subtract (File.GetLastWriteTime (item.LocalPath)).TotalDays > 3) {  			Task.Factory.StartNew (state => {  				var i = (Item)state;  				string url = GlobalConst.BaseImageUrl + i.Name;  				try {  					using (var wc = new WebClient ())  						wc.DownloadFile (url' i.LocalPath);  					i.Image = Image.FromStream (new MemoryStream (File.ReadAllBytes (item.LocalPath)));  					i.IsLoaded = true;  					File.SetLastWriteTime (i.LocalPath' DateTime.Now);  				} catch (Exception ex) {  					Trace.TraceWarning ("Failed to load server image: {0}: {1}"' url' ex.Message);  					if (!i.IsLoaded)  						i.IsError = true;  				}  			}' item);  		}  	}  	return item;  }  
Magic Number,ZeroKLobby,ServerImagesHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ServerImagesHandler.cs,GetImageItem,The following statement contains a magic number: if (item == null || item.IsError) {  	item = new Item {  		Name = urlPart  	};  	items [urlPart] = item;  	item.LocalPath = Utils.MakePath (basePath' urlPart);  	string dir = Path.GetDirectoryName (item.LocalPath);  	try {  		if (!Directory.Exists (dir))  			Directory.CreateDirectory (dir);  		if (File.Exists (item.LocalPath)) {  			item.Image = Image.FromStream (new MemoryStream (File.ReadAllBytes (item.LocalPath)));  			item.IsLoaded = true;  		}  	} catch (Exception ex) {  		Trace.TraceWarning ("Failed to load image:{0}"' ex.Message);  	}  	if (!item.IsLoaded || DateTime.Now.Subtract (File.GetLastWriteTime (item.LocalPath)).TotalDays > 3) {  		Task.Factory.StartNew (state => {  			var i = (Item)state;  			string url = GlobalConst.BaseImageUrl + i.Name;  			try {  				using (var wc = new WebClient ())  					wc.DownloadFile (url' i.LocalPath);  				i.Image = Image.FromStream (new MemoryStream (File.ReadAllBytes (item.LocalPath)));  				i.IsLoaded = true;  				File.SetLastWriteTime (i.LocalPath' DateTime.Now);  			} catch (Exception ex) {  				Trace.TraceWarning ("Failed to load server image: {0}: {1}"' url' ex.Message);  				if (!i.IsLoaded)  					i.IsError = true;  			}  		}' item);  	}  }  
Magic Number,ZeroKLobby,ServerImagesHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ServerImagesHandler.cs,GetImageItem,The following statement contains a magic number: if (!item.IsLoaded || DateTime.Now.Subtract (File.GetLastWriteTime (item.LocalPath)).TotalDays > 3) {  	Task.Factory.StartNew (state => {  		var i = (Item)state;  		string url = GlobalConst.BaseImageUrl + i.Name;  		try {  			using (var wc = new WebClient ())  				wc.DownloadFile (url' i.LocalPath);  			i.Image = Image.FromStream (new MemoryStream (File.ReadAllBytes (item.LocalPath)));  			i.IsLoaded = true;  			File.SetLastWriteTime (i.LocalPath' DateTime.Now);  		} catch (Exception ex) {  			Trace.TraceWarning ("Failed to load server image: {0}: {1}"' url' ex.Message);  			if (!i.IsLoaded)  				i.IsError = true;  		}  	}' item);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: y += 16;  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: x += w + 3;  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (battle.IsInGame) {  	drawImage (Buttons.fight' 16' 16);  	if (battle.RunningSince != null) {  		var timeString = DateTime.UtcNow.Subtract (battle.RunningSince.Value).PrintTimeRemaining ();  		drawString ("Battle running for " + timeString + ".");  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (battle.IsInGame) {  	drawImage (Buttons.fight' 16' 16);  	if (battle.RunningSince != null) {  		var timeString = DateTime.UtcNow.Subtract (battle.RunningSince.Value).PrintTimeRemaining ();  		drawString ("Battle running for " + timeString + ".");  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (battle.IsPassworded) {  	drawImage (ZklResources._lock' 16' 16);  	drawString ("Joining requires a password.");  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (battle.IsPassworded) {  	drawImage (ZklResources._lock' 16' 16);  	drawString ("Joining requires a password.");  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources._lock' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources._lock' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var player in battle.Users.Values.Select (u => u.LobbyUser)) {  	var user = player;  	var icon = TextImage.GetUserImage (user.Name);  	drawImage (icon' 16' 16);  	Image flag;  	y += 3;  	if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  		drawImage (flag' flag.Width' flag.Height);  	else  		x += 19;  	y -= 3;  	if (!user.IsBot) {  		drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  		var clan = ServerImagesHandler.GetClanOrFactionImage (user);  		if (clan.Item1 != null)  			drawImage (clan.Item1' 16' 16);  	}  	/*                 if (user.IsZkLobbyUser)                 {                     drawImage(Resources.ZK_logo_square' 16' 16);                 }*/drawString (player.Name);  	if (!user.IsBot) {  		if (user.IsAway)  			drawImage (ZklResources.away' 16' 16);  		if (user.IsInGame)  			drawImage (Buttons.fight' 16' 16);  	}  	newLine ();  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (icon' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (icon' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: y += 3;  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  	drawImage (flag' flag.Width' flag.Height);  else  	x += 19;  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: x += 19;  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: y -= 3;  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	var clan = ServerImagesHandler.GetClanOrFactionImage (user);  	if (clan.Item1 != null)  		drawImage (clan.Item1' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	var clan = ServerImagesHandler.GetClanOrFactionImage (user);  	if (clan.Item1 != null)  		drawImage (clan.Item1' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	var clan = ServerImagesHandler.GetClanOrFactionImage (user);  	if (clan.Item1 != null)  		drawImage (clan.Item1' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	var clan = ServerImagesHandler.GetClanOrFactionImage (user);  	if (clan.Item1 != null)  		drawImage (clan.Item1' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (clan.Item1 != null)  	drawImage (clan.Item1' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (clan.Item1 != null)  	drawImage (clan.Item1' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (clan.Item1' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (clan.Item1' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	if (user.IsAway)  		drawImage (ZklResources.away' 16' 16);  	if (user.IsInGame)  		drawImage (Buttons.fight' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	if (user.IsAway)  		drawImage (ZklResources.away' 16' 16);  	if (user.IsInGame)  		drawImage (Buttons.fight' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	if (user.IsAway)  		drawImage (ZklResources.away' 16' 16);  	if (user.IsInGame)  		drawImage (Buttons.fight' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	if (user.IsAway)  		drawImage (ZklResources.away' 16' 16);  	if (user.IsInGame)  		drawImage (Buttons.fight' 16' 16);  }  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsAway)  	drawImage (ZklResources.away' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsAway)  	drawImage (ZklResources.away' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.away' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.away' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsInGame)  	drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsInGame)  	drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 6;  
Magic Number,ZeroKLobby,BattleTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\BattleTooltipRenderer.cs,GetSize,The following statement contains a magic number: return new Size (270' h);  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: y += 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: x += w + 3;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: if (map != null) {  	newLine ();  	//drawString(map.HumanName);  	//newLine();  	drawString (string.Format ("Size: {0}x{1}"' map.Size.Width / 512' map.Size.Height / 512));  	newLine ();  	if (!string.IsNullOrEmpty (map.Author)) {  		drawString ();  		newLine ();  	}  	foreach (var line in map.Description.Lines ().Select (s => s.SplitEvery (33)).SelectMany (s => s)) {  		drawString (line);  		newLine ();  	}  }  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: if (map != null) {  	newLine ();  	//drawString(map.HumanName);  	//newLine();  	drawString (string.Format ("Size: {0}x{1}"' map.Size.Width / 512' map.Size.Height / 512));  	newLine ();  	if (!string.IsNullOrEmpty (map.Author)) {  		drawString ();  		newLine ();  	}  	foreach (var line in map.Description.Lines ().Select (s => s.SplitEvery (33)).SelectMany (s => s)) {  		drawString (line);  		newLine ();  	}  }  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: if (map != null) {  	newLine ();  	//drawString(map.HumanName);  	//newLine();  	drawString (string.Format ("Size: {0}x{1}"' map.Size.Width / 512' map.Size.Height / 512));  	newLine ();  	if (!string.IsNullOrEmpty (map.Author)) {  		drawString ();  		newLine ();  	}  	foreach (var line in map.Description.Lines ().Select (s => s.SplitEvery (33)).SelectMany (s => s)) {  		drawString (line);  		newLine ();  	}  }  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: drawString (string.Format ("Size: {0}x{1}"' map.Size.Width / 512' map.Size.Height / 512));  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: drawString (string.Format ("Size: {0}x{1}"' map.Size.Width / 512' map.Size.Height / 512));  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,Draw,The following statement contains a magic number: foreach (var line in map.Description.Lines ().Select (s => s.SplitEvery (33)).SelectMany (s => s)) {  	drawString (line);  	newLine ();  }  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (map != null)  	h += 16 * 6 + map.Description.Lines ().Length * 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (map != null)  	h += 16 * 6 + map.Description.Lines ().Length * 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (map != null)  	h += 16 * 6 + map.Description.Lines ().Length * 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16 * 6 + map.Description.Lines ().Length * 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16 * 6 + map.Description.Lines ().Length * 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16 * 6 + map.Description.Lines ().Length * 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (Program.TasClient.MyBattle != null && !String.IsNullOrEmpty (Program.ModStore.ChangedOptions)) {  	h += 16;  	// blank line  	h += 16;  	// title  	h += Program.ModStore.ChangedOptions.Lines ().Where (x => !string.IsNullOrEmpty (x)).Count () * 16;  }  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (Program.TasClient.MyBattle != null && !String.IsNullOrEmpty (Program.ModStore.ChangedOptions)) {  	h += 16;  	// blank line  	h += 16;  	// title  	h += Program.ModStore.ChangedOptions.Lines ().Where (x => !string.IsNullOrEmpty (x)).Count () * 16;  }  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (Program.TasClient.MyBattle != null && !String.IsNullOrEmpty (Program.ModStore.ChangedOptions)) {  	h += 16;  	// blank line  	h += 16;  	// title  	h += Program.ModStore.ChangedOptions.Lines ().Where (x => !string.IsNullOrEmpty (x)).Count () * 16;  }  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += Program.ModStore.ChangedOptions.Lines ().Where (x => !string.IsNullOrEmpty (x)).Count () * 16;  
Magic Number,ZeroKLobby,MapTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\MapTooltipRenderer.cs,GetSize,The following statement contains a magic number: return new Size (300' h);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: y += (int)16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: x += (int)(w + 3);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: y += 3;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	var clan = ServerImagesHandler.GetClanOrFactionImage (user);  	if (clan.Item1 != null) {  		drawImage (clan.Item1' 16' 16);  		drawString2 (clan.Item2' Utils.GetFactionColor (user.Faction));  		newLine ();  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	var clan = ServerImagesHandler.GetClanOrFactionImage (user);  	if (clan.Item1 != null) {  		drawImage (clan.Item1' 16' 16);  		drawString2 (clan.Item2' Utils.GetFactionColor (user.Faction));  		newLine ();  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (clan.Item1 != null) {  	drawImage (clan.Item1' 16' 16);  	drawString2 (clan.Item2' Utils.GetFactionColor (user.Faction));  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (clan.Item1 != null) {  	drawImage (clan.Item1' 16' 16);  	drawString2 (clan.Item2' Utils.GetFactionColor (user.Faction));  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (clan.Item1' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (clan.Item1' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null) {  	//drawString("Country: ");  	y += 2;  	drawImage (flag' flag.Width' flag.Height);  	y -= 2;  	drawString (CountryNames.GetName (user.Country));  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null) {  	//drawString("Country: ");  	y += 2;  	drawImage (flag' flag.Width' flag.Height);  	y -= 2;  	drawString (CountryNames.GetName (user.Country));  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: y += 2;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: y -= 2;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsBot) {  	drawImage (ZklResources.robot' 16' 16);  	drawString ("Bot");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsBot) {  	drawImage (ZklResources.robot' 16' 16);  	drawString ("Bot");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.robot' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.robot' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.Name == Program.TasClient.MyBattle.FounderName) {  	drawImage (ZklResources.self_police' 16' 16);  	drawString ("Battle founder");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.Name == Program.TasClient.MyBattle.FounderName) {  	drawImage (ZklResources.self_police' 16' 16);  	drawString ("Battle founder");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.self_police' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.self_police' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsAdmin) {  	drawImage (ZklResources.police' 16' 16);  	drawString ("Administrator");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsAdmin) {  	drawImage (ZklResources.police' 16' 16);  	drawString ("Administrator");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.police' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.police' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (Program.TasClient.Friends.Contains (user.Name)) {  	drawImage (ZklResources.friend' 16' 16);  	drawString ("Friend");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (Program.TasClient.Friends.Contains (user.Name)) {  	drawImage (ZklResources.friend' 16' 16);  	drawString ("Friend");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.friend' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.friend' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.SteamID != null) {  	drawImage (ZklResources.steam' 16' 16);  	drawString (string.Format ("Steam name: {0}"' user.DisplayName ?? user.Name));  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.SteamID != null) {  	drawImage (ZklResources.steam' 16' 16);  	drawString (string.Format ("Steam name: {0}"' user.DisplayName ?? user.Name));  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.steam' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.steam' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!user.IsBot) {  	drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  	drawString (string.Format ("Level: {0}"' user.Level));  	newLine ();  	if (user.AwaySince.HasValue) {  		drawImage (ZklResources.away' 16' 16);  		drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  		newLine ();  	}  	if (user.IsInGame) {  		drawImage (Buttons.fight' 16' 16);  		if (user.InGameSince != null) {  			var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  			drawString ("Playing since " + time + " ago.");  		}  		newLine ();  	}  	if (!string.IsNullOrEmpty (user.Avatar)) {  		var image = Program.ServerImages.GetAvatarImage (user);  		if (image != null)  			g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Images.GetRank (user.Level' user.EffectiveMmElo)' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.AwaySince.HasValue) {  	drawImage (ZklResources.away' 16' 16);  	drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.AwaySince.HasValue) {  	drawImage (ZklResources.away' 16' 16);  	drawString ("User idle for " + DateTime.UtcNow.Subtract (user.AwaySince.Value).PrintTimeRemaining () + ".");  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.away' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (ZklResources.away' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsInGame) {  	drawImage (Buttons.fight' 16' 16);  	if (user.InGameSince != null) {  		var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  		drawString ("Playing since " + time + " ago.");  	}  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsInGame) {  	drawImage (Buttons.fight' 16' 16);  	if (user.InGameSince != null) {  		var time = DateTime.UtcNow.Subtract (user.InGameSince.Value).PrintTimeRemaining ();  		drawString ("Playing since " + time + " ago.");  	}  	newLine ();  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: drawImage (Buttons.fight' 16' 16);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!string.IsNullOrEmpty (user.Avatar)) {  	var image = Program.ServerImages.GetAvatarImage (user);  	if (image != null)  		g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!string.IsNullOrEmpty (user.Avatar)) {  	var image = Program.ServerImages.GetAvatarImage (user);  	if (image != null)  		g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!string.IsNullOrEmpty (user.Avatar)) {  	var image = Program.ServerImages.GetAvatarImage (user);  	if (image != null)  		g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (!string.IsNullOrEmpty (user.Avatar)) {  	var image = Program.ServerImages.GetAvatarImage (user);  	if (image != null)  		g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (image != null)  	g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (image != null)  	g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (image != null)  	g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (image != null)  	g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: g.DrawImage (image' (int)(302 - 65)' 0' (int)64' (int)64);  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsInBattleRoom) {  	if (y < 70)  		y = 70;  	if (user.IsInBattleRoom) {  		var battleIcon = Program.BattleIconManager.GetBattleIcon (user.BattleID ?? 0);  		if (battleIcon != null)  			g.DrawImageUnscaled (battleIcon.Image' x' y);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (user.IsInBattleRoom) {  	if (y < 70)  		y = 70;  	if (user.IsInBattleRoom) {  		var battleIcon = Program.BattleIconManager.GetBattleIcon (user.BattleID ?? 0);  		if (battleIcon != null)  			g.DrawImageUnscaled (battleIcon.Image' x' y);  	}  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (y < 70)  	y = 70;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: if (y < 70)  	y = 70;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,Draw,The following statement contains a magic number: y = 70;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16 + 3;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16 + 3;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (user.IsBot)  	h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (user.IsAdmin)  	h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (Program.TasClient.Friends.Contains (user.Name))  	h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (!user.IsBot) {  	h += 16;  	// rank text  	if (user.IsAway)  		h += 16;  	// away icon  	if (user.IsInGame)  		h += 16;  	// ingame icon  	h += 16;  	// skill text  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (!user.IsBot) {  	h += 16;  	// rank text  	if (user.IsAway)  		h += 16;  	// away icon  	if (user.IsInGame)  		h += 16;  	// ingame icon  	h += 16;  	// skill text  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (!user.IsBot) {  	h += 16;  	// rank text  	if (user.IsAway)  		h += 16;  	// away icon  	if (user.IsInGame)  		h += 16;  	// ingame icon  	h += 16;  	// skill text  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (!user.IsBot) {  	h += 16;  	// rank text  	if (user.IsAway)  		h += 16;  	// away icon  	if (user.IsInGame)  		h += 16;  	// ingame icon  	h += 16;  	// skill text  }  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (user.IsAway)  	h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (user.IsInGame)  	h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (user.SteamID != null)  	h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 16;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: if (user.IsInBattleRoom)  	h += 76;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: h += 76;  
Magic Number,ZeroKLobby,PlayerTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\PlayerTooltipRenderer.cs,GetSize,The following statement contains a magic number: return new Size ((int)302' (int)h);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: ChatFont = new Font (sansFont' 15' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: GeneralFont = new Font (sansFont' 15' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: GeneralFontBig = new Font (sansFont' 15' FontStyle.Bold' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: GeneralFontSmall = new Font (sansFont' 9' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: MenuFont = new Font (fancyFont' 15' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: ToolbarFontBig = new Font (fancyFont' 14' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: ToolbarFont = new Font (fancyFont' 12' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: ToolbarFontSmall = new Font (fancyFont' 9' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: MainPageFontBig = new Font (fancyFont' 14' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: MainPageFont = new Font (fancyFont' 12' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,Config,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Config.cs,Config,The following statement contains a magic number: MainPageFontSmall = new Font (fancyFont' 9' GraphicsUnit.Pixel);  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: try {  	Trace.TraceError (e);  	// write to error log  	string logPath = Utils.MakePath (Program.StartupPath' Config.LogFile);  	// if our log file is too big' back it up and clear  	if (File.Exists (logPath)) {  		FileInfo info = new FileInfo (logPath);  		if (info.Length > 50 * 1024 * 1024)// 50 MB  		 {  			/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  			try {  				File.Copy (logPath' newPath' true);  				File.Delete (logPath);  			} catch (Exception ex) {  				Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  			}  		}  	}  	using (var s = File.AppendText (logPath)) {  		s.WriteLine ("===============\r\n{0}\r\n{1}\r\n"' DateTime.Now.ToString ("g")' e);  	}  } catch {  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: try {  	Trace.TraceError (e);  	// write to error log  	string logPath = Utils.MakePath (Program.StartupPath' Config.LogFile);  	// if our log file is too big' back it up and clear  	if (File.Exists (logPath)) {  		FileInfo info = new FileInfo (logPath);  		if (info.Length > 50 * 1024 * 1024)// 50 MB  		 {  			/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  			try {  				File.Copy (logPath' newPath' true);  				File.Delete (logPath);  			} catch (Exception ex) {  				Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  			}  		}  	}  	using (var s = File.AppendText (logPath)) {  		s.WriteLine ("===============\r\n{0}\r\n{1}\r\n"' DateTime.Now.ToString ("g")' e);  	}  } catch {  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: try {  	Trace.TraceError (e);  	// write to error log  	string logPath = Utils.MakePath (Program.StartupPath' Config.LogFile);  	// if our log file is too big' back it up and clear  	if (File.Exists (logPath)) {  		FileInfo info = new FileInfo (logPath);  		if (info.Length > 50 * 1024 * 1024)// 50 MB  		 {  			/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  			try {  				File.Copy (logPath' newPath' true);  				File.Delete (logPath);  			} catch (Exception ex) {  				Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  			}  		}  	}  	using (var s = File.AppendText (logPath)) {  		s.WriteLine ("===============\r\n{0}\r\n{1}\r\n"' DateTime.Now.ToString ("g")' e);  	}  } catch {  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: if (File.Exists (logPath)) {  	FileInfo info = new FileInfo (logPath);  	if (info.Length > 50 * 1024 * 1024)// 50 MB  	 {  		/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  		try {  			File.Copy (logPath' newPath' true);  			File.Delete (logPath);  		} catch (Exception ex) {  			Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  		}  	}  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: if (File.Exists (logPath)) {  	FileInfo info = new FileInfo (logPath);  	if (info.Length > 50 * 1024 * 1024)// 50 MB  	 {  		/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  		try {  			File.Copy (logPath' newPath' true);  			File.Delete (logPath);  		} catch (Exception ex) {  			Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  		}  	}  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: if (File.Exists (logPath)) {  	FileInfo info = new FileInfo (logPath);  	if (info.Length > 50 * 1024 * 1024)// 50 MB  	 {  		/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  		try {  			File.Copy (logPath' newPath' true);  			File.Delete (logPath);  		} catch (Exception ex) {  			Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  		}  	}  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: if (info.Length > 50 * 1024 * 1024)// 50 MB   {  	/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  	try {  		File.Copy (logPath' newPath' true);  		File.Delete (logPath);  	} catch (Exception ex) {  		Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  	}  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: if (info.Length > 50 * 1024 * 1024)// 50 MB   {  	/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  	try {  		File.Copy (logPath' newPath' true);  		File.Delete (logPath);  	} catch (Exception ex) {  		Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  	}  }  
Magic Number,ZeroKLobby,ErrorHandling,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ErrorHandling.cs,HandleException,The following statement contains a magic number: if (info.Length > 50 * 1024 * 1024)// 50 MB   {  	/*  // needlessly complicated                         bool copySuccess = false;                         for (int i = 0; i < 999; i++)                         {                             string newPath = Utils.MakePath(Program.StartupPath' Path.GetFileNameWithoutExtension(Config.LogFile) + "_" + i + Path.GetExtension(Config.LogFile));                             bool exists = File.Exists(newPath);                             if (!exists)                             {                                 File.Copy(logPath' newPath);                                 copySuccess = true;                                 break;                             }                         }                         */string newPath = Utils.MakePath (Program.StartupPath' Path.GetFileNameWithoutExtension (Config.LogFile) + "_backup" + Path.GetExtension (Config.LogFile));  	try {  		File.Copy (logPath' newPath' true);  		File.Delete (logPath);  	} catch (Exception ex) {  		Trace.TraceError ("Error backing up debug file: " + ex.ToString ());  	}  }  
Magic Number,ZeroKLobby,FormLog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\FormLog.cs,FormLog,The following statement contains a magic number: repaintTimer = new Timer {  	Interval = 1000  };  
Magic Number,ZeroKLobby,FormLog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\FormLog.cs,InitializeComponent,The following statement contains a magic number: this.tbLog.Size = new System.Drawing.Size (452' 311);  
Magic Number,ZeroKLobby,FormLog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\FormLog.cs,InitializeComponent,The following statement contains a magic number: this.tbLog.Size = new System.Drawing.Size (452' 311);  
Magic Number,ZeroKLobby,FormLog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\FormLog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (452' 311);  
Magic Number,ZeroKLobby,FormLog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\FormLog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (452' 311);  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: try {  	//Stopwatch stopWatch = new Stopwatch(); stopWatch.Start();  	Trace.Listeners.Add (new ConsoleTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		var ver = GetNetVersionFromRegistry ();  		if (ver < 378675) {  			MessageBox.Show (new Form {  				TopMost = true  			}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	Directory.SetCurrentDirectory (StartupPath);  	// extract fonts  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.SM.ttf"' "SM.ttf");  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.OpenSans-Regular.ttf"' "OpenSans-Regular.ttf");  	Conf = new Config ();  	IsSteamFolder = File.Exists (Path.Combine (StartupPath' "steamfolder.txt"));  	SelfUpdater = new SelfUpdater ("Zero-K");  	StartupArgs = args;  	try {  		Application.EnableVisualStyles ();  		Application.SetCompatibleTextRenderingDefault (false);  	} catch (Exception ex) {  		Trace.TraceWarning ("Failed to set rendering compatibility: {0}"' ex);  	}  	if (!Debugger.IsAttached) {  		try {  			AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;  			Thread.GetDomain ().UnhandledException += UnhandledException;  			Application.ThreadException += Application_ThreadException;  			Application.SetUnhandledExceptionMode (UnhandledExceptionMode.CatchException);  		} catch (Exception ex) {  			Trace.TraceWarning ("Failed to set exception handling :{0}"' ex);  		}  	}  	//HttpWebRequest.DefaultCachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);  	Trace.TraceInformation ("Starting with version {0}"' SelfUpdater.CurrentVersion);  	WebRequest.DefaultWebProxy = null;  	ThreadPool.SetMaxThreads (500' 2000);  	ServicePointManager.Expect100Continue = false;  	LoadConfig ();  	Trace.Listeners.Add (new LogTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix && !Conf.UseExternalBrowser)  		Utils.SetIeCompatibility ();  	//set to current IE version  	var contentDir = !string.IsNullOrEmpty (Conf.DataFolder) ? Conf.DataFolder : StartupPath;  	if (!Directory.Exists (contentDir) || !SpringPaths.IsDirectoryWritable (contentDir)) {  		var dc = new SelectWritableFolder {  			SelectedPath = SpringPaths.GetMySpringDocPath ()  		};  		if (dc.ShowDialog () != DialogResult.OK)  			return;  		contentDir = dc.SelectedPath;  	}  	if (Conf.DataFolder != StartupPath)  		Conf.DataFolder = contentDir;  	else  		Conf.DataFolder = null;  	if (!SpringPaths.IsDirectoryWritable (StartupPath)) {  		var newTarget = Path.Combine (contentDir' "Zero-K.exe");  		if (SelfUpdater.CheckForUpdate (newTarget' true)) {  			Conf.Save (Path.Combine (contentDir' Config.ConfigFileName));  			Process.Start (newTarget);  			return;  		}  		MessageBox.Show (new Form {  			TopMost = true  		}' "Move failed' please copy Zero-K.exe to a writable folder");  		return;  	}  	SpringPaths = new SpringPaths (contentDir' true' true);  	if (MessageBox.Show (new Form () {  		TopMost = true  	}' "WARNING: Zero-K lobby is now obsolete. Starting Chobby instead' ok? "' "WARNING: launcher obsolete"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) {  		var targetPath = Path.Combine (SpringPaths.WritableDirectory' "Chobby.exe");  		if (!File.Exists (targetPath)) {  			var wc = new WebClient ();  			wc.DownloadFile (GlobalConst.BaseSiteUrl + "/lobby/Chobby.exe"' targetPath);  		}  		Process.Start (targetPath);  		Environment.Exit (0);  	}  	// speed up spring start  	SpringPaths.SpringVersionChanged += (sender' engine) => {  		ZkData.Utils.StartAsync (() => {  			UnitSync unitSync = null;  			try {  				unitSync = new UnitSync (SpringPaths' engine);  				// initialize unitsync to avoid slowdowns when starting  				if (unitSync.UnitsyncWritableFolder != SpringPaths.WritableDirectory) {  					// unitsync created its cache in different folder than is used to start spring -> move it  					var fi = ArchiveCache.GetCacheFile (unitSync.UnitsyncWritableFolder);  					if (fi != null)  						File.Copy (fi.FullName' Path.Combine (SpringPaths.WritableDirectory' "cache"' fi.Name)' true);  				}  			} finally {  				unitSync.Dispose ();  			}  		});  	};  	SaveConfig ();  	// write license files  	try {  		var path = SpringPaths.WritableDirectory;  		var pathGPL = Utils.MakePath (path' "license_GPLv3");  		var gpl = Encoding.UTF8.GetString (License.GPLv3);  		if (!File.Exists (pathGPL))  			File.WriteAllText (pathGPL' gpl);  		var pathMIT = Utils.MakePath (path' "license_MIT");  		var mit = Encoding.UTF8.GetString (License.MITlicense);  		if (!File.Exists (pathMIT))  			File.WriteAllText (pathMIT' mit);  	} catch (Exception ex) {  		Trace.TraceError (ex.ToString ());  	}  	if (Conf.IsFirstRun) {  		if (!IsSteamFolder) {  			Utils.CreateDesktopShortcut ();  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix)  			Utils.RegisterProtocol ();  	}  	MetaData = new MetaDataCache (SpringPaths);  	AutoJoinManager = new AutoJoinManager ();  	EngineConfigurator = new EngineConfigurator (SpringPaths.WritableDirectory);  	SpringScanner = new PlasmaResourceChecker (SpringPaths);  	SpringScanner.LocalResourceAdded += (s' e) => Trace.TraceInformation ("New resource found: {0}"' e.Item.InternalName);  	SpringScanner.LocalResourceRemoved += (s' e) => Trace.TraceInformation ("Resource removed: {0}"' e.Item.InternalName);  	Downloader = new PlasmaDownloader.PlasmaDownloader (SpringScanner' SpringPaths);  	//rapid  	Downloader.DownloadAdded += (s' e) => Trace.TraceInformation ("Download started: {0}"' e.Data.Name);  	//Downloader.GetResource(DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  	var isLinux = Environment.OSVersion.Platform == PlatformID.Unix;  	TasClient = new TasClient (string.Format ("ZK {0}{1}"' SelfUpdater.CurrentVersion' isLinux ? " linux" : ""));  	SayCommandHandler = new SayCommandHandler (TasClient);  	ServerImages = new ServerImagesHandler (SpringPaths' TasClient);  	// log' for debugging  	TasClient.Connected += (s' e) => Trace.TraceInformation ("TASC connected");  	TasClient.LoginAccepted += (s' e) => {  		Trace.TraceInformation ("TASC login accepted");  		Trace.TraceInformation ("Server is using Spring version {0}"' TasClient.ServerSpringVersion);  		if (Environment.OSVersion.Platform == PlatformID.Unix || Conf.UseExternalBrowser)  			if (MainWindow != null)  				MainWindow.navigationControl.Path = "battles";  	};  	TasClient.LoginDenied += (s' e) => Trace.TraceInformation ("TASC login denied");  	TasClient.ChannelJoined += (s' e) => {  		Trace.TraceInformation ("TASC channel joined: " + e.Name);  	};  	TasClient.ConnectionLost += (s' e) => Trace.TraceInformation ("Connection lost");  	TasClient.WelcomeReceived += (s' e) => {  		Downloader.GetResource (DownloadType.ENGINE' e.Engine);  		Downloader.GetResource (DownloadType.RAPID' e.Game);  	};  	Program.AreYouReadyDialog = new AreYouReadyDialog (TasClient);  	// special handling  	TasClient.PreviewSaid += (s' e) => {  		var tas = (TasClient)s;  		User user = null;  		if (e.Data.UserName != null) {  			tas.ExistingUsers.TryGetValue (e.Data.UserName' out user);  			if ((user != null && user.BanMute) || TasClient.Ignores.Contains (e.Data.UserName))  				e.Cancel = true;  		}  	};  	TasClient.SiteToLobbyCommandReceived += (eventArgs' o) => {  		if (MainWindow != null) {  			MainWindow.navigationControl.Path = o.Command;  			MainWindow.PopupSelf ();  		}  	};  	ModStore = new ModStore ();  	ConnectBar = new ConnectBar (TasClient);  	ToolTip = new ToolTipHandler ();  	BrowserInterop = new BrowserInterop (TasClient' Conf);  	BattleIconManager = new BattleIconManager ();  	Application.AddMessageFilter (ToolTip);  	SteamHandler = new ZklSteamHandler (TasClient);  	MainWindow = new MainWindow ();  	Application.AddMessageFilter (new ScrollMessageFilter ());  	MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height));  	//in case user have less space than 1024x768  	BattleBar = new BattleBar ();  	VoteBar = new VoteBar ();  	PwBar = new PwBar ();  	MatchMakerBar = new MatchMakerBar (TasClient);  	SelfUpdater.ProgramUpdated += s => {  		Program.MainWindow.InvokeFunc (() => WarningBar.DisplayWarning ("Restart"' Restart));  	};  	if (!Debugger.IsAttached && !Conf.DisableAutoUpdate && !IsSteamFolder)  		SelfUpdater.StartChecking ();  	if (GlobalConst.Mode != ModeType.Local)  		SteamHandler.Connect ();  	Application.Run (MainWindow);  	ShutDown ();  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' true);  	if (Debugger.IsAttached)  		Debugger.Break ();  } finally {  	ShutDown ();  }  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: try {  	//Stopwatch stopWatch = new Stopwatch(); stopWatch.Start();  	Trace.Listeners.Add (new ConsoleTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		var ver = GetNetVersionFromRegistry ();  		if (ver < 378675) {  			MessageBox.Show (new Form {  				TopMost = true  			}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	Directory.SetCurrentDirectory (StartupPath);  	// extract fonts  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.SM.ttf"' "SM.ttf");  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.OpenSans-Regular.ttf"' "OpenSans-Regular.ttf");  	Conf = new Config ();  	IsSteamFolder = File.Exists (Path.Combine (StartupPath' "steamfolder.txt"));  	SelfUpdater = new SelfUpdater ("Zero-K");  	StartupArgs = args;  	try {  		Application.EnableVisualStyles ();  		Application.SetCompatibleTextRenderingDefault (false);  	} catch (Exception ex) {  		Trace.TraceWarning ("Failed to set rendering compatibility: {0}"' ex);  	}  	if (!Debugger.IsAttached) {  		try {  			AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;  			Thread.GetDomain ().UnhandledException += UnhandledException;  			Application.ThreadException += Application_ThreadException;  			Application.SetUnhandledExceptionMode (UnhandledExceptionMode.CatchException);  		} catch (Exception ex) {  			Trace.TraceWarning ("Failed to set exception handling :{0}"' ex);  		}  	}  	//HttpWebRequest.DefaultCachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);  	Trace.TraceInformation ("Starting with version {0}"' SelfUpdater.CurrentVersion);  	WebRequest.DefaultWebProxy = null;  	ThreadPool.SetMaxThreads (500' 2000);  	ServicePointManager.Expect100Continue = false;  	LoadConfig ();  	Trace.Listeners.Add (new LogTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix && !Conf.UseExternalBrowser)  		Utils.SetIeCompatibility ();  	//set to current IE version  	var contentDir = !string.IsNullOrEmpty (Conf.DataFolder) ? Conf.DataFolder : StartupPath;  	if (!Directory.Exists (contentDir) || !SpringPaths.IsDirectoryWritable (contentDir)) {  		var dc = new SelectWritableFolder {  			SelectedPath = SpringPaths.GetMySpringDocPath ()  		};  		if (dc.ShowDialog () != DialogResult.OK)  			return;  		contentDir = dc.SelectedPath;  	}  	if (Conf.DataFolder != StartupPath)  		Conf.DataFolder = contentDir;  	else  		Conf.DataFolder = null;  	if (!SpringPaths.IsDirectoryWritable (StartupPath)) {  		var newTarget = Path.Combine (contentDir' "Zero-K.exe");  		if (SelfUpdater.CheckForUpdate (newTarget' true)) {  			Conf.Save (Path.Combine (contentDir' Config.ConfigFileName));  			Process.Start (newTarget);  			return;  		}  		MessageBox.Show (new Form {  			TopMost = true  		}' "Move failed' please copy Zero-K.exe to a writable folder");  		return;  	}  	SpringPaths = new SpringPaths (contentDir' true' true);  	if (MessageBox.Show (new Form () {  		TopMost = true  	}' "WARNING: Zero-K lobby is now obsolete. Starting Chobby instead' ok? "' "WARNING: launcher obsolete"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) {  		var targetPath = Path.Combine (SpringPaths.WritableDirectory' "Chobby.exe");  		if (!File.Exists (targetPath)) {  			var wc = new WebClient ();  			wc.DownloadFile (GlobalConst.BaseSiteUrl + "/lobby/Chobby.exe"' targetPath);  		}  		Process.Start (targetPath);  		Environment.Exit (0);  	}  	// speed up spring start  	SpringPaths.SpringVersionChanged += (sender' engine) => {  		ZkData.Utils.StartAsync (() => {  			UnitSync unitSync = null;  			try {  				unitSync = new UnitSync (SpringPaths' engine);  				// initialize unitsync to avoid slowdowns when starting  				if (unitSync.UnitsyncWritableFolder != SpringPaths.WritableDirectory) {  					// unitsync created its cache in different folder than is used to start spring -> move it  					var fi = ArchiveCache.GetCacheFile (unitSync.UnitsyncWritableFolder);  					if (fi != null)  						File.Copy (fi.FullName' Path.Combine (SpringPaths.WritableDirectory' "cache"' fi.Name)' true);  				}  			} finally {  				unitSync.Dispose ();  			}  		});  	};  	SaveConfig ();  	// write license files  	try {  		var path = SpringPaths.WritableDirectory;  		var pathGPL = Utils.MakePath (path' "license_GPLv3");  		var gpl = Encoding.UTF8.GetString (License.GPLv3);  		if (!File.Exists (pathGPL))  			File.WriteAllText (pathGPL' gpl);  		var pathMIT = Utils.MakePath (path' "license_MIT");  		var mit = Encoding.UTF8.GetString (License.MITlicense);  		if (!File.Exists (pathMIT))  			File.WriteAllText (pathMIT' mit);  	} catch (Exception ex) {  		Trace.TraceError (ex.ToString ());  	}  	if (Conf.IsFirstRun) {  		if (!IsSteamFolder) {  			Utils.CreateDesktopShortcut ();  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix)  			Utils.RegisterProtocol ();  	}  	MetaData = new MetaDataCache (SpringPaths);  	AutoJoinManager = new AutoJoinManager ();  	EngineConfigurator = new EngineConfigurator (SpringPaths.WritableDirectory);  	SpringScanner = new PlasmaResourceChecker (SpringPaths);  	SpringScanner.LocalResourceAdded += (s' e) => Trace.TraceInformation ("New resource found: {0}"' e.Item.InternalName);  	SpringScanner.LocalResourceRemoved += (s' e) => Trace.TraceInformation ("Resource removed: {0}"' e.Item.InternalName);  	Downloader = new PlasmaDownloader.PlasmaDownloader (SpringScanner' SpringPaths);  	//rapid  	Downloader.DownloadAdded += (s' e) => Trace.TraceInformation ("Download started: {0}"' e.Data.Name);  	//Downloader.GetResource(DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  	var isLinux = Environment.OSVersion.Platform == PlatformID.Unix;  	TasClient = new TasClient (string.Format ("ZK {0}{1}"' SelfUpdater.CurrentVersion' isLinux ? " linux" : ""));  	SayCommandHandler = new SayCommandHandler (TasClient);  	ServerImages = new ServerImagesHandler (SpringPaths' TasClient);  	// log' for debugging  	TasClient.Connected += (s' e) => Trace.TraceInformation ("TASC connected");  	TasClient.LoginAccepted += (s' e) => {  		Trace.TraceInformation ("TASC login accepted");  		Trace.TraceInformation ("Server is using Spring version {0}"' TasClient.ServerSpringVersion);  		if (Environment.OSVersion.Platform == PlatformID.Unix || Conf.UseExternalBrowser)  			if (MainWindow != null)  				MainWindow.navigationControl.Path = "battles";  	};  	TasClient.LoginDenied += (s' e) => Trace.TraceInformation ("TASC login denied");  	TasClient.ChannelJoined += (s' e) => {  		Trace.TraceInformation ("TASC channel joined: " + e.Name);  	};  	TasClient.ConnectionLost += (s' e) => Trace.TraceInformation ("Connection lost");  	TasClient.WelcomeReceived += (s' e) => {  		Downloader.GetResource (DownloadType.ENGINE' e.Engine);  		Downloader.GetResource (DownloadType.RAPID' e.Game);  	};  	Program.AreYouReadyDialog = new AreYouReadyDialog (TasClient);  	// special handling  	TasClient.PreviewSaid += (s' e) => {  		var tas = (TasClient)s;  		User user = null;  		if (e.Data.UserName != null) {  			tas.ExistingUsers.TryGetValue (e.Data.UserName' out user);  			if ((user != null && user.BanMute) || TasClient.Ignores.Contains (e.Data.UserName))  				e.Cancel = true;  		}  	};  	TasClient.SiteToLobbyCommandReceived += (eventArgs' o) => {  		if (MainWindow != null) {  			MainWindow.navigationControl.Path = o.Command;  			MainWindow.PopupSelf ();  		}  	};  	ModStore = new ModStore ();  	ConnectBar = new ConnectBar (TasClient);  	ToolTip = new ToolTipHandler ();  	BrowserInterop = new BrowserInterop (TasClient' Conf);  	BattleIconManager = new BattleIconManager ();  	Application.AddMessageFilter (ToolTip);  	SteamHandler = new ZklSteamHandler (TasClient);  	MainWindow = new MainWindow ();  	Application.AddMessageFilter (new ScrollMessageFilter ());  	MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height));  	//in case user have less space than 1024x768  	BattleBar = new BattleBar ();  	VoteBar = new VoteBar ();  	PwBar = new PwBar ();  	MatchMakerBar = new MatchMakerBar (TasClient);  	SelfUpdater.ProgramUpdated += s => {  		Program.MainWindow.InvokeFunc (() => WarningBar.DisplayWarning ("Restart"' Restart));  	};  	if (!Debugger.IsAttached && !Conf.DisableAutoUpdate && !IsSteamFolder)  		SelfUpdater.StartChecking ();  	if (GlobalConst.Mode != ModeType.Local)  		SteamHandler.Connect ();  	Application.Run (MainWindow);  	ShutDown ();  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' true);  	if (Debugger.IsAttached)  		Debugger.Break ();  } finally {  	ShutDown ();  }  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: try {  	//Stopwatch stopWatch = new Stopwatch(); stopWatch.Start();  	Trace.Listeners.Add (new ConsoleTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		var ver = GetNetVersionFromRegistry ();  		if (ver < 378675) {  			MessageBox.Show (new Form {  				TopMost = true  			}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	Directory.SetCurrentDirectory (StartupPath);  	// extract fonts  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.SM.ttf"' "SM.ttf");  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.OpenSans-Regular.ttf"' "OpenSans-Regular.ttf");  	Conf = new Config ();  	IsSteamFolder = File.Exists (Path.Combine (StartupPath' "steamfolder.txt"));  	SelfUpdater = new SelfUpdater ("Zero-K");  	StartupArgs = args;  	try {  		Application.EnableVisualStyles ();  		Application.SetCompatibleTextRenderingDefault (false);  	} catch (Exception ex) {  		Trace.TraceWarning ("Failed to set rendering compatibility: {0}"' ex);  	}  	if (!Debugger.IsAttached) {  		try {  			AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;  			Thread.GetDomain ().UnhandledException += UnhandledException;  			Application.ThreadException += Application_ThreadException;  			Application.SetUnhandledExceptionMode (UnhandledExceptionMode.CatchException);  		} catch (Exception ex) {  			Trace.TraceWarning ("Failed to set exception handling :{0}"' ex);  		}  	}  	//HttpWebRequest.DefaultCachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);  	Trace.TraceInformation ("Starting with version {0}"' SelfUpdater.CurrentVersion);  	WebRequest.DefaultWebProxy = null;  	ThreadPool.SetMaxThreads (500' 2000);  	ServicePointManager.Expect100Continue = false;  	LoadConfig ();  	Trace.Listeners.Add (new LogTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix && !Conf.UseExternalBrowser)  		Utils.SetIeCompatibility ();  	//set to current IE version  	var contentDir = !string.IsNullOrEmpty (Conf.DataFolder) ? Conf.DataFolder : StartupPath;  	if (!Directory.Exists (contentDir) || !SpringPaths.IsDirectoryWritable (contentDir)) {  		var dc = new SelectWritableFolder {  			SelectedPath = SpringPaths.GetMySpringDocPath ()  		};  		if (dc.ShowDialog () != DialogResult.OK)  			return;  		contentDir = dc.SelectedPath;  	}  	if (Conf.DataFolder != StartupPath)  		Conf.DataFolder = contentDir;  	else  		Conf.DataFolder = null;  	if (!SpringPaths.IsDirectoryWritable (StartupPath)) {  		var newTarget = Path.Combine (contentDir' "Zero-K.exe");  		if (SelfUpdater.CheckForUpdate (newTarget' true)) {  			Conf.Save (Path.Combine (contentDir' Config.ConfigFileName));  			Process.Start (newTarget);  			return;  		}  		MessageBox.Show (new Form {  			TopMost = true  		}' "Move failed' please copy Zero-K.exe to a writable folder");  		return;  	}  	SpringPaths = new SpringPaths (contentDir' true' true);  	if (MessageBox.Show (new Form () {  		TopMost = true  	}' "WARNING: Zero-K lobby is now obsolete. Starting Chobby instead' ok? "' "WARNING: launcher obsolete"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) {  		var targetPath = Path.Combine (SpringPaths.WritableDirectory' "Chobby.exe");  		if (!File.Exists (targetPath)) {  			var wc = new WebClient ();  			wc.DownloadFile (GlobalConst.BaseSiteUrl + "/lobby/Chobby.exe"' targetPath);  		}  		Process.Start (targetPath);  		Environment.Exit (0);  	}  	// speed up spring start  	SpringPaths.SpringVersionChanged += (sender' engine) => {  		ZkData.Utils.StartAsync (() => {  			UnitSync unitSync = null;  			try {  				unitSync = new UnitSync (SpringPaths' engine);  				// initialize unitsync to avoid slowdowns when starting  				if (unitSync.UnitsyncWritableFolder != SpringPaths.WritableDirectory) {  					// unitsync created its cache in different folder than is used to start spring -> move it  					var fi = ArchiveCache.GetCacheFile (unitSync.UnitsyncWritableFolder);  					if (fi != null)  						File.Copy (fi.FullName' Path.Combine (SpringPaths.WritableDirectory' "cache"' fi.Name)' true);  				}  			} finally {  				unitSync.Dispose ();  			}  		});  	};  	SaveConfig ();  	// write license files  	try {  		var path = SpringPaths.WritableDirectory;  		var pathGPL = Utils.MakePath (path' "license_GPLv3");  		var gpl = Encoding.UTF8.GetString (License.GPLv3);  		if (!File.Exists (pathGPL))  			File.WriteAllText (pathGPL' gpl);  		var pathMIT = Utils.MakePath (path' "license_MIT");  		var mit = Encoding.UTF8.GetString (License.MITlicense);  		if (!File.Exists (pathMIT))  			File.WriteAllText (pathMIT' mit);  	} catch (Exception ex) {  		Trace.TraceError (ex.ToString ());  	}  	if (Conf.IsFirstRun) {  		if (!IsSteamFolder) {  			Utils.CreateDesktopShortcut ();  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix)  			Utils.RegisterProtocol ();  	}  	MetaData = new MetaDataCache (SpringPaths);  	AutoJoinManager = new AutoJoinManager ();  	EngineConfigurator = new EngineConfigurator (SpringPaths.WritableDirectory);  	SpringScanner = new PlasmaResourceChecker (SpringPaths);  	SpringScanner.LocalResourceAdded += (s' e) => Trace.TraceInformation ("New resource found: {0}"' e.Item.InternalName);  	SpringScanner.LocalResourceRemoved += (s' e) => Trace.TraceInformation ("Resource removed: {0}"' e.Item.InternalName);  	Downloader = new PlasmaDownloader.PlasmaDownloader (SpringScanner' SpringPaths);  	//rapid  	Downloader.DownloadAdded += (s' e) => Trace.TraceInformation ("Download started: {0}"' e.Data.Name);  	//Downloader.GetResource(DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  	var isLinux = Environment.OSVersion.Platform == PlatformID.Unix;  	TasClient = new TasClient (string.Format ("ZK {0}{1}"' SelfUpdater.CurrentVersion' isLinux ? " linux" : ""));  	SayCommandHandler = new SayCommandHandler (TasClient);  	ServerImages = new ServerImagesHandler (SpringPaths' TasClient);  	// log' for debugging  	TasClient.Connected += (s' e) => Trace.TraceInformation ("TASC connected");  	TasClient.LoginAccepted += (s' e) => {  		Trace.TraceInformation ("TASC login accepted");  		Trace.TraceInformation ("Server is using Spring version {0}"' TasClient.ServerSpringVersion);  		if (Environment.OSVersion.Platform == PlatformID.Unix || Conf.UseExternalBrowser)  			if (MainWindow != null)  				MainWindow.navigationControl.Path = "battles";  	};  	TasClient.LoginDenied += (s' e) => Trace.TraceInformation ("TASC login denied");  	TasClient.ChannelJoined += (s' e) => {  		Trace.TraceInformation ("TASC channel joined: " + e.Name);  	};  	TasClient.ConnectionLost += (s' e) => Trace.TraceInformation ("Connection lost");  	TasClient.WelcomeReceived += (s' e) => {  		Downloader.GetResource (DownloadType.ENGINE' e.Engine);  		Downloader.GetResource (DownloadType.RAPID' e.Game);  	};  	Program.AreYouReadyDialog = new AreYouReadyDialog (TasClient);  	// special handling  	TasClient.PreviewSaid += (s' e) => {  		var tas = (TasClient)s;  		User user = null;  		if (e.Data.UserName != null) {  			tas.ExistingUsers.TryGetValue (e.Data.UserName' out user);  			if ((user != null && user.BanMute) || TasClient.Ignores.Contains (e.Data.UserName))  				e.Cancel = true;  		}  	};  	TasClient.SiteToLobbyCommandReceived += (eventArgs' o) => {  		if (MainWindow != null) {  			MainWindow.navigationControl.Path = o.Command;  			MainWindow.PopupSelf ();  		}  	};  	ModStore = new ModStore ();  	ConnectBar = new ConnectBar (TasClient);  	ToolTip = new ToolTipHandler ();  	BrowserInterop = new BrowserInterop (TasClient' Conf);  	BattleIconManager = new BattleIconManager ();  	Application.AddMessageFilter (ToolTip);  	SteamHandler = new ZklSteamHandler (TasClient);  	MainWindow = new MainWindow ();  	Application.AddMessageFilter (new ScrollMessageFilter ());  	MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height));  	//in case user have less space than 1024x768  	BattleBar = new BattleBar ();  	VoteBar = new VoteBar ();  	PwBar = new PwBar ();  	MatchMakerBar = new MatchMakerBar (TasClient);  	SelfUpdater.ProgramUpdated += s => {  		Program.MainWindow.InvokeFunc (() => WarningBar.DisplayWarning ("Restart"' Restart));  	};  	if (!Debugger.IsAttached && !Conf.DisableAutoUpdate && !IsSteamFolder)  		SelfUpdater.StartChecking ();  	if (GlobalConst.Mode != ModeType.Local)  		SteamHandler.Connect ();  	Application.Run (MainWindow);  	ShutDown ();  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' true);  	if (Debugger.IsAttached)  		Debugger.Break ();  } finally {  	ShutDown ();  }  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: try {  	//Stopwatch stopWatch = new Stopwatch(); stopWatch.Start();  	Trace.Listeners.Add (new ConsoleTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		var ver = GetNetVersionFromRegistry ();  		if (ver < 378675) {  			MessageBox.Show (new Form {  				TopMost = true  			}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	Directory.SetCurrentDirectory (StartupPath);  	// extract fonts  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.SM.ttf"' "SM.ttf");  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.OpenSans-Regular.ttf"' "OpenSans-Regular.ttf");  	Conf = new Config ();  	IsSteamFolder = File.Exists (Path.Combine (StartupPath' "steamfolder.txt"));  	SelfUpdater = new SelfUpdater ("Zero-K");  	StartupArgs = args;  	try {  		Application.EnableVisualStyles ();  		Application.SetCompatibleTextRenderingDefault (false);  	} catch (Exception ex) {  		Trace.TraceWarning ("Failed to set rendering compatibility: {0}"' ex);  	}  	if (!Debugger.IsAttached) {  		try {  			AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;  			Thread.GetDomain ().UnhandledException += UnhandledException;  			Application.ThreadException += Application_ThreadException;  			Application.SetUnhandledExceptionMode (UnhandledExceptionMode.CatchException);  		} catch (Exception ex) {  			Trace.TraceWarning ("Failed to set exception handling :{0}"' ex);  		}  	}  	//HttpWebRequest.DefaultCachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);  	Trace.TraceInformation ("Starting with version {0}"' SelfUpdater.CurrentVersion);  	WebRequest.DefaultWebProxy = null;  	ThreadPool.SetMaxThreads (500' 2000);  	ServicePointManager.Expect100Continue = false;  	LoadConfig ();  	Trace.Listeners.Add (new LogTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix && !Conf.UseExternalBrowser)  		Utils.SetIeCompatibility ();  	//set to current IE version  	var contentDir = !string.IsNullOrEmpty (Conf.DataFolder) ? Conf.DataFolder : StartupPath;  	if (!Directory.Exists (contentDir) || !SpringPaths.IsDirectoryWritable (contentDir)) {  		var dc = new SelectWritableFolder {  			SelectedPath = SpringPaths.GetMySpringDocPath ()  		};  		if (dc.ShowDialog () != DialogResult.OK)  			return;  		contentDir = dc.SelectedPath;  	}  	if (Conf.DataFolder != StartupPath)  		Conf.DataFolder = contentDir;  	else  		Conf.DataFolder = null;  	if (!SpringPaths.IsDirectoryWritable (StartupPath)) {  		var newTarget = Path.Combine (contentDir' "Zero-K.exe");  		if (SelfUpdater.CheckForUpdate (newTarget' true)) {  			Conf.Save (Path.Combine (contentDir' Config.ConfigFileName));  			Process.Start (newTarget);  			return;  		}  		MessageBox.Show (new Form {  			TopMost = true  		}' "Move failed' please copy Zero-K.exe to a writable folder");  		return;  	}  	SpringPaths = new SpringPaths (contentDir' true' true);  	if (MessageBox.Show (new Form () {  		TopMost = true  	}' "WARNING: Zero-K lobby is now obsolete. Starting Chobby instead' ok? "' "WARNING: launcher obsolete"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) {  		var targetPath = Path.Combine (SpringPaths.WritableDirectory' "Chobby.exe");  		if (!File.Exists (targetPath)) {  			var wc = new WebClient ();  			wc.DownloadFile (GlobalConst.BaseSiteUrl + "/lobby/Chobby.exe"' targetPath);  		}  		Process.Start (targetPath);  		Environment.Exit (0);  	}  	// speed up spring start  	SpringPaths.SpringVersionChanged += (sender' engine) => {  		ZkData.Utils.StartAsync (() => {  			UnitSync unitSync = null;  			try {  				unitSync = new UnitSync (SpringPaths' engine);  				// initialize unitsync to avoid slowdowns when starting  				if (unitSync.UnitsyncWritableFolder != SpringPaths.WritableDirectory) {  					// unitsync created its cache in different folder than is used to start spring -> move it  					var fi = ArchiveCache.GetCacheFile (unitSync.UnitsyncWritableFolder);  					if (fi != null)  						File.Copy (fi.FullName' Path.Combine (SpringPaths.WritableDirectory' "cache"' fi.Name)' true);  				}  			} finally {  				unitSync.Dispose ();  			}  		});  	};  	SaveConfig ();  	// write license files  	try {  		var path = SpringPaths.WritableDirectory;  		var pathGPL = Utils.MakePath (path' "license_GPLv3");  		var gpl = Encoding.UTF8.GetString (License.GPLv3);  		if (!File.Exists (pathGPL))  			File.WriteAllText (pathGPL' gpl);  		var pathMIT = Utils.MakePath (path' "license_MIT");  		var mit = Encoding.UTF8.GetString (License.MITlicense);  		if (!File.Exists (pathMIT))  			File.WriteAllText (pathMIT' mit);  	} catch (Exception ex) {  		Trace.TraceError (ex.ToString ());  	}  	if (Conf.IsFirstRun) {  		if (!IsSteamFolder) {  			Utils.CreateDesktopShortcut ();  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix)  			Utils.RegisterProtocol ();  	}  	MetaData = new MetaDataCache (SpringPaths);  	AutoJoinManager = new AutoJoinManager ();  	EngineConfigurator = new EngineConfigurator (SpringPaths.WritableDirectory);  	SpringScanner = new PlasmaResourceChecker (SpringPaths);  	SpringScanner.LocalResourceAdded += (s' e) => Trace.TraceInformation ("New resource found: {0}"' e.Item.InternalName);  	SpringScanner.LocalResourceRemoved += (s' e) => Trace.TraceInformation ("Resource removed: {0}"' e.Item.InternalName);  	Downloader = new PlasmaDownloader.PlasmaDownloader (SpringScanner' SpringPaths);  	//rapid  	Downloader.DownloadAdded += (s' e) => Trace.TraceInformation ("Download started: {0}"' e.Data.Name);  	//Downloader.GetResource(DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  	var isLinux = Environment.OSVersion.Platform == PlatformID.Unix;  	TasClient = new TasClient (string.Format ("ZK {0}{1}"' SelfUpdater.CurrentVersion' isLinux ? " linux" : ""));  	SayCommandHandler = new SayCommandHandler (TasClient);  	ServerImages = new ServerImagesHandler (SpringPaths' TasClient);  	// log' for debugging  	TasClient.Connected += (s' e) => Trace.TraceInformation ("TASC connected");  	TasClient.LoginAccepted += (s' e) => {  		Trace.TraceInformation ("TASC login accepted");  		Trace.TraceInformation ("Server is using Spring version {0}"' TasClient.ServerSpringVersion);  		if (Environment.OSVersion.Platform == PlatformID.Unix || Conf.UseExternalBrowser)  			if (MainWindow != null)  				MainWindow.navigationControl.Path = "battles";  	};  	TasClient.LoginDenied += (s' e) => Trace.TraceInformation ("TASC login denied");  	TasClient.ChannelJoined += (s' e) => {  		Trace.TraceInformation ("TASC channel joined: " + e.Name);  	};  	TasClient.ConnectionLost += (s' e) => Trace.TraceInformation ("Connection lost");  	TasClient.WelcomeReceived += (s' e) => {  		Downloader.GetResource (DownloadType.ENGINE' e.Engine);  		Downloader.GetResource (DownloadType.RAPID' e.Game);  	};  	Program.AreYouReadyDialog = new AreYouReadyDialog (TasClient);  	// special handling  	TasClient.PreviewSaid += (s' e) => {  		var tas = (TasClient)s;  		User user = null;  		if (e.Data.UserName != null) {  			tas.ExistingUsers.TryGetValue (e.Data.UserName' out user);  			if ((user != null && user.BanMute) || TasClient.Ignores.Contains (e.Data.UserName))  				e.Cancel = true;  		}  	};  	TasClient.SiteToLobbyCommandReceived += (eventArgs' o) => {  		if (MainWindow != null) {  			MainWindow.navigationControl.Path = o.Command;  			MainWindow.PopupSelf ();  		}  	};  	ModStore = new ModStore ();  	ConnectBar = new ConnectBar (TasClient);  	ToolTip = new ToolTipHandler ();  	BrowserInterop = new BrowserInterop (TasClient' Conf);  	BattleIconManager = new BattleIconManager ();  	Application.AddMessageFilter (ToolTip);  	SteamHandler = new ZklSteamHandler (TasClient);  	MainWindow = new MainWindow ();  	Application.AddMessageFilter (new ScrollMessageFilter ());  	MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height));  	//in case user have less space than 1024x768  	BattleBar = new BattleBar ();  	VoteBar = new VoteBar ();  	PwBar = new PwBar ();  	MatchMakerBar = new MatchMakerBar (TasClient);  	SelfUpdater.ProgramUpdated += s => {  		Program.MainWindow.InvokeFunc (() => WarningBar.DisplayWarning ("Restart"' Restart));  	};  	if (!Debugger.IsAttached && !Conf.DisableAutoUpdate && !IsSteamFolder)  		SelfUpdater.StartChecking ();  	if (GlobalConst.Mode != ModeType.Local)  		SteamHandler.Connect ();  	Application.Run (MainWindow);  	ShutDown ();  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' true);  	if (Debugger.IsAttached)  		Debugger.Break ();  } finally {  	ShutDown ();  }  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: try {  	//Stopwatch stopWatch = new Stopwatch(); stopWatch.Start();  	Trace.Listeners.Add (new ConsoleTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		var ver = GetNetVersionFromRegistry ();  		if (ver < 378675) {  			MessageBox.Show (new Form {  				TopMost = true  			}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	Directory.SetCurrentDirectory (StartupPath);  	// extract fonts  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.SM.ttf"' "SM.ttf");  	EmbeddedResourceExtractor.ExtractFile ("ZeroKLobby.NativeLibs.OpenSans-Regular.ttf"' "OpenSans-Regular.ttf");  	Conf = new Config ();  	IsSteamFolder = File.Exists (Path.Combine (StartupPath' "steamfolder.txt"));  	SelfUpdater = new SelfUpdater ("Zero-K");  	StartupArgs = args;  	try {  		Application.EnableVisualStyles ();  		Application.SetCompatibleTextRenderingDefault (false);  	} catch (Exception ex) {  		Trace.TraceWarning ("Failed to set rendering compatibility: {0}"' ex);  	}  	if (!Debugger.IsAttached) {  		try {  			AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;  			Thread.GetDomain ().UnhandledException += UnhandledException;  			Application.ThreadException += Application_ThreadException;  			Application.SetUnhandledExceptionMode (UnhandledExceptionMode.CatchException);  		} catch (Exception ex) {  			Trace.TraceWarning ("Failed to set exception handling :{0}"' ex);  		}  	}  	//HttpWebRequest.DefaultCachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);  	Trace.TraceInformation ("Starting with version {0}"' SelfUpdater.CurrentVersion);  	WebRequest.DefaultWebProxy = null;  	ThreadPool.SetMaxThreads (500' 2000);  	ServicePointManager.Expect100Continue = false;  	LoadConfig ();  	Trace.Listeners.Add (new LogTraceListener ());  	if (Environment.OSVersion.Platform != PlatformID.Unix && !Conf.UseExternalBrowser)  		Utils.SetIeCompatibility ();  	//set to current IE version  	var contentDir = !string.IsNullOrEmpty (Conf.DataFolder) ? Conf.DataFolder : StartupPath;  	if (!Directory.Exists (contentDir) || !SpringPaths.IsDirectoryWritable (contentDir)) {  		var dc = new SelectWritableFolder {  			SelectedPath = SpringPaths.GetMySpringDocPath ()  		};  		if (dc.ShowDialog () != DialogResult.OK)  			return;  		contentDir = dc.SelectedPath;  	}  	if (Conf.DataFolder != StartupPath)  		Conf.DataFolder = contentDir;  	else  		Conf.DataFolder = null;  	if (!SpringPaths.IsDirectoryWritable (StartupPath)) {  		var newTarget = Path.Combine (contentDir' "Zero-K.exe");  		if (SelfUpdater.CheckForUpdate (newTarget' true)) {  			Conf.Save (Path.Combine (contentDir' Config.ConfigFileName));  			Process.Start (newTarget);  			return;  		}  		MessageBox.Show (new Form {  			TopMost = true  		}' "Move failed' please copy Zero-K.exe to a writable folder");  		return;  	}  	SpringPaths = new SpringPaths (contentDir' true' true);  	if (MessageBox.Show (new Form () {  		TopMost = true  	}' "WARNING: Zero-K lobby is now obsolete. Starting Chobby instead' ok? "' "WARNING: launcher obsolete"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) {  		var targetPath = Path.Combine (SpringPaths.WritableDirectory' "Chobby.exe");  		if (!File.Exists (targetPath)) {  			var wc = new WebClient ();  			wc.DownloadFile (GlobalConst.BaseSiteUrl + "/lobby/Chobby.exe"' targetPath);  		}  		Process.Start (targetPath);  		Environment.Exit (0);  	}  	// speed up spring start  	SpringPaths.SpringVersionChanged += (sender' engine) => {  		ZkData.Utils.StartAsync (() => {  			UnitSync unitSync = null;  			try {  				unitSync = new UnitSync (SpringPaths' engine);  				// initialize unitsync to avoid slowdowns when starting  				if (unitSync.UnitsyncWritableFolder != SpringPaths.WritableDirectory) {  					// unitsync created its cache in different folder than is used to start spring -> move it  					var fi = ArchiveCache.GetCacheFile (unitSync.UnitsyncWritableFolder);  					if (fi != null)  						File.Copy (fi.FullName' Path.Combine (SpringPaths.WritableDirectory' "cache"' fi.Name)' true);  				}  			} finally {  				unitSync.Dispose ();  			}  		});  	};  	SaveConfig ();  	// write license files  	try {  		var path = SpringPaths.WritableDirectory;  		var pathGPL = Utils.MakePath (path' "license_GPLv3");  		var gpl = Encoding.UTF8.GetString (License.GPLv3);  		if (!File.Exists (pathGPL))  			File.WriteAllText (pathGPL' gpl);  		var pathMIT = Utils.MakePath (path' "license_MIT");  		var mit = Encoding.UTF8.GetString (License.MITlicense);  		if (!File.Exists (pathMIT))  			File.WriteAllText (pathMIT' mit);  	} catch (Exception ex) {  		Trace.TraceError (ex.ToString ());  	}  	if (Conf.IsFirstRun) {  		if (!IsSteamFolder) {  			Utils.CreateDesktopShortcut ();  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix)  			Utils.RegisterProtocol ();  	}  	MetaData = new MetaDataCache (SpringPaths);  	AutoJoinManager = new AutoJoinManager ();  	EngineConfigurator = new EngineConfigurator (SpringPaths.WritableDirectory);  	SpringScanner = new PlasmaResourceChecker (SpringPaths);  	SpringScanner.LocalResourceAdded += (s' e) => Trace.TraceInformation ("New resource found: {0}"' e.Item.InternalName);  	SpringScanner.LocalResourceRemoved += (s' e) => Trace.TraceInformation ("Resource removed: {0}"' e.Item.InternalName);  	Downloader = new PlasmaDownloader.PlasmaDownloader (SpringScanner' SpringPaths);  	//rapid  	Downloader.DownloadAdded += (s' e) => Trace.TraceInformation ("Download started: {0}"' e.Data.Name);  	//Downloader.GetResource(DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  	var isLinux = Environment.OSVersion.Platform == PlatformID.Unix;  	TasClient = new TasClient (string.Format ("ZK {0}{1}"' SelfUpdater.CurrentVersion' isLinux ? " linux" : ""));  	SayCommandHandler = new SayCommandHandler (TasClient);  	ServerImages = new ServerImagesHandler (SpringPaths' TasClient);  	// log' for debugging  	TasClient.Connected += (s' e) => Trace.TraceInformation ("TASC connected");  	TasClient.LoginAccepted += (s' e) => {  		Trace.TraceInformation ("TASC login accepted");  		Trace.TraceInformation ("Server is using Spring version {0}"' TasClient.ServerSpringVersion);  		if (Environment.OSVersion.Platform == PlatformID.Unix || Conf.UseExternalBrowser)  			if (MainWindow != null)  				MainWindow.navigationControl.Path = "battles";  	};  	TasClient.LoginDenied += (s' e) => Trace.TraceInformation ("TASC login denied");  	TasClient.ChannelJoined += (s' e) => {  		Trace.TraceInformation ("TASC channel joined: " + e.Name);  	};  	TasClient.ConnectionLost += (s' e) => Trace.TraceInformation ("Connection lost");  	TasClient.WelcomeReceived += (s' e) => {  		Downloader.GetResource (DownloadType.ENGINE' e.Engine);  		Downloader.GetResource (DownloadType.RAPID' e.Game);  	};  	Program.AreYouReadyDialog = new AreYouReadyDialog (TasClient);  	// special handling  	TasClient.PreviewSaid += (s' e) => {  		var tas = (TasClient)s;  		User user = null;  		if (e.Data.UserName != null) {  			tas.ExistingUsers.TryGetValue (e.Data.UserName' out user);  			if ((user != null && user.BanMute) || TasClient.Ignores.Contains (e.Data.UserName))  				e.Cancel = true;  		}  	};  	TasClient.SiteToLobbyCommandReceived += (eventArgs' o) => {  		if (MainWindow != null) {  			MainWindow.navigationControl.Path = o.Command;  			MainWindow.PopupSelf ();  		}  	};  	ModStore = new ModStore ();  	ConnectBar = new ConnectBar (TasClient);  	ToolTip = new ToolTipHandler ();  	BrowserInterop = new BrowserInterop (TasClient' Conf);  	BattleIconManager = new BattleIconManager ();  	Application.AddMessageFilter (ToolTip);  	SteamHandler = new ZklSteamHandler (TasClient);  	MainWindow = new MainWindow ();  	Application.AddMessageFilter (new ScrollMessageFilter ());  	MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height));  	//in case user have less space than 1024x768  	BattleBar = new BattleBar ();  	VoteBar = new VoteBar ();  	PwBar = new PwBar ();  	MatchMakerBar = new MatchMakerBar (TasClient);  	SelfUpdater.ProgramUpdated += s => {  		Program.MainWindow.InvokeFunc (() => WarningBar.DisplayWarning ("Restart"' Restart));  	};  	if (!Debugger.IsAttached && !Conf.DisableAutoUpdate && !IsSteamFolder)  		SelfUpdater.StartChecking ();  	if (GlobalConst.Mode != ModeType.Local)  		SteamHandler.Connect ();  	Application.Run (MainWindow);  	ShutDown ();  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' true);  	if (Debugger.IsAttached)  		Debugger.Break ();  } finally {  	ShutDown ();  }  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: if (Environment.OSVersion.Platform != PlatformID.Unix) {  	var ver = GetNetVersionFromRegistry ();  	if (ver < 378675) {  		MessageBox.Show (new Form {  			TopMost = true  		}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: if (ver < 378675) {  	MessageBox.Show (new Form {  		TopMost = true  	}' "Zero-K launcher needs Microsoft .NET framework 4.5.1\nPlease download and install it first"' "Program is unable to run"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMaxThreads (500' 2000);  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMaxThreads (500' 2000);  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height));  
Magic Number,ZeroKLobby,Program,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Program.cs,Main,The following statement contains a magic number: MainWindow.Size = new Size (Math.Min (SystemInformation.VirtualScreen.Width - 30' MainWindow.Width)' Math.Min (SystemInformation.VirtualScreen.Height - 30' MainWindow.Height));  
Magic Number,ZeroKLobby,TextTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\TextTooltipRenderer.cs,Draw,The following statement contains a magic number: TextRenderer.DrawText (g' text' font' new Rectangle (0' 0' size.Width + 20' size.Height + 20)' foreColor' TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter | TextFormatFlags.WordBreak);  
Magic Number,ZeroKLobby,TextTooltipRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\TextTooltipRenderer.cs,Draw,The following statement contains a magic number: TextRenderer.DrawText (g' text' font' new Rectangle (0' 0' size.Width + 20' size.Height + 20)' foreColor' TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter | TextFormatFlags.WordBreak);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Unix) {  	BackColor = ((SolidBrush)FrameBorderRenderer.Styles [FrameBorderRenderer.StyleType.TechPanel].FillBrush).Color;  } else {  	AllowTransparency = true;  	BackColor = Color.FromArgb (255' 255' 0' 255);  	TransparencyKey = BackColor;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Unix) {  	BackColor = ((SolidBrush)FrameBorderRenderer.Styles [FrameBorderRenderer.StyleType.TechPanel].FillBrush).Color;  } else {  	AllowTransparency = true;  	BackColor = Color.FromArgb (255' 255' 0' 255);  	TransparencyKey = BackColor;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Unix) {  	BackColor = ((SolidBrush)FrameBorderRenderer.Styles [FrameBorderRenderer.StyleType.TechPanel].FillBrush).Color;  } else {  	AllowTransparency = true;  	BackColor = Color.FromArgb (255' 255' 0' 255);  	TransparencyKey = BackColor;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 255' 0' 255);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 255' 0' 255);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,ToolTipForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 255' 0' 255);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: if (text.StartsWith ("#user#")) {  	playerTooltipRenderer.SetPlayerTooltipRenderer (text.Substring (6));  	renderer = playerTooltipRenderer;  } else if (text.StartsWith ("#battle#")) {  	battleTooltipRenderer.SetBattleTooltipRenderer (int.Parse (text.Substring (8)));  	renderer = battleTooltipRenderer;  } else if (text.StartsWith ("#map#")) {  	mapTooltipRenderer.SetMapTooltipRenderer (text.Substring (5));  	renderer = mapTooltipRenderer;  } else {  	textTooltipRenderer.SetTextTooltipRenderer (text);  	renderer = textTooltipRenderer;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: if (text.StartsWith ("#user#")) {  	playerTooltipRenderer.SetPlayerTooltipRenderer (text.Substring (6));  	renderer = playerTooltipRenderer;  } else if (text.StartsWith ("#battle#")) {  	battleTooltipRenderer.SetBattleTooltipRenderer (int.Parse (text.Substring (8)));  	renderer = battleTooltipRenderer;  } else if (text.StartsWith ("#map#")) {  	mapTooltipRenderer.SetMapTooltipRenderer (text.Substring (5));  	renderer = mapTooltipRenderer;  } else {  	textTooltipRenderer.SetTextTooltipRenderer (text);  	renderer = textTooltipRenderer;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: if (text.StartsWith ("#user#")) {  	playerTooltipRenderer.SetPlayerTooltipRenderer (text.Substring (6));  	renderer = playerTooltipRenderer;  } else if (text.StartsWith ("#battle#")) {  	battleTooltipRenderer.SetBattleTooltipRenderer (int.Parse (text.Substring (8)));  	renderer = battleTooltipRenderer;  } else if (text.StartsWith ("#map#")) {  	mapTooltipRenderer.SetMapTooltipRenderer (text.Substring (5));  	renderer = mapTooltipRenderer;  } else {  	textTooltipRenderer.SetTextTooltipRenderer (text);  	renderer = textTooltipRenderer;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: playerTooltipRenderer.SetPlayerTooltipRenderer (text.Substring (6));  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: if (text.StartsWith ("#battle#")) {  	battleTooltipRenderer.SetBattleTooltipRenderer (int.Parse (text.Substring (8)));  	renderer = battleTooltipRenderer;  } else if (text.StartsWith ("#map#")) {  	mapTooltipRenderer.SetMapTooltipRenderer (text.Substring (5));  	renderer = mapTooltipRenderer;  } else {  	textTooltipRenderer.SetTextTooltipRenderer (text);  	renderer = textTooltipRenderer;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: if (text.StartsWith ("#battle#")) {  	battleTooltipRenderer.SetBattleTooltipRenderer (int.Parse (text.Substring (8)));  	renderer = battleTooltipRenderer;  } else if (text.StartsWith ("#map#")) {  	mapTooltipRenderer.SetMapTooltipRenderer (text.Substring (5));  	renderer = mapTooltipRenderer;  } else {  	textTooltipRenderer.SetTextTooltipRenderer (text);  	renderer = textTooltipRenderer;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: battleTooltipRenderer.SetBattleTooltipRenderer (int.Parse (text.Substring (8)));  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: if (text.StartsWith ("#map#")) {  	mapTooltipRenderer.SetMapTooltipRenderer (text.Substring (5));  	renderer = mapTooltipRenderer;  } else {  	textTooltipRenderer.SetTextTooltipRenderer (text);  	renderer = textTooltipRenderer;  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,CreateToolTipForm,The following statement contains a magic number: mapTooltipRenderer.SetMapTooltipRenderer (text.Substring (5));  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaintBackground,The following statement contains a magic number: try {  	using (var bgbrush = new SolidBrush (BackColor)) {  		e.Graphics.FillRectangle (bgbrush' e.ClipRectangle);  	}  	if (DisplayRectangle.Width > 100 && DisplayRectangle.Height > 100)  		FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanel);  	else  		FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanelHollow);  } catch (Exception ex) {  	Trace.TraceError ("Error rendering tooltip bg: {0}"' ex);  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaintBackground,The following statement contains a magic number: try {  	using (var bgbrush = new SolidBrush (BackColor)) {  		e.Graphics.FillRectangle (bgbrush' e.ClipRectangle);  	}  	if (DisplayRectangle.Width > 100 && DisplayRectangle.Height > 100)  		FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanel);  	else  		FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanelHollow);  } catch (Exception ex) {  	Trace.TraceError ("Error rendering tooltip bg: {0}"' ex);  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaintBackground,The following statement contains a magic number: if (DisplayRectangle.Width > 100 && DisplayRectangle.Height > 100)  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanel);  else  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanelHollow);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaintBackground,The following statement contains a magic number: if (DisplayRectangle.Width > 100 && DisplayRectangle.Height > 100)  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanel);  else  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' DisplayRectangle' FrameBorderRenderer.StyleType.TechPanelHollow);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: try {  	e.Graphics.TranslateTransform (BorderWidth / 2' BorderHeight / 2);  	// border shift  	toolTipRenderer.Draw (e.Graphics' Font' ForeColor);  	e.Graphics.TranslateTransform (-BorderWidth / 2' -BorderHeight / 2);  	// border shift  } catch (Exception ex) {  	Trace.TraceError ("Tooltip paint error: {0}"' ex.ToString ());  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: try {  	e.Graphics.TranslateTransform (BorderWidth / 2' BorderHeight / 2);  	// border shift  	toolTipRenderer.Draw (e.Graphics' Font' ForeColor);  	e.Graphics.TranslateTransform (-BorderWidth / 2' -BorderHeight / 2);  	// border shift  } catch (Exception ex) {  	Trace.TraceError ("Tooltip paint error: {0}"' ex.ToString ());  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: try {  	e.Graphics.TranslateTransform (BorderWidth / 2' BorderHeight / 2);  	// border shift  	toolTipRenderer.Draw (e.Graphics' Font' ForeColor);  	e.Graphics.TranslateTransform (-BorderWidth / 2' -BorderHeight / 2);  	// border shift  } catch (Exception ex) {  	Trace.TraceError ("Tooltip paint error: {0}"' ex.ToString ());  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: try {  	e.Graphics.TranslateTransform (BorderWidth / 2' BorderHeight / 2);  	// border shift  	toolTipRenderer.Draw (e.Graphics' Font' ForeColor);  	e.Graphics.TranslateTransform (-BorderWidth / 2' -BorderHeight / 2);  	// border shift  } catch (Exception ex) {  	Trace.TraceError ("Tooltip paint error: {0}"' ex.ToString ());  }  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform (BorderWidth / 2' BorderHeight / 2);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform (BorderWidth / 2' BorderHeight / 2);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform (-BorderWidth / 2' -BorderHeight / 2);  
Magic Number,ZeroKLobby,ToolTipForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipForm.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform (-BorderWidth / 2' -BorderHeight / 2);  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,ToolTipHandler,The following statement contains a magic number: uiTimer.Interval = 14;  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (Program.MainWindow != null && Program.MainWindow.IsHandleCreated && !Program.CloseOnNext && Program.MainWindow.Visible && Program.MainWindow.WindowState != FormWindowState.Minimized) {  	var control = MainWindow.Instance.GetHoveredControl ();  	string text = null;  	if (control != null)  		tooltips.TryGetValue (control' out text);  	bool isWindowActive = Form.ActiveForm != null;  	//bool newTooltip = false; //to trigger position update for Method A  	if (lastText != text || lastVisible != Visible || lastActive != isWindowActive) {  		if (tooltip != null)  			tooltip.Visible = false;  		if (!string.IsNullOrEmpty (text) && Visible && isWindowActive) {  			tooltip = ToolTipForm.CreateToolTipForm (text);  			if (tooltip.IsDrawing)  				tooltip.Visible = true;  		}  		lastText = text;  		lastVisible = visible;  		lastActive = isWindowActive;  		//newTooltip = true; //trigger position update  	}  	if (tooltip != null && tooltip.Visible) {  		//method B: tooltip remain stationary until user block the vision or when new tooltip is available  		//var mp = System.Windows.Forms.Control.MousePosition;  		//int tooltipLocationX = tooltip.Location.X;  		//int tooltipLocationY = tooltip.Location.Y;  		//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  		//{  		//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  		//    {  		//        newTooltip = true;  		//    }  		//}  		//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  		//{  		//    newTooltip = true;  		//}  		//if (newTooltip) //set new position for new tooltip  		//{  		//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  		//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  		//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  		//    var scr1 = Screen.AllScreens[0].WorkingArea;  		//    var scr1B = Screen.AllScreens[0].Bounds;  		//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  		//    if (rect.Contains(mp))  		//    {  		//        nx = mp.X - tooltip.Width - 8;  		//        ny = mp.Y - tooltip.Height - 8;  		//    }  		//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//    tooltip.SetDesktopLocation(nx' ny);  		//    var newSize = tooltip.GetTooltipSize();  		//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  		//}   		//end method B  		//method A: tooltip follow mouse cursor everywhere it go  		var mp = System.Windows.Forms.Control.MousePosition;  		var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  		var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  		//need screen0's bounds because SetDesktopLocation is relative to screen0.  		var scr1 = Screen.PrimaryScreen.WorkingArea;  		var scr1B = Screen.PrimaryScreen.Bounds;  		var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  		var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  		var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  		if (rect.Contains (mp)) {  			nx = mp.X - tooltip.Width - 8;  			ny = mp.Y - tooltip.Height - 8;  		}  		if (Environment.OSVersion.Platform != PlatformID.Unix) {  			SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  			//refresh tooltip's Z-order to be on top  		}  		tooltip.SetDesktopLocation (nx' ny);  		var newSize = tooltip.GetTooltipSize ();  		if (newSize.HasValue && newSize.Value != tooltip.Size)  			tooltip.Size = newSize.Value;  		//end method A  		if (invalidate)  			tooltip.Invalidate (true);  	}  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (tooltip != null && tooltip.Visible) {  	//method B: tooltip remain stationary until user block the vision or when new tooltip is available  	//var mp = System.Windows.Forms.Control.MousePosition;  	//int tooltipLocationX = tooltip.Location.X;  	//int tooltipLocationY = tooltip.Location.Y;  	//if (mp.X > tooltipLocationX && mp.X < tooltipLocationX + tooltip.Width)  	//{  	//    if (mp.Y > tooltipLocationY && mp.Y < tooltipLocationY + tooltip.Height)  	//    {  	//        newTooltip = true;  	//    }  	//}  	//if (Math.Abs(mp.X - tooltipLocationX) > 50 || Math.Abs(mp.Y - tooltipLocationY) > 50)  	//{  	//    newTooltip = true;  	//}  	//if (newTooltip) //set new position for new tooltip  	//{  	//    var point = MainWindow.Instance.PointToScreen(new Point(5' 5));  	//    var scr = Screen.GetWorkingArea(new Point((int)point.X' (int)point.Y));  	//    //need screen0's bounds because SetDesktopLocation is relative to screen0.  	//    var scr1 = Screen.AllScreens[0].WorkingArea;  	//    var scr1B = Screen.AllScreens[0].Bounds;  	//    var nx = Math.Min(mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	//    var ny = Math.Min(mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	//    var rect = new Rectangle(nx' ny' tooltip.Width' tooltip.Height);  	//    if (rect.Contains(mp))  	//    {  	//        nx = mp.X - tooltip.Width - 8;  	//        ny = mp.Y - tooltip.Height - 8;  	//    }  	//    SetWindowPos(tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  	//    tooltip.SetDesktopLocation(nx' ny);  	//    var newSize = tooltip.GetTooltipSize();  	//    if (newSize.HasValue && newSize.Value != tooltip.Size) tooltip.Size = newSize.Value;  	//}   	//end method B  	//method A: tooltip follow mouse cursor everywhere it go  	var mp = System.Windows.Forms.Control.MousePosition;  	var point = MainWindow.Instance.PointToScreen (new Point (5' 5));  	var scr = Screen.GetWorkingArea (new Point ((int)point.X' (int)point.Y));  	//need screen0's bounds because SetDesktopLocation is relative to screen0.  	var scr1 = Screen.PrimaryScreen.WorkingArea;  	var scr1B = Screen.PrimaryScreen.Bounds;  	var nx = Math.Min (mp.X + 14 + scr1B.X - scr1.X' scr.Right - tooltip.Width - 2);  	var ny = Math.Min (mp.Y + 14 + scr1B.Y - scr1.Y' scr.Bottom - tooltip.Height - 2);  	var rect = new Rectangle (nx' ny' tooltip.Width' tooltip.Height);  	if (rect.Contains (mp)) {  		nx = mp.X - tooltip.Width - 8;  		ny = mp.Y - tooltip.Height - 8;  	}  	if (Environment.OSVersion.Platform != PlatformID.Unix) {  		SetWindowPos (tooltip.Handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_ToolTipOption);  		//refresh tooltip's Z-order to be on top  	}  	tooltip.SetDesktopLocation (nx' ny);  	var newSize = tooltip.GetTooltipSize ();  	if (newSize.HasValue && newSize.Value != tooltip.Size)  		tooltip.Size = newSize.Value;  	//end method A  	if (invalidate)  		tooltip.Invalidate (true);  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (rect.Contains (mp)) {  	nx = mp.X - tooltip.Width - 8;  	ny = mp.Y - tooltip.Height - 8;  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: if (rect.Contains (mp)) {  	nx = mp.X - tooltip.Width - 8;  	ny = mp.Y - tooltip.Height - 8;  }  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: nx = mp.X - tooltip.Width - 8;  
Magic Number,ZeroKLobby,ToolTipHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ToolTips\ToolTipHandler.cs,RefreshToolTip,The following statement contains a magic number: ny = mp.Y - tooltip.Height - 8;  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024)  	return bytes.ToString ();  else if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024)  	return ((double)bytes / 1024).ToString ("F2") + "k";  else if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: return ((double)bytes / 1024).ToString ("F2") + "k";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: if (bytes < 1024 * 1024 * 1024)  	return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  else  	return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: return ((double)bytes / 1024 / 1024).ToString ("F2") + "M";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintByteLength,The following statement contains a magic number: return ((double)bytes / 1024 / 1024 / 1024).ToString ("F2") + "G";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintTimeRemaining,The following statement contains a magic number: if (secs >= 360000)  	return "?:??:??";  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintTimeRemaining,The following statement contains a magic number: return String.Format ("{0:D}:{1:D2}:{2:D2}"' secs / 3600' secs / 60 % 60' secs % 60);  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintTimeRemaining,The following statement contains a magic number: return String.Format ("{0:D}:{1:D2}:{2:D2}"' secs / 3600' secs / 60 % 60' secs % 60);  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintTimeRemaining,The following statement contains a magic number: return String.Format ("{0:D}:{1:D2}:{2:D2}"' secs / 3600' secs / 60 % 60' secs % 60);  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,PrintTimeRemaining,The following statement contains a magic number: return String.Format ("{0:D}:{1:D2}:{2:D2}"' secs / 3600' secs / 60 % 60' secs % 60);  
Magic Number,ZeroKLobby,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Utils.cs,UploadFile,The following statement contains a magic number: using (var fileStream = new FileStream (uploadfile' FileMode.Open' FileAccess.Read)) {  	var length = postHeaderBytes.Length + fileStream.Length + boundaryBytes.Length;  	webrequest.ContentLength = length;  	requestStream = webrequest.GetRequestStream ();  	// Write out our post header  	requestStream.Write (postHeaderBytes' 0' postHeaderBytes.Length);  	// Write out the file contents  	var buffer = new Byte[checked((uint)Math.Min (4096' (int)fileStream.Length))];  	var bytesRead = 0;  	while ((bytesRead = fileStream.Read (buffer' 0' buffer.Length)) != 0)  		requestStream.Write (buffer' 0' bytesRead);  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,GetThumbHeight,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,GetThumbHeight,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,GetThumbHeight,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,GetThumbHeight,The following statement contains a magic number: nThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,GetThumbHeight,The following statement contains a magic number: fThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (channelBrush' new Rectangle (1' UpArrowImage.Height' this.Width - 2' (this.Height - DownArrowImage.Height)));  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: nThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: fThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (ThumbTopImage' new Rectangle (1' nTop' this.Width - 2' ThumbTopImage.Height));  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (ThumbTopSpanImage' 1.0f' (float)nTop' (float)this.Width - 2.0f' (float)fSpanHeight * 2);  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (ThumbMiddleImage' new Rectangle (1' nTop' this.Width - 2' ThumbMiddleImage.Height));  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: rect = new Rectangle (1' nTop' this.Width - 2' nSpanHeight * 2);  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: rect = new Rectangle (1' nTop' this.Width - 2' nSpanHeight * 2);  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (ThumbBottomImage' new Rectangle (1' nTop' this.Width - 2' ThumbBottomImage.Height));  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,The following statement contains a magic number: nThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,CustomScrollbar_MouseDown,The following statement contains a magic number: fThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,MoveThumb,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,MoveThumb,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,MoveThumb,The following statement contains a magic number: if (nThumbHeight < 56) {  	nThumbHeight = 56;  	fThumbHeight = 56;  }  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,MoveThumb,The following statement contains a magic number: nThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,CustomScrollbar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\CustomScrollbar.cs,MoveThumb,The following statement contains a magic number: fThumbHeight = 56;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.minimapSplitContainer1.Panel1MinSize = 48;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.minimapSplitContainer1.Panel2MinSize = 10;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.minimapSplitContainer1.Size = new System.Drawing.Size (1422' 664);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.minimapSplitContainer1.Size = new System.Drawing.Size (1422' 664);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.minimapSplitContainer1.SplitterDistance = 96;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.layoutPanel.ColumnCount = 4;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.layoutPanel.MinimumSize = new System.Drawing.Size (24' 23);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.layoutPanel.MinimumSize = new System.Drawing.Size (24' 23);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.layoutPanel.Size = new System.Drawing.Size (1422' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.layoutPanel.Size = new System.Drawing.Size (1422' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.layoutPanel.TabIndex = 2;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnGameOptions.Location = new System.Drawing.Point (710' 0);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnGameOptions.MinimumSize = new System.Drawing.Size (0' 23);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnGameOptions.Size = new System.Drawing.Size (355' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnGameOptions.Size = new System.Drawing.Size (355' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnGameOptions.TabIndex = 18;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnMapList.Location = new System.Drawing.Point (1065' 0);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnMapList.MinimumSize = new System.Drawing.Size (0' 23);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnMapList.Size = new System.Drawing.Size (357' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnMapList.Size = new System.Drawing.Size (357' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnMapList.TabIndex = 17;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeTeam.MinimumSize = new System.Drawing.Size (0' 23);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeTeam.Size = new System.Drawing.Size (355' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeTeam.Size = new System.Drawing.Size (355' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeTeam.TabIndex = 16;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnAddAI.Location = new System.Drawing.Point (355' 0);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnAddAI.MinimumSize = new System.Drawing.Size (0' 23);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnAddAI.Size = new System.Drawing.Size (355' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnAddAI.Size = new System.Drawing.Size (355' 25);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.btnAddAI.TabIndex = 15;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.mapPanel.Size = new System.Drawing.Size (1422' 564);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.mapPanel.Size = new System.Drawing.Size (1422' 564);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.mapPanel.TabIndex = 2;  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1422' 664);  
Magic Number,ZeroKLobby.Controls,MinimapFuncBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\MinimapFuncBox.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1422' 664);  
Magic Number,ZeroKLobby.Controls,ZklTextBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\ZklTextBox.cs,OnResize,The following statement contains a magic number: textBox.Size = new Size (Width - BorderSize * 2' Height - BorderSize * 2);  
Magic Number,ZeroKLobby.Controls,ZklTextBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Controls\ZklTextBox.cs,OnResize,The following statement contains a magic number: textBox.Size = new Size (Width - BorderSize * 2' Height - BorderSize * 2);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (demoDate.Length > 0) {  	int year = 0;  	int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  	int month = 0;  	int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  	int day = 0;  	int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  	int secondSeparator = replayItem.fileName.IndexOf ('_'' firstSeparator + 1);  	var demoTime = replayItem.fileName.Substring (firstSeparator + 1' secondSeparator + 1);  	int hour = 0;  	int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  	int minute = 0;  	int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  	int second = 0;  	int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  	replayItem.dateTime = new DateTime (year' month' day' hour' minute' second);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoDate.Substring (0' 4)' NumberStyles.Integer' CultureInfo.InvariantCulture' out year);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoDate.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out month);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoDate.Substring (6' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out day);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoTime.Substring (0' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out hour);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoTime.Substring (2' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out minute);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: int.TryParse (demoTime.Substring (4' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture' out second);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (pathOfFiles))  		using (var stream = new StreamReader (fileStream)) {  			replayItem.replaySize = (int)(fileStream.Length / 1024);  			String text = "";  			string firstLine = stream.ReadLine ();  			String tmpText = "";  			int openBracketCount = 0;  			bool inBracket = false;  			while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  				tmpText = stream.ReadLine ();  				if (tmpText == null)  					break;  				if (tmpText.Length > 150)  					//skip' avoid waste time parsing it  					continue;  				text = text + tmpText;  				if (tmpText.StartsWith ("{")) {  					inBracket = true;  					openBracketCount++;  				} else if (tmpText.StartsWith ("}"))  					openBracketCount--;  			}  			if (text == "") {  				replayItem.crash = false;  				replayItem.haveBeenUpdated = true;  				return;  			}  			const char nullChar = '\0';  			const char whiteSpace = ' ';  			string engineName = "";  			int i = 24;  			while (i < firstLine.Length) {  				if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  					break;  				engineName = engineName + firstLine [i];  				i++;  			}  			if (!engineName.Contains ('.'))  				engineName = engineName + ".0";  			replayItem.engine = engineName;  			int offset = 0;  			var config = new TableReaderConfig {  				contentSeparator = ';'  			};  			var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  			String gameName = "";  			String hostName = "";  			String mapName = "";  			var allyPlayerCount = new int[32];  			replayItem.players.Clear ();  			int totalElo = 0;  			int totalRank = 0;  			int eloCount = 0;  			int rankCount = 0;  			int aiCount = 0;  			foreach (var kvp in table) {  				//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  				if (kvp.Key == "gametype") {  					gameName = (kvp.Value as String);  				} else if (kvp.Key == "mapname") {  					mapName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("ai")) {  					aiCount++;  					string name = "";  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "shortname":  							name = (kvp2.Value as String);  							break;  						}  					}  					if (name != "") {  						replayItem.ais.Add (name);  					}  				} else if (kvp.Key == "myplayername") {  					hostName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("team")) {  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						if (kvp2.Key == "allyteam") {  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							allyPlayerCount [numbers]++;  							break;  						}  					}  				} else if (kvp.Key.StartsWith ("player")) {  					int eloNumbers = -1;  					int rankNumbers = -1;  					string name = "";  					bool isSpectator = false;  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "name":  							name = (kvp2.Value as String);  							break;  						case "elo":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  							break;  						case "rank":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  							break;  						case "spectator":  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							isSpectator = (numbers > 0);  							break;  						}  					}  					if (!isSpectator) {  						if (rankNumbers > -1) {  							rankCount++;  							totalRank = totalRank + rankNumbers;  						}  						if (eloNumbers > -1) {  							eloCount++;  							totalElo = totalElo + eloNumbers;  						}  						replayItem.players.Add (name);  					}  				}  			}  			String versusCount = "";  			bool firstNumberEntered = false;  			for (int j = 0; j < allyPlayerCount.Length; j++) {  				if (allyPlayerCount [j] > 0) {  					if (!firstNumberEntered) {  						firstNumberEntered = true;  						versusCount = allyPlayerCount [j].ToString ();  					} else  						versusCount = versusCount + "v" + allyPlayerCount [j];  				}  			}  			if (rankCount == 0)  				rankCount = -1;  			//avoid div by 0  			if (eloCount == 0)  				eloCount = -1;  			//reference: http://www.dotnetperls.com/string-format  			//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  			replayItem.aiCount = aiCount;  			replayItem.averageElo = totalElo / eloCount;  			replayItem.averageRank = totalRank / rankCount;  			replayItem.mapName = mapName;  			replayItem.gameName = gameName;  			replayItem.balance = versusCount;  			replayItem.hostName = hostName;  		}  	replayItem.crash = false;  	replayItem.haveBeenUpdated = true;  } catch (Exception e) {  	replayItem.crash = true;  	replayItem.haveBeenUpdated = false;  	Trace.TraceError ("LocalReplay info reader error: {0}"' e);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (pathOfFiles))  		using (var stream = new StreamReader (fileStream)) {  			replayItem.replaySize = (int)(fileStream.Length / 1024);  			String text = "";  			string firstLine = stream.ReadLine ();  			String tmpText = "";  			int openBracketCount = 0;  			bool inBracket = false;  			while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  				tmpText = stream.ReadLine ();  				if (tmpText == null)  					break;  				if (tmpText.Length > 150)  					//skip' avoid waste time parsing it  					continue;  				text = text + tmpText;  				if (tmpText.StartsWith ("{")) {  					inBracket = true;  					openBracketCount++;  				} else if (tmpText.StartsWith ("}"))  					openBracketCount--;  			}  			if (text == "") {  				replayItem.crash = false;  				replayItem.haveBeenUpdated = true;  				return;  			}  			const char nullChar = '\0';  			const char whiteSpace = ' ';  			string engineName = "";  			int i = 24;  			while (i < firstLine.Length) {  				if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  					break;  				engineName = engineName + firstLine [i];  				i++;  			}  			if (!engineName.Contains ('.'))  				engineName = engineName + ".0";  			replayItem.engine = engineName;  			int offset = 0;  			var config = new TableReaderConfig {  				contentSeparator = ';'  			};  			var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  			String gameName = "";  			String hostName = "";  			String mapName = "";  			var allyPlayerCount = new int[32];  			replayItem.players.Clear ();  			int totalElo = 0;  			int totalRank = 0;  			int eloCount = 0;  			int rankCount = 0;  			int aiCount = 0;  			foreach (var kvp in table) {  				//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  				if (kvp.Key == "gametype") {  					gameName = (kvp.Value as String);  				} else if (kvp.Key == "mapname") {  					mapName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("ai")) {  					aiCount++;  					string name = "";  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "shortname":  							name = (kvp2.Value as String);  							break;  						}  					}  					if (name != "") {  						replayItem.ais.Add (name);  					}  				} else if (kvp.Key == "myplayername") {  					hostName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("team")) {  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						if (kvp2.Key == "allyteam") {  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							allyPlayerCount [numbers]++;  							break;  						}  					}  				} else if (kvp.Key.StartsWith ("player")) {  					int eloNumbers = -1;  					int rankNumbers = -1;  					string name = "";  					bool isSpectator = false;  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "name":  							name = (kvp2.Value as String);  							break;  						case "elo":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  							break;  						case "rank":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  							break;  						case "spectator":  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							isSpectator = (numbers > 0);  							break;  						}  					}  					if (!isSpectator) {  						if (rankNumbers > -1) {  							rankCount++;  							totalRank = totalRank + rankNumbers;  						}  						if (eloNumbers > -1) {  							eloCount++;  							totalElo = totalElo + eloNumbers;  						}  						replayItem.players.Add (name);  					}  				}  			}  			String versusCount = "";  			bool firstNumberEntered = false;  			for (int j = 0; j < allyPlayerCount.Length; j++) {  				if (allyPlayerCount [j] > 0) {  					if (!firstNumberEntered) {  						firstNumberEntered = true;  						versusCount = allyPlayerCount [j].ToString ();  					} else  						versusCount = versusCount + "v" + allyPlayerCount [j];  				}  			}  			if (rankCount == 0)  				rankCount = -1;  			//avoid div by 0  			if (eloCount == 0)  				eloCount = -1;  			//reference: http://www.dotnetperls.com/string-format  			//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  			replayItem.aiCount = aiCount;  			replayItem.averageElo = totalElo / eloCount;  			replayItem.averageRank = totalRank / rankCount;  			replayItem.mapName = mapName;  			replayItem.gameName = gameName;  			replayItem.balance = versusCount;  			replayItem.hostName = hostName;  		}  	replayItem.crash = false;  	replayItem.haveBeenUpdated = true;  } catch (Exception e) {  	replayItem.crash = true;  	replayItem.haveBeenUpdated = false;  	Trace.TraceError ("LocalReplay info reader error: {0}"' e);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (pathOfFiles))  		using (var stream = new StreamReader (fileStream)) {  			replayItem.replaySize = (int)(fileStream.Length / 1024);  			String text = "";  			string firstLine = stream.ReadLine ();  			String tmpText = "";  			int openBracketCount = 0;  			bool inBracket = false;  			while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  				tmpText = stream.ReadLine ();  				if (tmpText == null)  					break;  				if (tmpText.Length > 150)  					//skip' avoid waste time parsing it  					continue;  				text = text + tmpText;  				if (tmpText.StartsWith ("{")) {  					inBracket = true;  					openBracketCount++;  				} else if (tmpText.StartsWith ("}"))  					openBracketCount--;  			}  			if (text == "") {  				replayItem.crash = false;  				replayItem.haveBeenUpdated = true;  				return;  			}  			const char nullChar = '\0';  			const char whiteSpace = ' ';  			string engineName = "";  			int i = 24;  			while (i < firstLine.Length) {  				if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  					break;  				engineName = engineName + firstLine [i];  				i++;  			}  			if (!engineName.Contains ('.'))  				engineName = engineName + ".0";  			replayItem.engine = engineName;  			int offset = 0;  			var config = new TableReaderConfig {  				contentSeparator = ';'  			};  			var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  			String gameName = "";  			String hostName = "";  			String mapName = "";  			var allyPlayerCount = new int[32];  			replayItem.players.Clear ();  			int totalElo = 0;  			int totalRank = 0;  			int eloCount = 0;  			int rankCount = 0;  			int aiCount = 0;  			foreach (var kvp in table) {  				//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  				if (kvp.Key == "gametype") {  					gameName = (kvp.Value as String);  				} else if (kvp.Key == "mapname") {  					mapName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("ai")) {  					aiCount++;  					string name = "";  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "shortname":  							name = (kvp2.Value as String);  							break;  						}  					}  					if (name != "") {  						replayItem.ais.Add (name);  					}  				} else if (kvp.Key == "myplayername") {  					hostName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("team")) {  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						if (kvp2.Key == "allyteam") {  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							allyPlayerCount [numbers]++;  							break;  						}  					}  				} else if (kvp.Key.StartsWith ("player")) {  					int eloNumbers = -1;  					int rankNumbers = -1;  					string name = "";  					bool isSpectator = false;  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "name":  							name = (kvp2.Value as String);  							break;  						case "elo":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  							break;  						case "rank":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  							break;  						case "spectator":  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							isSpectator = (numbers > 0);  							break;  						}  					}  					if (!isSpectator) {  						if (rankNumbers > -1) {  							rankCount++;  							totalRank = totalRank + rankNumbers;  						}  						if (eloNumbers > -1) {  							eloCount++;  							totalElo = totalElo + eloNumbers;  						}  						replayItem.players.Add (name);  					}  				}  			}  			String versusCount = "";  			bool firstNumberEntered = false;  			for (int j = 0; j < allyPlayerCount.Length; j++) {  				if (allyPlayerCount [j] > 0) {  					if (!firstNumberEntered) {  						firstNumberEntered = true;  						versusCount = allyPlayerCount [j].ToString ();  					} else  						versusCount = versusCount + "v" + allyPlayerCount [j];  				}  			}  			if (rankCount == 0)  				rankCount = -1;  			//avoid div by 0  			if (eloCount == 0)  				eloCount = -1;  			//reference: http://www.dotnetperls.com/string-format  			//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  			replayItem.aiCount = aiCount;  			replayItem.averageElo = totalElo / eloCount;  			replayItem.averageRank = totalRank / rankCount;  			replayItem.mapName = mapName;  			replayItem.gameName = gameName;  			replayItem.balance = versusCount;  			replayItem.hostName = hostName;  		}  	replayItem.crash = false;  	replayItem.haveBeenUpdated = true;  } catch (Exception e) {  	replayItem.crash = true;  	replayItem.haveBeenUpdated = false;  	Trace.TraceError ("LocalReplay info reader error: {0}"' e);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (pathOfFiles))  		using (var stream = new StreamReader (fileStream)) {  			replayItem.replaySize = (int)(fileStream.Length / 1024);  			String text = "";  			string firstLine = stream.ReadLine ();  			String tmpText = "";  			int openBracketCount = 0;  			bool inBracket = false;  			while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  				tmpText = stream.ReadLine ();  				if (tmpText == null)  					break;  				if (tmpText.Length > 150)  					//skip' avoid waste time parsing it  					continue;  				text = text + tmpText;  				if (tmpText.StartsWith ("{")) {  					inBracket = true;  					openBracketCount++;  				} else if (tmpText.StartsWith ("}"))  					openBracketCount--;  			}  			if (text == "") {  				replayItem.crash = false;  				replayItem.haveBeenUpdated = true;  				return;  			}  			const char nullChar = '\0';  			const char whiteSpace = ' ';  			string engineName = "";  			int i = 24;  			while (i < firstLine.Length) {  				if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  					break;  				engineName = engineName + firstLine [i];  				i++;  			}  			if (!engineName.Contains ('.'))  				engineName = engineName + ".0";  			replayItem.engine = engineName;  			int offset = 0;  			var config = new TableReaderConfig {  				contentSeparator = ';'  			};  			var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  			String gameName = "";  			String hostName = "";  			String mapName = "";  			var allyPlayerCount = new int[32];  			replayItem.players.Clear ();  			int totalElo = 0;  			int totalRank = 0;  			int eloCount = 0;  			int rankCount = 0;  			int aiCount = 0;  			foreach (var kvp in table) {  				//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  				if (kvp.Key == "gametype") {  					gameName = (kvp.Value as String);  				} else if (kvp.Key == "mapname") {  					mapName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("ai")) {  					aiCount++;  					string name = "";  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "shortname":  							name = (kvp2.Value as String);  							break;  						}  					}  					if (name != "") {  						replayItem.ais.Add (name);  					}  				} else if (kvp.Key == "myplayername") {  					hostName = (kvp.Value as String);  				} else if (kvp.Key.StartsWith ("team")) {  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						if (kvp2.Key == "allyteam") {  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							allyPlayerCount [numbers]++;  							break;  						}  					}  				} else if (kvp.Key.StartsWith ("player")) {  					int eloNumbers = -1;  					int rankNumbers = -1;  					string name = "";  					bool isSpectator = false;  					foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  						switch (kvp2.Key) {  						case "name":  							name = (kvp2.Value as String);  							break;  						case "elo":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  							break;  						case "rank":  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  							break;  						case "spectator":  							int numbers = 0;  							int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  							isSpectator = (numbers > 0);  							break;  						}  					}  					if (!isSpectator) {  						if (rankNumbers > -1) {  							rankCount++;  							totalRank = totalRank + rankNumbers;  						}  						if (eloNumbers > -1) {  							eloCount++;  							totalElo = totalElo + eloNumbers;  						}  						replayItem.players.Add (name);  					}  				}  			}  			String versusCount = "";  			bool firstNumberEntered = false;  			for (int j = 0; j < allyPlayerCount.Length; j++) {  				if (allyPlayerCount [j] > 0) {  					if (!firstNumberEntered) {  						firstNumberEntered = true;  						versusCount = allyPlayerCount [j].ToString ();  					} else  						versusCount = versusCount + "v" + allyPlayerCount [j];  				}  			}  			if (rankCount == 0)  				rankCount = -1;  			//avoid div by 0  			if (eloCount == 0)  				eloCount = -1;  			//reference: http://www.dotnetperls.com/string-format  			//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  			replayItem.aiCount = aiCount;  			replayItem.averageElo = totalElo / eloCount;  			replayItem.averageRank = totalRank / rankCount;  			replayItem.mapName = mapName;  			replayItem.gameName = gameName;  			replayItem.balance = versusCount;  			replayItem.hostName = hostName;  		}  	replayItem.crash = false;  	replayItem.haveBeenUpdated = true;  } catch (Exception e) {  	replayItem.crash = true;  	replayItem.haveBeenUpdated = false;  	Trace.TraceError ("LocalReplay info reader error: {0}"' e);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (pathOfFiles))  	using (var stream = new StreamReader (fileStream)) {  		replayItem.replaySize = (int)(fileStream.Length / 1024);  		String text = "";  		string firstLine = stream.ReadLine ();  		String tmpText = "";  		int openBracketCount = 0;  		bool inBracket = false;  		while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  			tmpText = stream.ReadLine ();  			if (tmpText == null)  				break;  			if (tmpText.Length > 150)  				//skip' avoid waste time parsing it  				continue;  			text = text + tmpText;  			if (tmpText.StartsWith ("{")) {  				inBracket = true;  				openBracketCount++;  			} else if (tmpText.StartsWith ("}"))  				openBracketCount--;  		}  		if (text == "") {  			replayItem.crash = false;  			replayItem.haveBeenUpdated = true;  			return;  		}  		const char nullChar = '\0';  		const char whiteSpace = ' ';  		string engineName = "";  		int i = 24;  		while (i < firstLine.Length) {  			if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  				break;  			engineName = engineName + firstLine [i];  			i++;  		}  		if (!engineName.Contains ('.'))  			engineName = engineName + ".0";  		replayItem.engine = engineName;  		int offset = 0;  		var config = new TableReaderConfig {  			contentSeparator = ';'  		};  		var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  		String gameName = "";  		String hostName = "";  		String mapName = "";  		var allyPlayerCount = new int[32];  		replayItem.players.Clear ();  		int totalElo = 0;  		int totalRank = 0;  		int eloCount = 0;  		int rankCount = 0;  		int aiCount = 0;  		foreach (var kvp in table) {  			//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  			if (kvp.Key == "gametype") {  				gameName = (kvp.Value as String);  			} else if (kvp.Key == "mapname") {  				mapName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("ai")) {  				aiCount++;  				string name = "";  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "shortname":  						name = (kvp2.Value as String);  						break;  					}  				}  				if (name != "") {  					replayItem.ais.Add (name);  				}  			} else if (kvp.Key == "myplayername") {  				hostName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("team")) {  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					if (kvp2.Key == "allyteam") {  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						allyPlayerCount [numbers]++;  						break;  					}  				}  			} else if (kvp.Key.StartsWith ("player")) {  				int eloNumbers = -1;  				int rankNumbers = -1;  				string name = "";  				bool isSpectator = false;  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "name":  						name = (kvp2.Value as String);  						break;  					case "elo":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  						break;  					case "rank":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  						break;  					case "spectator":  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						isSpectator = (numbers > 0);  						break;  					}  				}  				if (!isSpectator) {  					if (rankNumbers > -1) {  						rankCount++;  						totalRank = totalRank + rankNumbers;  					}  					if (eloNumbers > -1) {  						eloCount++;  						totalElo = totalElo + eloNumbers;  					}  					replayItem.players.Add (name);  				}  			}  		}  		String versusCount = "";  		bool firstNumberEntered = false;  		for (int j = 0; j < allyPlayerCount.Length; j++) {  			if (allyPlayerCount [j] > 0) {  				if (!firstNumberEntered) {  					firstNumberEntered = true;  					versusCount = allyPlayerCount [j].ToString ();  				} else  					versusCount = versusCount + "v" + allyPlayerCount [j];  			}  		}  		if (rankCount == 0)  			rankCount = -1;  		//avoid div by 0  		if (eloCount == 0)  			eloCount = -1;  		//reference: http://www.dotnetperls.com/string-format  		//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  		replayItem.aiCount = aiCount;  		replayItem.averageElo = totalElo / eloCount;  		replayItem.averageRank = totalRank / rankCount;  		replayItem.mapName = mapName;  		replayItem.gameName = gameName;  		replayItem.balance = versusCount;  		replayItem.hostName = hostName;  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (pathOfFiles))  	using (var stream = new StreamReader (fileStream)) {  		replayItem.replaySize = (int)(fileStream.Length / 1024);  		String text = "";  		string firstLine = stream.ReadLine ();  		String tmpText = "";  		int openBracketCount = 0;  		bool inBracket = false;  		while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  			tmpText = stream.ReadLine ();  			if (tmpText == null)  				break;  			if (tmpText.Length > 150)  				//skip' avoid waste time parsing it  				continue;  			text = text + tmpText;  			if (tmpText.StartsWith ("{")) {  				inBracket = true;  				openBracketCount++;  			} else if (tmpText.StartsWith ("}"))  				openBracketCount--;  		}  		if (text == "") {  			replayItem.crash = false;  			replayItem.haveBeenUpdated = true;  			return;  		}  		const char nullChar = '\0';  		const char whiteSpace = ' ';  		string engineName = "";  		int i = 24;  		while (i < firstLine.Length) {  			if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  				break;  			engineName = engineName + firstLine [i];  			i++;  		}  		if (!engineName.Contains ('.'))  			engineName = engineName + ".0";  		replayItem.engine = engineName;  		int offset = 0;  		var config = new TableReaderConfig {  			contentSeparator = ';'  		};  		var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  		String gameName = "";  		String hostName = "";  		String mapName = "";  		var allyPlayerCount = new int[32];  		replayItem.players.Clear ();  		int totalElo = 0;  		int totalRank = 0;  		int eloCount = 0;  		int rankCount = 0;  		int aiCount = 0;  		foreach (var kvp in table) {  			//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  			if (kvp.Key == "gametype") {  				gameName = (kvp.Value as String);  			} else if (kvp.Key == "mapname") {  				mapName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("ai")) {  				aiCount++;  				string name = "";  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "shortname":  						name = (kvp2.Value as String);  						break;  					}  				}  				if (name != "") {  					replayItem.ais.Add (name);  				}  			} else if (kvp.Key == "myplayername") {  				hostName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("team")) {  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					if (kvp2.Key == "allyteam") {  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						allyPlayerCount [numbers]++;  						break;  					}  				}  			} else if (kvp.Key.StartsWith ("player")) {  				int eloNumbers = -1;  				int rankNumbers = -1;  				string name = "";  				bool isSpectator = false;  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "name":  						name = (kvp2.Value as String);  						break;  					case "elo":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  						break;  					case "rank":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  						break;  					case "spectator":  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						isSpectator = (numbers > 0);  						break;  					}  				}  				if (!isSpectator) {  					if (rankNumbers > -1) {  						rankCount++;  						totalRank = totalRank + rankNumbers;  					}  					if (eloNumbers > -1) {  						eloCount++;  						totalElo = totalElo + eloNumbers;  					}  					replayItem.players.Add (name);  				}  			}  		}  		String versusCount = "";  		bool firstNumberEntered = false;  		for (int j = 0; j < allyPlayerCount.Length; j++) {  			if (allyPlayerCount [j] > 0) {  				if (!firstNumberEntered) {  					firstNumberEntered = true;  					versusCount = allyPlayerCount [j].ToString ();  				} else  					versusCount = versusCount + "v" + allyPlayerCount [j];  			}  		}  		if (rankCount == 0)  			rankCount = -1;  		//avoid div by 0  		if (eloCount == 0)  			eloCount = -1;  		//reference: http://www.dotnetperls.com/string-format  		//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  		replayItem.aiCount = aiCount;  		replayItem.averageElo = totalElo / eloCount;  		replayItem.averageRank = totalRank / rankCount;  		replayItem.mapName = mapName;  		replayItem.gameName = gameName;  		replayItem.balance = versusCount;  		replayItem.hostName = hostName;  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (pathOfFiles))  	using (var stream = new StreamReader (fileStream)) {  		replayItem.replaySize = (int)(fileStream.Length / 1024);  		String text = "";  		string firstLine = stream.ReadLine ();  		String tmpText = "";  		int openBracketCount = 0;  		bool inBracket = false;  		while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  			tmpText = stream.ReadLine ();  			if (tmpText == null)  				break;  			if (tmpText.Length > 150)  				//skip' avoid waste time parsing it  				continue;  			text = text + tmpText;  			if (tmpText.StartsWith ("{")) {  				inBracket = true;  				openBracketCount++;  			} else if (tmpText.StartsWith ("}"))  				openBracketCount--;  		}  		if (text == "") {  			replayItem.crash = false;  			replayItem.haveBeenUpdated = true;  			return;  		}  		const char nullChar = '\0';  		const char whiteSpace = ' ';  		string engineName = "";  		int i = 24;  		while (i < firstLine.Length) {  			if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  				break;  			engineName = engineName + firstLine [i];  			i++;  		}  		if (!engineName.Contains ('.'))  			engineName = engineName + ".0";  		replayItem.engine = engineName;  		int offset = 0;  		var config = new TableReaderConfig {  			contentSeparator = ';'  		};  		var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  		String gameName = "";  		String hostName = "";  		String mapName = "";  		var allyPlayerCount = new int[32];  		replayItem.players.Clear ();  		int totalElo = 0;  		int totalRank = 0;  		int eloCount = 0;  		int rankCount = 0;  		int aiCount = 0;  		foreach (var kvp in table) {  			//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  			if (kvp.Key == "gametype") {  				gameName = (kvp.Value as String);  			} else if (kvp.Key == "mapname") {  				mapName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("ai")) {  				aiCount++;  				string name = "";  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "shortname":  						name = (kvp2.Value as String);  						break;  					}  				}  				if (name != "") {  					replayItem.ais.Add (name);  				}  			} else if (kvp.Key == "myplayername") {  				hostName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("team")) {  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					if (kvp2.Key == "allyteam") {  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						allyPlayerCount [numbers]++;  						break;  					}  				}  			} else if (kvp.Key.StartsWith ("player")) {  				int eloNumbers = -1;  				int rankNumbers = -1;  				string name = "";  				bool isSpectator = false;  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "name":  						name = (kvp2.Value as String);  						break;  					case "elo":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  						break;  					case "rank":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  						break;  					case "spectator":  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						isSpectator = (numbers > 0);  						break;  					}  				}  				if (!isSpectator) {  					if (rankNumbers > -1) {  						rankCount++;  						totalRank = totalRank + rankNumbers;  					}  					if (eloNumbers > -1) {  						eloCount++;  						totalElo = totalElo + eloNumbers;  					}  					replayItem.players.Add (name);  				}  			}  		}  		String versusCount = "";  		bool firstNumberEntered = false;  		for (int j = 0; j < allyPlayerCount.Length; j++) {  			if (allyPlayerCount [j] > 0) {  				if (!firstNumberEntered) {  					firstNumberEntered = true;  					versusCount = allyPlayerCount [j].ToString ();  				} else  					versusCount = versusCount + "v" + allyPlayerCount [j];  			}  		}  		if (rankCount == 0)  			rankCount = -1;  		//avoid div by 0  		if (eloCount == 0)  			eloCount = -1;  		//reference: http://www.dotnetperls.com/string-format  		//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  		replayItem.aiCount = aiCount;  		replayItem.averageElo = totalElo / eloCount;  		replayItem.averageRank = totalRank / rankCount;  		replayItem.mapName = mapName;  		replayItem.gameName = gameName;  		replayItem.balance = versusCount;  		replayItem.hostName = hostName;  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (pathOfFiles))  	using (var stream = new StreamReader (fileStream)) {  		replayItem.replaySize = (int)(fileStream.Length / 1024);  		String text = "";  		string firstLine = stream.ReadLine ();  		String tmpText = "";  		int openBracketCount = 0;  		bool inBracket = false;  		while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  			tmpText = stream.ReadLine ();  			if (tmpText == null)  				break;  			if (tmpText.Length > 150)  				//skip' avoid waste time parsing it  				continue;  			text = text + tmpText;  			if (tmpText.StartsWith ("{")) {  				inBracket = true;  				openBracketCount++;  			} else if (tmpText.StartsWith ("}"))  				openBracketCount--;  		}  		if (text == "") {  			replayItem.crash = false;  			replayItem.haveBeenUpdated = true;  			return;  		}  		const char nullChar = '\0';  		const char whiteSpace = ' ';  		string engineName = "";  		int i = 24;  		while (i < firstLine.Length) {  			if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  				break;  			engineName = engineName + firstLine [i];  			i++;  		}  		if (!engineName.Contains ('.'))  			engineName = engineName + ".0";  		replayItem.engine = engineName;  		int offset = 0;  		var config = new TableReaderConfig {  			contentSeparator = ';'  		};  		var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  		String gameName = "";  		String hostName = "";  		String mapName = "";  		var allyPlayerCount = new int[32];  		replayItem.players.Clear ();  		int totalElo = 0;  		int totalRank = 0;  		int eloCount = 0;  		int rankCount = 0;  		int aiCount = 0;  		foreach (var kvp in table) {  			//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  			if (kvp.Key == "gametype") {  				gameName = (kvp.Value as String);  			} else if (kvp.Key == "mapname") {  				mapName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("ai")) {  				aiCount++;  				string name = "";  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "shortname":  						name = (kvp2.Value as String);  						break;  					}  				}  				if (name != "") {  					replayItem.ais.Add (name);  				}  			} else if (kvp.Key == "myplayername") {  				hostName = (kvp.Value as String);  			} else if (kvp.Key.StartsWith ("team")) {  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					if (kvp2.Key == "allyteam") {  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						allyPlayerCount [numbers]++;  						break;  					}  				}  			} else if (kvp.Key.StartsWith ("player")) {  				int eloNumbers = -1;  				int rankNumbers = -1;  				string name = "";  				bool isSpectator = false;  				foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  					switch (kvp2.Key) {  					case "name":  						name = (kvp2.Value as String);  						break;  					case "elo":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  						break;  					case "rank":  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  						break;  					case "spectator":  						int numbers = 0;  						int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  						isSpectator = (numbers > 0);  						break;  					}  				}  				if (!isSpectator) {  					if (rankNumbers > -1) {  						rankCount++;  						totalRank = totalRank + rankNumbers;  					}  					if (eloNumbers > -1) {  						eloCount++;  						totalElo = totalElo + eloNumbers;  					}  					replayItem.players.Add (name);  				}  			}  		}  		String versusCount = "";  		bool firstNumberEntered = false;  		for (int j = 0; j < allyPlayerCount.Length; j++) {  			if (allyPlayerCount [j] > 0) {  				if (!firstNumberEntered) {  					firstNumberEntered = true;  					versusCount = allyPlayerCount [j].ToString ();  				} else  					versusCount = versusCount + "v" + allyPlayerCount [j];  			}  		}  		if (rankCount == 0)  			rankCount = -1;  		//avoid div by 0  		if (eloCount == 0)  			eloCount = -1;  		//reference: http://www.dotnetperls.com/string-format  		//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  		replayItem.aiCount = aiCount;  		replayItem.averageElo = totalElo / eloCount;  		replayItem.averageRank = totalRank / rankCount;  		replayItem.mapName = mapName;  		replayItem.gameName = gameName;  		replayItem.balance = versusCount;  		replayItem.hostName = hostName;  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	replayItem.replaySize = (int)(fileStream.Length / 1024);  	String text = "";  	string firstLine = stream.ReadLine ();  	String tmpText = "";  	int openBracketCount = 0;  	bool inBracket = false;  	while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  		tmpText = stream.ReadLine ();  		if (tmpText == null)  			break;  		if (tmpText.Length > 150)  			//skip' avoid waste time parsing it  			continue;  		text = text + tmpText;  		if (tmpText.StartsWith ("{")) {  			inBracket = true;  			openBracketCount++;  		} else if (tmpText.StartsWith ("}"))  			openBracketCount--;  	}  	if (text == "") {  		replayItem.crash = false;  		replayItem.haveBeenUpdated = true;  		return;  	}  	const char nullChar = '\0';  	const char whiteSpace = ' ';  	string engineName = "";  	int i = 24;  	while (i < firstLine.Length) {  		if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  			break;  		engineName = engineName + firstLine [i];  		i++;  	}  	if (!engineName.Contains ('.'))  		engineName = engineName + ".0";  	replayItem.engine = engineName;  	int offset = 0;  	var config = new TableReaderConfig {  		contentSeparator = ';'  	};  	var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  	String gameName = "";  	String hostName = "";  	String mapName = "";  	var allyPlayerCount = new int[32];  	replayItem.players.Clear ();  	int totalElo = 0;  	int totalRank = 0;  	int eloCount = 0;  	int rankCount = 0;  	int aiCount = 0;  	foreach (var kvp in table) {  		//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  		if (kvp.Key == "gametype") {  			gameName = (kvp.Value as String);  		} else if (kvp.Key == "mapname") {  			mapName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("ai")) {  			aiCount++;  			string name = "";  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "shortname":  					name = (kvp2.Value as String);  					break;  				}  			}  			if (name != "") {  				replayItem.ais.Add (name);  			}  		} else if (kvp.Key == "myplayername") {  			hostName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("team")) {  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				if (kvp2.Key == "allyteam") {  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					allyPlayerCount [numbers]++;  					break;  				}  			}  		} else if (kvp.Key.StartsWith ("player")) {  			int eloNumbers = -1;  			int rankNumbers = -1;  			string name = "";  			bool isSpectator = false;  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "name":  					name = (kvp2.Value as String);  					break;  				case "elo":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  					break;  				case "rank":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  					break;  				case "spectator":  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					isSpectator = (numbers > 0);  					break;  				}  			}  			if (!isSpectator) {  				if (rankNumbers > -1) {  					rankCount++;  					totalRank = totalRank + rankNumbers;  				}  				if (eloNumbers > -1) {  					eloCount++;  					totalElo = totalElo + eloNumbers;  				}  				replayItem.players.Add (name);  			}  		}  	}  	String versusCount = "";  	bool firstNumberEntered = false;  	for (int j = 0; j < allyPlayerCount.Length; j++) {  		if (allyPlayerCount [j] > 0) {  			if (!firstNumberEntered) {  				firstNumberEntered = true;  				versusCount = allyPlayerCount [j].ToString ();  			} else  				versusCount = versusCount + "v" + allyPlayerCount [j];  		}  	}  	if (rankCount == 0)  		rankCount = -1;  	//avoid div by 0  	if (eloCount == 0)  		eloCount = -1;  	//reference: http://www.dotnetperls.com/string-format  	//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  	replayItem.aiCount = aiCount;  	replayItem.averageElo = totalElo / eloCount;  	replayItem.averageRank = totalRank / rankCount;  	replayItem.mapName = mapName;  	replayItem.gameName = gameName;  	replayItem.balance = versusCount;  	replayItem.hostName = hostName;  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	replayItem.replaySize = (int)(fileStream.Length / 1024);  	String text = "";  	string firstLine = stream.ReadLine ();  	String tmpText = "";  	int openBracketCount = 0;  	bool inBracket = false;  	while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  		tmpText = stream.ReadLine ();  		if (tmpText == null)  			break;  		if (tmpText.Length > 150)  			//skip' avoid waste time parsing it  			continue;  		text = text + tmpText;  		if (tmpText.StartsWith ("{")) {  			inBracket = true;  			openBracketCount++;  		} else if (tmpText.StartsWith ("}"))  			openBracketCount--;  	}  	if (text == "") {  		replayItem.crash = false;  		replayItem.haveBeenUpdated = true;  		return;  	}  	const char nullChar = '\0';  	const char whiteSpace = ' ';  	string engineName = "";  	int i = 24;  	while (i < firstLine.Length) {  		if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  			break;  		engineName = engineName + firstLine [i];  		i++;  	}  	if (!engineName.Contains ('.'))  		engineName = engineName + ".0";  	replayItem.engine = engineName;  	int offset = 0;  	var config = new TableReaderConfig {  		contentSeparator = ';'  	};  	var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  	String gameName = "";  	String hostName = "";  	String mapName = "";  	var allyPlayerCount = new int[32];  	replayItem.players.Clear ();  	int totalElo = 0;  	int totalRank = 0;  	int eloCount = 0;  	int rankCount = 0;  	int aiCount = 0;  	foreach (var kvp in table) {  		//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  		if (kvp.Key == "gametype") {  			gameName = (kvp.Value as String);  		} else if (kvp.Key == "mapname") {  			mapName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("ai")) {  			aiCount++;  			string name = "";  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "shortname":  					name = (kvp2.Value as String);  					break;  				}  			}  			if (name != "") {  				replayItem.ais.Add (name);  			}  		} else if (kvp.Key == "myplayername") {  			hostName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("team")) {  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				if (kvp2.Key == "allyteam") {  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					allyPlayerCount [numbers]++;  					break;  				}  			}  		} else if (kvp.Key.StartsWith ("player")) {  			int eloNumbers = -1;  			int rankNumbers = -1;  			string name = "";  			bool isSpectator = false;  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "name":  					name = (kvp2.Value as String);  					break;  				case "elo":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  					break;  				case "rank":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  					break;  				case "spectator":  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					isSpectator = (numbers > 0);  					break;  				}  			}  			if (!isSpectator) {  				if (rankNumbers > -1) {  					rankCount++;  					totalRank = totalRank + rankNumbers;  				}  				if (eloNumbers > -1) {  					eloCount++;  					totalElo = totalElo + eloNumbers;  				}  				replayItem.players.Add (name);  			}  		}  	}  	String versusCount = "";  	bool firstNumberEntered = false;  	for (int j = 0; j < allyPlayerCount.Length; j++) {  		if (allyPlayerCount [j] > 0) {  			if (!firstNumberEntered) {  				firstNumberEntered = true;  				versusCount = allyPlayerCount [j].ToString ();  			} else  				versusCount = versusCount + "v" + allyPlayerCount [j];  		}  	}  	if (rankCount == 0)  		rankCount = -1;  	//avoid div by 0  	if (eloCount == 0)  		eloCount = -1;  	//reference: http://www.dotnetperls.com/string-format  	//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  	replayItem.aiCount = aiCount;  	replayItem.averageElo = totalElo / eloCount;  	replayItem.averageRank = totalRank / rankCount;  	replayItem.mapName = mapName;  	replayItem.gameName = gameName;  	replayItem.balance = versusCount;  	replayItem.hostName = hostName;  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	replayItem.replaySize = (int)(fileStream.Length / 1024);  	String text = "";  	string firstLine = stream.ReadLine ();  	String tmpText = "";  	int openBracketCount = 0;  	bool inBracket = false;  	while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  		tmpText = stream.ReadLine ();  		if (tmpText == null)  			break;  		if (tmpText.Length > 150)  			//skip' avoid waste time parsing it  			continue;  		text = text + tmpText;  		if (tmpText.StartsWith ("{")) {  			inBracket = true;  			openBracketCount++;  		} else if (tmpText.StartsWith ("}"))  			openBracketCount--;  	}  	if (text == "") {  		replayItem.crash = false;  		replayItem.haveBeenUpdated = true;  		return;  	}  	const char nullChar = '\0';  	const char whiteSpace = ' ';  	string engineName = "";  	int i = 24;  	while (i < firstLine.Length) {  		if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  			break;  		engineName = engineName + firstLine [i];  		i++;  	}  	if (!engineName.Contains ('.'))  		engineName = engineName + ".0";  	replayItem.engine = engineName;  	int offset = 0;  	var config = new TableReaderConfig {  		contentSeparator = ';'  	};  	var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  	String gameName = "";  	String hostName = "";  	String mapName = "";  	var allyPlayerCount = new int[32];  	replayItem.players.Clear ();  	int totalElo = 0;  	int totalRank = 0;  	int eloCount = 0;  	int rankCount = 0;  	int aiCount = 0;  	foreach (var kvp in table) {  		//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  		if (kvp.Key == "gametype") {  			gameName = (kvp.Value as String);  		} else if (kvp.Key == "mapname") {  			mapName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("ai")) {  			aiCount++;  			string name = "";  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "shortname":  					name = (kvp2.Value as String);  					break;  				}  			}  			if (name != "") {  				replayItem.ais.Add (name);  			}  		} else if (kvp.Key == "myplayername") {  			hostName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("team")) {  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				if (kvp2.Key == "allyteam") {  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					allyPlayerCount [numbers]++;  					break;  				}  			}  		} else if (kvp.Key.StartsWith ("player")) {  			int eloNumbers = -1;  			int rankNumbers = -1;  			string name = "";  			bool isSpectator = false;  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "name":  					name = (kvp2.Value as String);  					break;  				case "elo":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  					break;  				case "rank":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  					break;  				case "spectator":  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					isSpectator = (numbers > 0);  					break;  				}  			}  			if (!isSpectator) {  				if (rankNumbers > -1) {  					rankCount++;  					totalRank = totalRank + rankNumbers;  				}  				if (eloNumbers > -1) {  					eloCount++;  					totalElo = totalElo + eloNumbers;  				}  				replayItem.players.Add (name);  			}  		}  	}  	String versusCount = "";  	bool firstNumberEntered = false;  	for (int j = 0; j < allyPlayerCount.Length; j++) {  		if (allyPlayerCount [j] > 0) {  			if (!firstNumberEntered) {  				firstNumberEntered = true;  				versusCount = allyPlayerCount [j].ToString ();  			} else  				versusCount = versusCount + "v" + allyPlayerCount [j];  		}  	}  	if (rankCount == 0)  		rankCount = -1;  	//avoid div by 0  	if (eloCount == 0)  		eloCount = -1;  	//reference: http://www.dotnetperls.com/string-format  	//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  	replayItem.aiCount = aiCount;  	replayItem.averageElo = totalElo / eloCount;  	replayItem.averageRank = totalRank / rankCount;  	replayItem.mapName = mapName;  	replayItem.gameName = gameName;  	replayItem.balance = versusCount;  	replayItem.hostName = hostName;  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	replayItem.replaySize = (int)(fileStream.Length / 1024);  	String text = "";  	string firstLine = stream.ReadLine ();  	String tmpText = "";  	int openBracketCount = 0;  	bool inBracket = false;  	while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  		tmpText = stream.ReadLine ();  		if (tmpText == null)  			break;  		if (tmpText.Length > 150)  			//skip' avoid waste time parsing it  			continue;  		text = text + tmpText;  		if (tmpText.StartsWith ("{")) {  			inBracket = true;  			openBracketCount++;  		} else if (tmpText.StartsWith ("}"))  			openBracketCount--;  	}  	if (text == "") {  		replayItem.crash = false;  		replayItem.haveBeenUpdated = true;  		return;  	}  	const char nullChar = '\0';  	const char whiteSpace = ' ';  	string engineName = "";  	int i = 24;  	while (i < firstLine.Length) {  		if (firstLine [i] == nullChar || firstLine [i] == whiteSpace)  			break;  		engineName = engineName + firstLine [i];  		i++;  	}  	if (!engineName.Contains ('.'))  		engineName = engineName + ".0";  	replayItem.engine = engineName;  	int offset = 0;  	var config = new TableReaderConfig {  		contentSeparator = ';'  	};  	var table = TableReader.ParseTable (config' 0' text' pathOfFiles' out offset);  	String gameName = "";  	String hostName = "";  	String mapName = "";  	var allyPlayerCount = new int[32];  	replayItem.players.Clear ();  	int totalElo = 0;  	int totalRank = 0;  	int eloCount = 0;  	int rankCount = 0;  	int aiCount = 0;  	foreach (var kvp in table) {  		//System.Diagnostics.Trace.TraceInformation("KEY: " + kvp.Key + " Value:" + (kvp.Value as String));  		if (kvp.Key == "gametype") {  			gameName = (kvp.Value as String);  		} else if (kvp.Key == "mapname") {  			mapName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("ai")) {  			aiCount++;  			string name = "";  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "shortname":  					name = (kvp2.Value as String);  					break;  				}  			}  			if (name != "") {  				replayItem.ais.Add (name);  			}  		} else if (kvp.Key == "myplayername") {  			hostName = (kvp.Value as String);  		} else if (kvp.Key.StartsWith ("team")) {  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				if (kvp2.Key == "allyteam") {  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					allyPlayerCount [numbers]++;  					break;  				}  			}  		} else if (kvp.Key.StartsWith ("player")) {  			int eloNumbers = -1;  			int rankNumbers = -1;  			string name = "";  			bool isSpectator = false;  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				switch (kvp2.Key) {  				case "name":  					name = (kvp2.Value as String);  					break;  				case "elo":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  					break;  				case "rank":  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  					break;  				case "spectator":  					int numbers = 0;  					int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  					isSpectator = (numbers > 0);  					break;  				}  			}  			if (!isSpectator) {  				if (rankNumbers > -1) {  					rankCount++;  					totalRank = totalRank + rankNumbers;  				}  				if (eloNumbers > -1) {  					eloCount++;  					totalElo = totalElo + eloNumbers;  				}  				replayItem.players.Add (name);  			}  		}  	}  	String versusCount = "";  	bool firstNumberEntered = false;  	for (int j = 0; j < allyPlayerCount.Length; j++) {  		if (allyPlayerCount [j] > 0) {  			if (!firstNumberEntered) {  				firstNumberEntered = true;  				versusCount = allyPlayerCount [j].ToString ();  			} else  				versusCount = versusCount + "v" + allyPlayerCount [j];  		}  	}  	if (rankCount == 0)  		rankCount = -1;  	//avoid div by 0  	if (eloCount == 0)  		eloCount = -1;  	//reference: http://www.dotnetperls.com/string-format  	//var formattedText = String.Format("Host:{0'-14} " + (versusCount!=""?"Balance:{1'-6} ":"") + "Map:{2'-23} " + (eloCount>0?"Average elo:{3'-5} ":"") + (rankCount>0?"Average rank:{4'-3}":"") + (aiCount>0?"have {5'-3} AI ":"") + "Game:{6'-10}"' hostName' versusCount' mapName' totalElo/eloCount' totalRank/rankCount'aiCount'gameName);  	replayItem.aiCount = aiCount;  	replayItem.averageElo = totalElo / eloCount;  	replayItem.averageRank = totalRank / rankCount;  	replayItem.mapName = mapName;  	replayItem.gameName = gameName;  	replayItem.balance = versusCount;  	replayItem.hostName = hostName;  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: replayItem.replaySize = (int)(fileStream.Length / 1024);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: while ((openBracketCount > 0 || !inBracket) && !stream.EndOfStream) {  	tmpText = stream.ReadLine ();  	if (tmpText == null)  		break;  	if (tmpText.Length > 150)  		//skip' avoid waste time parsing it  		continue;  	text = text + tmpText;  	if (tmpText.StartsWith ("{")) {  		inBracket = true;  		openBracketCount++;  	} else if (tmpText.StartsWith ("}"))  		openBracketCount--;  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following statement contains a magic number: if (tmpText.Length > 150)  	//skip' avoid waste time parsing it  	continue;  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (512' 320);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (512' 320);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (372' 10);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (372' 10);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (137' 250);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (137' 250);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 53;  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.buttonRefresh.Location = new System.Drawing.Point (413' 263);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.buttonRefresh.Location = new System.Drawing.Point (413' 263);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.buttonRefresh.Size = new System.Drawing.Size (96' 22);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.buttonRefresh.Size = new System.Drawing.Size (96' 22);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.buttonRefresh.TabIndex = 52;  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.listBoxDemoList.Location = new System.Drawing.Point (3' 0);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.listBoxDemoList.Size = new System.Drawing.Size (363' 317);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.listBoxDemoList.Size = new System.Drawing.Size (363' 317);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.listBoxDemoList.TabIndex = 50;  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.btnLaunch.Location = new System.Drawing.Point (413' 292);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.btnLaunch.Location = new System.Drawing.Point (413' 292);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.btnLaunch.Size = new System.Drawing.Size (96' 25);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.btnLaunch.Size = new System.Drawing.Size (96' 25);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.btnLaunch.TabIndex = 51;  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (512' 320);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (512' 320);  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,TableReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\TableReader.cs,SaveKeyValuePair,The following statement contains a magic number: capturedValue1 = capturedValue1.Trim (new char[2] {  	'[''  	']'  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int i = 0; i < nameList.Count; i++) {  	string[] textComponent = ((string)nameList [i] [0]).ToLower ().Split (new char[4] {  		' ''  		'.''  		'-''  		'_'  	}' StringSplitOptions.RemoveEmptyEntries);  	List<int> charScore = new List<int> ();  	for (int j = 0; j < textComponent.Length; j++) {  		int charCount = textComponent [j].Length;  		int isInteger = -1;  		int.TryParse (textComponent [j]' out isInteger);  		if (isInteger != 0 || charCount == 1) {  			charScore.Add (isInteger);  		} else//text' but probably versioning char (like 'v' or 'r')  		 {  			int.TryParse (textComponent [j].Substring (1)' out isInteger);  			//it return '0' when can't parse or when its really '0'  			if (isInteger != 0 || (textComponent [j] [1] == '0' && charCount == 2))//trailing integer is probably version number  			 {  				charScore.Add (isInteger);  			} else {  				// score for 1st'2nd char in a word  				int score = GetMatchingCharIndex (charIndex' textComponent [j] [0]);  				charScore.Add (score);  				score = GetMatchingCharIndex (charIndex' textComponent [j] [1]);  				charScore.Add (score);  			}  		}  	}  	scoredItem.Add (new object[2] {  		charScore.ToArray ()'  		nameList [i]  	});  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int i = 0; i < nameList.Count; i++) {  	string[] textComponent = ((string)nameList [i] [0]).ToLower ().Split (new char[4] {  		' ''  		'.''  		'-''  		'_'  	}' StringSplitOptions.RemoveEmptyEntries);  	List<int> charScore = new List<int> ();  	for (int j = 0; j < textComponent.Length; j++) {  		int charCount = textComponent [j].Length;  		int isInteger = -1;  		int.TryParse (textComponent [j]' out isInteger);  		if (isInteger != 0 || charCount == 1) {  			charScore.Add (isInteger);  		} else//text' but probably versioning char (like 'v' or 'r')  		 {  			int.TryParse (textComponent [j].Substring (1)' out isInteger);  			//it return '0' when can't parse or when its really '0'  			if (isInteger != 0 || (textComponent [j] [1] == '0' && charCount == 2))//trailing integer is probably version number  			 {  				charScore.Add (isInteger);  			} else {  				// score for 1st'2nd char in a word  				int score = GetMatchingCharIndex (charIndex' textComponent [j] [0]);  				charScore.Add (score);  				score = GetMatchingCharIndex (charIndex' textComponent [j] [1]);  				charScore.Add (score);  			}  		}  	}  	scoredItem.Add (new object[2] {  		charScore.ToArray ()'  		nameList [i]  	});  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int i = 0; i < nameList.Count; i++) {  	string[] textComponent = ((string)nameList [i] [0]).ToLower ().Split (new char[4] {  		' ''  		'.''  		'-''  		'_'  	}' StringSplitOptions.RemoveEmptyEntries);  	List<int> charScore = new List<int> ();  	for (int j = 0; j < textComponent.Length; j++) {  		int charCount = textComponent [j].Length;  		int isInteger = -1;  		int.TryParse (textComponent [j]' out isInteger);  		if (isInteger != 0 || charCount == 1) {  			charScore.Add (isInteger);  		} else//text' but probably versioning char (like 'v' or 'r')  		 {  			int.TryParse (textComponent [j].Substring (1)' out isInteger);  			//it return '0' when can't parse or when its really '0'  			if (isInteger != 0 || (textComponent [j] [1] == '0' && charCount == 2))//trailing integer is probably version number  			 {  				charScore.Add (isInteger);  			} else {  				// score for 1st'2nd char in a word  				int score = GetMatchingCharIndex (charIndex' textComponent [j] [0]);  				charScore.Add (score);  				score = GetMatchingCharIndex (charIndex' textComponent [j] [1]);  				charScore.Add (score);  			}  		}  	}  	scoredItem.Add (new object[2] {  		charScore.ToArray ()'  		nameList [i]  	});  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int j = 0; j < textComponent.Length; j++) {  	int charCount = textComponent [j].Length;  	int isInteger = -1;  	int.TryParse (textComponent [j]' out isInteger);  	if (isInteger != 0 || charCount == 1) {  		charScore.Add (isInteger);  	} else//text' but probably versioning char (like 'v' or 'r')  	 {  		int.TryParse (textComponent [j].Substring (1)' out isInteger);  		//it return '0' when can't parse or when its really '0'  		if (isInteger != 0 || (textComponent [j] [1] == '0' && charCount == 2))//trailing integer is probably version number  		 {  			charScore.Add (isInteger);  		} else {  			// score for 1st'2nd char in a word  			int score = GetMatchingCharIndex (charIndex' textComponent [j] [0]);  			charScore.Add (score);  			score = GetMatchingCharIndex (charIndex' textComponent [j] [1]);  			charScore.Add (score);  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: if (isInteger != 0 || charCount == 1) {  	charScore.Add (isInteger);  } else//text' but probably versioning char (like 'v' or 'r')   {  	int.TryParse (textComponent [j].Substring (1)' out isInteger);  	//it return '0' when can't parse or when its really '0'  	if (isInteger != 0 || (textComponent [j] [1] == '0' && charCount == 2))//trailing integer is probably version number  	 {  		charScore.Add (isInteger);  	} else {  		// score for 1st'2nd char in a word  		int score = GetMatchingCharIndex (charIndex' textComponent [j] [0]);  		charScore.Add (score);  		score = GetMatchingCharIndex (charIndex' textComponent [j] [1]);  		charScore.Add (score);  	}  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: if (isInteger != 0 || (textComponent [j] [1] == '0' && charCount == 2))//trailing integer is probably version number   {  	charScore.Add (isInteger);  } else {  	// score for 1st'2nd char in a word  	int score = GetMatchingCharIndex (charIndex' textComponent [j] [0]);  	charScore.Add (score);  	score = GetMatchingCharIndex (charIndex' textComponent [j] [1]);  	charScore.Add (score);  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: scoredItem.Add (new object[2] {  	charScore.ToArray ()'  	nameList [i]  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: scoredItem.Sort (delegate (object[] x' object[] y)//Reference: http://msdn.microsoft.com/en-us/library/b0zbh7b6(v=vs.110).aspx   {  	int[] tableX = (int[])x [0];  	int[] tableY = (int[])y [0];  	int loopCount = Math.Max (tableX.Length' tableY.Length);  	for (int i = 0; i < loopCount; i++) {  		int scoreX = -2;  		int scoreY = -2;  		if (i < tableX.Length)  			scoreX = tableX [i];  		if (i < tableY.Length)  			scoreY = tableY [i];  		if (scoreX > scoreY || scoreY == -2)  			return 1;  		//is "1" when X is bigger than Y or when Y is empty  		if (scoreX == -2 || scoreX < scoreY)  			return -1;  		//is "-1" when X is smaller than Y or when X is empty  	}  	return 0;  	//same chars or numbers  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: scoredItem.Sort (delegate (object[] x' object[] y)//Reference: http://msdn.microsoft.com/en-us/library/b0zbh7b6(v=vs.110).aspx   {  	int[] tableX = (int[])x [0];  	int[] tableY = (int[])y [0];  	int loopCount = Math.Max (tableX.Length' tableY.Length);  	for (int i = 0; i < loopCount; i++) {  		int scoreX = -2;  		int scoreY = -2;  		if (i < tableX.Length)  			scoreX = tableX [i];  		if (i < tableY.Length)  			scoreY = tableY [i];  		if (scoreX > scoreY || scoreY == -2)  			return 1;  		//is "1" when X is bigger than Y or when Y is empty  		if (scoreX == -2 || scoreX < scoreY)  			return -1;  		//is "-1" when X is smaller than Y or when X is empty  	}  	return 0;  	//same chars or numbers  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: scoredItem.Sort (delegate (object[] x' object[] y)//Reference: http://msdn.microsoft.com/en-us/library/b0zbh7b6(v=vs.110).aspx   {  	int[] tableX = (int[])x [0];  	int[] tableY = (int[])y [0];  	int loopCount = Math.Max (tableX.Length' tableY.Length);  	for (int i = 0; i < loopCount; i++) {  		int scoreX = -2;  		int scoreY = -2;  		if (i < tableX.Length)  			scoreX = tableX [i];  		if (i < tableY.Length)  			scoreY = tableY [i];  		if (scoreX > scoreY || scoreY == -2)  			return 1;  		//is "1" when X is bigger than Y or when Y is empty  		if (scoreX == -2 || scoreX < scoreY)  			return -1;  		//is "-1" when X is smaller than Y or when X is empty  	}  	return 0;  	//same chars or numbers  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: scoredItem.Sort (delegate (object[] x' object[] y)//Reference: http://msdn.microsoft.com/en-us/library/b0zbh7b6(v=vs.110).aspx   {  	int[] tableX = (int[])x [0];  	int[] tableY = (int[])y [0];  	int loopCount = Math.Max (tableX.Length' tableY.Length);  	for (int i = 0; i < loopCount; i++) {  		int scoreX = -2;  		int scoreY = -2;  		if (i < tableX.Length)  			scoreX = tableX [i];  		if (i < tableY.Length)  			scoreY = tableY [i];  		if (scoreX > scoreY || scoreY == -2)  			return 1;  		//is "1" when X is bigger than Y or when Y is empty  		if (scoreX == -2 || scoreX < scoreY)  			return -1;  		//is "-1" when X is smaller than Y or when X is empty  	}  	return 0;  	//same chars or numbers  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int i = 0; i < loopCount; i++) {  	int scoreX = -2;  	int scoreY = -2;  	if (i < tableX.Length)  		scoreX = tableX [i];  	if (i < tableY.Length)  		scoreY = tableY [i];  	if (scoreX > scoreY || scoreY == -2)  		return 1;  	//is "1" when X is bigger than Y or when Y is empty  	if (scoreX == -2 || scoreX < scoreY)  		return -1;  	//is "-1" when X is smaller than Y or when X is empty  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int i = 0; i < loopCount; i++) {  	int scoreX = -2;  	int scoreY = -2;  	if (i < tableX.Length)  		scoreX = tableX [i];  	if (i < tableY.Length)  		scoreY = tableY [i];  	if (scoreX > scoreY || scoreY == -2)  		return 1;  	//is "1" when X is bigger than Y or when Y is empty  	if (scoreX == -2 || scoreX < scoreY)  		return -1;  	//is "-1" when X is smaller than Y or when X is empty  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int i = 0; i < loopCount; i++) {  	int scoreX = -2;  	int scoreY = -2;  	if (i < tableX.Length)  		scoreX = tableX [i];  	if (i < tableY.Length)  		scoreY = tableY [i];  	if (scoreX > scoreY || scoreY == -2)  		return 1;  	//is "1" when X is bigger than Y or when Y is empty  	if (scoreX == -2 || scoreX < scoreY)  		return -1;  	//is "-1" when X is smaller than Y or when X is empty  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: for (int i = 0; i < loopCount; i++) {  	int scoreX = -2;  	int scoreY = -2;  	if (i < tableX.Length)  		scoreX = tableX [i];  	if (i < tableY.Length)  		scoreY = tableY [i];  	if (scoreX > scoreY || scoreY == -2)  		return 1;  	//is "1" when X is bigger than Y or when Y is empty  	if (scoreX == -2 || scoreX < scoreY)  		return -1;  	//is "-1" when X is smaller than Y or when X is empty  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: if (scoreX > scoreY || scoreY == -2)  	return 1;  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,SortListByVersionName,The following statement contains a magic number: if (scoreX == -2 || scoreX < scoreY)  	return -1;  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetSpringAIs,The following statement contains a magic number: for (int i = 0; i < customSpringAis.Count; i++)  	objList.Add (new object[2] {  		string.Format ("{0} {1}"' customSpringAis [i].ShortName' customSpringAis [i].Version)'  		customSpringAis [i]  	});  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetSpringAIs,The following statement contains a magic number: objList.Add (new object[2] {  	string.Format ("{0} {1}"' customSpringAis [i].ShortName' customSpringAis [i].Version)'  	customSpringAis [i]  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: if (missionScriptPath != null) {  	try {  		using (FileStream fileStream = File.OpenRead (missionScriptPath))  			using (var stream = new StreamReader (fileStream)) {  				mod.MissionScript = stream.ReadToEnd ();  				var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  				var close = mod.MissionScript.IndexOf (';'' open);  				var mapname = mod.MissionScript.Substring (open' close - open);  				mod.MissionMap = mapname.Trim (new char[3] {  					' ''  					'=''  					'\t'  				});  			}  	} catch (Exception e) {  	}  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: if (missionScriptPath != null) {  	try {  		using (FileStream fileStream = File.OpenRead (missionScriptPath))  			using (var stream = new StreamReader (fileStream)) {  				mod.MissionScript = stream.ReadToEnd ();  				var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  				var close = mod.MissionScript.IndexOf (';'' open);  				var mapname = mod.MissionScript.Substring (open' close - open);  				mod.MissionMap = mapname.Trim (new char[3] {  					' ''  					'=''  					'\t'  				});  			}  	} catch (Exception e) {  	}  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: if (missionScriptPath != null) {  	try {  		using (FileStream fileStream = File.OpenRead (missionScriptPath))  			using (var stream = new StreamReader (fileStream)) {  				mod.MissionScript = stream.ReadToEnd ();  				var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  				var close = mod.MissionScript.IndexOf (';'' open);  				var mapname = mod.MissionScript.Substring (open' close - open);  				mod.MissionMap = mapname.Trim (new char[3] {  					' ''  					'=''  					'\t'  				});  			}  	} catch (Exception e) {  	}  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: if (missionScriptPath != null) {  	try {  		using (FileStream fileStream = File.OpenRead (missionScriptPath))  			using (var stream = new StreamReader (fileStream)) {  				mod.MissionScript = stream.ReadToEnd ();  				var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  				var close = mod.MissionScript.IndexOf (';'' open);  				var mapname = mod.MissionScript.Substring (open' close - open);  				mod.MissionMap = mapname.Trim (new char[3] {  					' ''  					'=''  					'\t'  				});  			}  	} catch (Exception e) {  	}  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (missionScriptPath))  		using (var stream = new StreamReader (fileStream)) {  			mod.MissionScript = stream.ReadToEnd ();  			var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  			var close = mod.MissionScript.IndexOf (';'' open);  			var mapname = mod.MissionScript.Substring (open' close - open);  			mod.MissionMap = mapname.Trim (new char[3] {  				' ''  				'=''  				'\t'  			});  		}  } catch (Exception e) {  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (missionScriptPath))  		using (var stream = new StreamReader (fileStream)) {  			mod.MissionScript = stream.ReadToEnd ();  			var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  			var close = mod.MissionScript.IndexOf (';'' open);  			var mapname = mod.MissionScript.Substring (open' close - open);  			mod.MissionMap = mapname.Trim (new char[3] {  				' ''  				'=''  				'\t'  			});  		}  } catch (Exception e) {  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (missionScriptPath))  		using (var stream = new StreamReader (fileStream)) {  			mod.MissionScript = stream.ReadToEnd ();  			var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  			var close = mod.MissionScript.IndexOf (';'' open);  			var mapname = mod.MissionScript.Substring (open' close - open);  			mod.MissionMap = mapname.Trim (new char[3] {  				' ''  				'=''  				'\t'  			});  		}  } catch (Exception e) {  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: try {  	using (FileStream fileStream = File.OpenRead (missionScriptPath))  		using (var stream = new StreamReader (fileStream)) {  			mod.MissionScript = stream.ReadToEnd ();  			var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  			var close = mod.MissionScript.IndexOf (';'' open);  			var mapname = mod.MissionScript.Substring (open' close - open);  			mod.MissionMap = mapname.Trim (new char[3] {  				' ''  				'=''  				'\t'  			});  		}  } catch (Exception e) {  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (missionScriptPath))  	using (var stream = new StreamReader (fileStream)) {  		mod.MissionScript = stream.ReadToEnd ();  		var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  		var close = mod.MissionScript.IndexOf (';'' open);  		var mapname = mod.MissionScript.Substring (open' close - open);  		mod.MissionMap = mapname.Trim (new char[3] {  			' ''  			'=''  			'\t'  		});  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (missionScriptPath))  	using (var stream = new StreamReader (fileStream)) {  		mod.MissionScript = stream.ReadToEnd ();  		var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  		var close = mod.MissionScript.IndexOf (';'' open);  		var mapname = mod.MissionScript.Substring (open' close - open);  		mod.MissionMap = mapname.Trim (new char[3] {  			' ''  			'=''  			'\t'  		});  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (missionScriptPath))  	using (var stream = new StreamReader (fileStream)) {  		mod.MissionScript = stream.ReadToEnd ();  		var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  		var close = mod.MissionScript.IndexOf (';'' open);  		var mapname = mod.MissionScript.Substring (open' close - open);  		mod.MissionMap = mapname.Trim (new char[3] {  			' ''  			'=''  			'\t'  		});  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (missionScriptPath))  	using (var stream = new StreamReader (fileStream)) {  		mod.MissionScript = stream.ReadToEnd ();  		var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  		var close = mod.MissionScript.IndexOf (';'' open);  		var mapname = mod.MissionScript.Substring (open' close - open);  		mod.MissionMap = mapname.Trim (new char[3] {  			' ''  			'=''  			'\t'  		});  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	mod.MissionScript = stream.ReadToEnd ();  	var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  	var close = mod.MissionScript.IndexOf (';'' open);  	var mapname = mod.MissionScript.Substring (open' close - open);  	mod.MissionMap = mapname.Trim (new char[3] {  		' ''  		'=''  		'\t'  	});  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	mod.MissionScript = stream.ReadToEnd ();  	var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  	var close = mod.MissionScript.IndexOf (';'' open);  	var mapname = mod.MissionScript.Substring (open' close - open);  	mod.MissionMap = mapname.Trim (new char[3] {  		' ''  		'=''  		'\t'  	});  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	mod.MissionScript = stream.ReadToEnd ();  	var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  	var close = mod.MissionScript.IndexOf (';'' open);  	var mapname = mod.MissionScript.Substring (open' close - open);  	mod.MissionMap = mapname.Trim (new char[3] {  		' ''  		'=''  		'\t'  	});  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	mod.MissionScript = stream.ReadToEnd ();  	var open = mod.MissionScript.IndexOf ("mapname"' 7' mod.MissionScript.Length - 8' StringComparison.InvariantCultureIgnoreCase) + 8;  	var close = mod.MissionScript.IndexOf (';'' open);  	var mapname = mod.MissionScript.Substring (open' close - open);  	mod.MissionMap = mapname.Trim (new char[3] {  		' ''  		'=''  		'\t'  	});  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,SkirmishControlTool,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetOneSddMod,The following statement contains a magic number: mod.MissionMap = mapname.Trim (new char[3] {  	' ''  	'=''  	'\t'  });  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadLuaAI,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (filePath))  	using (var stream = new StreamReader (fileStream)) {  		var allText = stream.ReadToEnd ();  		int offset = 0;  		var config = new TableReaderConfig ();  		var table = TableReader.ParseTable (config' 0' allText' filePath' out offset);  		List<Ai> modAis = new List<Ai> ();  		foreach (var kvp in table) {  			String name = "";  			String desc = "";  			foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  				var value = (kvp2.Value as String);  				switch (kvp2.Key) {  				case "name":  					name = value;  					break;  				case "desc":  					desc = value;  					break;  				}  			}  			if (name != "" && desc != "") {  				var bot = new Ai () {  					Info = new AiInfoPair[2] {  						new AiInfoPair {  							Key = "shortName"'  							Value = name  						}'  						//usually equivalent to AI folder name (aiName[i])  						new AiInfoPair {  							Key = "description"'  							Value = desc  						}'  					}  				};  				modAis.Add (bot);  			}  		}  		modInfo.ModAis = modAis.ToArray ();  	}  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadLuaAI,The following statement contains a magic number: using (var stream = new StreamReader (fileStream)) {  	var allText = stream.ReadToEnd ();  	int offset = 0;  	var config = new TableReaderConfig ();  	var table = TableReader.ParseTable (config' 0' allText' filePath' out offset);  	List<Ai> modAis = new List<Ai> ();  	foreach (var kvp in table) {  		String name = "";  		String desc = "";  		foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  			var value = (kvp2.Value as String);  			switch (kvp2.Key) {  			case "name":  				name = value;  				break;  			case "desc":  				desc = value;  				break;  			}  		}  		if (name != "" && desc != "") {  			var bot = new Ai () {  				Info = new AiInfoPair[2] {  					new AiInfoPair {  						Key = "shortName"'  						Value = name  					}'  					//usually equivalent to AI folder name (aiName[i])  					new AiInfoPair {  						Key = "description"'  						Value = desc  					}'  				}  			};  			modAis.Add (bot);  		}  	}  	modInfo.ModAis = modAis.ToArray ();  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadLuaAI,The following statement contains a magic number: foreach (var kvp in table) {  	String name = "";  	String desc = "";  	foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  		var value = (kvp2.Value as String);  		switch (kvp2.Key) {  		case "name":  			name = value;  			break;  		case "desc":  			desc = value;  			break;  		}  	}  	if (name != "" && desc != "") {  		var bot = new Ai () {  			Info = new AiInfoPair[2] {  				new AiInfoPair {  					Key = "shortName"'  					Value = name  				}'  				//usually equivalent to AI folder name (aiName[i])  				new AiInfoPair {  					Key = "description"'  					Value = desc  				}'  			}  		};  		modAis.Add (bot);  	}  }  
Magic Number,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadLuaAI,The following statement contains a magic number: if (name != "" && desc != "") {  	var bot = new Ai () {  		Info = new AiInfoPair[2] {  			new AiInfoPair {  				Key = "shortName"'  				Value = name  			}'  			//usually equivalent to AI folder name (aiName[i])  			new AiInfoPair {  				Key = "description"'  				Value = desc  			}'  		}  	};  	modAis.Add (bot);  }  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,sendBox2_TextChanged,The following statement contains a magic number: if (activeSendbox == 2) {  	//Reference: http://msdn.microsoft.com/en-us/library/zf50za27(v=vs.100).aspx  	//Reference2: http://social.msdn.microsoft.com/Forums/vstudio/en-US/786480e4-f020-41a7-a545-8f691b646ba1/convert-string-to-hex  	Int32 number;  	if (Int32.TryParse (sendBox2.Text' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out number)) {  		sendBox1.Text = ((char)number).ToString ();  	} else {  		if (sendBox2.Text == String.Empty)  			sendBox1.Text = String.Empty;  		else  			sendBox1.Text = "Ops! Check value.";  		// TODO: Error processing  	}  }  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,sendBox2_Enter,The following statement contains a magic number: activeSendbox = 2;  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (2' 5);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (2' 5);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (24' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (24' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point (2' 62);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point (2' 62);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size (171' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size (171' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (2' 49);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (2' 49);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (149' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (149' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 4;  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (2' 31);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (2' 31);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (42' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (42' 13);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 5;  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox2.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox2.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox2.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox2.Location = new System.Drawing.Point (32' 0);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox2.Size = new System.Drawing.Size (128' 20);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox2.Size = new System.Drawing.Size (128' 20);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox1.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox1.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox1.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox1.Location = new System.Drawing.Point (45' 26);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox1.Location = new System.Drawing.Point (45' 26);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox1.Size = new System.Drawing.Size (128' 20);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.sendBox1.Size = new System.Drawing.Size (128' 20);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (173' 76);  
Magic Number,ZeroKLobby.MicroLobby,HexToUnicodeConverter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HexToUnicodeConverter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (173' 76);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (85' 107);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (85' 107);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (115' 43);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (115' 43);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 8;  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (335' 107);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (335' 107);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (109' 41);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (109' 41);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 9;  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Location = new System.Drawing.Point (46' 9);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Location = new System.Drawing.Point (46' 9);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Size = new System.Drawing.Size (448' 95);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lb1.Size = new System.Drawing.Size (448' 95);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lb1.TabIndex = 10;  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbTimer.Location = new System.Drawing.Point (251' 118);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbTimer.Location = new System.Drawing.Point (251' 118);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbTimer.Size = new System.Drawing.Size (32' 18);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbTimer.Size = new System.Drawing.Size (32' 18);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbTimer.TabIndex = 11;  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.timer1.Interval = 200;  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (532' 160);  
Magic Number,ZeroKLobby.MicroLobby,AreYouReadyDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AreYouReadyDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (532' 160);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (85' 83);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (85' 83);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (115' 43);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (115' 43);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 8;  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (321' 83);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (321' 83);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (109' 41);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (109' 41);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 9;  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Location = new System.Drawing.Point (43' 24);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Location = new System.Drawing.Point (43' 24);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size (433' 45);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size (433' 45);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.TabIndex = 10;  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (532' 136);  
Magic Number,ZeroKLobby.MicroLobby,StartMatchMakerDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\StartMatchMakerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (532' 136);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: timedUpdate.Interval = 50;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button3.BackColor = TextColor.GetColor (2);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button4.BackColor = TextColor.GetColor (3);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button5.BackColor = TextColor.GetColor (4);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button6.BackColor = TextColor.GetColor (5);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button7.BackColor = TextColor.GetColor (6);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button8.BackColor = TextColor.GetColor (7);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button9.BackColor = TextColor.GetColor (8);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button10.BackColor = TextColor.GetColor (9);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button11.BackColor = TextColor.GetColor (10);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button12.BackColor = TextColor.GetColor (11);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button13.BackColor = TextColor.GetColor (12);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button14.BackColor = TextColor.GetColor (13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button15.BackColor = TextColor.GetColor (14);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,TextColoringPanel,The following statement contains a magic number: button16.BackColor = TextColor.GetColor (15);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,comboBox1_SelectionChangeCommitted,The following statement contains a magic number: if (comboBox1.SelectedItem == "To-line-end")  	progressType = 1;  else if (comboBox1.SelectedItem == "Word-by-word")  	progressType = 2;  else if (comboBox1.SelectedItem == "Char-by-char")  	progressType = 3;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,comboBox1_SelectionChangeCommitted,The following statement contains a magic number: if (comboBox1.SelectedItem == "To-line-end")  	progressType = 1;  else if (comboBox1.SelectedItem == "Word-by-word")  	progressType = 2;  else if (comboBox1.SelectedItem == "Char-by-char")  	progressType = 3;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,comboBox1_SelectionChangeCommitted,The following statement contains a magic number: if (comboBox1.SelectedItem == "Word-by-word")  	progressType = 2;  else if (comboBox1.SelectedItem == "Char-by-char")  	progressType = 3;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,comboBox1_SelectionChangeCommitted,The following statement contains a magic number: if (comboBox1.SelectedItem == "Word-by-word")  	progressType = 2;  else if (comboBox1.SelectedItem == "Char-by-char")  	progressType = 3;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,comboBox1_SelectionChangeCommitted,The following statement contains a magic number: progressType = 2;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,comboBox1_SelectionChangeCommitted,The following statement contains a magic number: if (comboBox1.SelectedItem == "Char-by-char")  	progressType = 3;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,comboBox1_SelectionChangeCommitted,The following statement contains a magic number: progressType = 3;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.Text.Length > 0 && selectionStart < sendBox.Text.Length)//is not at string end   {  	helpLabel.Text = "";  	if (sendBox.SelectionLength >= 1) {  		sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		//convert number to string  		sendBox.SelectionStart = selectionStart + 6;  	} else if (progressType == 1) {  		if (ignoreSpaceCheck.Checked)  			ColorWholeLine (buttonNum);  		else  			while (ColorWords (buttonNum))  				;  	} else if (progressType == 2) {  		ColorWords (buttonNum);  	} else if (progressType == 3)//"Char-by-char"  	 {  		int newLineChar = IsAtNewLine (selectionStart);  		int textLen = sendBox.Text.Length;  		while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  		 {  			selectionStart = selectionStart + newLineChar;  			newLineChar = IsAtNewLine (selectionStart);  		}  		if (ignoreSpaceCheck.Checked) {  			string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  			 {  				selectionStart = selectionStart + 1;  				if (selectionStart < textLen)  					tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			}  		}  		if (selectionStart < textLen)  			sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  		else  			sendBox.Text = sendBox.Text + "\x03";  		//end of string  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		sendBox.SelectionStart = selectionStart + 8;  	}  } else  	helpLabel.Text = "Do: check caret position/selection";  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.Text.Length > 0 && selectionStart < sendBox.Text.Length)//is not at string end   {  	helpLabel.Text = "";  	if (sendBox.SelectionLength >= 1) {  		sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		//convert number to string  		sendBox.SelectionStart = selectionStart + 6;  	} else if (progressType == 1) {  		if (ignoreSpaceCheck.Checked)  			ColorWholeLine (buttonNum);  		else  			while (ColorWords (buttonNum))  				;  	} else if (progressType == 2) {  		ColorWords (buttonNum);  	} else if (progressType == 3)//"Char-by-char"  	 {  		int newLineChar = IsAtNewLine (selectionStart);  		int textLen = sendBox.Text.Length;  		while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  		 {  			selectionStart = selectionStart + newLineChar;  			newLineChar = IsAtNewLine (selectionStart);  		}  		if (ignoreSpaceCheck.Checked) {  			string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  			 {  				selectionStart = selectionStart + 1;  				if (selectionStart < textLen)  					tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			}  		}  		if (selectionStart < textLen)  			sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  		else  			sendBox.Text = sendBox.Text + "\x03";  		//end of string  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		sendBox.SelectionStart = selectionStart + 8;  	}  } else  	helpLabel.Text = "Do: check caret position/selection";  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.Text.Length > 0 && selectionStart < sendBox.Text.Length)//is not at string end   {  	helpLabel.Text = "";  	if (sendBox.SelectionLength >= 1) {  		sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		//convert number to string  		sendBox.SelectionStart = selectionStart + 6;  	} else if (progressType == 1) {  		if (ignoreSpaceCheck.Checked)  			ColorWholeLine (buttonNum);  		else  			while (ColorWords (buttonNum))  				;  	} else if (progressType == 2) {  		ColorWords (buttonNum);  	} else if (progressType == 3)//"Char-by-char"  	 {  		int newLineChar = IsAtNewLine (selectionStart);  		int textLen = sendBox.Text.Length;  		while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  		 {  			selectionStart = selectionStart + newLineChar;  			newLineChar = IsAtNewLine (selectionStart);  		}  		if (ignoreSpaceCheck.Checked) {  			string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  			 {  				selectionStart = selectionStart + 1;  				if (selectionStart < textLen)  					tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			}  		}  		if (selectionStart < textLen)  			sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  		else  			sendBox.Text = sendBox.Text + "\x03";  		//end of string  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		sendBox.SelectionStart = selectionStart + 8;  	}  } else  	helpLabel.Text = "Do: check caret position/selection";  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.Text.Length > 0 && selectionStart < sendBox.Text.Length)//is not at string end   {  	helpLabel.Text = "";  	if (sendBox.SelectionLength >= 1) {  		sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		//convert number to string  		sendBox.SelectionStart = selectionStart + 6;  	} else if (progressType == 1) {  		if (ignoreSpaceCheck.Checked)  			ColorWholeLine (buttonNum);  		else  			while (ColorWords (buttonNum))  				;  	} else if (progressType == 2) {  		ColorWords (buttonNum);  	} else if (progressType == 3)//"Char-by-char"  	 {  		int newLineChar = IsAtNewLine (selectionStart);  		int textLen = sendBox.Text.Length;  		while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  		 {  			selectionStart = selectionStart + newLineChar;  			newLineChar = IsAtNewLine (selectionStart);  		}  		if (ignoreSpaceCheck.Checked) {  			string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  			 {  				selectionStart = selectionStart + 1;  				if (selectionStart < textLen)  					tempSubstring = sendBox.Text.Substring (selectionStart' 1);  			}  		}  		if (selectionStart < textLen)  			sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  		else  			sendBox.Text = sendBox.Text + "\x03";  		//end of string  		sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  		sendBox.SelectionStart = selectionStart + 8;  	}  } else  	helpLabel.Text = "Do: check caret position/selection";  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.SelectionLength >= 1) {  	sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	//convert number to string  	sendBox.SelectionStart = selectionStart + 6;  } else if (progressType == 1) {  	if (ignoreSpaceCheck.Checked)  		ColorWholeLine (buttonNum);  	else  		while (ColorWords (buttonNum))  			;  } else if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.SelectionLength >= 1) {  	sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	//convert number to string  	sendBox.SelectionStart = selectionStart + 6;  } else if (progressType == 1) {  	if (ignoreSpaceCheck.Checked)  		ColorWholeLine (buttonNum);  	else  		while (ColorWords (buttonNum))  			;  } else if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.SelectionLength >= 1) {  	sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	//convert number to string  	sendBox.SelectionStart = selectionStart + 6;  } else if (progressType == 1) {  	if (ignoreSpaceCheck.Checked)  		ColorWholeLine (buttonNum);  	else  		while (ColorWords (buttonNum))  			;  } else if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (sendBox.SelectionLength >= 1) {  	sendBox.Text = sendBox.Text.Insert (selectionStart + sendBox.SelectionLength' "\x03");  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	//convert number to string  	sendBox.SelectionStart = selectionStart + 6;  } else if (progressType == 1) {  	if (ignoreSpaceCheck.Checked)  		ColorWholeLine (buttonNum);  	else  		while (ColorWords (buttonNum))  			;  } else if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: sendBox.SelectionStart = selectionStart + 6;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 1) {  	if (ignoreSpaceCheck.Checked)  		ColorWholeLine (buttonNum);  	else  		while (ColorWords (buttonNum))  			;  } else if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 1) {  	if (ignoreSpaceCheck.Checked)  		ColorWholeLine (buttonNum);  	else  		while (ColorWords (buttonNum))  			;  } else if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 1) {  	if (ignoreSpaceCheck.Checked)  		ColorWholeLine (buttonNum);  	else  		while (ColorWords (buttonNum))  			;  } else if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 2) {  	ColorWords (buttonNum);  } else if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: if (progressType == 3)//"Char-by-char"   {  	int newLineChar = IsAtNewLine (selectionStart);  	int textLen = sendBox.Text.Length;  	while (selectionStart < textLen && newLineChar > -1)//skip over current line-end  	 {  		selectionStart = selectionStart + newLineChar;  		newLineChar = IsAtNewLine (selectionStart);  	}  	if (ignoreSpaceCheck.Checked) {  		string tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		while (selectionStart < textLen && (tempSubstring == " " || tempSubstring == "\t"))//skip over space  		 {  			selectionStart = selectionStart + 1;  			if (selectionStart < textLen)  				tempSubstring = sendBox.Text.Substring (selectionStart' 1);  		}  	}  	if (selectionStart < textLen)  		sendBox.Text = sendBox.Text.Insert (selectionStart + 1' "\x03");  	else  		sendBox.Text = sendBox.Text + "\x03";  	//end of string  	sendBox.Text = sendBox.Text.Insert (selectionStart' "\x03" + buttonNum.ToString ("00") + "'" + backgroundColor.ToString ("00"));  	sendBox.SelectionStart = selectionStart + 8;  }  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorButtonClicked,The following statement contains a magic number: sendBox.SelectionStart = selectionStart + 8;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,IsAtNewLine,The following statement contains a magic number: if (index > sendBox.Text.Length - 1)  	return 0;  //end-of-string  else if (sendBox.Text.Substring (index' 1) == "\n")  	return 1;  //Linux's newLine  else if (sendBox.Text.Substring (index' 1) == "\r" && sendBox.Text.Substring (index + 1' 1) == "\n")  	return 2;  //Windows' newLine  else  	return -1;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,IsAtNewLine,The following statement contains a magic number: if (sendBox.Text.Substring (index' 1) == "\n")  	return 1;  //Linux's newLine  else if (sendBox.Text.Substring (index' 1) == "\r" && sendBox.Text.Substring (index + 1' 1) == "\n")  	return 2;  //Windows' newLine  else  	return -1;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,IsAtNewLine,The following statement contains a magic number: if (sendBox.Text.Substring (index' 1) == "\r" && sendBox.Text.Substring (index + 1' 1) == "\n")  	return 2;  //Windows' newLine  else  	return -1;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,IsAtNewLine,The following statement contains a magic number: return 2;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorWholeLine,The following statement contains a magic number: sendBox.SelectionStart = selectionStart + 7;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,ColorWords,The following statement contains a magic number: sendBox.SelectionStart = selectionStart + 7;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (2' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (2' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 16;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point (43' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point (43' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point (84' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point (84' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point (125' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point (125' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button4.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point (165' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point (165' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button5.TabIndex = 4;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point (205' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point (205' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button6.TabIndex = 5;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button7.Location = new System.Drawing.Point (245' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button7.Location = new System.Drawing.Point (245' 31);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button7.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button7.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button7.TabIndex = 6;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button8.Location = new System.Drawing.Point (2' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button8.Location = new System.Drawing.Point (2' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button8.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button8.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button8.TabIndex = 7;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button9.Location = new System.Drawing.Point (43' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button9.Location = new System.Drawing.Point (43' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button9.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button9.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button9.TabIndex = 8;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button10.Location = new System.Drawing.Point (84' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button10.Location = new System.Drawing.Point (84' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button10.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button10.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button10.TabIndex = 9;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button11.Location = new System.Drawing.Point (125' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button11.Location = new System.Drawing.Point (125' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button11.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button11.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button11.TabIndex = 10;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button12.Location = new System.Drawing.Point (165' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button12.Location = new System.Drawing.Point (165' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button12.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button12.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button12.TabIndex = 11;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button13.Location = new System.Drawing.Point (205' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button13.Location = new System.Drawing.Point (205' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button13.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button13.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button13.TabIndex = 12;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button14.Location = new System.Drawing.Point (245' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button14.Location = new System.Drawing.Point (245' 61);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button14.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button14.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button14.TabIndex = 13;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button15.Location = new System.Drawing.Point (2' 91);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button15.Location = new System.Drawing.Point (2' 91);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button15.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button15.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button15.TabIndex = 14;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button16.Location = new System.Drawing.Point (43' 91);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button16.Location = new System.Drawing.Point (43' 91);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button16.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button16.Size = new System.Drawing.Size (40' 30);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.button16.TabIndex = 15;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point (105' 3);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point (105' 3);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size (86' 21);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size (86' 21);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.TabIndex = 16;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.removeColorButton.Location = new System.Drawing.Point (197' 195);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.removeColorButton.Location = new System.Drawing.Point (197' 195);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.removeColorButton.Size = new System.Drawing.Size (88' 21);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.removeColorButton.Size = new System.Drawing.Size (88' 21);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.removeColorButton.TabIndex = 17;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.helpLabel.Location = new System.Drawing.Point (-1' 321);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.helpLabel.Size = new System.Drawing.Size (71' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.helpLabel.Size = new System.Drawing.Size (71' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.helpLabel.TabIndex = 18;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundcolor.Location = new System.Drawing.Point (244' 94);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundcolor.Location = new System.Drawing.Point (244' 94);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundcolor.Size = new System.Drawing.Size (41' 27);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundcolor.Size = new System.Drawing.Size (41' 27);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundcolor.TabIndex = 19;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundLabel.Location = new System.Drawing.Point (170' 101);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundLabel.Location = new System.Drawing.Point (170' 101);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundLabel.Size = new System.Drawing.Size (68' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundLabel.Size = new System.Drawing.Size (68' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.backgroundLabel.TabIndex = 20;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.ignoreSpaceCheck.Location = new System.Drawing.Point (197' 5);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.ignoreSpaceCheck.Location = new System.Drawing.Point (197' 5);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.ignoreSpaceCheck.Size = new System.Drawing.Size (88' 17);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.ignoreSpaceCheck.Size = new System.Drawing.Size (88' 17);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.ignoreSpaceCheck.TabIndex = 21;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.previewLabel.Location = new System.Drawing.Point (-1' 219);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.previewLabel.Size = new System.Drawing.Size (48' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.previewLabel.Size = new System.Drawing.Size (48' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.previewLabel.TabIndex = 24;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.interatorLabel.Location = new System.Drawing.Point (12' 6);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.interatorLabel.Location = new System.Drawing.Point (12' 6);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.interatorLabel.Size = new System.Drawing.Size (89' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.interatorLabel.Size = new System.Drawing.Size (89' 13);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.interatorLabel.TabIndex = 25;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.pasteToChat.Location = new System.Drawing.Point (200' 316);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.pasteToChat.Location = new System.Drawing.Point (200' 316);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.pasteToChat.Size = new System.Drawing.Size (88' 23);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.pasteToChat.Size = new System.Drawing.Size (88' 23);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.pasteToChat.TabIndex = 26;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point (2' 125);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point (2' 125);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size (283' 182);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size (283' 182);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 27;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.Location = new System.Drawing.Point (3' 3);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.Location = new System.Drawing.Point (3' 3);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.Size = new System.Drawing.Size (277' 85);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.Size = new System.Drawing.Size (277' 85);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.chatBox.Location = new System.Drawing.Point (3' 94);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.chatBox.Location = new System.Drawing.Point (3' 94);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.chatBox.Size = new System.Drawing.Size (277' 85);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.chatBox.Size = new System.Drawing.Size (277' 85);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.chatBox.TabIndex = 22;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.undoButton.Location = new System.Drawing.Point (156' 195);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.undoButton.Location = new System.Drawing.Point (156' 195);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.undoButton.Size = new System.Drawing.Size (41' 21);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.undoButton.Size = new System.Drawing.Size (41' 21);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.undoButton.TabIndex = 28;  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (287' 340);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (287' 340);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size (1000' 1000);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size (1000' 1000);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (295' 292);  
Magic Number,ZeroKLobby.MicroLobby,TextColoringPanel,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColoringPanel.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (295' 292);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (270' 130);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (270' 130);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (98' 34);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (98' 34);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnRetry.Location = new System.Drawing.Point (467' 28);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnRetry.Location = new System.Drawing.Point (467' 28);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnRetry.Size = new System.Drawing.Size (75' 33);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnRetry.Size = new System.Drawing.Size (75' 33);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnRetry.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point (94' 70);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point (94' 70);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size (448' 23);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size (448' 23);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (91' 35);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (91' 35);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (94' 18);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (94' 18);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbProgress.Location = new System.Drawing.Point (91' 96);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbProgress.Location = new System.Drawing.Point (91' 96);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbProgress.Size = new System.Drawing.Size (94' 18);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbProgress.Size = new System.Drawing.Size (94' 18);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbProgress.TabIndex = 5;  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (613' 185);  
Magic Number,ZeroKLobby.MicroLobby,WaitDownloadDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\WaitDownloadDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (613' 185);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintDivider,The following statement contains a magic number: y += 8;  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintDivider,The following statement contains a magic number: TextRenderer.DrawText (g' text' dividerFont' new Rectangle (10' y' Width - 20' 30)' dividerFontBrush.Color);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintDivider,The following statement contains a magic number: TextRenderer.DrawText (g' text' dividerFont' new Rectangle (10' y' Width - 20' 30)' dividerFontBrush.Color);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintDivider,The following statement contains a magic number: TextRenderer.DrawText (g' text' dividerFont' new Rectangle (10' y' Width - 20' 30)' dividerFontBrush.Color);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintDivider,The following statement contains a magic number: y += 24;  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintDivider,The following statement contains a magic number: y += 4;  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintOpenBattleButton,The following statement contains a magic number: g.DrawImage (ZklResources.border' x + (int)3' y + (int)3' (int)70' (int)70);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintOpenBattleButton,The following statement contains a magic number: g.DrawImage (ZklResources.border' x + (int)3' y + (int)3' (int)70' (int)70);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintOpenBattleButton,The following statement contains a magic number: g.DrawImage (ZklResources.border' x + (int)3' y + (int)3' (int)70' (int)70);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintOpenBattleButton,The following statement contains a magic number: g.DrawImage (ZklResources.border' x + (int)3' y + (int)3' (int)70' (int)70);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,PaintOpenBattleButton,The following statement contains a magic number: TextRenderer.DrawText (g' "Open a new battle."' BattleIcon.TitleFont' new Point (x + scaledMapCellWidth' y + 3)' Config.TextColor);  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,OpenGameButtonHitTest,The following statement contains a magic number: return x > openBattlePosition.X + (int)3 && x < openBattlePosition.X + (int)71 && y > openBattlePosition.Y + (int)3 && y < openBattlePosition.Y + (int)71;  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,OpenGameButtonHitTest,The following statement contains a magic number: return x > openBattlePosition.X + (int)3 && x < openBattlePosition.X + (int)71 && y > openBattlePosition.Y + (int)3 && y < openBattlePosition.Y + (int)71;  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,OpenGameButtonHitTest,The following statement contains a magic number: return x > openBattlePosition.X + (int)3 && x < openBattlePosition.X + (int)71 && y > openBattlePosition.Y + (int)3 && y < openBattlePosition.Y + (int)71;  
Magic Number,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,OpenGameButtonHitTest,The following statement contains a magic number: return x > openBattlePosition.X + (int)3 && x < openBattlePosition.X + (int)71 && y > openBattlePosition.Y + (int)3 && y < openBattlePosition.Y + (int)71;  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: Size = new Size (731' 463);  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: Size = new Size (731' 463);  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: panel1 = new Panel {  	BackColor = Color.Transparent'  	Dock = DockStyle.Top'  	Location = new Point (0' 0)'  	Size = new Size (731' 50)  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: panel1 = new Panel {  	BackColor = Color.Transparent'  	Dock = DockStyle.Top'  	Location = new Point (0' 0)'  	Size = new Size (731' 50)  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchLabel = new Label {  	AutoSize = true'  	Location = new Point (203' 17)'  	Size = new Size (59' 18)'  	Text = "Search:"'  	ForeColor = Config.TextColor'  	Font = Config.GeneralFont  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchLabel = new Label {  	AutoSize = true'  	Location = new Point (203' 17)'  	Size = new Size (59' 18)'  	Text = "Search:"'  	ForeColor = Config.TextColor'  	Font = Config.GeneralFont  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchLabel = new Label {  	AutoSize = true'  	Location = new Point (203' 17)'  	Size = new Size (59' 18)'  	Text = "Search:"'  	ForeColor = Config.TextColor'  	Font = Config.GeneralFont  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchLabel = new Label {  	AutoSize = true'  	Location = new Point (203' 17)'  	Size = new Size (59' 18)'  	Text = "Search:"'  	ForeColor = Config.TextColor'  	Font = Config.GeneralFont  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchBox = new ZklTextBox {  	BackColor = Color.FromArgb (0' 30' 40)'  	Location = new Point (268' 14)'  	Size = new Size (178' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchBox = new ZklTextBox {  	BackColor = Color.FromArgb (0' 30' 40)'  	Location = new Point (268' 14)'  	Size = new Size (178' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchBox = new ZklTextBox {  	BackColor = Color.FromArgb (0' 30' 40)'  	Location = new Point (268' 14)'  	Size = new Size (178' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchBox = new ZklTextBox {  	BackColor = Color.FromArgb (0' 30' 40)'  	Location = new Point (268' 14)'  	Size = new Size (178' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchBox = new ZklTextBox {  	BackColor = Color.FromArgb (0' 30' 40)'  	Location = new Point (268' 14)'  	Size = new Size (178' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: searchBox = new ZklTextBox {  	BackColor = Color.FromArgb (0' 30' 40)'  	Location = new Point (268' 14)'  	Size = new Size (178' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: battlePanel = new Panel {  	Location = new Point (0' 50)'  	Size = new Size (731' 432)'  	Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Right  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: battlePanel = new Panel {  	Location = new Point (0' 50)'  	Size = new Size (731' 432)'  	Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Right  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,BattleListTab,The following statement contains a magic number: battlePanel = new Panel {  	Location = new Point (0' 50)'  	Size = new Size (731' 432)'  	Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Right  };  
Magic Number,ZeroKLobby.MicroLobby,BattleListTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListTab.cs,TryNavigate,The following statement contains a magic number: if (path.Length == 2 && !string.IsNullOrEmpty (path [1])) {  	var gameShortcut = path [1];  	if (battleListControl == null)  		Program.Conf.BattleFilter = gameShortcut;  	else  		battleListControl.FilterText = gameShortcut;  } else {  	if (battleListControl == null)  		Program.Conf.BattleFilter = "";  	else  		battleListControl.FilterText = "";  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (596' 444);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (596' 444);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,AddBattleControl,The following statement contains a magic number: if (toolTabs.GetChannelTab ("Battle") == null)  	toolTabs.AddTab ("Battle"' "Battle"' battleChatControl' ZklResources.game' "Current battle room"' 3);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,AddBattleControl,The following statement contains a magic number: toolTabs.AddTab ("Battle"' "Battle"' battleChatControl' ZklResources.game' "Current battle room"' 3);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,CreateChannelControl,The following statement contains a magic number: if (gameInfo != null)  	toolTabs.AddTab (channelName' gameInfo.FullName' chatControl' ZklResources.chat' null' 2);  else  	toolTabs.AddTab (channelName' channelName' chatControl' ZklResources.chat' null' 1);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,CreateChannelControl,The following statement contains a magic number: toolTabs.AddTab (channelName' gameInfo.FullName' chatControl' ZklResources.chat' null' 2);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (path.Length == 2 && !String.IsNullOrEmpty (path [1])) {  	if (path [1] == "battle") {  		toolTabs.SelectChannelTab ("Battle");  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (path.Length == 3 && !String.IsNullOrEmpty (path [1]) && !String.IsNullOrEmpty (path [2])) {  	var type = path [1];  	if (type == "user") {  		var userName = path [2];  		OpenPrivateMessageChannel (userName);  	} else if (type == "channel") {  		var channelName = path [2];  		OpenChannel (channelName);  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (path.Length == 3 && !String.IsNullOrEmpty (path [1]) && !String.IsNullOrEmpty (path [2])) {  	var type = path [1];  	if (type == "user") {  		var userName = path [2];  		OpenPrivateMessageChannel (userName);  	} else if (type == "channel") {  		var channelName = path [2];  		OpenChannel (channelName);  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (path.Length == 3 && !String.IsNullOrEmpty (path [1]) && !String.IsNullOrEmpty (path [2])) {  	var type = path [1];  	if (type == "user") {  		var userName = path [2];  		OpenPrivateMessageChannel (userName);  	} else if (type == "channel") {  		var channelName = path [2];  		OpenChannel (channelName);  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (path.Length == 3 && !String.IsNullOrEmpty (path [1]) && !String.IsNullOrEmpty (path [2])) {  	var type = path [1];  	if (type == "user") {  		var userName = path [2];  		OpenPrivateMessageChannel (userName);  	} else if (type == "channel") {  		var channelName = path [2];  		OpenChannel (channelName);  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (type == "user") {  	var userName = path [2];  	OpenPrivateMessageChannel (userName);  } else if (type == "channel") {  	var channelName = path [2];  	OpenChannel (channelName);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (type == "user") {  	var userName = path [2];  	OpenPrivateMessageChannel (userName);  } else if (type == "channel") {  	var channelName = path [2];  	OpenChannel (channelName);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,TryNavigate,The following statement contains a magic number: if (type == "channel") {  	var channelName = path [2];  	OpenChannel (channelName);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path.Length >= 2 && path [1] == "battle")  	return toolTabs.SetHilite ("Battle"' level' false);  else if (path.Length >= 3) {  	if (path [1] == "channel")  		return toolTabs.SetHilite (path [2]' level' false);  	if (path [1] == "user")  		return toolTabs.SetHilite (path [2]' level' true);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path.Length >= 2 && path [1] == "battle")  	return toolTabs.SetHilite ("Battle"' level' false);  else if (path.Length >= 3) {  	if (path [1] == "channel")  		return toolTabs.SetHilite (path [2]' level' false);  	if (path [1] == "user")  		return toolTabs.SetHilite (path [2]' level' true);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path.Length >= 2 && path [1] == "battle")  	return toolTabs.SetHilite ("Battle"' level' false);  else if (path.Length >= 3) {  	if (path [1] == "channel")  		return toolTabs.SetHilite (path [2]' level' false);  	if (path [1] == "user")  		return toolTabs.SetHilite (path [2]' level' true);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path.Length >= 2 && path [1] == "battle")  	return toolTabs.SetHilite ("Battle"' level' false);  else if (path.Length >= 3) {  	if (path [1] == "channel")  		return toolTabs.SetHilite (path [2]' level' false);  	if (path [1] == "user")  		return toolTabs.SetHilite (path [2]' level' true);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path.Length >= 3) {  	if (path [1] == "channel")  		return toolTabs.SetHilite (path [2]' level' false);  	if (path [1] == "user")  		return toolTabs.SetHilite (path [2]' level' true);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path.Length >= 3) {  	if (path [1] == "channel")  		return toolTabs.SetHilite (path [2]' level' false);  	if (path [1] == "user")  		return toolTabs.SetHilite (path [2]' level' true);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path.Length >= 3) {  	if (path [1] == "channel")  		return toolTabs.SetHilite (path [2]' level' false);  	if (path [1] == "user")  		return toolTabs.SetHilite (path [2]' level' true);  }  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path [1] == "channel")  	return toolTabs.SetHilite (path [2]' level' false);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: return toolTabs.SetHilite (path [2]' level' false);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: if (path [1] == "user")  	return toolTabs.SetHilite (path [2]' level' true);  
Magic Number,ZeroKLobby.MicroLobby,ChatTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatTab.cs,Hilite,The following statement contains a magic number: return toolTabs.SetHilite (path [2]' level' true);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: try {  	Program.ToolTip.SetText (highlighttextBox' "Highlight any options that contain this term as name");  	Program.ToolTip.SetText (highlightlabel' "Highlighter");  	Program.ToolTip.SetText (engineDefaultButton' "Replace all entries with Spring's default values");  	Program.ToolTip.SetText (cancelButton' "Exit' do not commit change");  	Program.ToolTip.SetText (applyButton' "Write all entries to Springsettings.cfg");  	if (!Program.SpringPaths.GetEngineList ().Any ()) {  		Program.Downloader.GetResource (DownloadType.ENGINE' GlobalConst.DefaultEngineOverride);  		this.Close ();  		return;  	}  	settingsOptions = new SpringSettings ().GetEngineConfigOptions (Program.SpringPaths' GlobalConst.DefaultEngineOverride);  	var location = 0;  	foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp  	 {  		var option = kvp.Value;  		//Create links and label.  		var NewLinkLabel = new LinkLabel ();  		NewLinkLabel.Text = kvp.Key;  		var cPlusPlusFile = option.declarationFile;  		var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  		//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  		var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		var link = new LinkLabel.Link ();  		//Reference: http://www.dotnetperls.com/linklabel  		link.LinkData = hyperLink;  		NewLinkLabel.LinkClicked += LinkedLabelClicked;  		NewLinkLabel.Links.Add (0' 250' link.LinkData);  		//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  		NewLinkLabel.Location = new Point (10' location);  		NewLinkLabel.Size = new Size (250' 17);  		NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  		Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  		// Set up/customize the ToolTip text for the Button and Checkbox.  		var tooltip = "";  		if (option.description != null)  			tooltip += string.Format ("Description: {0}\n"' option.description);  		if (option.readOnly == 1)  			tooltip += string.Format ("ReadOnly: True\n");  		if (option.defaultValue != null)  			tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  		if (option.safemodeValue != null)  			tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  		if (option.minimumValue != null)  			tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  		if (option.maximumValue != null)  			tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  		if (option.type == "bool")//customized tooltip for boolean entry  		 {  			//Create checkbox  			var NewCheckBox = new CheckBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				//retrieve value from Springsetting.cfg  				NewCheckBox.Checked = presentValue == "1";  			else  				NewCheckBox.Checked = option.defaultValue == "1";  			NewCheckBox.Location = new Point (260' location);  			NewCheckBox.Size = new Size (200' 17);  			NewCheckBox.Name = kvp.Key;  			NewCheckBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewCheckBox);  			Program.ToolTip.SetText (NewCheckBox' tooltip);  		} else {  			//Create textbox  			var NewTextBox = new TextBox ();  			var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  			if (presentValue != null)  				NewTextBox.Text = presentValue;  			else  				NewTextBox.Text = option.defaultValue;  			NewTextBox.Location = new Point (260' location);  			NewTextBox.Size = new Size (200' 17);  			NewTextBox.Name = kvp.Key;  			NewTextBox.AccessibleDescription = tooltip;  			//add all the controls  			panel1.Controls.Add (NewLinkLabel);  			panel1.Controls.Add (NewTextBox);  			Program.ToolTip.SetText (NewTextBox' tooltip);  		}  		//lower next entry position -30 points  		location = location + 30;  	}  	Icon = ZklResources.ZkIcon;  } catch (Exception ex) {  	ErrorHandling.HandleException (ex' false);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: foreach (var kvp in settingsOptions)//ref: http://www.dotnetperls.com/dictionary' http://stackoverflow.com/questions/10556205/deserializing-a-json-with-variable-name-value-pairs-into-object-in-c-sharp   {  	var option = kvp.Value;  	//Create links and label.  	var NewLinkLabel = new LinkLabel ();  	NewLinkLabel.Text = kvp.Key;  	var cPlusPlusFile = option.declarationFile;  	var truncatedCPlusPlusPath = Regex.Match (cPlusPlusFile' @"rts/([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*)?"' RegexOptions.IgnoreCase);  	//Reference: http://www.dotnetperls.com/regex-match' http://weblogs.asp.net/farazshahkhan/archive/2008/08/09/regex-to-find-url-within-text-and-make-them-as-link.aspx  	var hyperLink = "https://github.com/spring/spring/blob/develop/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	var link = new LinkLabel.Link ();  	//Reference: http://www.dotnetperls.com/linklabel  	link.LinkData = hyperLink;  	NewLinkLabel.LinkClicked += LinkedLabelClicked;  	NewLinkLabel.Links.Add (0' 250' link.LinkData);  	//Reference: http://www.c-sharpcorner.com/uploadfile/mahesh/linklabel-in-C-Sharp/  	NewLinkLabel.Location = new Point (10' location);  	NewLinkLabel.Size = new Size (250' 17);  	NewLinkLabel.AccessibleDescription = truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine;  	Program.ToolTip.SetText (NewLinkLabel' "Hyperlink: Spring/" + truncatedCPlusPlusPath.Groups [0].Value + "#L" + settingsOptions [kvp.Key].declarationLine);  	// Set up/customize the ToolTip text for the Button and Checkbox.  	var tooltip = "";  	if (option.description != null)  		tooltip += string.Format ("Description: {0}\n"' option.description);  	if (option.readOnly == 1)  		tooltip += string.Format ("ReadOnly: True\n");  	if (option.defaultValue != null)  		tooltip += string.Format ("DefaultValue: {0}\n"' option.defaultValue);  	if (option.safemodeValue != null)  		tooltip += string.Format ("SafeModeValue: {0}\n"' option.safemodeValue);  	if (option.minimumValue != null)  		tooltip += string.Format ("MinimumValue: {0}\n"' option.minimumValue);  	if (option.maximumValue != null)  		tooltip += string.Format ("MaximumValue: {0}\n"' option.maximumValue);  	if (option.type == "bool")//customized tooltip for boolean entry  	 {  		//Create checkbox  		var NewCheckBox = new CheckBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			//retrieve value from Springsetting.cfg  			NewCheckBox.Checked = presentValue == "1";  		else  			NewCheckBox.Checked = option.defaultValue == "1";  		NewCheckBox.Location = new Point (260' location);  		NewCheckBox.Size = new Size (200' 17);  		NewCheckBox.Name = kvp.Key;  		NewCheckBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewCheckBox);  		Program.ToolTip.SetText (NewCheckBox' tooltip);  	} else {  		//Create textbox  		var NewTextBox = new TextBox ();  		var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  		if (presentValue != null)  			NewTextBox.Text = presentValue;  		else  			NewTextBox.Text = option.defaultValue;  		NewTextBox.Location = new Point (260' location);  		NewTextBox.Size = new Size (200' 17);  		NewTextBox.Name = kvp.Key;  		NewTextBox.AccessibleDescription = tooltip;  		//add all the controls  		panel1.Controls.Add (NewLinkLabel);  		panel1.Controls.Add (NewTextBox);  		Program.ToolTip.SetText (NewTextBox' tooltip);  	}  	//lower next entry position -30 points  	location = location + 30;  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewLinkLabel.Links.Add (0' 250' link.LinkData);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewLinkLabel.Location = new Point (10' location);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewLinkLabel.Size = new Size (250' 17);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewLinkLabel.Size = new Size (250' 17);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: if (option.type == "bool")//customized tooltip for boolean entry   {  	//Create checkbox  	var NewCheckBox = new CheckBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		//retrieve value from Springsetting.cfg  		NewCheckBox.Checked = presentValue == "1";  	else  		NewCheckBox.Checked = option.defaultValue == "1";  	NewCheckBox.Location = new Point (260' location);  	NewCheckBox.Size = new Size (200' 17);  	NewCheckBox.Name = kvp.Key;  	NewCheckBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewCheckBox);  	Program.ToolTip.SetText (NewCheckBox' tooltip);  } else {  	//Create textbox  	var NewTextBox = new TextBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		NewTextBox.Text = presentValue;  	else  		NewTextBox.Text = option.defaultValue;  	NewTextBox.Location = new Point (260' location);  	NewTextBox.Size = new Size (200' 17);  	NewTextBox.Name = kvp.Key;  	NewTextBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewTextBox);  	Program.ToolTip.SetText (NewTextBox' tooltip);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: if (option.type == "bool")//customized tooltip for boolean entry   {  	//Create checkbox  	var NewCheckBox = new CheckBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		//retrieve value from Springsetting.cfg  		NewCheckBox.Checked = presentValue == "1";  	else  		NewCheckBox.Checked = option.defaultValue == "1";  	NewCheckBox.Location = new Point (260' location);  	NewCheckBox.Size = new Size (200' 17);  	NewCheckBox.Name = kvp.Key;  	NewCheckBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewCheckBox);  	Program.ToolTip.SetText (NewCheckBox' tooltip);  } else {  	//Create textbox  	var NewTextBox = new TextBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		NewTextBox.Text = presentValue;  	else  		NewTextBox.Text = option.defaultValue;  	NewTextBox.Location = new Point (260' location);  	NewTextBox.Size = new Size (200' 17);  	NewTextBox.Name = kvp.Key;  	NewTextBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewTextBox);  	Program.ToolTip.SetText (NewTextBox' tooltip);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: if (option.type == "bool")//customized tooltip for boolean entry   {  	//Create checkbox  	var NewCheckBox = new CheckBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		//retrieve value from Springsetting.cfg  		NewCheckBox.Checked = presentValue == "1";  	else  		NewCheckBox.Checked = option.defaultValue == "1";  	NewCheckBox.Location = new Point (260' location);  	NewCheckBox.Size = new Size (200' 17);  	NewCheckBox.Name = kvp.Key;  	NewCheckBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewCheckBox);  	Program.ToolTip.SetText (NewCheckBox' tooltip);  } else {  	//Create textbox  	var NewTextBox = new TextBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		NewTextBox.Text = presentValue;  	else  		NewTextBox.Text = option.defaultValue;  	NewTextBox.Location = new Point (260' location);  	NewTextBox.Size = new Size (200' 17);  	NewTextBox.Name = kvp.Key;  	NewTextBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewTextBox);  	Program.ToolTip.SetText (NewTextBox' tooltip);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: if (option.type == "bool")//customized tooltip for boolean entry   {  	//Create checkbox  	var NewCheckBox = new CheckBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		//retrieve value from Springsetting.cfg  		NewCheckBox.Checked = presentValue == "1";  	else  		NewCheckBox.Checked = option.defaultValue == "1";  	NewCheckBox.Location = new Point (260' location);  	NewCheckBox.Size = new Size (200' 17);  	NewCheckBox.Name = kvp.Key;  	NewCheckBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewCheckBox);  	Program.ToolTip.SetText (NewCheckBox' tooltip);  } else {  	//Create textbox  	var NewTextBox = new TextBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		NewTextBox.Text = presentValue;  	else  		NewTextBox.Text = option.defaultValue;  	NewTextBox.Location = new Point (260' location);  	NewTextBox.Size = new Size (200' 17);  	NewTextBox.Name = kvp.Key;  	NewTextBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewTextBox);  	Program.ToolTip.SetText (NewTextBox' tooltip);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: if (option.type == "bool")//customized tooltip for boolean entry   {  	//Create checkbox  	var NewCheckBox = new CheckBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		//retrieve value from Springsetting.cfg  		NewCheckBox.Checked = presentValue == "1";  	else  		NewCheckBox.Checked = option.defaultValue == "1";  	NewCheckBox.Location = new Point (260' location);  	NewCheckBox.Size = new Size (200' 17);  	NewCheckBox.Name = kvp.Key;  	NewCheckBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewCheckBox);  	Program.ToolTip.SetText (NewCheckBox' tooltip);  } else {  	//Create textbox  	var NewTextBox = new TextBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		NewTextBox.Text = presentValue;  	else  		NewTextBox.Text = option.defaultValue;  	NewTextBox.Location = new Point (260' location);  	NewTextBox.Size = new Size (200' 17);  	NewTextBox.Name = kvp.Key;  	NewTextBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewTextBox);  	Program.ToolTip.SetText (NewTextBox' tooltip);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: if (option.type == "bool")//customized tooltip for boolean entry   {  	//Create checkbox  	var NewCheckBox = new CheckBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		//retrieve value from Springsetting.cfg  		NewCheckBox.Checked = presentValue == "1";  	else  		NewCheckBox.Checked = option.defaultValue == "1";  	NewCheckBox.Location = new Point (260' location);  	NewCheckBox.Size = new Size (200' 17);  	NewCheckBox.Name = kvp.Key;  	NewCheckBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewCheckBox);  	Program.ToolTip.SetText (NewCheckBox' tooltip);  } else {  	//Create textbox  	var NewTextBox = new TextBox ();  	var presentValue = Program.EngineConfigurator.GetConfigValue (kvp.Key);  	if (presentValue != null)  		NewTextBox.Text = presentValue;  	else  		NewTextBox.Text = option.defaultValue;  	NewTextBox.Location = new Point (260' location);  	NewTextBox.Size = new Size (200' 17);  	NewTextBox.Name = kvp.Key;  	NewTextBox.AccessibleDescription = tooltip;  	//add all the controls  	panel1.Controls.Add (NewLinkLabel);  	panel1.Controls.Add (NewTextBox);  	Program.ToolTip.SetText (NewTextBox' tooltip);  }  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewCheckBox.Location = new Point (260' location);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewCheckBox.Size = new Size (200' 17);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewCheckBox.Size = new Size (200' 17);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewTextBox.Location = new Point (260' location);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewTextBox.Size = new Size (200' 17);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: NewTextBox.Size = new Size (200' 17);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,SpringsettingForm_Load,The following statement contains a magic number: location = location + 30;  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (0' 20);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (498' 504);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (498' 504);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Location = new System.Drawing.Point (0' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.MaximumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.MaximumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.MinimumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.MinimumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (58' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (58' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.MaximumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.MaximumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.MinimumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.MinimumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.Location = new System.Drawing.Point (117' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.Location = new System.Drawing.Point (117' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.MaximumSize = new System.Drawing.Size (56' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.MaximumSize = new System.Drawing.Size (56' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.MinimumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.MinimumSize = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.Size = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.Size = new System.Drawing.Size (58' 41);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.engineDefaultButton.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Location = new System.Drawing.Point (331' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Location = new System.Drawing.Point (331' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Padding = new System.Windows.Forms.Padding (0' 12' 8' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Padding = new System.Windows.Forms.Padding (0' 12' 8' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Size = new System.Drawing.Size (86' 25);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.Size = new System.Drawing.Size (86' 25);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.doneLabel.TabIndex = 4;  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Location = new System.Drawing.Point (299' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Location = new System.Drawing.Point (299' 526);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Padding = new System.Windows.Forms.Padding (0' 12' 8' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Padding = new System.Windows.Forms.Padding (0' 12' 8' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Size = new System.Drawing.Size (118' 25);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.Size = new System.Drawing.Size (118' 25);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.loadDefaultDone.TabIndex = 5;  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlighttextBox.Location = new System.Drawing.Point (101' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlighttextBox.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlighttextBox.Size = new System.Drawing.Size (142' 20);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlighttextBox.Size = new System.Drawing.Size (142' 20);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlightlabel.Location = new System.Drawing.Point (9' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlightlabel.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlightlabel.Margin = new System.Windows.Forms.Padding (2' 0' 2' 0);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlightlabel.Size = new System.Drawing.Size (88' 13);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlightlabel.Size = new System.Drawing.Size (88' 13);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.highlightlabel.TabIndex = 6;  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (498' 567);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (498' 567);  
Magic Number,ZeroKLobby.MicroLobby,SpringsettingForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SpringsettingForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.MicroLobby,ContextMenus,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ContextMenus.cs,GetExistingTeams,The following statement contains a magic number: freeAllyTeam = Enumerable.Range (0' 100).First (allyTeam => !existingTeams.Contains (allyTeam));  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (16' 24);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (16' 24);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (85' 17);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (85' 17);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (16' 50);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (16' 50);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (133' 17);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (133' 17);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.battleTitleBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(30))))' ((int)(((byte)(40)))));  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.battleTitleBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(30))))' ((int)(((byte)(40)))));  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.battleTitleBox.Location = new System.Drawing.Point (169' 19);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.battleTitleBox.Location = new System.Drawing.Point (169' 19);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.battleTitleBox.Size = new System.Drawing.Size (299' 24);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.battleTitleBox.Size = new System.Drawing.Size (299' 24);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.battleTitleBox.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.passwordBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(30))))' ((int)(((byte)(40)))));  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.passwordBox.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(30))))' ((int)(((byte)(40)))));  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.passwordBox.Location = new System.Drawing.Point (169' 45);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.passwordBox.Location = new System.Drawing.Point (169' 45);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.passwordBox.Size = new System.Drawing.Size (299' 24);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.passwordBox.Size = new System.Drawing.Size (299' 24);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.passwordBox.TabIndex = 4;  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (87' 120);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (87' 120);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (115' 43);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (115' 43);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 8;  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (323' 120);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (323' 120);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (109' 41);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (109' 41);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 9;  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (16' 80);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (16' 80);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (77' 17);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (77' 17);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 10;  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cbType.Location = new System.Drawing.Point (169' 75);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cbType.Location = new System.Drawing.Point (169' 75);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cbType.Size = new System.Drawing.Size (299' 26);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cbType.Size = new System.Drawing.Size (299' 26);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.cbType.TabIndex = 11;  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (532' 175);  
Magic Number,ZeroKLobby.MicroLobby,HostDialog,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HostDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (532' 175);  
Magic Number,ZeroKLobby.MicroLobby,ServerTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ServerTab.cs,ServerTab,The following statement contains a magic number: textBox.IRCForeColor = 14;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,button2_Click,The following statement contains a magic number: Program.EngineConfigurator.Configure (true' 2);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,button3_Click,The following statement contains a magic number: Program.EngineConfigurator.Configure (true' 3);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,button4_Click,The following statement contains a magic number: Program.EngineConfigurator.Configure (true' 4);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (825' 692);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (825' 692);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 15;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.splitContainerAtMid.Size = new System.Drawing.Size (825' 692);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.splitContainerAtMid.Size = new System.Drawing.Size (825' 692);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.splitContainerAtMid.SplitterDistance = 265;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnServerSocket.Location = new System.Drawing.Point (538' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnServerSocket.Location = new System.Drawing.Point (538' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnServerSocket.Size = new System.Drawing.Size (118' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnServerSocket.Size = new System.Drawing.Size (118' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnServerSocket.TabIndex = 42;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnCustom.Location = new System.Drawing.Point (586' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnCustom.Location = new System.Drawing.Point (586' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnCustom.Size = new System.Drawing.Size (108' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnCustom.Size = new System.Drawing.Size (108' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnCustom.TabIndex = 39;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBenchmarker.Location = new System.Drawing.Point (385' 218);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBenchmarker.Location = new System.Drawing.Point (385' 218);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBenchmarker.Size = new System.Drawing.Size (108' 25);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBenchmarker.Size = new System.Drawing.Size (108' 25);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBenchmarker.TabIndex = 38;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (26' 21);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (26' 21);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (99' 18);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (99' 18);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 23;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDisplay.Location = new System.Drawing.Point (32' 108);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDisplay.Location = new System.Drawing.Point (32' 108);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDisplay.Size = new System.Drawing.Size (107' 30);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDisplay.Size = new System.Drawing.Size (107' 30);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDisplay.TabIndex = 13;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbSafeMode.Location = new System.Drawing.Point (617' 75);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbSafeMode.Location = new System.Drawing.Point (617' 75);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbSafeMode.Size = new System.Drawing.Size (99' 22);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbSafeMode.Size = new System.Drawing.Size (99' 22);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbSafeMode.TabIndex = 36;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.developmentButton.Location = new System.Drawing.Point (135' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.developmentButton.Location = new System.Drawing.Point (135' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.developmentButton.Size = new System.Drawing.Size (103' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.developmentButton.Size = new System.Drawing.Size (103' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.developmentButton.TabIndex = 17;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDefaults.Location = new System.Drawing.Point (257' 108);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDefaults.Location = new System.Drawing.Point (257' 108);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDefaults.Size = new System.Drawing.Size (128' 30);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDefaults.Size = new System.Drawing.Size (128' 30);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnDefaults.TabIndex = 35;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.helpButton.Location = new System.Drawing.Point (32' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.helpButton.Location = new System.Drawing.Point (32' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.helpButton.Size = new System.Drawing.Size (89' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.helpButton.Size = new System.Drawing.Size (89' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.helpButton.TabIndex = 15;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRestart.Location = new System.Drawing.Point (86' 218);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRestart.Location = new System.Drawing.Point (86' 218);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRestart.Size = new System.Drawing.Size (151' 25);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRestart.Size = new System.Drawing.Size (151' 25);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRestart.TabIndex = 34;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.lobbyLogButton.Location = new System.Drawing.Point (257' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.lobbyLogButton.Location = new System.Drawing.Point (257' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.lobbyLogButton.Size = new System.Drawing.Size (124' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.lobbyLogButton.Size = new System.Drawing.Size (124' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.lobbyLogButton.TabIndex = 18;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.gameLogButton.Location = new System.Drawing.Point (397' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.gameLogButton.Location = new System.Drawing.Point (397' 163);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.gameLogButton.Size = new System.Drawing.Size (124' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.gameLogButton.Size = new System.Drawing.Size (124' 32);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.gameLogButton.TabIndex = 40;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRapid.Location = new System.Drawing.Point (274' 218);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRapid.Location = new System.Drawing.Point (274' 218);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRapid.Size = new System.Drawing.Size (96' 25);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRapid.Size = new System.Drawing.Size (96' 25);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnRapid.TabIndex = 33;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (246' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (246' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 19;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (44' 223);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (44' 223);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (50' 18);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (50' 18);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 32;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point (328' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point (328' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 20;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (154' 76);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (154' 76);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (118' 18);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (118' 18);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 30;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point (409' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point (409' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 21;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResy.Location = new System.Drawing.Point (401' 71);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResy.Location = new System.Drawing.Point (401' 71);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResy.Size = new System.Drawing.Size (62' 24);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResy.Size = new System.Drawing.Size (62' 24);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResy.TabIndex = 29;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point (490' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point (490' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button4.TabIndex = 22;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResx.Location = new System.Drawing.Point (332' 71);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResx.Location = new System.Drawing.Point (332' 71);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResx.Size = new System.Drawing.Size (63' 24);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResx.Size = new System.Drawing.Size (63' 24);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.tbResx.TabIndex = 28;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point (165' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point (165' 12);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size (75' 35);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.button5.TabIndex = 24;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbWindowed.Location = new System.Drawing.Point (30' 71);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbWindowed.Location = new System.Drawing.Point (30' 71);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbWindowed.Size = new System.Drawing.Size (106' 26);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbWindowed.Size = new System.Drawing.Size (106' 26);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbWindowed.TabIndex = 27;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Location = new System.Drawing.Point (397' 108);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Location = new System.Drawing.Point (397' 108);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Size = new System.Drawing.Size (137' 30);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Size = new System.Drawing.Size (137' 30);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.TabIndex = 25;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbHwCursor.Location = new System.Drawing.Point (486' 75);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbHwCursor.Location = new System.Drawing.Point (486' 75);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbHwCursor.Size = new System.Drawing.Size (138' 22);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbHwCursor.Size = new System.Drawing.Size (138' 22);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.cbHwCursor.TabIndex = 26;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.MinimumSize = new System.Drawing.Size (300' 150);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.MinimumSize = new System.Drawing.Size (300' 150);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (821' 419);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (821' 419);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 12;  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Location = new System.Drawing.Point (3' 20);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Location = new System.Drawing.Point (3' 20);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Size = new System.Drawing.Size (815' 396);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Size = new System.Drawing.Size (815' 396);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (825' 692);  
Magic Number,ZeroKLobby.MicroLobby,SettingsTab,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SettingsTab.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (825' 692);  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,TextImage,The following statement contains a magic number: bitmaps = new Image[9];  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImage,The following statement contains a magic number: if (Program.TasClient.ExistingUsers.TryGetValue (userName' out user)) {  	if (userName == Program.TasClient.UserName)  		return bitmaps [self];  	if (user.IsBot)  		return ZklResources.robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return ZklResources.friend;  	if (userName == Program.TasClient.MyBattle.FounderName)  		return ZklResources.self_police;  	if (user.IsAdmin)  		return ZklResources.police;  	if (user.EffectiveMmElo >= 1800)  		return ZklResources.napoleon;  	if (user.EffectiveMmElo >= 1600)  		return ZklResources.soldier;  	if (user.EffectiveMmElo < 1400)  		return ZklResources.smurf;  } else  	return userName == GlobalConst.NightwatchName ? ZklResources.robot : ZklResources.grayuser;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImage,The following statement contains a magic number: if (Program.TasClient.ExistingUsers.TryGetValue (userName' out user)) {  	if (userName == Program.TasClient.UserName)  		return bitmaps [self];  	if (user.IsBot)  		return ZklResources.robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return ZklResources.friend;  	if (userName == Program.TasClient.MyBattle.FounderName)  		return ZklResources.self_police;  	if (user.IsAdmin)  		return ZklResources.police;  	if (user.EffectiveMmElo >= 1800)  		return ZklResources.napoleon;  	if (user.EffectiveMmElo >= 1600)  		return ZklResources.soldier;  	if (user.EffectiveMmElo < 1400)  		return ZklResources.smurf;  } else  	return userName == GlobalConst.NightwatchName ? ZklResources.robot : ZklResources.grayuser;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImage,The following statement contains a magic number: if (Program.TasClient.ExistingUsers.TryGetValue (userName' out user)) {  	if (userName == Program.TasClient.UserName)  		return bitmaps [self];  	if (user.IsBot)  		return ZklResources.robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return ZklResources.friend;  	if (userName == Program.TasClient.MyBattle.FounderName)  		return ZklResources.self_police;  	if (user.IsAdmin)  		return ZklResources.police;  	if (user.EffectiveMmElo >= 1800)  		return ZklResources.napoleon;  	if (user.EffectiveMmElo >= 1600)  		return ZklResources.soldier;  	if (user.EffectiveMmElo < 1400)  		return ZklResources.smurf;  } else  	return userName == GlobalConst.NightwatchName ? ZklResources.robot : ZklResources.grayuser;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImage,The following statement contains a magic number: if (user.EffectiveMmElo >= 1800)  	return ZklResources.napoleon;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImage,The following statement contains a magic number: if (user.EffectiveMmElo >= 1600)  	return ZklResources.soldier;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImage,The following statement contains a magic number: if (user.EffectiveMmElo < 1400)  	return ZklResources.smurf;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageRaw,The following statement contains a magic number: if (user != null) {  	if (user.IsBot)  		return ZklResources.robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return ZklResources.friend;  	if (user.IsAdmin)  		return ZklResources.police;  	if (user.EffectiveMmElo >= 1800)  		return ZklResources.napoleon;  	if (user.EffectiveMmElo >= 1600)  		return ZklResources.soldier;  	if (user.EffectiveMmElo < 1400)  		return ZklResources.smurf;  }  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageRaw,The following statement contains a magic number: if (user != null) {  	if (user.IsBot)  		return ZklResources.robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return ZklResources.friend;  	if (user.IsAdmin)  		return ZklResources.police;  	if (user.EffectiveMmElo >= 1800)  		return ZklResources.napoleon;  	if (user.EffectiveMmElo >= 1600)  		return ZklResources.soldier;  	if (user.EffectiveMmElo < 1400)  		return ZklResources.smurf;  }  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageRaw,The following statement contains a magic number: if (user != null) {  	if (user.IsBot)  		return ZklResources.robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return ZklResources.friend;  	if (user.IsAdmin)  		return ZklResources.police;  	if (user.EffectiveMmElo >= 1800)  		return ZklResources.napoleon;  	if (user.EffectiveMmElo >= 1600)  		return ZklResources.soldier;  	if (user.EffectiveMmElo < 1400)  		return ZklResources.smurf;  }  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageRaw,The following statement contains a magic number: if (user.EffectiveMmElo >= 1800)  	return ZklResources.napoleon;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageRaw,The following statement contains a magic number: if (user.EffectiveMmElo >= 1600)  	return ZklResources.soldier;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageRaw,The following statement contains a magic number: if (user.EffectiveMmElo < 1400)  	return ZklResources.smurf;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageCode,The following statement contains a magic number: if (Program.TasClient.ExistingUsers.TryGetValue (userName' out user)) {  	if (userName == Program.TasClient.UserName)  		return Self;  	if (user.IsBot)  		return Robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return Friend;  	if (user.IsAdmin)  		return Police;  	if (user.EffectiveMmElo > 1800)  		return Napoleon;  	if (user.EffectiveMmElo > 1600)  		return Soldier;  	if (user.EffectiveMmElo < 1400)  		return Smurf;  	return User;  } else  	return userName == GlobalConst.NightwatchName ? Robot : GrayUser;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageCode,The following statement contains a magic number: if (Program.TasClient.ExistingUsers.TryGetValue (userName' out user)) {  	if (userName == Program.TasClient.UserName)  		return Self;  	if (user.IsBot)  		return Robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return Friend;  	if (user.IsAdmin)  		return Police;  	if (user.EffectiveMmElo > 1800)  		return Napoleon;  	if (user.EffectiveMmElo > 1600)  		return Soldier;  	if (user.EffectiveMmElo < 1400)  		return Smurf;  	return User;  } else  	return userName == GlobalConst.NightwatchName ? Robot : GrayUser;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageCode,The following statement contains a magic number: if (Program.TasClient.ExistingUsers.TryGetValue (userName' out user)) {  	if (userName == Program.TasClient.UserName)  		return Self;  	if (user.IsBot)  		return Robot;  	if (Program.TasClient.Friends.Contains (user.Name))  		return Friend;  	if (user.IsAdmin)  		return Police;  	if (user.EffectiveMmElo > 1800)  		return Napoleon;  	if (user.EffectiveMmElo > 1600)  		return Soldier;  	if (user.EffectiveMmElo < 1400)  		return Smurf;  	return User;  } else  	return userName == GlobalConst.NightwatchName ? Robot : GrayUser;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageCode,The following statement contains a magic number: if (user.EffectiveMmElo > 1800)  	return Napoleon;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageCode,The following statement contains a magic number: if (user.EffectiveMmElo > 1600)  	return Soldier;  
Magic Number,ZeroKLobby.MicroLobby,TextImage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextImage.cs,GetUserImageCode,The following statement contains a magic number: if (user.EffectiveMmElo < 1400)  	return Smurf;  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,ModOptionsControl,The following statement contains a magic number: tooltip.AutoPopDelay = 10000;  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,ModOptionsControl,The following statement contains a magic number: tooltip.BackColor = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,ModOptionsControl,The following statement contains a magic number: tooltip.BackColor = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,ModOptionsControl,The following statement contains a magic number: tooltip.BackColor = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: try {  	options = mod.Options.ToDictionary (option => option.Key);  	var sections = mod.Options.GroupBy (option => option.Section).OrderBy (group => group.Key).ToArray ();  	var sectionNames = mod.Options.Where (option => option.Type == OptionType.Section).ToDictionary (option => option.Key' option => option.Name);  	optionControls = new Dictionary<string' Control> ();  	const int rowHeight = 30;  	foreach (var section in sections) {  		if (!section.Any ())  			continue;  		// set the section title  		string sectionName;  		if (String.IsNullOrEmpty (section.Key))  			sectionName = "Other";  		else if (!sectionNames.TryGetValue (section.Key' out sectionName))  			sectionName = section.Key.ToLower ();  		var tabPage = new TabPage {  			Text = sectionName'  			Name = sectionName'  			AutoScroll = true  		};  		tabControl.TabPages.Add (tabPage);  		var sectionY = 20;  		foreach (var option in section) {  			Control control = null;  			switch (option.Type) {  			case OptionType.Bool:  				control = new CheckBox {  					Checked = option.Default != "0"  				};  				((CheckBox)control).CheckedChanged += proposedChanged;  				break;  			case OptionType.Number:  				control = new NumericUpDown {  					Minimum = (decimal)option.Min'  					Maximum = (decimal)option.Max'  					Increment = (decimal)option.Step'  					Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  					DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  				};  				((NumericUpDown)control).ValueChanged += proposedChanged;  				break;  			case OptionType.String:  				control = new TextBox {  					Text = option.Default  				};  				control.TextChanged += proposedChanged;  				break;  			case OptionType.List:  				var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  				var box = new ComboBox {  					DropDownStyle = ComboBoxStyle.DropDownList  				};  				box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  				if (optionIndex > -1)  					box.SelectedIndex = optionIndex;  				control = box;  				box.SelectedIndexChanged += proposedChanged;  				break;  			}  			if (control != null) {  				var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  				tooltip.SetToolTip (control' tooltipText);  				var label = new Label {  					Text = option.Name'  					Location = new Point (3' sectionY)'  					Width = 145  				};  				tooltip.SetToolTip (label' tooltipText);  				tabPage.Controls.Add (label);  				control.Location = new Point (150' sectionY);  				optionControls [option.Key] = control;  				tabPage.Controls.Add (control);  				sectionY += rowHeight;  			}  		}  	}  } catch (Exception e) {  	Trace.TraceError ("Error in creating mod options controls: " + e);  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: try {  	options = mod.Options.ToDictionary (option => option.Key);  	var sections = mod.Options.GroupBy (option => option.Section).OrderBy (group => group.Key).ToArray ();  	var sectionNames = mod.Options.Where (option => option.Type == OptionType.Section).ToDictionary (option => option.Key' option => option.Name);  	optionControls = new Dictionary<string' Control> ();  	const int rowHeight = 30;  	foreach (var section in sections) {  		if (!section.Any ())  			continue;  		// set the section title  		string sectionName;  		if (String.IsNullOrEmpty (section.Key))  			sectionName = "Other";  		else if (!sectionNames.TryGetValue (section.Key' out sectionName))  			sectionName = section.Key.ToLower ();  		var tabPage = new TabPage {  			Text = sectionName'  			Name = sectionName'  			AutoScroll = true  		};  		tabControl.TabPages.Add (tabPage);  		var sectionY = 20;  		foreach (var option in section) {  			Control control = null;  			switch (option.Type) {  			case OptionType.Bool:  				control = new CheckBox {  					Checked = option.Default != "0"  				};  				((CheckBox)control).CheckedChanged += proposedChanged;  				break;  			case OptionType.Number:  				control = new NumericUpDown {  					Minimum = (decimal)option.Min'  					Maximum = (decimal)option.Max'  					Increment = (decimal)option.Step'  					Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  					DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  				};  				((NumericUpDown)control).ValueChanged += proposedChanged;  				break;  			case OptionType.String:  				control = new TextBox {  					Text = option.Default  				};  				control.TextChanged += proposedChanged;  				break;  			case OptionType.List:  				var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  				var box = new ComboBox {  					DropDownStyle = ComboBoxStyle.DropDownList  				};  				box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  				if (optionIndex > -1)  					box.SelectedIndex = optionIndex;  				control = box;  				box.SelectedIndexChanged += proposedChanged;  				break;  			}  			if (control != null) {  				var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  				tooltip.SetToolTip (control' tooltipText);  				var label = new Label {  					Text = option.Name'  					Location = new Point (3' sectionY)'  					Width = 145  				};  				tooltip.SetToolTip (label' tooltipText);  				tabPage.Controls.Add (label);  				control.Location = new Point (150' sectionY);  				optionControls [option.Key] = control;  				tabPage.Controls.Add (control);  				sectionY += rowHeight;  			}  		}  	}  } catch (Exception e) {  	Trace.TraceError ("Error in creating mod options controls: " + e);  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: try {  	options = mod.Options.ToDictionary (option => option.Key);  	var sections = mod.Options.GroupBy (option => option.Section).OrderBy (group => group.Key).ToArray ();  	var sectionNames = mod.Options.Where (option => option.Type == OptionType.Section).ToDictionary (option => option.Key' option => option.Name);  	optionControls = new Dictionary<string' Control> ();  	const int rowHeight = 30;  	foreach (var section in sections) {  		if (!section.Any ())  			continue;  		// set the section title  		string sectionName;  		if (String.IsNullOrEmpty (section.Key))  			sectionName = "Other";  		else if (!sectionNames.TryGetValue (section.Key' out sectionName))  			sectionName = section.Key.ToLower ();  		var tabPage = new TabPage {  			Text = sectionName'  			Name = sectionName'  			AutoScroll = true  		};  		tabControl.TabPages.Add (tabPage);  		var sectionY = 20;  		foreach (var option in section) {  			Control control = null;  			switch (option.Type) {  			case OptionType.Bool:  				control = new CheckBox {  					Checked = option.Default != "0"  				};  				((CheckBox)control).CheckedChanged += proposedChanged;  				break;  			case OptionType.Number:  				control = new NumericUpDown {  					Minimum = (decimal)option.Min'  					Maximum = (decimal)option.Max'  					Increment = (decimal)option.Step'  					Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  					DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  				};  				((NumericUpDown)control).ValueChanged += proposedChanged;  				break;  			case OptionType.String:  				control = new TextBox {  					Text = option.Default  				};  				control.TextChanged += proposedChanged;  				break;  			case OptionType.List:  				var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  				var box = new ComboBox {  					DropDownStyle = ComboBoxStyle.DropDownList  				};  				box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  				if (optionIndex > -1)  					box.SelectedIndex = optionIndex;  				control = box;  				box.SelectedIndexChanged += proposedChanged;  				break;  			}  			if (control != null) {  				var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  				tooltip.SetToolTip (control' tooltipText);  				var label = new Label {  					Text = option.Name'  					Location = new Point (3' sectionY)'  					Width = 145  				};  				tooltip.SetToolTip (label' tooltipText);  				tabPage.Controls.Add (label);  				control.Location = new Point (150' sectionY);  				optionControls [option.Key] = control;  				tabPage.Controls.Add (control);  				sectionY += rowHeight;  			}  		}  	}  } catch (Exception e) {  	Trace.TraceError ("Error in creating mod options controls: " + e);  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: try {  	options = mod.Options.ToDictionary (option => option.Key);  	var sections = mod.Options.GroupBy (option => option.Section).OrderBy (group => group.Key).ToArray ();  	var sectionNames = mod.Options.Where (option => option.Type == OptionType.Section).ToDictionary (option => option.Key' option => option.Name);  	optionControls = new Dictionary<string' Control> ();  	const int rowHeight = 30;  	foreach (var section in sections) {  		if (!section.Any ())  			continue;  		// set the section title  		string sectionName;  		if (String.IsNullOrEmpty (section.Key))  			sectionName = "Other";  		else if (!sectionNames.TryGetValue (section.Key' out sectionName))  			sectionName = section.Key.ToLower ();  		var tabPage = new TabPage {  			Text = sectionName'  			Name = sectionName'  			AutoScroll = true  		};  		tabControl.TabPages.Add (tabPage);  		var sectionY = 20;  		foreach (var option in section) {  			Control control = null;  			switch (option.Type) {  			case OptionType.Bool:  				control = new CheckBox {  					Checked = option.Default != "0"  				};  				((CheckBox)control).CheckedChanged += proposedChanged;  				break;  			case OptionType.Number:  				control = new NumericUpDown {  					Minimum = (decimal)option.Min'  					Maximum = (decimal)option.Max'  					Increment = (decimal)option.Step'  					Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  					DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  				};  				((NumericUpDown)control).ValueChanged += proposedChanged;  				break;  			case OptionType.String:  				control = new TextBox {  					Text = option.Default  				};  				control.TextChanged += proposedChanged;  				break;  			case OptionType.List:  				var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  				var box = new ComboBox {  					DropDownStyle = ComboBoxStyle.DropDownList  				};  				box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  				if (optionIndex > -1)  					box.SelectedIndex = optionIndex;  				control = box;  				box.SelectedIndexChanged += proposedChanged;  				break;  			}  			if (control != null) {  				var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  				tooltip.SetToolTip (control' tooltipText);  				var label = new Label {  					Text = option.Name'  					Location = new Point (3' sectionY)'  					Width = 145  				};  				tooltip.SetToolTip (label' tooltipText);  				tabPage.Controls.Add (label);  				control.Location = new Point (150' sectionY);  				optionControls [option.Key] = control;  				tabPage.Controls.Add (control);  				sectionY += rowHeight;  			}  		}  	}  } catch (Exception e) {  	Trace.TraceError ("Error in creating mod options controls: " + e);  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: try {  	options = mod.Options.ToDictionary (option => option.Key);  	var sections = mod.Options.GroupBy (option => option.Section).OrderBy (group => group.Key).ToArray ();  	var sectionNames = mod.Options.Where (option => option.Type == OptionType.Section).ToDictionary (option => option.Key' option => option.Name);  	optionControls = new Dictionary<string' Control> ();  	const int rowHeight = 30;  	foreach (var section in sections) {  		if (!section.Any ())  			continue;  		// set the section title  		string sectionName;  		if (String.IsNullOrEmpty (section.Key))  			sectionName = "Other";  		else if (!sectionNames.TryGetValue (section.Key' out sectionName))  			sectionName = section.Key.ToLower ();  		var tabPage = new TabPage {  			Text = sectionName'  			Name = sectionName'  			AutoScroll = true  		};  		tabControl.TabPages.Add (tabPage);  		var sectionY = 20;  		foreach (var option in section) {  			Control control = null;  			switch (option.Type) {  			case OptionType.Bool:  				control = new CheckBox {  					Checked = option.Default != "0"  				};  				((CheckBox)control).CheckedChanged += proposedChanged;  				break;  			case OptionType.Number:  				control = new NumericUpDown {  					Minimum = (decimal)option.Min'  					Maximum = (decimal)option.Max'  					Increment = (decimal)option.Step'  					Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  					DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  				};  				((NumericUpDown)control).ValueChanged += proposedChanged;  				break;  			case OptionType.String:  				control = new TextBox {  					Text = option.Default  				};  				control.TextChanged += proposedChanged;  				break;  			case OptionType.List:  				var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  				var box = new ComboBox {  					DropDownStyle = ComboBoxStyle.DropDownList  				};  				box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  				if (optionIndex > -1)  					box.SelectedIndex = optionIndex;  				control = box;  				box.SelectedIndexChanged += proposedChanged;  				break;  			}  			if (control != null) {  				var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  				tooltip.SetToolTip (control' tooltipText);  				var label = new Label {  					Text = option.Name'  					Location = new Point (3' sectionY)'  					Width = 145  				};  				tooltip.SetToolTip (label' tooltipText);  				tabPage.Controls.Add (label);  				control.Location = new Point (150' sectionY);  				optionControls [option.Key] = control;  				tabPage.Controls.Add (control);  				sectionY += rowHeight;  			}  		}  	}  } catch (Exception e) {  	Trace.TraceError ("Error in creating mod options controls: " + e);  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: foreach (var section in sections) {  	if (!section.Any ())  		continue;  	// set the section title  	string sectionName;  	if (String.IsNullOrEmpty (section.Key))  		sectionName = "Other";  	else if (!sectionNames.TryGetValue (section.Key' out sectionName))  		sectionName = section.Key.ToLower ();  	var tabPage = new TabPage {  		Text = sectionName'  		Name = sectionName'  		AutoScroll = true  	};  	tabControl.TabPages.Add (tabPage);  	var sectionY = 20;  	foreach (var option in section) {  		Control control = null;  		switch (option.Type) {  		case OptionType.Bool:  			control = new CheckBox {  				Checked = option.Default != "0"  			};  			((CheckBox)control).CheckedChanged += proposedChanged;  			break;  		case OptionType.Number:  			control = new NumericUpDown {  				Minimum = (decimal)option.Min'  				Maximum = (decimal)option.Max'  				Increment = (decimal)option.Step'  				Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  				DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  			};  			((NumericUpDown)control).ValueChanged += proposedChanged;  			break;  		case OptionType.String:  			control = new TextBox {  				Text = option.Default  			};  			control.TextChanged += proposedChanged;  			break;  		case OptionType.List:  			var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  			var box = new ComboBox {  				DropDownStyle = ComboBoxStyle.DropDownList  			};  			box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  			if (optionIndex > -1)  				box.SelectedIndex = optionIndex;  			control = box;  			box.SelectedIndexChanged += proposedChanged;  			break;  		}  		if (control != null) {  			var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  			tooltip.SetToolTip (control' tooltipText);  			var label = new Label {  				Text = option.Name'  				Location = new Point (3' sectionY)'  				Width = 145  			};  			tooltip.SetToolTip (label' tooltipText);  			tabPage.Controls.Add (label);  			control.Location = new Point (150' sectionY);  			optionControls [option.Key] = control;  			tabPage.Controls.Add (control);  			sectionY += rowHeight;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: foreach (var section in sections) {  	if (!section.Any ())  		continue;  	// set the section title  	string sectionName;  	if (String.IsNullOrEmpty (section.Key))  		sectionName = "Other";  	else if (!sectionNames.TryGetValue (section.Key' out sectionName))  		sectionName = section.Key.ToLower ();  	var tabPage = new TabPage {  		Text = sectionName'  		Name = sectionName'  		AutoScroll = true  	};  	tabControl.TabPages.Add (tabPage);  	var sectionY = 20;  	foreach (var option in section) {  		Control control = null;  		switch (option.Type) {  		case OptionType.Bool:  			control = new CheckBox {  				Checked = option.Default != "0"  			};  			((CheckBox)control).CheckedChanged += proposedChanged;  			break;  		case OptionType.Number:  			control = new NumericUpDown {  				Minimum = (decimal)option.Min'  				Maximum = (decimal)option.Max'  				Increment = (decimal)option.Step'  				Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  				DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  			};  			((NumericUpDown)control).ValueChanged += proposedChanged;  			break;  		case OptionType.String:  			control = new TextBox {  				Text = option.Default  			};  			control.TextChanged += proposedChanged;  			break;  		case OptionType.List:  			var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  			var box = new ComboBox {  				DropDownStyle = ComboBoxStyle.DropDownList  			};  			box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  			if (optionIndex > -1)  				box.SelectedIndex = optionIndex;  			control = box;  			box.SelectedIndexChanged += proposedChanged;  			break;  		}  		if (control != null) {  			var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  			tooltip.SetToolTip (control' tooltipText);  			var label = new Label {  				Text = option.Name'  				Location = new Point (3' sectionY)'  				Width = 145  			};  			tooltip.SetToolTip (label' tooltipText);  			tabPage.Controls.Add (label);  			control.Location = new Point (150' sectionY);  			optionControls [option.Key] = control;  			tabPage.Controls.Add (control);  			sectionY += rowHeight;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: foreach (var section in sections) {  	if (!section.Any ())  		continue;  	// set the section title  	string sectionName;  	if (String.IsNullOrEmpty (section.Key))  		sectionName = "Other";  	else if (!sectionNames.TryGetValue (section.Key' out sectionName))  		sectionName = section.Key.ToLower ();  	var tabPage = new TabPage {  		Text = sectionName'  		Name = sectionName'  		AutoScroll = true  	};  	tabControl.TabPages.Add (tabPage);  	var sectionY = 20;  	foreach (var option in section) {  		Control control = null;  		switch (option.Type) {  		case OptionType.Bool:  			control = new CheckBox {  				Checked = option.Default != "0"  			};  			((CheckBox)control).CheckedChanged += proposedChanged;  			break;  		case OptionType.Number:  			control = new NumericUpDown {  				Minimum = (decimal)option.Min'  				Maximum = (decimal)option.Max'  				Increment = (decimal)option.Step'  				Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  				DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  			};  			((NumericUpDown)control).ValueChanged += proposedChanged;  			break;  		case OptionType.String:  			control = new TextBox {  				Text = option.Default  			};  			control.TextChanged += proposedChanged;  			break;  		case OptionType.List:  			var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  			var box = new ComboBox {  				DropDownStyle = ComboBoxStyle.DropDownList  			};  			box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  			if (optionIndex > -1)  				box.SelectedIndex = optionIndex;  			control = box;  			box.SelectedIndexChanged += proposedChanged;  			break;  		}  		if (control != null) {  			var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  			tooltip.SetToolTip (control' tooltipText);  			var label = new Label {  				Text = option.Name'  				Location = new Point (3' sectionY)'  				Width = 145  			};  			tooltip.SetToolTip (label' tooltipText);  			tabPage.Controls.Add (label);  			control.Location = new Point (150' sectionY);  			optionControls [option.Key] = control;  			tabPage.Controls.Add (control);  			sectionY += rowHeight;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: foreach (var section in sections) {  	if (!section.Any ())  		continue;  	// set the section title  	string sectionName;  	if (String.IsNullOrEmpty (section.Key))  		sectionName = "Other";  	else if (!sectionNames.TryGetValue (section.Key' out sectionName))  		sectionName = section.Key.ToLower ();  	var tabPage = new TabPage {  		Text = sectionName'  		Name = sectionName'  		AutoScroll = true  	};  	tabControl.TabPages.Add (tabPage);  	var sectionY = 20;  	foreach (var option in section) {  		Control control = null;  		switch (option.Type) {  		case OptionType.Bool:  			control = new CheckBox {  				Checked = option.Default != "0"  			};  			((CheckBox)control).CheckedChanged += proposedChanged;  			break;  		case OptionType.Number:  			control = new NumericUpDown {  				Minimum = (decimal)option.Min'  				Maximum = (decimal)option.Max'  				Increment = (decimal)option.Step'  				Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  				DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  			};  			((NumericUpDown)control).ValueChanged += proposedChanged;  			break;  		case OptionType.String:  			control = new TextBox {  				Text = option.Default  			};  			control.TextChanged += proposedChanged;  			break;  		case OptionType.List:  			var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  			var box = new ComboBox {  				DropDownStyle = ComboBoxStyle.DropDownList  			};  			box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  			if (optionIndex > -1)  				box.SelectedIndex = optionIndex;  			control = box;  			box.SelectedIndexChanged += proposedChanged;  			break;  		}  		if (control != null) {  			var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  			tooltip.SetToolTip (control' tooltipText);  			var label = new Label {  				Text = option.Name'  				Location = new Point (3' sectionY)'  				Width = 145  			};  			tooltip.SetToolTip (label' tooltipText);  			tabPage.Controls.Add (label);  			control.Location = new Point (150' sectionY);  			optionControls [option.Key] = control;  			tabPage.Controls.Add (control);  			sectionY += rowHeight;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: foreach (var option in section) {  	Control control = null;  	switch (option.Type) {  	case OptionType.Bool:  		control = new CheckBox {  			Checked = option.Default != "0"  		};  		((CheckBox)control).CheckedChanged += proposedChanged;  		break;  	case OptionType.Number:  		control = new NumericUpDown {  			Minimum = (decimal)option.Min'  			Maximum = (decimal)option.Max'  			Increment = (decimal)option.Step'  			Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  			DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  		};  		((NumericUpDown)control).ValueChanged += proposedChanged;  		break;  	case OptionType.String:  		control = new TextBox {  			Text = option.Default  		};  		control.TextChanged += proposedChanged;  		break;  	case OptionType.List:  		var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  		var box = new ComboBox {  			DropDownStyle = ComboBoxStyle.DropDownList  		};  		box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  		if (optionIndex > -1)  			box.SelectedIndex = optionIndex;  		control = box;  		box.SelectedIndexChanged += proposedChanged;  		break;  	}  	if (control != null) {  		var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  		tooltip.SetToolTip (control' tooltipText);  		var label = new Label {  			Text = option.Name'  			Location = new Point (3' sectionY)'  			Width = 145  		};  		tooltip.SetToolTip (label' tooltipText);  		tabPage.Controls.Add (label);  		control.Location = new Point (150' sectionY);  		optionControls [option.Key] = control;  		tabPage.Controls.Add (control);  		sectionY += rowHeight;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: foreach (var option in section) {  	Control control = null;  	switch (option.Type) {  	case OptionType.Bool:  		control = new CheckBox {  			Checked = option.Default != "0"  		};  		((CheckBox)control).CheckedChanged += proposedChanged;  		break;  	case OptionType.Number:  		control = new NumericUpDown {  			Minimum = (decimal)option.Min'  			Maximum = (decimal)option.Max'  			Increment = (decimal)option.Step'  			Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  			DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  		};  		((NumericUpDown)control).ValueChanged += proposedChanged;  		break;  	case OptionType.String:  		control = new TextBox {  			Text = option.Default  		};  		control.TextChanged += proposedChanged;  		break;  	case OptionType.List:  		var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  		var box = new ComboBox {  			DropDownStyle = ComboBoxStyle.DropDownList  		};  		box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  		if (optionIndex > -1)  			box.SelectedIndex = optionIndex;  		control = box;  		box.SelectedIndexChanged += proposedChanged;  		break;  	}  	if (control != null) {  		var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  		tooltip.SetToolTip (control' tooltipText);  		var label = new Label {  			Text = option.Name'  			Location = new Point (3' sectionY)'  			Width = 145  		};  		tooltip.SetToolTip (label' tooltipText);  		tabPage.Controls.Add (label);  		control.Location = new Point (150' sectionY);  		optionControls [option.Key] = control;  		tabPage.Controls.Add (control);  		sectionY += rowHeight;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: foreach (var option in section) {  	Control control = null;  	switch (option.Type) {  	case OptionType.Bool:  		control = new CheckBox {  			Checked = option.Default != "0"  		};  		((CheckBox)control).CheckedChanged += proposedChanged;  		break;  	case OptionType.Number:  		control = new NumericUpDown {  			Minimum = (decimal)option.Min'  			Maximum = (decimal)option.Max'  			Increment = (decimal)option.Step'  			Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  			DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  		};  		((NumericUpDown)control).ValueChanged += proposedChanged;  		break;  	case OptionType.String:  		control = new TextBox {  			Text = option.Default  		};  		control.TextChanged += proposedChanged;  		break;  	case OptionType.List:  		var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  		var box = new ComboBox {  			DropDownStyle = ComboBoxStyle.DropDownList  		};  		box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  		if (optionIndex > -1)  			box.SelectedIndex = optionIndex;  		control = box;  		box.SelectedIndexChanged += proposedChanged;  		break;  	}  	if (control != null) {  		var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  		tooltip.SetToolTip (control' tooltipText);  		var label = new Label {  			Text = option.Name'  			Location = new Point (3' sectionY)'  			Width = 145  		};  		tooltip.SetToolTip (label' tooltipText);  		tabPage.Controls.Add (label);  		control.Location = new Point (150' sectionY);  		optionControls [option.Key] = control;  		tabPage.Controls.Add (control);  		sectionY += rowHeight;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: if (control != null) {  	var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  	tooltip.SetToolTip (control' tooltipText);  	var label = new Label {  		Text = option.Name'  		Location = new Point (3' sectionY)'  		Width = 145  	};  	tooltip.SetToolTip (label' tooltipText);  	tabPage.Controls.Add (label);  	control.Location = new Point (150' sectionY);  	optionControls [option.Key] = control;  	tabPage.Controls.Add (control);  	sectionY += rowHeight;  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: if (control != null) {  	var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  	tooltip.SetToolTip (control' tooltipText);  	var label = new Label {  		Text = option.Name'  		Location = new Point (3' sectionY)'  		Width = 145  	};  	tooltip.SetToolTip (label' tooltipText);  	tabPage.Controls.Add (label);  	control.Location = new Point (150' sectionY);  	optionControls [option.Key] = control;  	tabPage.Controls.Add (control);  	sectionY += rowHeight;  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: if (control != null) {  	var tooltipText = string.Format ("{0}\nDefault: {1} = {2}"' option.Description' option.Key' option.Default);  	tooltip.SetToolTip (control' tooltipText);  	var label = new Label {  		Text = option.Name'  		Location = new Point (3' sectionY)'  		Width = 145  	};  	tooltip.SetToolTip (label' tooltipText);  	tabPage.Controls.Add (label);  	control.Location = new Point (150' sectionY);  	optionControls [option.Key] = control;  	tabPage.Controls.Add (control);  	sectionY += rowHeight;  }  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following statement contains a magic number: control.Location = new Point (150' sectionY);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.tabControl.Location = new System.Drawing.Point (0' 3);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.tabControl.Size = new System.Drawing.Size (687' 222);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.tabControl.Size = new System.Drawing.Size (687' 222);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.butApplyChanges.Location = new System.Drawing.Point (3' 231);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.butApplyChanges.Location = new System.Drawing.Point (3' 231);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.butApplyChanges.Size = new System.Drawing.Size (89' 23);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.butApplyChanges.Size = new System.Drawing.Size (89' 23);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.proposedLabel.Location = new System.Drawing.Point (98' 236);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.proposedLabel.Location = new System.Drawing.Point (98' 236);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.proposedLabel.Size = new System.Drawing.Size (59' 13);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.proposedLabel.Size = new System.Drawing.Size (59' 13);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.proposedLabel.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (687' 257);  
Magic Number,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (687' 257);  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,Distance,The following statement contains a magic number: rmean = (e1.R + e2.R) / 2;  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,Distance,The following statement contains a magic number: return (((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8);  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,Distance,The following statement contains a magic number: return (((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8);  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,Distance,The following statement contains a magic number: return (((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8);  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,Distance,The following statement contains a magic number: return (((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8);  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,Distance,The following statement contains a magic number: return (((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8);  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short r = 20; r <= 255; r += 3) {  	for (short g = 20; g <= 255; g += 3) {  		for (short b = 50; b <= 255; b += 3) {  			temp.R = (byte)r;  			temp.G = (byte)g;  			temp.B = (byte)b;  			var minDist = int.MaxValue;  			for (var i = 0; i < input.Length; ++i) {  				if (i == index)  					continue;  				var cDistance = temp % input [i];  				if (cDistance <= bestVal) {  					minDist = int.MinValue;  					break;  				}  				if (cDistance < minDist)  					minDist = cDistance;  			}  			if (minDist > bestVal) {  				bestVal = minDist;  				bestCol = temp;  			}  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: r += 3
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short g = 20; g <= 255; g += 3) {  	for (short b = 50; b <= 255; b += 3) {  		temp.R = (byte)r;  		temp.G = (byte)g;  		temp.B = (byte)b;  		var minDist = int.MaxValue;  		for (var i = 0; i < input.Length; ++i) {  			if (i == index)  				continue;  			var cDistance = temp % input [i];  			if (cDistance <= bestVal) {  				minDist = int.MinValue;  				break;  			}  			if (cDistance < minDist)  				minDist = cDistance;  		}  		if (minDist > bestVal) {  			bestVal = minDist;  			bestCol = temp;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short g = 20; g <= 255; g += 3) {  	for (short b = 50; b <= 255; b += 3) {  		temp.R = (byte)r;  		temp.G = (byte)g;  		temp.B = (byte)b;  		var minDist = int.MaxValue;  		for (var i = 0; i < input.Length; ++i) {  			if (i == index)  				continue;  			var cDistance = temp % input [i];  			if (cDistance <= bestVal) {  				minDist = int.MinValue;  				break;  			}  			if (cDistance < minDist)  				minDist = cDistance;  		}  		if (minDist > bestVal) {  			bestVal = minDist;  			bestCol = temp;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short g = 20; g <= 255; g += 3) {  	for (short b = 50; b <= 255; b += 3) {  		temp.R = (byte)r;  		temp.G = (byte)g;  		temp.B = (byte)b;  		var minDist = int.MaxValue;  		for (var i = 0; i < input.Length; ++i) {  			if (i == index)  				continue;  			var cDistance = temp % input [i];  			if (cDistance <= bestVal) {  				minDist = int.MinValue;  				break;  			}  			if (cDistance < minDist)  				minDist = cDistance;  		}  		if (minDist > bestVal) {  			bestVal = minDist;  			bestCol = temp;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short g = 20; g <= 255; g += 3) {  	for (short b = 50; b <= 255; b += 3) {  		temp.R = (byte)r;  		temp.G = (byte)g;  		temp.B = (byte)b;  		var minDist = int.MaxValue;  		for (var i = 0; i < input.Length; ++i) {  			if (i == index)  				continue;  			var cDistance = temp % input [i];  			if (cDistance <= bestVal) {  				minDist = int.MinValue;  				break;  			}  			if (cDistance < minDist)  				minDist = cDistance;  		}  		if (minDist > bestVal) {  			bestVal = minDist;  			bestCol = temp;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short g = 20; g <= 255; g += 3) {  	for (short b = 50; b <= 255; b += 3) {  		temp.R = (byte)r;  		temp.G = (byte)g;  		temp.B = (byte)b;  		var minDist = int.MaxValue;  		for (var i = 0; i < input.Length; ++i) {  			if (i == index)  				continue;  			var cDistance = temp % input [i];  			if (cDistance <= bestVal) {  				minDist = int.MinValue;  				break;  			}  			if (cDistance < minDist)  				minDist = cDistance;  		}  		if (minDist > bestVal) {  			bestVal = minDist;  			bestCol = temp;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short g = 20; g <= 255; g += 3) {  	for (short b = 50; b <= 255; b += 3) {  		temp.R = (byte)r;  		temp.G = (byte)g;  		temp.B = (byte)b;  		var minDist = int.MaxValue;  		for (var i = 0; i < input.Length; ++i) {  			if (i == index)  				continue;  			var cDistance = temp % input [i];  			if (cDistance <= bestVal) {  				minDist = int.MinValue;  				break;  			}  			if (cDistance < minDist)  				minDist = cDistance;  		}  		if (minDist > bestVal) {  			bestVal = minDist;  			bestCol = temp;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: g += 3
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short b = 50; b <= 255; b += 3) {  	temp.R = (byte)r;  	temp.G = (byte)g;  	temp.B = (byte)b;  	var minDist = int.MaxValue;  	for (var i = 0; i < input.Length; ++i) {  		if (i == index)  			continue;  		var cDistance = temp % input [i];  		if (cDistance <= bestVal) {  			minDist = int.MinValue;  			break;  		}  		if (cDistance < minDist)  			minDist = cDistance;  	}  	if (minDist > bestVal) {  		bestVal = minDist;  		bestCol = temp;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short b = 50; b <= 255; b += 3) {  	temp.R = (byte)r;  	temp.G = (byte)g;  	temp.B = (byte)b;  	var minDist = int.MaxValue;  	for (var i = 0; i < input.Length; ++i) {  		if (i == index)  			continue;  		var cDistance = temp % input [i];  		if (cDistance <= bestVal) {  			minDist = int.MinValue;  			break;  		}  		if (cDistance < minDist)  			minDist = cDistance;  	}  	if (minDist > bestVal) {  		bestVal = minDist;  		bestCol = temp;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: for (short b = 50; b <= 255; b += 3) {  	temp.R = (byte)r;  	temp.G = (byte)g;  	temp.B = (byte)b;  	var minDist = int.MaxValue;  	for (var i = 0; i < input.Length; ++i) {  		if (i == index)  			continue;  		var cDistance = temp % input [i];  		if (cDistance <= bestVal) {  			minDist = int.MinValue;  			break;  		}  		if (cDistance < minDist)  			minDist = cDistance;  	}  	if (minDist > bestVal) {  		bestVal = minDist;  		bestCol = temp;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,MyCol,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\MyCol.cs,GetBestRelocation,The following statement contains a magic number: b += 3
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.lbTitle.Location = new System.Drawing.Point (12' 20);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.lbTitle.Location = new System.Drawing.Point (12' 20);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.lbTitle.Size = new System.Drawing.Size (228' 13);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.lbTitle.Size = new System.Drawing.Size (228' 13);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Location = new System.Drawing.Point (109' 53);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Location = new System.Drawing.Point (109' 53);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Size = new System.Drawing.Size (113' 20);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Size = new System.Drawing.Size (113' 20);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point (42' 92);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point (42' 92);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (203' 92);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (203' 92);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (318' 149);  
Magic Number,ZeroKLobby.MicroLobby,AskBattlePasswordForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\AskBattlePasswordForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (318' 149);  
Magic Number,ZeroKLobby.MicroLobby,ChatBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatBox.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (10' 10);  
Magic Number,ZeroKLobby.MicroLobby,ChatBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatBox.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (10' 10);  
Magic Number,ZeroKLobby.MicroLobby,HistoryManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HistoryManager.cs,HistoryManager,The following statement contains a magic number: timedFlush.Interval = 30000;  
Magic Number,ZeroKLobby.MicroLobby,HistoryManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HistoryManager.cs,LogLine,The following statement contains a magic number: if (newlineBuffer [channelName].Count == 30)  	//write every 30th line  	FlushBuffer ();  
Magic Number,ZeroKLobby.MicroLobby,HistoryManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HistoryManager.cs,GetLines,The following statement contains a magic number: lock (locker) {  	//Open the stream and read it from back.   	using (FileStream fileStream = File.OpenRead (Path.Combine (GetHistoryFolder ()' fileName))) {  		var fileLen = fileStream.Length;  		var lenToRead = (int)Math.Min (fileLen' 3990);  		fileStream.Seek (-lenToRead' SeekOrigin.End);  		List<string> lines = new List<string> ();  		using (var stream = new StreamReader (fileStream))  			while (!stream.EndOfStream)  				lines.Add (stream.ReadLine ());  		return lines.ToArray ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,HistoryManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\HistoryManager.cs,GetLines,The following statement contains a magic number: using (FileStream fileStream = File.OpenRead (Path.Combine (GetHistoryFolder ()' fileName))) {  	var fileLen = fileStream.Length;  	var lenToRead = (int)Math.Min (fileLen' 3990);  	fileStream.Seek (-lenToRead' SeekOrigin.End);  	List<string> lines = new List<string> ();  	using (var stream = new StreamReader (fileStream))  		while (!stream.EndOfStream)  			lines.Add (stream.ReadLine ());  	return lines.ToArray ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,OnResize,The following statement contains a magic number: if (finishLoad && minimapFuncBox.minimapSplitContainer1.Height > 1) {  	var splitContainer = minimapFuncBox.minimapSplitContainer1;  	var splitterDistance = Math.Min ((int)23' minimapFuncBox.minimapSplitContainer1.Height);  	//always show button fully  	// SplitterDistance must be between Panel1MinSize and Width - Panel2MinSize.  	splitterDistance = Math.Min (splitterDistance' splitContainer.Width - splitContainer.Panel2MinSize + 1);  	splitterDistance = Math.Max (splitterDistance' splitContainer.Panel1MinSize - 1);  	minimapFuncBox.minimapSplitContainer1.SplitterDistance = splitterDistance;  	DrawMinimap ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: foreach (var bot in Program.TasClient.MyBattle.Bots.Values) {  	newList.Add (new PlayerListItem {  		BotBattleStatus = bot'  		SortCategory = bot.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized'  		AllyTeam = bot.AllyNumber  	});  	existingTeams.Add (bot.AllyNumber);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: newList.Add (new PlayerListItem {  	BotBattleStatus = bot'  	SortCategory = bot.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized'  	AllyTeam = bot.AllyNumber  });  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: if (PlayerListItems.Any (i => i.UserBattleStatus != null && i.UserBattleStatus.IsSpectator))  	newList.Add (new PlayerListItem {  		Button = "Spectators"'  		SortCategory = (int)PlayerListItem.SortCats.SpectatorTitle'  		IsSpectatorsTitle = true'  		Height = 25  	});  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: newList.Add (new PlayerListItem {  	Button = "Spectators"'  	SortCategory = (int)PlayerListItem.SortCats.SpectatorTitle'  	IsSpectatorsTitle = true'  	Height = 25  });  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: foreach (var team in buttonTeams) {  	int numPlayers = nonSpecs.Where (p => p.UserBattleStatus.AllyNumber == team).Count ();  	int numBots = Program.TasClient.MyBattle.Bots.Values.Where (p => p.AllyNumber == team).Count ();  	int numTotal = numPlayers + numBots;  	var allianceName = "Team " + (team + 1) + (numTotal > 3 ?  : "");  	if (Program.TasClient.MyBattle.Mode != AutohostMode.None)  		allianceName = team == 0 ?  : "Bots";  	newList.Add (new PlayerListItem {  		Button = allianceName'  		SortCategory = team * 2 + (int)PlayerListItem.SortCats.Uncategorized'  		AllyTeam = team'  		Height = 25  	});  }  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: foreach (var team in buttonTeams) {  	int numPlayers = nonSpecs.Where (p => p.UserBattleStatus.AllyNumber == team).Count ();  	int numBots = Program.TasClient.MyBattle.Bots.Values.Where (p => p.AllyNumber == team).Count ();  	int numTotal = numPlayers + numBots;  	var allianceName = "Team " + (team + 1) + (numTotal > 3 ?  : "");  	if (Program.TasClient.MyBattle.Mode != AutohostMode.None)  		allianceName = team == 0 ?  : "Bots";  	newList.Add (new PlayerListItem {  		Button = allianceName'  		SortCategory = team * 2 + (int)PlayerListItem.SortCats.Uncategorized'  		AllyTeam = team'  		Height = 25  	});  }  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: foreach (var team in buttonTeams) {  	int numPlayers = nonSpecs.Where (p => p.UserBattleStatus.AllyNumber == team).Count ();  	int numBots = Program.TasClient.MyBattle.Bots.Values.Where (p => p.AllyNumber == team).Count ();  	int numTotal = numPlayers + numBots;  	var allianceName = "Team " + (team + 1) + (numTotal > 3 ?  : "");  	if (Program.TasClient.MyBattle.Mode != AutohostMode.None)  		allianceName = team == 0 ?  : "Bots";  	newList.Add (new PlayerListItem {  		Button = allianceName'  		SortCategory = team * 2 + (int)PlayerListItem.SortCats.Uncategorized'  		AllyTeam = team'  		Height = 25  	});  }  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: newList.Add (new PlayerListItem {  	Button = allianceName'  	SortCategory = team * 2 + (int)PlayerListItem.SortCats.Uncategorized'  	AllyTeam = team'  	Height = 25  });  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,SortByTeam,The following statement contains a magic number: newList.Add (new PlayerListItem {  	Button = allianceName'  	SortCategory = team * 2 + (int)PlayerListItem.SortCats.Uncategorized'  	AllyTeam = team'  	Height = 25  });  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (246' 242);  
Magic Number,ZeroKLobby.MicroLobby,BattleChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleChatControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (246' 242);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,HitTest,The following statement contains a magic number: return x > 3 && x < 290 && y > 3 && y < 64 + 3;  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,HitTest,The following statement contains a magic number: return x > 3 && x < 290 && y > 3 && y < 64 + 3;  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,HitTest,The following statement contains a magic number: return x > 3 && x < 290 && y > 3 && y < 64 + 3;  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,HitTest,The following statement contains a magic number: return x > 3 && x < 290 && y > 3 && y < 64 + 3;  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,HitTest,The following statement contains a magic number: return x > 3 && x < 290 && y > 3 && y < 64 + 3;  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (finishedMinimap)) {  	g.DrawImage (resizedMinimap' (int)10' (int)9);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	int x = (int)10;  	int y = (int)(minimapSize - 20);  	Action<Image> drawIcon = img => {  		g.DrawImage (img' x' y' (int)20' (int)20);  		x += (int)30;  	};  	if (IsInGame) {  		g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  	}  	if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  		g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  	}  	if (Battle.IsPassworded)  		drawIcon (ZklResources._lock);  	//   g.DrawImage(ZklResources.border' 4'4' (int)64' (int)64);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (resizedMinimap' (int)10' (int)9);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (resizedMinimap' (int)10' (int)9);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (img' x' y' (int)20' (int)20);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (img' x' y' (int)20' (int)20);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: x += (int)30;  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (IsInGame) {  	g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (IsInGame) {  	g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (IsInGame) {  	g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (IsInGame) {  	g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (Buttons.fight' (int)10' (int)10' (int)50' (int)50);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  	g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  	g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  	g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: if (Battle.IsOfficial () && Battle.Mode != AutohostMode.None) {  	g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,MakeMinimap,The following statement contains a magic number: g.DrawImage (ZklResources.star' (int)48' (int)8' (int)15' (int)15);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (image)) {  	if (disposed) {  		image = MakeSolidColorBitmap (scaledWidth' scaledHeight' simplified);  		return image;  	}  	if (finishedMinimap != null)  		g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  	else {  		g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  		g.InterpolationMode = InterpolationMode.HighQualityBicubic;  		g.InterpolationMode = InterpolationMode.Default;  	}  	g.SetClip (new Rectangle (0' 0' scaledWidth' scaledHeight));  	String mod_and_engine_name = string.Format ("{0}     spring{1}"' Battle.ModName' Battle.EngineVersion);  	int y = (int)3;  	int offset = (int)16;  	int curMapCellSize = (int)MapCellSize.Width;  	TextRenderer.DrawText (g' TitleFont' new Point (curMapCellSize' y + offset * 0)' Config.TextColor);  	if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  		TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  	} else {  		int offset_offset = (int)4;  		//this squishes modName & engine-name and dude-icons together abit  		int offset_offset2 = (int)6;  		//this squished modName & engine-name into 2 tight lines  		TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  		TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  		g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  	}  	g.ResetClip ();  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (finishedMinimap != null)  	g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  else {  	g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	g.InterpolationMode = InterpolationMode.Default;  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (finishedMinimap != null)  	g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  else {  	g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	g.InterpolationMode = InterpolationMode.Default;  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (finishedMinimap != null)  	g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  else {  	g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	g.InterpolationMode = InterpolationMode.Default;  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (finishedMinimap != null)  	g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  else {  	g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	g.InterpolationMode = InterpolationMode.Default;  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (finishedMinimap != null)  	g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  else {  	g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	g.InterpolationMode = InterpolationMode.Default;  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (finishedMinimap != null)  	g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  else {  	g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	g.InterpolationMode = InterpolationMode.Default;  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImageUnscaled (finishedMinimap' (int)3' (int)3);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImage (ZklResources.download' (int)4' (int)3' (int)61' (int)64);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  	TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  } else {  	int offset_offset = (int)4;  	//this squishes modName & engine-name and dude-icons together abit  	int offset_offset2 = (int)6;  	//this squished modName & engine-name into 2 tight lines  	TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  	TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  	TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  } else {  	int offset_offset = (int)4;  	//this squishes modName & engine-name and dude-icons together abit  	int offset_offset2 = (int)6;  	//this squished modName & engine-name into 2 tight lines  	TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  	TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  	TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  } else {  	int offset_offset = (int)4;  	//this squishes modName & engine-name and dude-icons together abit  	int offset_offset2 = (int)6;  	//this squished modName & engine-name into 2 tight lines  	TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  	TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  	TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  } else {  	int offset_offset = (int)4;  	//this squishes modName & engine-name and dude-icons together abit  	int offset_offset2 = (int)6;  	//this squished modName & engine-name into 2 tight lines  	TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  	TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: if (TextRenderer.MeasureText (mod_and_engine_name' ModFont).Width < scaledWidth - curMapCellSize) {  	TextRenderer.DrawText (g' mod_and_engine_name' ModFont' new Point (curMapCellSize' y + offset * 1)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  } else {  	int offset_offset = (int)4;  	//this squishes modName & engine-name and dude-icons together abit  	int offset_offset2 = (int)6;  	//this squished modName & engine-name into 2 tight lines  	TextRenderer.DrawText (g' Battle.ModName' ModFont' new Point (curMapCellSize' y + offset * 1 - offset_offset)' Config.TextColor);  	TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  	g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  }  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 2);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: TextRenderer.DrawText (g' string.Format ("spring{0}"' Battle.EngineVersion)' ModFont' new Point (curMapCellSize' y + offset * 2 - offset_offset - offset_offset2)' Config.TextColor);  
Magic Number,ZeroKLobby.MicroLobby,BattleIcon,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleIcon.cs,GenerateImage,The following statement contains a magic number: g.DrawImageUnscaled (playersBoxImage' curMapCellSize' y + offset * 3 - offset_offset - offset_offset2);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [0] = Color.FromArgb (255' 255' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [0] = Color.FromArgb (255' 255' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [0] = Color.FromArgb (255' 255' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [2] = Color.FromArgb (0' 0' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [2] = Color.FromArgb (0' 0' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [3] = Color.FromArgb (0' 128' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [3] = Color.FromArgb (0' 128' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [4] = Color.FromArgb (255' 0' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [4] = Color.FromArgb (255' 0' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [5] = Color.FromArgb (165' 42' 42);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [5] = Color.FromArgb (165' 42' 42);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [5] = Color.FromArgb (165' 42' 42);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [5] = Color.FromArgb (165' 42' 42);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [6] = Color.FromArgb (128' 0' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [6] = Color.FromArgb (128' 0' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [6] = Color.FromArgb (128' 0' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [7] = Color.FromArgb (255' 165' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [7] = Color.FromArgb (255' 165' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [7] = Color.FromArgb (255' 165' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [8] = Color.FromArgb (255' 255' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [8] = Color.FromArgb (255' 255' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [8] = Color.FromArgb (255' 255' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [9] = Color.FromArgb (144' 238' 144);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [9] = Color.FromArgb (144' 238' 144);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [9] = Color.FromArgb (144' 238' 144);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [9] = Color.FromArgb (144' 238' 144);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [10] = Color.FromArgb (0' 128' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [10] = Color.FromArgb (0' 128' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [10] = Color.FromArgb (0' 128' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [11] = Color.FromArgb (224' 255' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [11] = Color.FromArgb (224' 255' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [11] = Color.FromArgb (224' 255' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [11] = Color.FromArgb (224' 255' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [12] = Color.FromArgb (173' 216' 230);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [12] = Color.FromArgb (173' 216' 230);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [12] = Color.FromArgb (173' 216' 230);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [12] = Color.FromArgb (173' 216' 230);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [13] = Color.FromArgb (255' 192' 203);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [13] = Color.FromArgb (255' 192' 203);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [13] = Color.FromArgb (255' 192' 203);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [13] = Color.FromArgb (255' 192' 203);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [14] = Color.FromArgb (128' 128' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [14] = Color.FromArgb (128' 128' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [14] = Color.FromArgb (128' 128' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [14] = Color.FromArgb (128' 128' 128);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [15] = Color.FromArgb (211' 211' 211);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [15] = Color.FromArgb (211' 211' 211);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [15] = Color.FromArgb (211' 211' 211);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [15] = Color.FromArgb (211' 211' 211);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [incomingCommand] = Color.FromArgb (100' 50' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [incomingCommand] = Color.FromArgb (100' 50' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [incomingCommand] = Color.FromArgb (100' 50' 255);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [outgoingCommand] = Color.FromArgb (0' 200' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [topicBackground] = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [topicBackground] = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby.MicroLobby,TextColor,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextColor.cs,TextColor,The following statement contains a magic number: colors [topicBackground] = Color.FromArgb (255' 255' 225);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ColorInvert,The following statement contains a magic number: return Color.FromArgb (colorIn.A' (colorIn.R + 128) % 256' (colorIn.G + 128) % 256' (colorIn.B + 128) % 256);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ColorInvert,The following statement contains a magic number: return Color.FromArgb (colorIn.A' (colorIn.R + 128) % 256' (colorIn.G + 128) % 256' (colorIn.B + 128) % 256);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ColorInvert,The following statement contains a magic number: return Color.FromArgb (colorIn.A' (colorIn.R + 128) % 256' (colorIn.G + 128) % 256' (colorIn.B + 128) % 256);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ColorInvert,The following statement contains a magic number: return Color.FromArgb (colorIn.A' (colorIn.R + 128) % 256' (colorIn.G + 128) % 256' (colorIn.B + 128) % 256);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ColorInvert,The following statement contains a magic number: return Color.FromArgb (colorIn.A' (colorIn.R + 128) % 256' (colorIn.G + 128) % 256' (colorIn.B + 128) % 256);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ColorInvert,The following statement contains a magic number: return Color.FromArgb (colorIn.A' (colorIn.R + 128) % 256' (colorIn.G + 128) % 256' (colorIn.B + 128) % 256);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	//get the current character the mouse is over.   	startHighLine = (Height + LineSize / 2 - e.Y) / LineSize;  	//which row  	startHighLine = TotalDisplayLines - startHighLine;  	//which row from below  	startHighLine = startHighLine - (TotalDisplayLines - vScrollBar.Value);  	//which row considering scroll position  	startHighChar = ReturnChar (startHighLine' e.Location.X);  	//the character index on the line  	//first need to see what word we clicked' if not' run a command  	if (HoveredWord.Length > 0) {  		//check if it is a URL  		var matches = wwwRegex.Matches (HoveredWord);  		string clickedWord;  		if (matches.Count > 0) {  			clickedWord = matches [0].ToString ();  			try {  				startHighLine = -1;  				// reset selection  				Program.MainWindow.navigationControl.Path = clickedWord;  				//request URL be opened (in internal browser or external depending on which is appropriate)  			} catch (Win32Exception ex) {  				Trace.WriteLine ("Failed to start browser: " + ex);  			}  			return;  		}  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseDown,The following statement contains a magic number: startHighLine = (Height + LineSize / 2 - e.Y) / LineSize;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseMove,The following statement contains a magic number: if (!SingleLine) {  	// Get the line count from the bottom... (relative to screen)  	line = (Height + LineSize / 2 - e.Y) / LineSize;  	// Then' convert it to count from the top.   	line = vScrollBar.Value - line;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseMove,The following statement contains a magic number: line = (Height + LineSize / 2 - e.Y) / LineSize;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseMove,The following statement contains a magic number: HoveredWord = ReturnWord (line' e.Location.X).Trim (new char[4] {  	' ''  	'\t''  	''''  	'.'  });  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnMouseMove,The following statement contains a magic number: curHighLine = (Height + LineSize / 2 - e.Y) / LineSize;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: try {  	//adds a new line to the Text Window  	if (newLine.Length == 0)  		return;  	var isSpam = DateTime.Now.Ticks - previousAppendText <= 2000000;  	//2'000'000 ticks is 200milisecond.  	previousAppendText = DateTime.Now.Ticks;  	if (!Visible)  		unreadMarker++;  	else if (unreadMarker > 0)  		unreadMarker++;  	newLine = newLine.Replace ("\n"' " ");  	//Tips: don't use newline char for newline' split line into diff row (call AppendText() multiple time) instead  	newLine = newLine.Replace ("&#x3;"' TextColor.ColorChar.ToString ());  	//color start. &#x3 is 0x003  	newLine = newLine.Replace ("&#x3"' TextColor.ColorChar.ToString ());  	//color end  	newLine = ParseUrl (newLine);  	//get the color from the line  	if (newLine [0] == TextColor.ColorChar) {  		if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  		else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString ());  		//check of foreColor is less then 32       		if (foreColor > TextColor.colorRange) {  			foreColor = TextColor.text;  			//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  			//if (foreColor > 31) foreColor = foreColor - 32;  		}  	} else  		foreColor = color;  	newLine = NoColorMode ? TextColor.StripCodes (newLine) : RedefineColorCodes (newLine);  	totalLines++;  	if (singleLine)  		totalLines = 1;  	var needSpace = totalLines >= MaxTextLines;  	var isExpanding = MaxTextLines < defaultMaxLines;  	var isFull = MaxTextLines >= HardMaximumLines;  	if (needSpace && !isExpanding && (isFull || !isSpam)) {  		//remove old text' create space for new text (recycle existing row)  		var toRemove = MaxTextLines / 10 + 1;  		//remove 10% of old text  		//calculate scrollbar offset:  		var lineCount = 0;  		var wrapCount = 0;  		while (lineCount < toRemove + 1) {  			if (displayLines [wrapCount + lineCount].Previous)  				wrapCount++;  			else  				lineCount++;  		}  		var vScrollBarOffset = wrapCount + lineCount - 1;  		vScrollBarOffset = Math.Min (vScrollBarOffset' vScrollBar.Value - 1);  		//shift existing texts upward:  		var x = 0;  		for (var i = toRemove; i < totalLines; i++) {  			textLines [x].TotalLines = textLines [i].TotalLines;  			textLines [x].Width = textLines [i].Width;  			textLines [x].Line = textLines [i].Line;  			textLines [x].TextColor = textLines [i].TextColor;  			x++;  		}  		//fill new space with empty string  		for (var i = totalLines - toRemove; i < MaxTextLines; i++) {  			textLines [i].TotalLines = 0;  			textLines [i].Line = "";  			textLines [i].Width = 0;  		}  		//set draw line to new space  		totalLines = totalLines - toRemove - 1;  		if (Height != 0) {  			TotalDisplayLines = FormatLines (totalLines' 1' 0);  			UpdateScrollBar (TotalDisplayLines' vScrollBarOffset * -1);  			Invalidate ();  		}  		totalLines++;  	} else if (needSpace && !isFull && (isExpanding || isSpam))  		AddNewTextLines ();  	//create new space for new text (new row)  	textLines [totalLines].Line = newLine;  	var g = CreateGraphics ();  	//properly measure for bold characters needed  	var sf = TextFormatFlags.NoPadding;  	textLines [totalLines].Width = MS (g' TextColor.StripCodes (newLine)' Font);  	g.Dispose ();  	textLines [totalLines].TextColor = foreColor;  	var addedLines = FormatLines (totalLines' totalLines' TotalDisplayLines);  	//split text into multi-line' and put into "displayLines[]"  	addedLines -= TotalDisplayLines;  	textLines [totalLines].TotalLines = addedLines;  	for (var i = TotalDisplayLines + 1; i < TotalDisplayLines + addedLines; i++)  		displayLines [i].TextLine = totalLines;  	//identify to current "textLines[]" index  	TotalDisplayLines += addedLines;  	if (singleLine) {  		totalLines = 1;  		TotalDisplayLines = 1;  		displayLines [1].TextLine = 1;  		textLines [1].TotalLines = 1;  	}  	UpdateScrollBar (TotalDisplayLines' 0);  	Invalidate ();  } catch (Exception e) {  	Trace.WriteLine ("AppendText Error:" + e.Message' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: try {  	//adds a new line to the Text Window  	if (newLine.Length == 0)  		return;  	var isSpam = DateTime.Now.Ticks - previousAppendText <= 2000000;  	//2'000'000 ticks is 200milisecond.  	previousAppendText = DateTime.Now.Ticks;  	if (!Visible)  		unreadMarker++;  	else if (unreadMarker > 0)  		unreadMarker++;  	newLine = newLine.Replace ("\n"' " ");  	//Tips: don't use newline char for newline' split line into diff row (call AppendText() multiple time) instead  	newLine = newLine.Replace ("&#x3;"' TextColor.ColorChar.ToString ());  	//color start. &#x3 is 0x003  	newLine = newLine.Replace ("&#x3"' TextColor.ColorChar.ToString ());  	//color end  	newLine = ParseUrl (newLine);  	//get the color from the line  	if (newLine [0] == TextColor.ColorChar) {  		if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  		else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString ());  		//check of foreColor is less then 32       		if (foreColor > TextColor.colorRange) {  			foreColor = TextColor.text;  			//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  			//if (foreColor > 31) foreColor = foreColor - 32;  		}  	} else  		foreColor = color;  	newLine = NoColorMode ? TextColor.StripCodes (newLine) : RedefineColorCodes (newLine);  	totalLines++;  	if (singleLine)  		totalLines = 1;  	var needSpace = totalLines >= MaxTextLines;  	var isExpanding = MaxTextLines < defaultMaxLines;  	var isFull = MaxTextLines >= HardMaximumLines;  	if (needSpace && !isExpanding && (isFull || !isSpam)) {  		//remove old text' create space for new text (recycle existing row)  		var toRemove = MaxTextLines / 10 + 1;  		//remove 10% of old text  		//calculate scrollbar offset:  		var lineCount = 0;  		var wrapCount = 0;  		while (lineCount < toRemove + 1) {  			if (displayLines [wrapCount + lineCount].Previous)  				wrapCount++;  			else  				lineCount++;  		}  		var vScrollBarOffset = wrapCount + lineCount - 1;  		vScrollBarOffset = Math.Min (vScrollBarOffset' vScrollBar.Value - 1);  		//shift existing texts upward:  		var x = 0;  		for (var i = toRemove; i < totalLines; i++) {  			textLines [x].TotalLines = textLines [i].TotalLines;  			textLines [x].Width = textLines [i].Width;  			textLines [x].Line = textLines [i].Line;  			textLines [x].TextColor = textLines [i].TextColor;  			x++;  		}  		//fill new space with empty string  		for (var i = totalLines - toRemove; i < MaxTextLines; i++) {  			textLines [i].TotalLines = 0;  			textLines [i].Line = "";  			textLines [i].Width = 0;  		}  		//set draw line to new space  		totalLines = totalLines - toRemove - 1;  		if (Height != 0) {  			TotalDisplayLines = FormatLines (totalLines' 1' 0);  			UpdateScrollBar (TotalDisplayLines' vScrollBarOffset * -1);  			Invalidate ();  		}  		totalLines++;  	} else if (needSpace && !isFull && (isExpanding || isSpam))  		AddNewTextLines ();  	//create new space for new text (new row)  	textLines [totalLines].Line = newLine;  	var g = CreateGraphics ();  	//properly measure for bold characters needed  	var sf = TextFormatFlags.NoPadding;  	textLines [totalLines].Width = MS (g' TextColor.StripCodes (newLine)' Font);  	g.Dispose ();  	textLines [totalLines].TextColor = foreColor;  	var addedLines = FormatLines (totalLines' totalLines' TotalDisplayLines);  	//split text into multi-line' and put into "displayLines[]"  	addedLines -= TotalDisplayLines;  	textLines [totalLines].TotalLines = addedLines;  	for (var i = TotalDisplayLines + 1; i < TotalDisplayLines + addedLines; i++)  		displayLines [i].TextLine = totalLines;  	//identify to current "textLines[]" index  	TotalDisplayLines += addedLines;  	if (singleLine) {  		totalLines = 1;  		TotalDisplayLines = 1;  		displayLines [1].TextLine = 1;  		textLines [1].TotalLines = 1;  	}  	UpdateScrollBar (TotalDisplayLines' 0);  	Invalidate ();  } catch (Exception e) {  	Trace.WriteLine ("AppendText Error:" + e.Message' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: try {  	//adds a new line to the Text Window  	if (newLine.Length == 0)  		return;  	var isSpam = DateTime.Now.Ticks - previousAppendText <= 2000000;  	//2'000'000 ticks is 200milisecond.  	previousAppendText = DateTime.Now.Ticks;  	if (!Visible)  		unreadMarker++;  	else if (unreadMarker > 0)  		unreadMarker++;  	newLine = newLine.Replace ("\n"' " ");  	//Tips: don't use newline char for newline' split line into diff row (call AppendText() multiple time) instead  	newLine = newLine.Replace ("&#x3;"' TextColor.ColorChar.ToString ());  	//color start. &#x3 is 0x003  	newLine = newLine.Replace ("&#x3"' TextColor.ColorChar.ToString ());  	//color end  	newLine = ParseUrl (newLine);  	//get the color from the line  	if (newLine [0] == TextColor.ColorChar) {  		if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  		else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString ());  		//check of foreColor is less then 32       		if (foreColor > TextColor.colorRange) {  			foreColor = TextColor.text;  			//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  			//if (foreColor > 31) foreColor = foreColor - 32;  		}  	} else  		foreColor = color;  	newLine = NoColorMode ? TextColor.StripCodes (newLine) : RedefineColorCodes (newLine);  	totalLines++;  	if (singleLine)  		totalLines = 1;  	var needSpace = totalLines >= MaxTextLines;  	var isExpanding = MaxTextLines < defaultMaxLines;  	var isFull = MaxTextLines >= HardMaximumLines;  	if (needSpace && !isExpanding && (isFull || !isSpam)) {  		//remove old text' create space for new text (recycle existing row)  		var toRemove = MaxTextLines / 10 + 1;  		//remove 10% of old text  		//calculate scrollbar offset:  		var lineCount = 0;  		var wrapCount = 0;  		while (lineCount < toRemove + 1) {  			if (displayLines [wrapCount + lineCount].Previous)  				wrapCount++;  			else  				lineCount++;  		}  		var vScrollBarOffset = wrapCount + lineCount - 1;  		vScrollBarOffset = Math.Min (vScrollBarOffset' vScrollBar.Value - 1);  		//shift existing texts upward:  		var x = 0;  		for (var i = toRemove; i < totalLines; i++) {  			textLines [x].TotalLines = textLines [i].TotalLines;  			textLines [x].Width = textLines [i].Width;  			textLines [x].Line = textLines [i].Line;  			textLines [x].TextColor = textLines [i].TextColor;  			x++;  		}  		//fill new space with empty string  		for (var i = totalLines - toRemove; i < MaxTextLines; i++) {  			textLines [i].TotalLines = 0;  			textLines [i].Line = "";  			textLines [i].Width = 0;  		}  		//set draw line to new space  		totalLines = totalLines - toRemove - 1;  		if (Height != 0) {  			TotalDisplayLines = FormatLines (totalLines' 1' 0);  			UpdateScrollBar (TotalDisplayLines' vScrollBarOffset * -1);  			Invalidate ();  		}  		totalLines++;  	} else if (needSpace && !isFull && (isExpanding || isSpam))  		AddNewTextLines ();  	//create new space for new text (new row)  	textLines [totalLines].Line = newLine;  	var g = CreateGraphics ();  	//properly measure for bold characters needed  	var sf = TextFormatFlags.NoPadding;  	textLines [totalLines].Width = MS (g' TextColor.StripCodes (newLine)' Font);  	g.Dispose ();  	textLines [totalLines].TextColor = foreColor;  	var addedLines = FormatLines (totalLines' totalLines' TotalDisplayLines);  	//split text into multi-line' and put into "displayLines[]"  	addedLines -= TotalDisplayLines;  	textLines [totalLines].TotalLines = addedLines;  	for (var i = TotalDisplayLines + 1; i < TotalDisplayLines + addedLines; i++)  		displayLines [i].TextLine = totalLines;  	//identify to current "textLines[]" index  	TotalDisplayLines += addedLines;  	if (singleLine) {  		totalLines = 1;  		TotalDisplayLines = 1;  		displayLines [1].TextLine = 1;  		textLines [1].TotalLines = 1;  	}  	UpdateScrollBar (TotalDisplayLines' 0);  	Invalidate ();  } catch (Exception e) {  	Trace.WriteLine ("AppendText Error:" + e.Message' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: try {  	//adds a new line to the Text Window  	if (newLine.Length == 0)  		return;  	var isSpam = DateTime.Now.Ticks - previousAppendText <= 2000000;  	//2'000'000 ticks is 200milisecond.  	previousAppendText = DateTime.Now.Ticks;  	if (!Visible)  		unreadMarker++;  	else if (unreadMarker > 0)  		unreadMarker++;  	newLine = newLine.Replace ("\n"' " ");  	//Tips: don't use newline char for newline' split line into diff row (call AppendText() multiple time) instead  	newLine = newLine.Replace ("&#x3;"' TextColor.ColorChar.ToString ());  	//color start. &#x3 is 0x003  	newLine = newLine.Replace ("&#x3"' TextColor.ColorChar.ToString ());  	//color end  	newLine = ParseUrl (newLine);  	//get the color from the line  	if (newLine [0] == TextColor.ColorChar) {  		if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  		else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString ());  		//check of foreColor is less then 32       		if (foreColor > TextColor.colorRange) {  			foreColor = TextColor.text;  			//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  			//if (foreColor > 31) foreColor = foreColor - 32;  		}  	} else  		foreColor = color;  	newLine = NoColorMode ? TextColor.StripCodes (newLine) : RedefineColorCodes (newLine);  	totalLines++;  	if (singleLine)  		totalLines = 1;  	var needSpace = totalLines >= MaxTextLines;  	var isExpanding = MaxTextLines < defaultMaxLines;  	var isFull = MaxTextLines >= HardMaximumLines;  	if (needSpace && !isExpanding && (isFull || !isSpam)) {  		//remove old text' create space for new text (recycle existing row)  		var toRemove = MaxTextLines / 10 + 1;  		//remove 10% of old text  		//calculate scrollbar offset:  		var lineCount = 0;  		var wrapCount = 0;  		while (lineCount < toRemove + 1) {  			if (displayLines [wrapCount + lineCount].Previous)  				wrapCount++;  			else  				lineCount++;  		}  		var vScrollBarOffset = wrapCount + lineCount - 1;  		vScrollBarOffset = Math.Min (vScrollBarOffset' vScrollBar.Value - 1);  		//shift existing texts upward:  		var x = 0;  		for (var i = toRemove; i < totalLines; i++) {  			textLines [x].TotalLines = textLines [i].TotalLines;  			textLines [x].Width = textLines [i].Width;  			textLines [x].Line = textLines [i].Line;  			textLines [x].TextColor = textLines [i].TextColor;  			x++;  		}  		//fill new space with empty string  		for (var i = totalLines - toRemove; i < MaxTextLines; i++) {  			textLines [i].TotalLines = 0;  			textLines [i].Line = "";  			textLines [i].Width = 0;  		}  		//set draw line to new space  		totalLines = totalLines - toRemove - 1;  		if (Height != 0) {  			TotalDisplayLines = FormatLines (totalLines' 1' 0);  			UpdateScrollBar (TotalDisplayLines' vScrollBarOffset * -1);  			Invalidate ();  		}  		totalLines++;  	} else if (needSpace && !isFull && (isExpanding || isSpam))  		AddNewTextLines ();  	//create new space for new text (new row)  	textLines [totalLines].Line = newLine;  	var g = CreateGraphics ();  	//properly measure for bold characters needed  	var sf = TextFormatFlags.NoPadding;  	textLines [totalLines].Width = MS (g' TextColor.StripCodes (newLine)' Font);  	g.Dispose ();  	textLines [totalLines].TextColor = foreColor;  	var addedLines = FormatLines (totalLines' totalLines' TotalDisplayLines);  	//split text into multi-line' and put into "displayLines[]"  	addedLines -= TotalDisplayLines;  	textLines [totalLines].TotalLines = addedLines;  	for (var i = TotalDisplayLines + 1; i < TotalDisplayLines + addedLines; i++)  		displayLines [i].TextLine = totalLines;  	//identify to current "textLines[]" index  	TotalDisplayLines += addedLines;  	if (singleLine) {  		totalLines = 1;  		TotalDisplayLines = 1;  		displayLines [1].TextLine = 1;  		textLines [1].TotalLines = 1;  	}  	UpdateScrollBar (TotalDisplayLines' 0);  	Invalidate ();  } catch (Exception e) {  	Trace.WriteLine ("AppendText Error:" + e.Message' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: try {  	//adds a new line to the Text Window  	if (newLine.Length == 0)  		return;  	var isSpam = DateTime.Now.Ticks - previousAppendText <= 2000000;  	//2'000'000 ticks is 200milisecond.  	previousAppendText = DateTime.Now.Ticks;  	if (!Visible)  		unreadMarker++;  	else if (unreadMarker > 0)  		unreadMarker++;  	newLine = newLine.Replace ("\n"' " ");  	//Tips: don't use newline char for newline' split line into diff row (call AppendText() multiple time) instead  	newLine = newLine.Replace ("&#x3;"' TextColor.ColorChar.ToString ());  	//color start. &#x3 is 0x003  	newLine = newLine.Replace ("&#x3"' TextColor.ColorChar.ToString ());  	//color end  	newLine = ParseUrl (newLine);  	//get the color from the line  	if (newLine [0] == TextColor.ColorChar) {  		if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  		else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  			foreColor = Convert.ToInt32 (newLine [1].ToString ());  		//check of foreColor is less then 32       		if (foreColor > TextColor.colorRange) {  			foreColor = TextColor.text;  			//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  			//if (foreColor > 31) foreColor = foreColor - 32;  		}  	} else  		foreColor = color;  	newLine = NoColorMode ? TextColor.StripCodes (newLine) : RedefineColorCodes (newLine);  	totalLines++;  	if (singleLine)  		totalLines = 1;  	var needSpace = totalLines >= MaxTextLines;  	var isExpanding = MaxTextLines < defaultMaxLines;  	var isFull = MaxTextLines >= HardMaximumLines;  	if (needSpace && !isExpanding && (isFull || !isSpam)) {  		//remove old text' create space for new text (recycle existing row)  		var toRemove = MaxTextLines / 10 + 1;  		//remove 10% of old text  		//calculate scrollbar offset:  		var lineCount = 0;  		var wrapCount = 0;  		while (lineCount < toRemove + 1) {  			if (displayLines [wrapCount + lineCount].Previous)  				wrapCount++;  			else  				lineCount++;  		}  		var vScrollBarOffset = wrapCount + lineCount - 1;  		vScrollBarOffset = Math.Min (vScrollBarOffset' vScrollBar.Value - 1);  		//shift existing texts upward:  		var x = 0;  		for (var i = toRemove; i < totalLines; i++) {  			textLines [x].TotalLines = textLines [i].TotalLines;  			textLines [x].Width = textLines [i].Width;  			textLines [x].Line = textLines [i].Line;  			textLines [x].TextColor = textLines [i].TextColor;  			x++;  		}  		//fill new space with empty string  		for (var i = totalLines - toRemove; i < MaxTextLines; i++) {  			textLines [i].TotalLines = 0;  			textLines [i].Line = "";  			textLines [i].Width = 0;  		}  		//set draw line to new space  		totalLines = totalLines - toRemove - 1;  		if (Height != 0) {  			TotalDisplayLines = FormatLines (totalLines' 1' 0);  			UpdateScrollBar (TotalDisplayLines' vScrollBarOffset * -1);  			Invalidate ();  		}  		totalLines++;  	} else if (needSpace && !isFull && (isExpanding || isSpam))  		AddNewTextLines ();  	//create new space for new text (new row)  	textLines [totalLines].Line = newLine;  	var g = CreateGraphics ();  	//properly measure for bold characters needed  	var sf = TextFormatFlags.NoPadding;  	textLines [totalLines].Width = MS (g' TextColor.StripCodes (newLine)' Font);  	g.Dispose ();  	textLines [totalLines].TextColor = foreColor;  	var addedLines = FormatLines (totalLines' totalLines' TotalDisplayLines);  	//split text into multi-line' and put into "displayLines[]"  	addedLines -= TotalDisplayLines;  	textLines [totalLines].TotalLines = addedLines;  	for (var i = TotalDisplayLines + 1; i < TotalDisplayLines + addedLines; i++)  		displayLines [i].TextLine = totalLines;  	//identify to current "textLines[]" index  	TotalDisplayLines += addedLines;  	if (singleLine) {  		totalLines = 1;  		TotalDisplayLines = 1;  		displayLines [1].TextLine = 1;  		textLines [1].TotalLines = 1;  	}  	UpdateScrollBar (TotalDisplayLines' 0);  	Invalidate ();  } catch (Exception e) {  	Trace.WriteLine ("AppendText Error:" + e.Message' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (newLine [0] == TextColor.ColorChar) {  	if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  		foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  	else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  		foreColor = Convert.ToInt32 (newLine [1].ToString ());  	//check of foreColor is less then 32       	if (foreColor > TextColor.colorRange) {  		foreColor = TextColor.text;  		//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  		//if (foreColor > 31) foreColor = foreColor - 32;  	}  } else  	foreColor = color;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (newLine [0] == TextColor.ColorChar) {  	if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  		foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  	else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  		foreColor = Convert.ToInt32 (newLine [1].ToString ());  	//check of foreColor is less then 32       	if (foreColor > TextColor.colorRange) {  		foreColor = TextColor.text;  		//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  		//if (foreColor > 31) foreColor = foreColor - 32;  	}  } else  	foreColor = color;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (newLine [0] == TextColor.ColorChar) {  	if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  		foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  	else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  		foreColor = Convert.ToInt32 (newLine [1].ToString ());  	//check of foreColor is less then 32       	if (foreColor > TextColor.colorRange) {  		foreColor = TextColor.text;  		//foreColor = foreColor - 32; //fixme: keep this magic shift 32? why is 32 important? might need to recheck  		//if (foreColor > 31) foreColor = foreColor - 32;  	}  } else  	foreColor = color;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  	foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  	foreColor = Convert.ToInt32 (newLine [1].ToString ());  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  	foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  	foreColor = Convert.ToInt32 (newLine [1].ToString ());  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (char.IsNumber (newLine [1]) && char.IsNumber (newLine [2]))  	foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  else if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  	foreColor = Convert.ToInt32 (newLine [1].ToString ());  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: foreColor = Convert.ToInt32 (newLine [1].ToString () + newLine [2]);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (char.IsNumber (newLine [1]) && !char.IsNumber (newLine [2]))  	foreColor = Convert.ToInt32 (newLine [1].ToString ());  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,AppendText,The following statement contains a magic number: if (needSpace && !isExpanding && (isFull || !isSpam)) {  	//remove old text' create space for new text (recycle existing row)  	var toRemove = MaxTextLines / 10 + 1;  	//remove 10% of old text  	//calculate scrollbar offset:  	var lineCount = 0;  	var wrapCount = 0;  	while (lineCount < toRemove + 1) {  		if (displayLines [wrapCount + lineCount].Previous)  			wrapCount++;  		else  			lineCount++;  	}  	var vScrollBarOffset = wrapCount + lineCount - 1;  	vScrollBarOffset = Math.Min (vScrollBarOffset' vScrollBar.Value - 1);  	//shift existing texts upward:  	var x = 0;  	for (var i = toRemove; i < totalLines; i++) {  		textLines [x].TotalLines = textLines [i].TotalLines;  		textLines [x].Width = textLines [i].Width;  		textLines [x].Line = textLines [i].Line;  		textLines [x].TextColor = textLines [i].TextColor;  		x++;  	}  	//fill new space with empty string  	for (var i = totalLines - toRemove; i < MaxTextLines; i++) {  		textLines [i].TotalLines = 0;  		textLines [i].Line = "";  		textLines [i].Width = 0;  	}  	//set draw line to new space  	totalLines = totalLines - toRemove - 1;  	if (Height != 0) {  		TotalDisplayLines = FormatLines (totalLines' 1' 0);  		UpdateScrollBar (TotalDisplayLines' vScrollBarOffset * -1);  		Invalidate ();  	}  	totalLines++;  } else if (needSpace && !isFull && (isExpanding || isSpam))  	AddNewTextLines ();  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var currentLine = endLine; currentLine <= startLine; currentLine++) {  	lastColor = "";  	displayLines [line].Previous = false;  	displayLines [line].Wrapped = false;  	//check of the line width is the same or less then the display width              	if (textLines [currentLine].Width <= displayWidth) {  		try {  			//System.Diagnostics.Debug.WriteLine("fits 1 line");  			displayLines [line].Line = textLines [currentLine].Line;  			displayLines [line].TextLine = currentLine;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  		} catch (Exception e) {  			Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  	} else {  		var lineSplit = false;  		var curLine = textLines [currentLine].Line;  		var buildString = new StringBuilder ();  		try {  			var emotSpace = 0.0f;  			for (var i = 0; i < curLine.Length; i++) {  				var ch = curLine.Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				//case boldChar:  				//    break;  				case TextColor.NewColorChar:  					buildString.Append (curLine.Substring (i' 5));  					if (lastColor.Length == 0)  						lastColor = curLine.Substring (i' 5);  					else  						nextColor = curLine.Substring (i' 5);  					i = i + 4;  					break;  				case TextColor.EmotChar:  					buildString.Append (curLine.Substring (i' 4));  					//make emot icon not disappear for multiline sentences  					var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  					//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  					var bm = TextImage.GetImage (emotNumber);  					emotSpace += bm.Width;  					i = i + 3;  					break;  				default:  					//check if there needs to be a linewrap  					if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  						if (lineSplit)  							displayLines [line].Line = lastColor + buildString;  						else  							displayLines [line].Line = buildString.ToString ();  						displayLines [line].TextLine = currentLine;  						displayLines [line].Wrapped = true;  						displayLines [line].TextColor = textLines [currentLine].TextColor;  						lineSplit = true;  						if (nextColor.Length != 0) {  							lastColor = nextColor;  							nextColor = "";  						}  						line++;  						if (line >= MaxDisplayLines)  							AddNewDisplayLines ();  						displayLines [line].Previous = true;  						buildString = null;  						buildString = new StringBuilder ();  						buildString.Append (ch [0]);  					} else  						buildString.Append (ch [0]);  					break;  				}  			}  		} catch (Exception e) {  			Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  			Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  		//get the remainder  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var currentLine = endLine; currentLine <= startLine; currentLine++) {  	lastColor = "";  	displayLines [line].Previous = false;  	displayLines [line].Wrapped = false;  	//check of the line width is the same or less then the display width              	if (textLines [currentLine].Width <= displayWidth) {  		try {  			//System.Diagnostics.Debug.WriteLine("fits 1 line");  			displayLines [line].Line = textLines [currentLine].Line;  			displayLines [line].TextLine = currentLine;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  		} catch (Exception e) {  			Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  	} else {  		var lineSplit = false;  		var curLine = textLines [currentLine].Line;  		var buildString = new StringBuilder ();  		try {  			var emotSpace = 0.0f;  			for (var i = 0; i < curLine.Length; i++) {  				var ch = curLine.Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				//case boldChar:  				//    break;  				case TextColor.NewColorChar:  					buildString.Append (curLine.Substring (i' 5));  					if (lastColor.Length == 0)  						lastColor = curLine.Substring (i' 5);  					else  						nextColor = curLine.Substring (i' 5);  					i = i + 4;  					break;  				case TextColor.EmotChar:  					buildString.Append (curLine.Substring (i' 4));  					//make emot icon not disappear for multiline sentences  					var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  					//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  					var bm = TextImage.GetImage (emotNumber);  					emotSpace += bm.Width;  					i = i + 3;  					break;  				default:  					//check if there needs to be a linewrap  					if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  						if (lineSplit)  							displayLines [line].Line = lastColor + buildString;  						else  							displayLines [line].Line = buildString.ToString ();  						displayLines [line].TextLine = currentLine;  						displayLines [line].Wrapped = true;  						displayLines [line].TextColor = textLines [currentLine].TextColor;  						lineSplit = true;  						if (nextColor.Length != 0) {  							lastColor = nextColor;  							nextColor = "";  						}  						line++;  						if (line >= MaxDisplayLines)  							AddNewDisplayLines ();  						displayLines [line].Previous = true;  						buildString = null;  						buildString = new StringBuilder ();  						buildString.Append (ch [0]);  					} else  						buildString.Append (ch [0]);  					break;  				}  			}  		} catch (Exception e) {  			Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  			Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  		//get the remainder  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var currentLine = endLine; currentLine <= startLine; currentLine++) {  	lastColor = "";  	displayLines [line].Previous = false;  	displayLines [line].Wrapped = false;  	//check of the line width is the same or less then the display width              	if (textLines [currentLine].Width <= displayWidth) {  		try {  			//System.Diagnostics.Debug.WriteLine("fits 1 line");  			displayLines [line].Line = textLines [currentLine].Line;  			displayLines [line].TextLine = currentLine;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  		} catch (Exception e) {  			Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  	} else {  		var lineSplit = false;  		var curLine = textLines [currentLine].Line;  		var buildString = new StringBuilder ();  		try {  			var emotSpace = 0.0f;  			for (var i = 0; i < curLine.Length; i++) {  				var ch = curLine.Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				//case boldChar:  				//    break;  				case TextColor.NewColorChar:  					buildString.Append (curLine.Substring (i' 5));  					if (lastColor.Length == 0)  						lastColor = curLine.Substring (i' 5);  					else  						nextColor = curLine.Substring (i' 5);  					i = i + 4;  					break;  				case TextColor.EmotChar:  					buildString.Append (curLine.Substring (i' 4));  					//make emot icon not disappear for multiline sentences  					var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  					//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  					var bm = TextImage.GetImage (emotNumber);  					emotSpace += bm.Width;  					i = i + 3;  					break;  				default:  					//check if there needs to be a linewrap  					if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  						if (lineSplit)  							displayLines [line].Line = lastColor + buildString;  						else  							displayLines [line].Line = buildString.ToString ();  						displayLines [line].TextLine = currentLine;  						displayLines [line].Wrapped = true;  						displayLines [line].TextColor = textLines [currentLine].TextColor;  						lineSplit = true;  						if (nextColor.Length != 0) {  							lastColor = nextColor;  							nextColor = "";  						}  						line++;  						if (line >= MaxDisplayLines)  							AddNewDisplayLines ();  						displayLines [line].Previous = true;  						buildString = null;  						buildString = new StringBuilder ();  						buildString.Append (ch [0]);  					} else  						buildString.Append (ch [0]);  					break;  				}  			}  		} catch (Exception e) {  			Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  			Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  		//get the remainder  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var currentLine = endLine; currentLine <= startLine; currentLine++) {  	lastColor = "";  	displayLines [line].Previous = false;  	displayLines [line].Wrapped = false;  	//check of the line width is the same or less then the display width              	if (textLines [currentLine].Width <= displayWidth) {  		try {  			//System.Diagnostics.Debug.WriteLine("fits 1 line");  			displayLines [line].Line = textLines [currentLine].Line;  			displayLines [line].TextLine = currentLine;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  		} catch (Exception e) {  			Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  	} else {  		var lineSplit = false;  		var curLine = textLines [currentLine].Line;  		var buildString = new StringBuilder ();  		try {  			var emotSpace = 0.0f;  			for (var i = 0; i < curLine.Length; i++) {  				var ch = curLine.Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				//case boldChar:  				//    break;  				case TextColor.NewColorChar:  					buildString.Append (curLine.Substring (i' 5));  					if (lastColor.Length == 0)  						lastColor = curLine.Substring (i' 5);  					else  						nextColor = curLine.Substring (i' 5);  					i = i + 4;  					break;  				case TextColor.EmotChar:  					buildString.Append (curLine.Substring (i' 4));  					//make emot icon not disappear for multiline sentences  					var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  					//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  					var bm = TextImage.GetImage (emotNumber);  					emotSpace += bm.Width;  					i = i + 3;  					break;  				default:  					//check if there needs to be a linewrap  					if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  						if (lineSplit)  							displayLines [line].Line = lastColor + buildString;  						else  							displayLines [line].Line = buildString.ToString ();  						displayLines [line].TextLine = currentLine;  						displayLines [line].Wrapped = true;  						displayLines [line].TextColor = textLines [currentLine].TextColor;  						lineSplit = true;  						if (nextColor.Length != 0) {  							lastColor = nextColor;  							nextColor = "";  						}  						line++;  						if (line >= MaxDisplayLines)  							AddNewDisplayLines ();  						displayLines [line].Previous = true;  						buildString = null;  						buildString = new StringBuilder ();  						buildString.Append (ch [0]);  					} else  						buildString.Append (ch [0]);  					break;  				}  			}  		} catch (Exception e) {  			Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  			Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  		//get the remainder  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var currentLine = endLine; currentLine <= startLine; currentLine++) {  	lastColor = "";  	displayLines [line].Previous = false;  	displayLines [line].Wrapped = false;  	//check of the line width is the same or less then the display width              	if (textLines [currentLine].Width <= displayWidth) {  		try {  			//System.Diagnostics.Debug.WriteLine("fits 1 line");  			displayLines [line].Line = textLines [currentLine].Line;  			displayLines [line].TextLine = currentLine;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  		} catch (Exception e) {  			Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  	} else {  		var lineSplit = false;  		var curLine = textLines [currentLine].Line;  		var buildString = new StringBuilder ();  		try {  			var emotSpace = 0.0f;  			for (var i = 0; i < curLine.Length; i++) {  				var ch = curLine.Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				//case boldChar:  				//    break;  				case TextColor.NewColorChar:  					buildString.Append (curLine.Substring (i' 5));  					if (lastColor.Length == 0)  						lastColor = curLine.Substring (i' 5);  					else  						nextColor = curLine.Substring (i' 5);  					i = i + 4;  					break;  				case TextColor.EmotChar:  					buildString.Append (curLine.Substring (i' 4));  					//make emot icon not disappear for multiline sentences  					var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  					//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  					var bm = TextImage.GetImage (emotNumber);  					emotSpace += bm.Width;  					i = i + 3;  					break;  				default:  					//check if there needs to be a linewrap  					if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  						if (lineSplit)  							displayLines [line].Line = lastColor + buildString;  						else  							displayLines [line].Line = buildString.ToString ();  						displayLines [line].TextLine = currentLine;  						displayLines [line].Wrapped = true;  						displayLines [line].TextColor = textLines [currentLine].TextColor;  						lineSplit = true;  						if (nextColor.Length != 0) {  							lastColor = nextColor;  							nextColor = "";  						}  						line++;  						if (line >= MaxDisplayLines)  							AddNewDisplayLines ();  						displayLines [line].Previous = true;  						buildString = null;  						buildString = new StringBuilder ();  						buildString.Append (ch [0]);  					} else  						buildString.Append (ch [0]);  					break;  				}  			}  		} catch (Exception e) {  			Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  			Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  		//get the remainder  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var currentLine = endLine; currentLine <= startLine; currentLine++) {  	lastColor = "";  	displayLines [line].Previous = false;  	displayLines [line].Wrapped = false;  	//check of the line width is the same or less then the display width              	if (textLines [currentLine].Width <= displayWidth) {  		try {  			//System.Diagnostics.Debug.WriteLine("fits 1 line");  			displayLines [line].Line = textLines [currentLine].Line;  			displayLines [line].TextLine = currentLine;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  		} catch (Exception e) {  			Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  	} else {  		var lineSplit = false;  		var curLine = textLines [currentLine].Line;  		var buildString = new StringBuilder ();  		try {  			var emotSpace = 0.0f;  			for (var i = 0; i < curLine.Length; i++) {  				var ch = curLine.Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				//case boldChar:  				//    break;  				case TextColor.NewColorChar:  					buildString.Append (curLine.Substring (i' 5));  					if (lastColor.Length == 0)  						lastColor = curLine.Substring (i' 5);  					else  						nextColor = curLine.Substring (i' 5);  					i = i + 4;  					break;  				case TextColor.EmotChar:  					buildString.Append (curLine.Substring (i' 4));  					//make emot icon not disappear for multiline sentences  					var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  					//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  					var bm = TextImage.GetImage (emotNumber);  					emotSpace += bm.Width;  					i = i + 3;  					break;  				default:  					//check if there needs to be a linewrap  					if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  						if (lineSplit)  							displayLines [line].Line = lastColor + buildString;  						else  							displayLines [line].Line = buildString.ToString ();  						displayLines [line].TextLine = currentLine;  						displayLines [line].Wrapped = true;  						displayLines [line].TextColor = textLines [currentLine].TextColor;  						lineSplit = true;  						if (nextColor.Length != 0) {  							lastColor = nextColor;  							nextColor = "";  						}  						line++;  						if (line >= MaxDisplayLines)  							AddNewDisplayLines ();  						displayLines [line].Previous = true;  						buildString = null;  						buildString = new StringBuilder ();  						buildString.Append (ch [0]);  					} else  						buildString.Append (ch [0]);  					break;  				}  			}  		} catch (Exception e) {  			Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  			Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  		//get the remainder  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var currentLine = endLine; currentLine <= startLine; currentLine++) {  	lastColor = "";  	displayLines [line].Previous = false;  	displayLines [line].Wrapped = false;  	//check of the line width is the same or less then the display width              	if (textLines [currentLine].Width <= displayWidth) {  		try {  			//System.Diagnostics.Debug.WriteLine("fits 1 line");  			displayLines [line].Line = textLines [currentLine].Line;  			displayLines [line].TextLine = currentLine;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  		} catch (Exception e) {  			Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  	} else {  		var lineSplit = false;  		var curLine = textLines [currentLine].Line;  		var buildString = new StringBuilder ();  		try {  			var emotSpace = 0.0f;  			for (var i = 0; i < curLine.Length; i++) {  				var ch = curLine.Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				//case boldChar:  				//    break;  				case TextColor.NewColorChar:  					buildString.Append (curLine.Substring (i' 5));  					if (lastColor.Length == 0)  						lastColor = curLine.Substring (i' 5);  					else  						nextColor = curLine.Substring (i' 5);  					i = i + 4;  					break;  				case TextColor.EmotChar:  					buildString.Append (curLine.Substring (i' 4));  					//make emot icon not disappear for multiline sentences  					var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  					//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  					var bm = TextImage.GetImage (emotNumber);  					emotSpace += bm.Width;  					i = i + 3;  					break;  				default:  					//check if there needs to be a linewrap  					if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  						if (lineSplit)  							displayLines [line].Line = lastColor + buildString;  						else  							displayLines [line].Line = buildString.ToString ();  						displayLines [line].TextLine = currentLine;  						displayLines [line].Wrapped = true;  						displayLines [line].TextColor = textLines [currentLine].TextColor;  						lineSplit = true;  						if (nextColor.Length != 0) {  							lastColor = nextColor;  							nextColor = "";  						}  						line++;  						if (line >= MaxDisplayLines)  							AddNewDisplayLines ();  						displayLines [line].Previous = true;  						buildString = null;  						buildString = new StringBuilder ();  						buildString.Append (ch [0]);  					} else  						buildString.Append (ch [0]);  					break;  				}  			}  		} catch (Exception e) {  			Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  			Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  		}  		//get the remainder  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (textLines [currentLine].Width <= displayWidth) {  	try {  		//System.Diagnostics.Debug.WriteLine("fits 1 line");  		displayLines [line].Line = textLines [currentLine].Line;  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	} catch (Exception e) {  		Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  } else {  	var lineSplit = false;  	var curLine = textLines [currentLine].Line;  	var buildString = new StringBuilder ();  	try {  		var emotSpace = 0.0f;  		for (var i = 0; i < curLine.Length; i++) {  			var ch = curLine.Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			//case boldChar:  			//    break;  			case TextColor.NewColorChar:  				buildString.Append (curLine.Substring (i' 5));  				if (lastColor.Length == 0)  					lastColor = curLine.Substring (i' 5);  				else  					nextColor = curLine.Substring (i' 5);  				i = i + 4;  				break;  			case TextColor.EmotChar:  				buildString.Append (curLine.Substring (i' 4));  				//make emot icon not disappear for multiline sentences  				var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  				//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  				var bm = TextImage.GetImage (emotNumber);  				emotSpace += bm.Width;  				i = i + 3;  				break;  			default:  				//check if there needs to be a linewrap  				if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  					if (lineSplit)  						displayLines [line].Line = lastColor + buildString;  					else  						displayLines [line].Line = buildString.ToString ();  					displayLines [line].TextLine = currentLine;  					displayLines [line].Wrapped = true;  					displayLines [line].TextColor = textLines [currentLine].TextColor;  					lineSplit = true;  					if (nextColor.Length != 0) {  						lastColor = nextColor;  						nextColor = "";  					}  					line++;  					if (line >= MaxDisplayLines)  						AddNewDisplayLines ();  					displayLines [line].Previous = true;  					buildString = null;  					buildString = new StringBuilder ();  					buildString.Append (ch [0]);  				} else  					buildString.Append (ch [0]);  				break;  			}  		}  	} catch (Exception e) {  		Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  		Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  	//get the remainder  	if (lineSplit)  		displayLines [line].Line = lastColor + buildString;  	else  		displayLines [line].Line = buildString.ToString ();  	displayLines [line].TextLine = currentLine;  	displayLines [line].TextColor = textLines [currentLine].TextColor;  	line++;  	if (line >= MaxDisplayLines)  		AddNewDisplayLines ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (textLines [currentLine].Width <= displayWidth) {  	try {  		//System.Diagnostics.Debug.WriteLine("fits 1 line");  		displayLines [line].Line = textLines [currentLine].Line;  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	} catch (Exception e) {  		Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  } else {  	var lineSplit = false;  	var curLine = textLines [currentLine].Line;  	var buildString = new StringBuilder ();  	try {  		var emotSpace = 0.0f;  		for (var i = 0; i < curLine.Length; i++) {  			var ch = curLine.Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			//case boldChar:  			//    break;  			case TextColor.NewColorChar:  				buildString.Append (curLine.Substring (i' 5));  				if (lastColor.Length == 0)  					lastColor = curLine.Substring (i' 5);  				else  					nextColor = curLine.Substring (i' 5);  				i = i + 4;  				break;  			case TextColor.EmotChar:  				buildString.Append (curLine.Substring (i' 4));  				//make emot icon not disappear for multiline sentences  				var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  				//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  				var bm = TextImage.GetImage (emotNumber);  				emotSpace += bm.Width;  				i = i + 3;  				break;  			default:  				//check if there needs to be a linewrap  				if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  					if (lineSplit)  						displayLines [line].Line = lastColor + buildString;  					else  						displayLines [line].Line = buildString.ToString ();  					displayLines [line].TextLine = currentLine;  					displayLines [line].Wrapped = true;  					displayLines [line].TextColor = textLines [currentLine].TextColor;  					lineSplit = true;  					if (nextColor.Length != 0) {  						lastColor = nextColor;  						nextColor = "";  					}  					line++;  					if (line >= MaxDisplayLines)  						AddNewDisplayLines ();  					displayLines [line].Previous = true;  					buildString = null;  					buildString = new StringBuilder ();  					buildString.Append (ch [0]);  				} else  					buildString.Append (ch [0]);  				break;  			}  		}  	} catch (Exception e) {  		Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  		Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  	//get the remainder  	if (lineSplit)  		displayLines [line].Line = lastColor + buildString;  	else  		displayLines [line].Line = buildString.ToString ();  	displayLines [line].TextLine = currentLine;  	displayLines [line].TextColor = textLines [currentLine].TextColor;  	line++;  	if (line >= MaxDisplayLines)  		AddNewDisplayLines ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (textLines [currentLine].Width <= displayWidth) {  	try {  		//System.Diagnostics.Debug.WriteLine("fits 1 line");  		displayLines [line].Line = textLines [currentLine].Line;  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	} catch (Exception e) {  		Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  } else {  	var lineSplit = false;  	var curLine = textLines [currentLine].Line;  	var buildString = new StringBuilder ();  	try {  		var emotSpace = 0.0f;  		for (var i = 0; i < curLine.Length; i++) {  			var ch = curLine.Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			//case boldChar:  			//    break;  			case TextColor.NewColorChar:  				buildString.Append (curLine.Substring (i' 5));  				if (lastColor.Length == 0)  					lastColor = curLine.Substring (i' 5);  				else  					nextColor = curLine.Substring (i' 5);  				i = i + 4;  				break;  			case TextColor.EmotChar:  				buildString.Append (curLine.Substring (i' 4));  				//make emot icon not disappear for multiline sentences  				var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  				//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  				var bm = TextImage.GetImage (emotNumber);  				emotSpace += bm.Width;  				i = i + 3;  				break;  			default:  				//check if there needs to be a linewrap  				if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  					if (lineSplit)  						displayLines [line].Line = lastColor + buildString;  					else  						displayLines [line].Line = buildString.ToString ();  					displayLines [line].TextLine = currentLine;  					displayLines [line].Wrapped = true;  					displayLines [line].TextColor = textLines [currentLine].TextColor;  					lineSplit = true;  					if (nextColor.Length != 0) {  						lastColor = nextColor;  						nextColor = "";  					}  					line++;  					if (line >= MaxDisplayLines)  						AddNewDisplayLines ();  					displayLines [line].Previous = true;  					buildString = null;  					buildString = new StringBuilder ();  					buildString.Append (ch [0]);  				} else  					buildString.Append (ch [0]);  				break;  			}  		}  	} catch (Exception e) {  		Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  		Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  	//get the remainder  	if (lineSplit)  		displayLines [line].Line = lastColor + buildString;  	else  		displayLines [line].Line = buildString.ToString ();  	displayLines [line].TextLine = currentLine;  	displayLines [line].TextColor = textLines [currentLine].TextColor;  	line++;  	if (line >= MaxDisplayLines)  		AddNewDisplayLines ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (textLines [currentLine].Width <= displayWidth) {  	try {  		//System.Diagnostics.Debug.WriteLine("fits 1 line");  		displayLines [line].Line = textLines [currentLine].Line;  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	} catch (Exception e) {  		Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  } else {  	var lineSplit = false;  	var curLine = textLines [currentLine].Line;  	var buildString = new StringBuilder ();  	try {  		var emotSpace = 0.0f;  		for (var i = 0; i < curLine.Length; i++) {  			var ch = curLine.Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			//case boldChar:  			//    break;  			case TextColor.NewColorChar:  				buildString.Append (curLine.Substring (i' 5));  				if (lastColor.Length == 0)  					lastColor = curLine.Substring (i' 5);  				else  					nextColor = curLine.Substring (i' 5);  				i = i + 4;  				break;  			case TextColor.EmotChar:  				buildString.Append (curLine.Substring (i' 4));  				//make emot icon not disappear for multiline sentences  				var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  				//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  				var bm = TextImage.GetImage (emotNumber);  				emotSpace += bm.Width;  				i = i + 3;  				break;  			default:  				//check if there needs to be a linewrap  				if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  					if (lineSplit)  						displayLines [line].Line = lastColor + buildString;  					else  						displayLines [line].Line = buildString.ToString ();  					displayLines [line].TextLine = currentLine;  					displayLines [line].Wrapped = true;  					displayLines [line].TextColor = textLines [currentLine].TextColor;  					lineSplit = true;  					if (nextColor.Length != 0) {  						lastColor = nextColor;  						nextColor = "";  					}  					line++;  					if (line >= MaxDisplayLines)  						AddNewDisplayLines ();  					displayLines [line].Previous = true;  					buildString = null;  					buildString = new StringBuilder ();  					buildString.Append (ch [0]);  				} else  					buildString.Append (ch [0]);  				break;  			}  		}  	} catch (Exception e) {  		Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  		Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  	//get the remainder  	if (lineSplit)  		displayLines [line].Line = lastColor + buildString;  	else  		displayLines [line].Line = buildString.ToString ();  	displayLines [line].TextLine = currentLine;  	displayLines [line].TextColor = textLines [currentLine].TextColor;  	line++;  	if (line >= MaxDisplayLines)  		AddNewDisplayLines ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (textLines [currentLine].Width <= displayWidth) {  	try {  		//System.Diagnostics.Debug.WriteLine("fits 1 line");  		displayLines [line].Line = textLines [currentLine].Line;  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	} catch (Exception e) {  		Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  } else {  	var lineSplit = false;  	var curLine = textLines [currentLine].Line;  	var buildString = new StringBuilder ();  	try {  		var emotSpace = 0.0f;  		for (var i = 0; i < curLine.Length; i++) {  			var ch = curLine.Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			//case boldChar:  			//    break;  			case TextColor.NewColorChar:  				buildString.Append (curLine.Substring (i' 5));  				if (lastColor.Length == 0)  					lastColor = curLine.Substring (i' 5);  				else  					nextColor = curLine.Substring (i' 5);  				i = i + 4;  				break;  			case TextColor.EmotChar:  				buildString.Append (curLine.Substring (i' 4));  				//make emot icon not disappear for multiline sentences  				var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  				//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  				var bm = TextImage.GetImage (emotNumber);  				emotSpace += bm.Width;  				i = i + 3;  				break;  			default:  				//check if there needs to be a linewrap  				if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  					if (lineSplit)  						displayLines [line].Line = lastColor + buildString;  					else  						displayLines [line].Line = buildString.ToString ();  					displayLines [line].TextLine = currentLine;  					displayLines [line].Wrapped = true;  					displayLines [line].TextColor = textLines [currentLine].TextColor;  					lineSplit = true;  					if (nextColor.Length != 0) {  						lastColor = nextColor;  						nextColor = "";  					}  					line++;  					if (line >= MaxDisplayLines)  						AddNewDisplayLines ();  					displayLines [line].Previous = true;  					buildString = null;  					buildString = new StringBuilder ();  					buildString.Append (ch [0]);  				} else  					buildString.Append (ch [0]);  				break;  			}  		}  	} catch (Exception e) {  		Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  		Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  	//get the remainder  	if (lineSplit)  		displayLines [line].Line = lastColor + buildString;  	else  		displayLines [line].Line = buildString.ToString ();  	displayLines [line].TextLine = currentLine;  	displayLines [line].TextColor = textLines [currentLine].TextColor;  	line++;  	if (line >= MaxDisplayLines)  		AddNewDisplayLines ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (textLines [currentLine].Width <= displayWidth) {  	try {  		//System.Diagnostics.Debug.WriteLine("fits 1 line");  		displayLines [line].Line = textLines [currentLine].Line;  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	} catch (Exception e) {  		Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  } else {  	var lineSplit = false;  	var curLine = textLines [currentLine].Line;  	var buildString = new StringBuilder ();  	try {  		var emotSpace = 0.0f;  		for (var i = 0; i < curLine.Length; i++) {  			var ch = curLine.Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			//case boldChar:  			//    break;  			case TextColor.NewColorChar:  				buildString.Append (curLine.Substring (i' 5));  				if (lastColor.Length == 0)  					lastColor = curLine.Substring (i' 5);  				else  					nextColor = curLine.Substring (i' 5);  				i = i + 4;  				break;  			case TextColor.EmotChar:  				buildString.Append (curLine.Substring (i' 4));  				//make emot icon not disappear for multiline sentences  				var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  				//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  				var bm = TextImage.GetImage (emotNumber);  				emotSpace += bm.Width;  				i = i + 3;  				break;  			default:  				//check if there needs to be a linewrap  				if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  					if (lineSplit)  						displayLines [line].Line = lastColor + buildString;  					else  						displayLines [line].Line = buildString.ToString ();  					displayLines [line].TextLine = currentLine;  					displayLines [line].Wrapped = true;  					displayLines [line].TextColor = textLines [currentLine].TextColor;  					lineSplit = true;  					if (nextColor.Length != 0) {  						lastColor = nextColor;  						nextColor = "";  					}  					line++;  					if (line >= MaxDisplayLines)  						AddNewDisplayLines ();  					displayLines [line].Previous = true;  					buildString = null;  					buildString = new StringBuilder ();  					buildString.Append (ch [0]);  				} else  					buildString.Append (ch [0]);  				break;  			}  		}  	} catch (Exception e) {  		Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  		Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  	//get the remainder  	if (lineSplit)  		displayLines [line].Line = lastColor + buildString;  	else  		displayLines [line].Line = buildString.ToString ();  	displayLines [line].TextLine = currentLine;  	displayLines [line].TextColor = textLines [currentLine].TextColor;  	line++;  	if (line >= MaxDisplayLines)  		AddNewDisplayLines ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (textLines [currentLine].Width <= displayWidth) {  	try {  		//System.Diagnostics.Debug.WriteLine("fits 1 line");  		displayLines [line].Line = textLines [currentLine].Line;  		displayLines [line].TextLine = currentLine;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  	} catch (Exception e) {  		Trace.WriteLine ("FormatLines Error1:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  } else {  	var lineSplit = false;  	var curLine = textLines [currentLine].Line;  	var buildString = new StringBuilder ();  	try {  		var emotSpace = 0.0f;  		for (var i = 0; i < curLine.Length; i++) {  			var ch = curLine.Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			//case boldChar:  			//    break;  			case TextColor.NewColorChar:  				buildString.Append (curLine.Substring (i' 5));  				if (lastColor.Length == 0)  					lastColor = curLine.Substring (i' 5);  				else  					nextColor = curLine.Substring (i' 5);  				i = i + 4;  				break;  			case TextColor.EmotChar:  				buildString.Append (curLine.Substring (i' 4));  				//make emot icon not disappear for multiline sentences  				var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  				//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  				var bm = TextImage.GetImage (emotNumber);  				emotSpace += bm.Width;  				i = i + 3;  				break;  			default:  				//check if there needs to be a linewrap  				if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  					if (lineSplit)  						displayLines [line].Line = lastColor + buildString;  					else  						displayLines [line].Line = buildString.ToString ();  					displayLines [line].TextLine = currentLine;  					displayLines [line].Wrapped = true;  					displayLines [line].TextColor = textLines [currentLine].TextColor;  					lineSplit = true;  					if (nextColor.Length != 0) {  						lastColor = nextColor;  						nextColor = "";  					}  					line++;  					if (line >= MaxDisplayLines)  						AddNewDisplayLines ();  					displayLines [line].Previous = true;  					buildString = null;  					buildString = new StringBuilder ();  					buildString.Append (ch [0]);  				} else  					buildString.Append (ch [0]);  				break;  			}  		}  	} catch (Exception e) {  		Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  		Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  	}  	//get the remainder  	if (lineSplit)  		displayLines [line].Line = lastColor + buildString;  	else  		displayLines [line].Line = buildString.ToString ();  	displayLines [line].TextLine = currentLine;  	displayLines [line].TextColor = textLines [currentLine].TextColor;  	line++;  	if (line >= MaxDisplayLines)  		AddNewDisplayLines ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: try {  	var emotSpace = 0.0f;  	for (var i = 0; i < curLine.Length; i++) {  		var ch = curLine.Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		//case boldChar:  		//    break;  		case TextColor.NewColorChar:  			buildString.Append (curLine.Substring (i' 5));  			if (lastColor.Length == 0)  				lastColor = curLine.Substring (i' 5);  			else  				nextColor = curLine.Substring (i' 5);  			i = i + 4;  			break;  		case TextColor.EmotChar:  			buildString.Append (curLine.Substring (i' 4));  			//make emot icon not disappear for multiline sentences  			var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  			//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  			var bm = TextImage.GetImage (emotNumber);  			emotSpace += bm.Width;  			i = i + 3;  			break;  		default:  			//check if there needs to be a linewrap  			if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  				if (lineSplit)  					displayLines [line].Line = lastColor + buildString;  				else  					displayLines [line].Line = buildString.ToString ();  				displayLines [line].TextLine = currentLine;  				displayLines [line].Wrapped = true;  				displayLines [line].TextColor = textLines [currentLine].TextColor;  				lineSplit = true;  				if (nextColor.Length != 0) {  					lastColor = nextColor;  					nextColor = "";  				}  				line++;  				if (line >= MaxDisplayLines)  					AddNewDisplayLines ();  				displayLines [line].Previous = true;  				buildString = null;  				buildString = new StringBuilder ();  				buildString.Append (ch [0]);  			} else  				buildString.Append (ch [0]);  			break;  		}  	}  } catch (Exception e) {  	Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  	Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: try {  	var emotSpace = 0.0f;  	for (var i = 0; i < curLine.Length; i++) {  		var ch = curLine.Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		//case boldChar:  		//    break;  		case TextColor.NewColorChar:  			buildString.Append (curLine.Substring (i' 5));  			if (lastColor.Length == 0)  				lastColor = curLine.Substring (i' 5);  			else  				nextColor = curLine.Substring (i' 5);  			i = i + 4;  			break;  		case TextColor.EmotChar:  			buildString.Append (curLine.Substring (i' 4));  			//make emot icon not disappear for multiline sentences  			var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  			//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  			var bm = TextImage.GetImage (emotNumber);  			emotSpace += bm.Width;  			i = i + 3;  			break;  		default:  			//check if there needs to be a linewrap  			if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  				if (lineSplit)  					displayLines [line].Line = lastColor + buildString;  				else  					displayLines [line].Line = buildString.ToString ();  				displayLines [line].TextLine = currentLine;  				displayLines [line].Wrapped = true;  				displayLines [line].TextColor = textLines [currentLine].TextColor;  				lineSplit = true;  				if (nextColor.Length != 0) {  					lastColor = nextColor;  					nextColor = "";  				}  				line++;  				if (line >= MaxDisplayLines)  					AddNewDisplayLines ();  				displayLines [line].Previous = true;  				buildString = null;  				buildString = new StringBuilder ();  				buildString.Append (ch [0]);  			} else  				buildString.Append (ch [0]);  			break;  		}  	}  } catch (Exception e) {  	Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  	Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: try {  	var emotSpace = 0.0f;  	for (var i = 0; i < curLine.Length; i++) {  		var ch = curLine.Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		//case boldChar:  		//    break;  		case TextColor.NewColorChar:  			buildString.Append (curLine.Substring (i' 5));  			if (lastColor.Length == 0)  				lastColor = curLine.Substring (i' 5);  			else  				nextColor = curLine.Substring (i' 5);  			i = i + 4;  			break;  		case TextColor.EmotChar:  			buildString.Append (curLine.Substring (i' 4));  			//make emot icon not disappear for multiline sentences  			var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  			//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  			var bm = TextImage.GetImage (emotNumber);  			emotSpace += bm.Width;  			i = i + 3;  			break;  		default:  			//check if there needs to be a linewrap  			if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  				if (lineSplit)  					displayLines [line].Line = lastColor + buildString;  				else  					displayLines [line].Line = buildString.ToString ();  				displayLines [line].TextLine = currentLine;  				displayLines [line].Wrapped = true;  				displayLines [line].TextColor = textLines [currentLine].TextColor;  				lineSplit = true;  				if (nextColor.Length != 0) {  					lastColor = nextColor;  					nextColor = "";  				}  				line++;  				if (line >= MaxDisplayLines)  					AddNewDisplayLines ();  				displayLines [line].Previous = true;  				buildString = null;  				buildString = new StringBuilder ();  				buildString.Append (ch [0]);  			} else  				buildString.Append (ch [0]);  			break;  		}  	}  } catch (Exception e) {  	Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  	Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: try {  	var emotSpace = 0.0f;  	for (var i = 0; i < curLine.Length; i++) {  		var ch = curLine.Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		//case boldChar:  		//    break;  		case TextColor.NewColorChar:  			buildString.Append (curLine.Substring (i' 5));  			if (lastColor.Length == 0)  				lastColor = curLine.Substring (i' 5);  			else  				nextColor = curLine.Substring (i' 5);  			i = i + 4;  			break;  		case TextColor.EmotChar:  			buildString.Append (curLine.Substring (i' 4));  			//make emot icon not disappear for multiline sentences  			var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  			//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  			var bm = TextImage.GetImage (emotNumber);  			emotSpace += bm.Width;  			i = i + 3;  			break;  		default:  			//check if there needs to be a linewrap  			if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  				if (lineSplit)  					displayLines [line].Line = lastColor + buildString;  				else  					displayLines [line].Line = buildString.ToString ();  				displayLines [line].TextLine = currentLine;  				displayLines [line].Wrapped = true;  				displayLines [line].TextColor = textLines [currentLine].TextColor;  				lineSplit = true;  				if (nextColor.Length != 0) {  					lastColor = nextColor;  					nextColor = "";  				}  				line++;  				if (line >= MaxDisplayLines)  					AddNewDisplayLines ();  				displayLines [line].Previous = true;  				buildString = null;  				buildString = new StringBuilder ();  				buildString.Append (ch [0]);  			} else  				buildString.Append (ch [0]);  			break;  		}  	}  } catch (Exception e) {  	Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  	Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: try {  	var emotSpace = 0.0f;  	for (var i = 0; i < curLine.Length; i++) {  		var ch = curLine.Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		//case boldChar:  		//    break;  		case TextColor.NewColorChar:  			buildString.Append (curLine.Substring (i' 5));  			if (lastColor.Length == 0)  				lastColor = curLine.Substring (i' 5);  			else  				nextColor = curLine.Substring (i' 5);  			i = i + 4;  			break;  		case TextColor.EmotChar:  			buildString.Append (curLine.Substring (i' 4));  			//make emot icon not disappear for multiline sentences  			var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  			//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  			var bm = TextImage.GetImage (emotNumber);  			emotSpace += bm.Width;  			i = i + 3;  			break;  		default:  			//check if there needs to be a linewrap  			if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  				if (lineSplit)  					displayLines [line].Line = lastColor + buildString;  				else  					displayLines [line].Line = buildString.ToString ();  				displayLines [line].TextLine = currentLine;  				displayLines [line].Wrapped = true;  				displayLines [line].TextColor = textLines [currentLine].TextColor;  				lineSplit = true;  				if (nextColor.Length != 0) {  					lastColor = nextColor;  					nextColor = "";  				}  				line++;  				if (line >= MaxDisplayLines)  					AddNewDisplayLines ();  				displayLines [line].Previous = true;  				buildString = null;  				buildString = new StringBuilder ();  				buildString.Append (ch [0]);  			} else  				buildString.Append (ch [0]);  			break;  		}  	}  } catch (Exception e) {  	Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  	Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: try {  	var emotSpace = 0.0f;  	for (var i = 0; i < curLine.Length; i++) {  		var ch = curLine.Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		//case boldChar:  		//    break;  		case TextColor.NewColorChar:  			buildString.Append (curLine.Substring (i' 5));  			if (lastColor.Length == 0)  				lastColor = curLine.Substring (i' 5);  			else  				nextColor = curLine.Substring (i' 5);  			i = i + 4;  			break;  		case TextColor.EmotChar:  			buildString.Append (curLine.Substring (i' 4));  			//make emot icon not disappear for multiline sentences  			var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  			//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  			var bm = TextImage.GetImage (emotNumber);  			emotSpace += bm.Width;  			i = i + 3;  			break;  		default:  			//check if there needs to be a linewrap  			if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  				if (lineSplit)  					displayLines [line].Line = lastColor + buildString;  				else  					displayLines [line].Line = buildString.ToString ();  				displayLines [line].TextLine = currentLine;  				displayLines [line].Wrapped = true;  				displayLines [line].TextColor = textLines [currentLine].TextColor;  				lineSplit = true;  				if (nextColor.Length != 0) {  					lastColor = nextColor;  					nextColor = "";  				}  				line++;  				if (line >= MaxDisplayLines)  					AddNewDisplayLines ();  				displayLines [line].Previous = true;  				buildString = null;  				buildString = new StringBuilder ();  				buildString.Append (ch [0]);  			} else  				buildString.Append (ch [0]);  			break;  		}  	}  } catch (Exception e) {  	Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  	Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: try {  	var emotSpace = 0.0f;  	for (var i = 0; i < curLine.Length; i++) {  		var ch = curLine.Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		//case boldChar:  		//    break;  		case TextColor.NewColorChar:  			buildString.Append (curLine.Substring (i' 5));  			if (lastColor.Length == 0)  				lastColor = curLine.Substring (i' 5);  			else  				nextColor = curLine.Substring (i' 5);  			i = i + 4;  			break;  		case TextColor.EmotChar:  			buildString.Append (curLine.Substring (i' 4));  			//make emot icon not disappear for multiline sentences  			var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  			//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  			var bm = TextImage.GetImage (emotNumber);  			emotSpace += bm.Width;  			i = i + 3;  			break;  		default:  			//check if there needs to be a linewrap  			if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  				if (lineSplit)  					displayLines [line].Line = lastColor + buildString;  				else  					displayLines [line].Line = buildString.ToString ();  				displayLines [line].TextLine = currentLine;  				displayLines [line].Wrapped = true;  				displayLines [line].TextColor = textLines [currentLine].TextColor;  				lineSplit = true;  				if (nextColor.Length != 0) {  					lastColor = nextColor;  					nextColor = "";  				}  				line++;  				if (line >= MaxDisplayLines)  					AddNewDisplayLines ();  				displayLines [line].Previous = true;  				buildString = null;  				buildString = new StringBuilder ();  				buildString.Append (ch [0]);  			} else  				buildString.Append (ch [0]);  			break;  		}  	}  } catch (Exception e) {  	Trace.WriteLine ("Line:" + curLine.Length + ":" + curLine);  	Trace.WriteLine ("FormatLines Error2:" + startLine + ":" + endLine + ":" + ii + ":" + currentLine + ":" + textLines.Capacity' e.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var i = 0; i < curLine.Length; i++) {  	var ch = curLine.Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	//case boldChar:  	//    break;  	case TextColor.NewColorChar:  		buildString.Append (curLine.Substring (i' 5));  		if (lastColor.Length == 0)  			lastColor = curLine.Substring (i' 5);  		else  			nextColor = curLine.Substring (i' 5);  		i = i + 4;  		break;  	case TextColor.EmotChar:  		buildString.Append (curLine.Substring (i' 4));  		//make emot icon not disappear for multiline sentences  		var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  		//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  		var bm = TextImage.GetImage (emotNumber);  		emotSpace += bm.Width;  		i = i + 3;  		break;  	default:  		//check if there needs to be a linewrap  		if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  			if (lineSplit)  				displayLines [line].Line = lastColor + buildString;  			else  				displayLines [line].Line = buildString.ToString ();  			displayLines [line].TextLine = currentLine;  			displayLines [line].Wrapped = true;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			lineSplit = true;  			if (nextColor.Length != 0) {  				lastColor = nextColor;  				nextColor = "";  			}  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  			displayLines [line].Previous = true;  			buildString = null;  			buildString = new StringBuilder ();  			buildString.Append (ch [0]);  		} else  			buildString.Append (ch [0]);  		break;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var i = 0; i < curLine.Length; i++) {  	var ch = curLine.Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	//case boldChar:  	//    break;  	case TextColor.NewColorChar:  		buildString.Append (curLine.Substring (i' 5));  		if (lastColor.Length == 0)  			lastColor = curLine.Substring (i' 5);  		else  			nextColor = curLine.Substring (i' 5);  		i = i + 4;  		break;  	case TextColor.EmotChar:  		buildString.Append (curLine.Substring (i' 4));  		//make emot icon not disappear for multiline sentences  		var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  		//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  		var bm = TextImage.GetImage (emotNumber);  		emotSpace += bm.Width;  		i = i + 3;  		break;  	default:  		//check if there needs to be a linewrap  		if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  			if (lineSplit)  				displayLines [line].Line = lastColor + buildString;  			else  				displayLines [line].Line = buildString.ToString ();  			displayLines [line].TextLine = currentLine;  			displayLines [line].Wrapped = true;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			lineSplit = true;  			if (nextColor.Length != 0) {  				lastColor = nextColor;  				nextColor = "";  			}  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  			displayLines [line].Previous = true;  			buildString = null;  			buildString = new StringBuilder ();  			buildString.Append (ch [0]);  		} else  			buildString.Append (ch [0]);  		break;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var i = 0; i < curLine.Length; i++) {  	var ch = curLine.Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	//case boldChar:  	//    break;  	case TextColor.NewColorChar:  		buildString.Append (curLine.Substring (i' 5));  		if (lastColor.Length == 0)  			lastColor = curLine.Substring (i' 5);  		else  			nextColor = curLine.Substring (i' 5);  		i = i + 4;  		break;  	case TextColor.EmotChar:  		buildString.Append (curLine.Substring (i' 4));  		//make emot icon not disappear for multiline sentences  		var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  		//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  		var bm = TextImage.GetImage (emotNumber);  		emotSpace += bm.Width;  		i = i + 3;  		break;  	default:  		//check if there needs to be a linewrap  		if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  			if (lineSplit)  				displayLines [line].Line = lastColor + buildString;  			else  				displayLines [line].Line = buildString.ToString ();  			displayLines [line].TextLine = currentLine;  			displayLines [line].Wrapped = true;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			lineSplit = true;  			if (nextColor.Length != 0) {  				lastColor = nextColor;  				nextColor = "";  			}  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  			displayLines [line].Previous = true;  			buildString = null;  			buildString = new StringBuilder ();  			buildString.Append (ch [0]);  		} else  			buildString.Append (ch [0]);  		break;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var i = 0; i < curLine.Length; i++) {  	var ch = curLine.Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	//case boldChar:  	//    break;  	case TextColor.NewColorChar:  		buildString.Append (curLine.Substring (i' 5));  		if (lastColor.Length == 0)  			lastColor = curLine.Substring (i' 5);  		else  			nextColor = curLine.Substring (i' 5);  		i = i + 4;  		break;  	case TextColor.EmotChar:  		buildString.Append (curLine.Substring (i' 4));  		//make emot icon not disappear for multiline sentences  		var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  		//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  		var bm = TextImage.GetImage (emotNumber);  		emotSpace += bm.Width;  		i = i + 3;  		break;  	default:  		//check if there needs to be a linewrap  		if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  			if (lineSplit)  				displayLines [line].Line = lastColor + buildString;  			else  				displayLines [line].Line = buildString.ToString ();  			displayLines [line].TextLine = currentLine;  			displayLines [line].Wrapped = true;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			lineSplit = true;  			if (nextColor.Length != 0) {  				lastColor = nextColor;  				nextColor = "";  			}  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  			displayLines [line].Previous = true;  			buildString = null;  			buildString = new StringBuilder ();  			buildString.Append (ch [0]);  		} else  			buildString.Append (ch [0]);  		break;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var i = 0; i < curLine.Length; i++) {  	var ch = curLine.Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	//case boldChar:  	//    break;  	case TextColor.NewColorChar:  		buildString.Append (curLine.Substring (i' 5));  		if (lastColor.Length == 0)  			lastColor = curLine.Substring (i' 5);  		else  			nextColor = curLine.Substring (i' 5);  		i = i + 4;  		break;  	case TextColor.EmotChar:  		buildString.Append (curLine.Substring (i' 4));  		//make emot icon not disappear for multiline sentences  		var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  		//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  		var bm = TextImage.GetImage (emotNumber);  		emotSpace += bm.Width;  		i = i + 3;  		break;  	default:  		//check if there needs to be a linewrap  		if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  			if (lineSplit)  				displayLines [line].Line = lastColor + buildString;  			else  				displayLines [line].Line = buildString.ToString ();  			displayLines [line].TextLine = currentLine;  			displayLines [line].Wrapped = true;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			lineSplit = true;  			if (nextColor.Length != 0) {  				lastColor = nextColor;  				nextColor = "";  			}  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  			displayLines [line].Previous = true;  			buildString = null;  			buildString = new StringBuilder ();  			buildString.Append (ch [0]);  		} else  			buildString.Append (ch [0]);  		break;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var i = 0; i < curLine.Length; i++) {  	var ch = curLine.Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	//case boldChar:  	//    break;  	case TextColor.NewColorChar:  		buildString.Append (curLine.Substring (i' 5));  		if (lastColor.Length == 0)  			lastColor = curLine.Substring (i' 5);  		else  			nextColor = curLine.Substring (i' 5);  		i = i + 4;  		break;  	case TextColor.EmotChar:  		buildString.Append (curLine.Substring (i' 4));  		//make emot icon not disappear for multiline sentences  		var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  		//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  		var bm = TextImage.GetImage (emotNumber);  		emotSpace += bm.Width;  		i = i + 3;  		break;  	default:  		//check if there needs to be a linewrap  		if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  			if (lineSplit)  				displayLines [line].Line = lastColor + buildString;  			else  				displayLines [line].Line = buildString.ToString ();  			displayLines [line].TextLine = currentLine;  			displayLines [line].Wrapped = true;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			lineSplit = true;  			if (nextColor.Length != 0) {  				lastColor = nextColor;  				nextColor = "";  			}  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  			displayLines [line].Previous = true;  			buildString = null;  			buildString = new StringBuilder ();  			buildString.Append (ch [0]);  		} else  			buildString.Append (ch [0]);  		break;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: for (var i = 0; i < curLine.Length; i++) {  	var ch = curLine.Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	//case boldChar:  	//    break;  	case TextColor.NewColorChar:  		buildString.Append (curLine.Substring (i' 5));  		if (lastColor.Length == 0)  			lastColor = curLine.Substring (i' 5);  		else  			nextColor = curLine.Substring (i' 5);  		i = i + 4;  		break;  	case TextColor.EmotChar:  		buildString.Append (curLine.Substring (i' 4));  		//make emot icon not disappear for multiline sentences  		var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  		//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  		var bm = TextImage.GetImage (emotNumber);  		emotSpace += bm.Width;  		i = i + 3;  		break;  	default:  		//check if there needs to be a linewrap  		if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  			if (lineSplit)  				displayLines [line].Line = lastColor + buildString;  			else  				displayLines [line].Line = buildString.ToString ();  			displayLines [line].TextLine = currentLine;  			displayLines [line].Wrapped = true;  			displayLines [line].TextColor = textLines [currentLine].TextColor;  			lineSplit = true;  			if (nextColor.Length != 0) {  				lastColor = nextColor;  				nextColor = "";  			}  			line++;  			if (line >= MaxDisplayLines)  				AddNewDisplayLines ();  			displayLines [line].Previous = true;  			buildString = null;  			buildString = new StringBuilder ();  			buildString.Append (ch [0]);  		} else  			buildString.Append (ch [0]);  		break;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: switch (ch [0]) {  //case boldChar:  //    break;  case TextColor.NewColorChar:  	buildString.Append (curLine.Substring (i' 5));  	if (lastColor.Length == 0)  		lastColor = curLine.Substring (i' 5);  	else  		nextColor = curLine.Substring (i' 5);  	i = i + 4;  	break;  case TextColor.EmotChar:  	buildString.Append (curLine.Substring (i' 4));  	//make emot icon not disappear for multiline sentences  	var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  	//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  	var bm = TextImage.GetImage (emotNumber);  	emotSpace += bm.Width;  	i = i + 3;  	break;  default:  	//check if there needs to be a linewrap  	if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].Wrapped = true;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		lineSplit = true;  		if (nextColor.Length != 0) {  			lastColor = nextColor;  			nextColor = "";  		}  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  		displayLines [line].Previous = true;  		buildString = null;  		buildString = new StringBuilder ();  		buildString.Append (ch [0]);  	} else  		buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: switch (ch [0]) {  //case boldChar:  //    break;  case TextColor.NewColorChar:  	buildString.Append (curLine.Substring (i' 5));  	if (lastColor.Length == 0)  		lastColor = curLine.Substring (i' 5);  	else  		nextColor = curLine.Substring (i' 5);  	i = i + 4;  	break;  case TextColor.EmotChar:  	buildString.Append (curLine.Substring (i' 4));  	//make emot icon not disappear for multiline sentences  	var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  	//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  	var bm = TextImage.GetImage (emotNumber);  	emotSpace += bm.Width;  	i = i + 3;  	break;  default:  	//check if there needs to be a linewrap  	if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].Wrapped = true;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		lineSplit = true;  		if (nextColor.Length != 0) {  			lastColor = nextColor;  			nextColor = "";  		}  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  		displayLines [line].Previous = true;  		buildString = null;  		buildString = new StringBuilder ();  		buildString.Append (ch [0]);  	} else  		buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: switch (ch [0]) {  //case boldChar:  //    break;  case TextColor.NewColorChar:  	buildString.Append (curLine.Substring (i' 5));  	if (lastColor.Length == 0)  		lastColor = curLine.Substring (i' 5);  	else  		nextColor = curLine.Substring (i' 5);  	i = i + 4;  	break;  case TextColor.EmotChar:  	buildString.Append (curLine.Substring (i' 4));  	//make emot icon not disappear for multiline sentences  	var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  	//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  	var bm = TextImage.GetImage (emotNumber);  	emotSpace += bm.Width;  	i = i + 3;  	break;  default:  	//check if there needs to be a linewrap  	if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].Wrapped = true;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		lineSplit = true;  		if (nextColor.Length != 0) {  			lastColor = nextColor;  			nextColor = "";  		}  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  		displayLines [line].Previous = true;  		buildString = null;  		buildString = new StringBuilder ();  		buildString.Append (ch [0]);  	} else  		buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: switch (ch [0]) {  //case boldChar:  //    break;  case TextColor.NewColorChar:  	buildString.Append (curLine.Substring (i' 5));  	if (lastColor.Length == 0)  		lastColor = curLine.Substring (i' 5);  	else  		nextColor = curLine.Substring (i' 5);  	i = i + 4;  	break;  case TextColor.EmotChar:  	buildString.Append (curLine.Substring (i' 4));  	//make emot icon not disappear for multiline sentences  	var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  	//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  	var bm = TextImage.GetImage (emotNumber);  	emotSpace += bm.Width;  	i = i + 3;  	break;  default:  	//check if there needs to be a linewrap  	if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].Wrapped = true;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		lineSplit = true;  		if (nextColor.Length != 0) {  			lastColor = nextColor;  			nextColor = "";  		}  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  		displayLines [line].Previous = true;  		buildString = null;  		buildString = new StringBuilder ();  		buildString.Append (ch [0]);  	} else  		buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: switch (ch [0]) {  //case boldChar:  //    break;  case TextColor.NewColorChar:  	buildString.Append (curLine.Substring (i' 5));  	if (lastColor.Length == 0)  		lastColor = curLine.Substring (i' 5);  	else  		nextColor = curLine.Substring (i' 5);  	i = i + 4;  	break;  case TextColor.EmotChar:  	buildString.Append (curLine.Substring (i' 4));  	//make emot icon not disappear for multiline sentences  	var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  	//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  	var bm = TextImage.GetImage (emotNumber);  	emotSpace += bm.Width;  	i = i + 3;  	break;  default:  	//check if there needs to be a linewrap  	if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].Wrapped = true;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		lineSplit = true;  		if (nextColor.Length != 0) {  			lastColor = nextColor;  			nextColor = "";  		}  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  		displayLines [line].Previous = true;  		buildString = null;  		buildString = new StringBuilder ();  		buildString.Append (ch [0]);  	} else  		buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: switch (ch [0]) {  //case boldChar:  //    break;  case TextColor.NewColorChar:  	buildString.Append (curLine.Substring (i' 5));  	if (lastColor.Length == 0)  		lastColor = curLine.Substring (i' 5);  	else  		nextColor = curLine.Substring (i' 5);  	i = i + 4;  	break;  case TextColor.EmotChar:  	buildString.Append (curLine.Substring (i' 4));  	//make emot icon not disappear for multiline sentences  	var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  	//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  	var bm = TextImage.GetImage (emotNumber);  	emotSpace += bm.Width;  	i = i + 3;  	break;  default:  	//check if there needs to be a linewrap  	if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].Wrapped = true;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		lineSplit = true;  		if (nextColor.Length != 0) {  			lastColor = nextColor;  			nextColor = "";  		}  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  		displayLines [line].Previous = true;  		buildString = null;  		buildString = new StringBuilder ();  		buildString.Append (ch [0]);  	} else  		buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: switch (ch [0]) {  //case boldChar:  //    break;  case TextColor.NewColorChar:  	buildString.Append (curLine.Substring (i' 5));  	if (lastColor.Length == 0)  		lastColor = curLine.Substring (i' 5);  	else  		nextColor = curLine.Substring (i' 5);  	i = i + 4;  	break;  case TextColor.EmotChar:  	buildString.Append (curLine.Substring (i' 4));  	//make emot icon not disappear for multiline sentences  	var emotNumber = Convert.ToInt32 (curLine.Substring (i + 1' 3));  	//take account for extra space caused by emotIcon' use it to find an accurate point where to split line  	var bm = TextImage.GetImage (emotNumber);  	emotSpace += bm.Width;  	i = i + 3;  	break;  default:  	//check if there needs to be a linewrap  	if (MS (g' buildString.ToString ().StripAllCodes ()' Font) + emotSpace > displayWidth) {  		if (lineSplit)  			displayLines [line].Line = lastColor + buildString;  		else  			displayLines [line].Line = buildString.ToString ();  		displayLines [line].TextLine = currentLine;  		displayLines [line].Wrapped = true;  		displayLines [line].TextColor = textLines [currentLine].TextColor;  		lineSplit = true;  		if (nextColor.Length != 0) {  			lastColor = nextColor;  			nextColor = "";  		}  		line++;  		if (line >= MaxDisplayLines)  			AddNewDisplayLines ();  		displayLines [line].Previous = true;  		buildString = null;  		buildString = new StringBuilder ();  		buildString.Append (ch [0]);  	} else  		buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: buildString.Append (curLine.Substring (i' 5));  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (lastColor.Length == 0)  	lastColor = curLine.Substring (i' 5);  else  	nextColor = curLine.Substring (i' 5);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: if (lastColor.Length == 0)  	lastColor = curLine.Substring (i' 5);  else  	nextColor = curLine.Substring (i' 5);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: lastColor = curLine.Substring (i' 5);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: nextColor = curLine.Substring (i' 5);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: i = i + 4;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: buildString.Append (curLine.Substring (i' 4));  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,FormatLines,The following statement contains a magic number: i = i + 3;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,LoadTextSizes,The following statement contains a magic number: using (var g = CreateGraphics ()) {  	LineSize = Convert.ToInt32 (Font.GetHeight (g));  	showMaxLines = Height / LineSize + 1;  	vScrollBar.LargeChange = Math.Max (showMaxLines - 3' 1);  	//include previous 3 lines for continuity  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,LoadTextSizes,The following statement contains a magic number: vScrollBar.LargeChange = Math.Max (showMaxLines - 3' 1);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: try {  	var g = e.Graphics;  	//using "using" allow auto dispose  	int startY;  	var startX = 0;  	int linesToDraw;  	var buildString = new StringBuilder ();  	int curLine;  	int curForeColor' curBackColor;  	var pastForeColor = -1;  	//remember what is the text color before highlighting. Hint: the code is looping from left char to right char  	char[] ch;  	var displayRect = new Rectangle (0' 0' Width' Height);  	//Bitmap buffer = new Bitmap(this.Width' this.Height' e.Graphics);  	//g.Clear(IrcColor.colors[backColor]);  	if (BackgroundImage != null) {  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  		g.DrawImage (BackgroundImage' displayRect.Left' displayRect.Top' displayRect.Width' displayRect.Height);  	} else  		g.FillRectangle (new SolidBrush (TextColor.GetColor (backColor))' displayRect);  	/*g.InterpolationMode = InterpolationMode.Low;                     g.SmoothingMode = SmoothingMode.HighSpeed;                     g.PixelOffsetMode = PixelOffsetMode.None;                     g.CompositingQuality = CompositingQuality.HighSpeed;                     g.TextRenderingHint = TextRenderingHint.SystemDefault;*/if (totalLines == 0)  		return;  	else {  		var val = vScrollBar.Value;  		linesToDraw = Math.Min (showMaxLines' val);  		//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  		curLine = val - linesToDraw;  		if (singleLine) {  			startY = 0;  			linesToDraw = 1;  			curLine = 0;  		} else  			startY = Height - LineSize * linesToDraw - LineSize / 2;  		var lineCounter = 0;  		var underline = false;  		var isInUrl = false;  		var font = new Font (Font' FontStyle.Regular);  		var redline = -1;  		if (ShowUnreadLine) {  			for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  				if (!displayLines [i].Previous) {  					++j;  					if (j == unreadMarker) {  						redline = i;  						break;  					}  				}  			}  		}  		while (lineCounter < linesToDraw)//iterate over all rows  		 {  			int i = 0' j = 0;  			var highlight = false;  			var oldHighlight = false;  			if (redline == curLine) {  				using (var p = new Pen (Color.Red)) {  					g.DrawLine (p' 0' startY' Width' startY);  				}  			}  			lineCounter++;  			curForeColor = displayLines [curLine].TextColor;  			var line = new StringBuilder ();  			line.Append (displayLines [curLine].Line);  			curBackColor = backColor;  			//check if in a url' cancel underline if not  			if (!isInUrl) {  				underline = false;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  			}  			if (line.Length > 0) {  				do//iterate over every character in a line  				 {  					ch = line.ToString ().Substring (i' 1).ToCharArray ();  					switch (ch [0]) {  					case TextColor.EmotChar:  						//this header is added by SaidLine.cs & SaidLineEx.cs  						//draws an emoticon  						//[]001  						var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  						line.Remove (0' i + 4);  						i = -1;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  						//draw an emoticon  						g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  						startX += 16;  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						break;  					case TextColor.UrlStart:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Underline);  						isInUrl = true;  						break;  					case TextColor.UrlEnd:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						font.SafeDispose ();  						font = new Font (Font' FontStyle.Regular);  						isInUrl = false;  						break;  					case TextColor.UnderlineChar:  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						line.Remove (0' 1);  						i = -1;  						underline = !underline;  						font.SafeDispose ();  						if (underline)  							font = new Font (Font' FontStyle.Underline);  						else {  							font = new Font (Font' FontStyle.Regular);  						}  						break;  					case TextColor.NewColorChar:  						//draw whats previously in the string  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						//is slow for slow gpu IMO  						buildString.Clear ();  						//remove whats drawn from string  						line.Remove (0' i);  						//get the new fore and back colors  						if (!highlight) {  							curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  							//check to make sure that FC and BC are in range 0-32  							if (curForeColor > TextColor.colorRange)  								curForeColor = displayLines [curLine].TextColor;  							if (curBackColor > TextColor.colorRange)  								curBackColor = backColor;  						} else//if highlighting then:  						 {  							pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  							//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   							//check to make sure that FC and BC are in range 0-32  							if (pastForeColor > TextColor.colorRange)  								pastForeColor = displayLines [curLine].TextColor;  							//only happen on exceptional case (this is only for safety' no significant whatsoever)  						}  						//remove the color codes from the string  						line.Remove (0' 5);  						i = -1;  						break;  					default:  						//curLine is "the line being processed here" (not user's line)  						//startHightLine is "the line where highlight start"  						//curHighLine is "the line where highlight end"  						//startHighChar is "the char where highlight start"  						//curHighChar is "the char where highlight end"  						//j is "the char being processed here"  						if (startHighLine >= 0 && //highlight is active  						((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  						(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  						 {  							if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  								highlight = true;  							} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  								highlight = true;  							} else  								highlight = false;  						} else  							highlight = false;  						++j;  						if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  						 {  							oldHighlight = highlight;  							//draw text (that wasn't yet drawn up to *this* point)  							startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  							buildString.Clear ();  							//reset the content (because we already draw it for user)  							//remove whats drawn from string  							line.Remove (0' i);  							i = 0;  							if (highlight) {  								pastForeColor = curForeColor;  								//remember previous text color  								curForeColor = TextColor.background;  								//white (defined in TextColor.cs)  								curBackColor = TextColor.text;  								//black (defined in TextColor.cs)  							} else {  								curForeColor = pastForeColor;  								//restore intended text color  								curBackColor = backColor;  							}  						}  						buildString.Append (ch [0]);  						break;  					}  					i++;  				} while (line.Length > 0 && i != line.Length);  				//loop character  			}  			//draw anything that is left over                  			if (i == line.Length && line.Length > 0)  				DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			startY += LineSize;  			startX = 0;  			curLine++;  			buildString.Clear ();  		}  		//loop line  		font.Dispose ();  		//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  	}  	// var coords = displayRect  	ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  	buildString = null;  } catch (Exception ee) {  	Trace.WriteLine ("TextWindow OnDisplayText Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (totalLines == 0)  	return;  else {  	var val = vScrollBar.Value;  	linesToDraw = Math.Min (showMaxLines' val);  	//Math.Min is faster and more readable than if-else' Reference:http://stackoverflow.com/questions/5478877/math-max-vs-inline-if-what-are-the-differences  	curLine = val - linesToDraw;  	if (singleLine) {  		startY = 0;  		linesToDraw = 1;  		curLine = 0;  	} else  		startY = Height - LineSize * linesToDraw - LineSize / 2;  	var lineCounter = 0;  	var underline = false;  	var isInUrl = false;  	var font = new Font (Font' FontStyle.Regular);  	var redline = -1;  	if (ShowUnreadLine) {  		for (int i = TotalDisplayLines - 1' j = 0; i >= 0; --i) {  			if (!displayLines [i].Previous) {  				++j;  				if (j == unreadMarker) {  					redline = i;  					break;  				}  			}  		}  	}  	while (lineCounter < linesToDraw)//iterate over all rows  	 {  		int i = 0' j = 0;  		var highlight = false;  		var oldHighlight = false;  		if (redline == curLine) {  			using (var p = new Pen (Color.Red)) {  				g.DrawLine (p' 0' startY' Width' startY);  			}  		}  		lineCounter++;  		curForeColor = displayLines [curLine].TextColor;  		var line = new StringBuilder ();  		line.Append (displayLines [curLine].Line);  		curBackColor = backColor;  		//check if in a url' cancel underline if not  		if (!isInUrl) {  			underline = false;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  		}  		if (line.Length > 0) {  			do//iterate over every character in a line  			 {  				ch = line.ToString ().Substring (i' 1).ToCharArray ();  				switch (ch [0]) {  				case TextColor.EmotChar:  					//this header is added by SaidLine.cs & SaidLineEx.cs  					//draws an emoticon  					//[]001  					var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  					line.Remove (0' i + 4);  					i = -1;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  					//draw an emoticon  					g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  					startX += 16;  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					break;  				case TextColor.UrlStart:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Underline);  					isInUrl = true;  					break;  				case TextColor.UrlEnd:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					font.SafeDispose ();  					font = new Font (Font' FontStyle.Regular);  					isInUrl = false;  					break;  				case TextColor.UnderlineChar:  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					line.Remove (0' 1);  					i = -1;  					underline = !underline;  					font.SafeDispose ();  					if (underline)  						font = new Font (Font' FontStyle.Underline);  					else {  						font = new Font (Font' FontStyle.Regular);  					}  					break;  				case TextColor.NewColorChar:  					//draw whats previously in the string  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					//is slow for slow gpu IMO  					buildString.Clear ();  					//remove whats drawn from string  					line.Remove (0' i);  					//get the new fore and back colors  					if (!highlight) {  						curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  						//check to make sure that FC and BC are in range 0-32  						if (curForeColor > TextColor.colorRange)  							curForeColor = displayLines [curLine].TextColor;  						if (curBackColor > TextColor.colorRange)  							curBackColor = backColor;  					} else//if highlighting then:  					 {  						pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  						//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   						//check to make sure that FC and BC are in range 0-32  						if (pastForeColor > TextColor.colorRange)  							pastForeColor = displayLines [curLine].TextColor;  						//only happen on exceptional case (this is only for safety' no significant whatsoever)  					}  					//remove the color codes from the string  					line.Remove (0' 5);  					i = -1;  					break;  				default:  					//curLine is "the line being processed here" (not user's line)  					//startHightLine is "the line where highlight start"  					//curHighLine is "the line where highlight end"  					//startHighChar is "the char where highlight start"  					//curHighChar is "the char where highlight end"  					//j is "the char being processed here"  					if (startHighLine >= 0 && //highlight is active  					((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  					(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  					 {  						if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  							highlight = true;  						} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  							highlight = true;  						} else  							highlight = false;  					} else  						highlight = false;  					++j;  					if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  					 {  						oldHighlight = highlight;  						//draw text (that wasn't yet drawn up to *this* point)  						startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  						buildString.Clear ();  						//reset the content (because we already draw it for user)  						//remove whats drawn from string  						line.Remove (0' i);  						i = 0;  						if (highlight) {  							pastForeColor = curForeColor;  							//remember previous text color  							curForeColor = TextColor.background;  							//white (defined in TextColor.cs)  							curBackColor = TextColor.text;  							//black (defined in TextColor.cs)  						} else {  							curForeColor = pastForeColor;  							//restore intended text color  							curBackColor = backColor;  						}  					}  					buildString.Append (ch [0]);  					break;  				}  				i++;  			} while (line.Length > 0 && i != line.Length);  			//loop character  		}  		//draw anything that is left over                  		if (i == line.Length && line.Length > 0)  			DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		startY += LineSize;  		startX = 0;  		curLine++;  		buildString.Clear ();  	}  	//loop line  	font.Dispose ();  	//e.Graphics.DrawImageUnscaled(buffer' 0' 0);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (singleLine) {  	startY = 0;  	linesToDraw = 1;  	curLine = 0;  } else  	startY = Height - LineSize * linesToDraw - LineSize / 2;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: startY = Height - LineSize * linesToDraw - LineSize / 2;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: while (lineCounter < linesToDraw)//iterate over all rows   {  	int i = 0' j = 0;  	var highlight = false;  	var oldHighlight = false;  	if (redline == curLine) {  		using (var p = new Pen (Color.Red)) {  			g.DrawLine (p' 0' startY' Width' startY);  		}  	}  	lineCounter++;  	curForeColor = displayLines [curLine].TextColor;  	var line = new StringBuilder ();  	line.Append (displayLines [curLine].Line);  	curBackColor = backColor;  	//check if in a url' cancel underline if not  	if (!isInUrl) {  		underline = false;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  	}  	if (line.Length > 0) {  		do//iterate over every character in a line  		 {  			ch = line.ToString ().Substring (i' 1).ToCharArray ();  			switch (ch [0]) {  			case TextColor.EmotChar:  				//this header is added by SaidLine.cs & SaidLineEx.cs  				//draws an emoticon  				//[]001  				var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  				line.Remove (0' i + 4);  				i = -1;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  				//draw an emoticon  				g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  				startX += 16;  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				break;  			case TextColor.UrlStart:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Underline);  				isInUrl = true;  				break;  			case TextColor.UrlEnd:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				font.SafeDispose ();  				font = new Font (Font' FontStyle.Regular);  				isInUrl = false;  				break;  			case TextColor.UnderlineChar:  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				line.Remove (0' 1);  				i = -1;  				underline = !underline;  				font.SafeDispose ();  				if (underline)  					font = new Font (Font' FontStyle.Underline);  				else {  					font = new Font (Font' FontStyle.Regular);  				}  				break;  			case TextColor.NewColorChar:  				//draw whats previously in the string  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				//is slow for slow gpu IMO  				buildString.Clear ();  				//remove whats drawn from string  				line.Remove (0' i);  				//get the new fore and back colors  				if (!highlight) {  					curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  					//check to make sure that FC and BC are in range 0-32  					if (curForeColor > TextColor.colorRange)  						curForeColor = displayLines [curLine].TextColor;  					if (curBackColor > TextColor.colorRange)  						curBackColor = backColor;  				} else//if highlighting then:  				 {  					pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  					//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   					//check to make sure that FC and BC are in range 0-32  					if (pastForeColor > TextColor.colorRange)  						pastForeColor = displayLines [curLine].TextColor;  					//only happen on exceptional case (this is only for safety' no significant whatsoever)  				}  				//remove the color codes from the string  				line.Remove (0' 5);  				i = -1;  				break;  			default:  				//curLine is "the line being processed here" (not user's line)  				//startHightLine is "the line where highlight start"  				//curHighLine is "the line where highlight end"  				//startHighChar is "the char where highlight start"  				//curHighChar is "the char where highlight end"  				//j is "the char being processed here"  				if (startHighLine >= 0 && //highlight is active  				((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  				(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  				 {  					if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  						highlight = true;  					} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  						highlight = true;  					} else  						highlight = false;  				} else  					highlight = false;  				++j;  				if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  				 {  					oldHighlight = highlight;  					//draw text (that wasn't yet drawn up to *this* point)  					startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  					buildString.Clear ();  					//reset the content (because we already draw it for user)  					//remove whats drawn from string  					line.Remove (0' i);  					i = 0;  					if (highlight) {  						pastForeColor = curForeColor;  						//remember previous text color  						curForeColor = TextColor.background;  						//white (defined in TextColor.cs)  						curBackColor = TextColor.text;  						//black (defined in TextColor.cs)  					} else {  						curForeColor = pastForeColor;  						//restore intended text color  						curBackColor = backColor;  					}  				}  				buildString.Append (ch [0]);  				break;  			}  			i++;  		} while (line.Length > 0 && i != line.Length);  		//loop character  	}  	//draw anything that is left over                  	if (i == line.Length && line.Length > 0)  		DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	startY += LineSize;  	startX = 0;  	curLine++;  	buildString.Clear ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (line.Length > 0) {  	do//iterate over every character in a line  	 {  		ch = line.ToString ().Substring (i' 1).ToCharArray ();  		switch (ch [0]) {  		case TextColor.EmotChar:  			//this header is added by SaidLine.cs & SaidLineEx.cs  			//draws an emoticon  			//[]001  			var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  			line.Remove (0' i + 4);  			i = -1;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  			//draw an emoticon  			g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  			startX += 16;  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			break;  		case TextColor.UrlStart:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Underline);  			isInUrl = true;  			break;  		case TextColor.UrlEnd:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			font.SafeDispose ();  			font = new Font (Font' FontStyle.Regular);  			isInUrl = false;  			break;  		case TextColor.UnderlineChar:  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			line.Remove (0' 1);  			i = -1;  			underline = !underline;  			font.SafeDispose ();  			if (underline)  				font = new Font (Font' FontStyle.Underline);  			else {  				font = new Font (Font' FontStyle.Regular);  			}  			break;  		case TextColor.NewColorChar:  			//draw whats previously in the string  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			//is slow for slow gpu IMO  			buildString.Clear ();  			//remove whats drawn from string  			line.Remove (0' i);  			//get the new fore and back colors  			if (!highlight) {  				curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  				//check to make sure that FC and BC are in range 0-32  				if (curForeColor > TextColor.colorRange)  					curForeColor = displayLines [curLine].TextColor;  				if (curBackColor > TextColor.colorRange)  					curBackColor = backColor;  			} else//if highlighting then:  			 {  				pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  				//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   				//check to make sure that FC and BC are in range 0-32  				if (pastForeColor > TextColor.colorRange)  					pastForeColor = displayLines [curLine].TextColor;  				//only happen on exceptional case (this is only for safety' no significant whatsoever)  			}  			//remove the color codes from the string  			line.Remove (0' 5);  			i = -1;  			break;  		default:  			//curLine is "the line being processed here" (not user's line)  			//startHightLine is "the line where highlight start"  			//curHighLine is "the line where highlight end"  			//startHighChar is "the char where highlight start"  			//curHighChar is "the char where highlight end"  			//j is "the char being processed here"  			if (startHighLine >= 0 && //highlight is active  			((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  			(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  			 {  				if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  					highlight = true;  				} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  					highlight = true;  				} else  					highlight = false;  			} else  				highlight = false;  			++j;  			if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  			 {  				oldHighlight = highlight;  				//draw text (that wasn't yet drawn up to *this* point)  				startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  				buildString.Clear ();  				//reset the content (because we already draw it for user)  				//remove whats drawn from string  				line.Remove (0' i);  				i = 0;  				if (highlight) {  					pastForeColor = curForeColor;  					//remember previous text color  					curForeColor = TextColor.background;  					//white (defined in TextColor.cs)  					curBackColor = TextColor.text;  					//black (defined in TextColor.cs)  				} else {  					curForeColor = pastForeColor;  					//restore intended text color  					curBackColor = backColor;  				}  			}  			buildString.Append (ch [0]);  			break;  		}  		i++;  	} while (line.Length > 0 && i != line.Length);  	//loop character  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: do//iterate over every character in a line   {  	ch = line.ToString ().Substring (i' 1).ToCharArray ();  	switch (ch [0]) {  	case TextColor.EmotChar:  		//this header is added by SaidLine.cs & SaidLineEx.cs  		//draws an emoticon  		//[]001  		var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  		line.Remove (0' i + 4);  		i = -1;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  		//draw an emoticon  		g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  		startX += 16;  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		break;  	case TextColor.UrlStart:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Underline);  		isInUrl = true;  		break;  	case TextColor.UrlEnd:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		font.SafeDispose ();  		font = new Font (Font' FontStyle.Regular);  		isInUrl = false;  		break;  	case TextColor.UnderlineChar:  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		line.Remove (0' 1);  		i = -1;  		underline = !underline;  		font.SafeDispose ();  		if (underline)  			font = new Font (Font' FontStyle.Underline);  		else {  			font = new Font (Font' FontStyle.Regular);  		}  		break;  	case TextColor.NewColorChar:  		//draw whats previously in the string  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		//is slow for slow gpu IMO  		buildString.Clear ();  		//remove whats drawn from string  		line.Remove (0' i);  		//get the new fore and back colors  		if (!highlight) {  			curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  			//check to make sure that FC and BC are in range 0-32  			if (curForeColor > TextColor.colorRange)  				curForeColor = displayLines [curLine].TextColor;  			if (curBackColor > TextColor.colorRange)  				curBackColor = backColor;  		} else//if highlighting then:  		 {  			pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  			//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   			//check to make sure that FC and BC are in range 0-32  			if (pastForeColor > TextColor.colorRange)  				pastForeColor = displayLines [curLine].TextColor;  			//only happen on exceptional case (this is only for safety' no significant whatsoever)  		}  		//remove the color codes from the string  		line.Remove (0' 5);  		i = -1;  		break;  	default:  		//curLine is "the line being processed here" (not user's line)  		//startHightLine is "the line where highlight start"  		//curHighLine is "the line where highlight end"  		//startHighChar is "the char where highlight start"  		//curHighChar is "the char where highlight end"  		//j is "the char being processed here"  		if (startHighLine >= 0 && //highlight is active  		((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  		(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  		 {  			if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  				highlight = true;  			} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  				highlight = true;  			} else  				highlight = false;  		} else  			highlight = false;  		++j;  		if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  		 {  			oldHighlight = highlight;  			//draw text (that wasn't yet drawn up to *this* point)  			startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  			buildString.Clear ();  			//reset the content (because we already draw it for user)  			//remove whats drawn from string  			line.Remove (0' i);  			i = 0;  			if (highlight) {  				pastForeColor = curForeColor;  				//remember previous text color  				curForeColor = TextColor.background;  				//white (defined in TextColor.cs)  				curBackColor = TextColor.text;  				//black (defined in TextColor.cs)  			} else {  				curForeColor = pastForeColor;  				//restore intended text color  				curBackColor = backColor;  			}  		}  		buildString.Append (ch [0]);  		break;  	}  	i++;  } while (line.Length > 0 && i != line.Length);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: switch (ch [0]) {  case TextColor.EmotChar:  	//this header is added by SaidLine.cs & SaidLineEx.cs  	//draws an emoticon  	//[]001  	var emotNumber = Convert.ToInt32 (line.ToString ().Substring (i + 1' 3));  	line.Remove (0' i + 4);  	i = -1;  	//draw text (that wasn't yet drawn up to *this* point)  	startX = DT (g' buildString' Font' startX' startY' curForeColor' curBackColor);  	//draw an emoticon  	g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  	startX += 16;  	buildString.Clear ();  	//reset the content (because we already draw it for user)  	break;  case TextColor.UrlStart:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Underline);  	isInUrl = true;  	break;  case TextColor.UrlEnd:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	font.SafeDispose ();  	font = new Font (Font' FontStyle.Regular);  	isInUrl = false;  	break;  case TextColor.UnderlineChar:  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	line.Remove (0' 1);  	i = -1;  	underline = !underline;  	font.SafeDispose ();  	if (underline)  		font = new Font (Font' FontStyle.Underline);  	else {  		font = new Font (Font' FontStyle.Regular);  	}  	break;  case TextColor.NewColorChar:  	//draw whats previously in the string  	startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  	//is slow for slow gpu IMO  	buildString.Clear ();  	//remove whats drawn from string  	line.Remove (0' i);  	//get the new fore and back colors  	if (!highlight) {  		curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  		//check to make sure that FC and BC are in range 0-32  		if (curForeColor > TextColor.colorRange)  			curForeColor = displayLines [curLine].TextColor;  		if (curBackColor > TextColor.colorRange)  			curBackColor = backColor;  	} else//if highlighting then:  	 {  		pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  		//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   		//check to make sure that FC and BC are in range 0-32  		if (pastForeColor > TextColor.colorRange)  			pastForeColor = displayLines [curLine].TextColor;  		//only happen on exceptional case (this is only for safety' no significant whatsoever)  	}  	//remove the color codes from the string  	line.Remove (0' 5);  	i = -1;  	break;  default:  	//curLine is "the line being processed here" (not user's line)  	//startHightLine is "the line where highlight start"  	//curHighLine is "the line where highlight end"  	//startHighChar is "the char where highlight start"  	//curHighChar is "the char where highlight end"  	//j is "the char being processed here"  	if (startHighLine >= 0 && //highlight is active  	((curLine >= startHighLine && curLine <= curHighLine) || //processing in between highlight (if highlight is upward)  	(curLine <= startHighLine && curLine >= curHighLine)))//processing in between highlight (if highlight is downward)  	 {  		if ((curLine > startHighLine && curLine < curHighLine) || (curLine == startHighLine && j >= startHighChar && (curLine <= curHighLine && j < curHighChar || curLine < curHighLine)) || (curLine == curHighLine && j < curHighChar && (curLine >= startHighLine && j >= startHighChar || curLine > startHighLine))) {  			highlight = true;  		} else if ((curLine < startHighLine && curLine > curHighLine) || (curLine == startHighLine && j < startHighChar && (curLine >= curHighLine && j >= curHighChar || curLine > curHighLine)) || (curLine == curHighLine && j >= curHighChar && (curLine <= startHighLine && j < startHighChar || curLine < startHighLine))) {  			highlight = true;  		} else  			highlight = false;  	} else  		highlight = false;  	++j;  	if (highlight != oldHighlight)//at highlight border (where left & right is highlight or not highlight)  	 {  		oldHighlight = highlight;  		//draw text (that wasn't yet drawn up to *this* point)  		startX = DT (g' buildString' font' startX' startY' curForeColor' curBackColor);  		buildString.Clear ();  		//reset the content (because we already draw it for user)  		//remove whats drawn from string  		line.Remove (0' i);  		i = 0;  		if (highlight) {  			pastForeColor = curForeColor;  			//remember previous text color  			curForeColor = TextColor.background;  			//white (defined in TextColor.cs)  			curBackColor = TextColor.text;  			//black (defined in TextColor.cs)  		} else {  			curForeColor = pastForeColor;  			//restore intended text color  			curBackColor = backColor;  		}  	}  	buildString.Append (ch [0]);  	break;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: line.Remove (0' i + 4);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: g.DrawImage (TextImage.GetImage (emotNumber)' startX' startY' 16' 16);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: startX += 16;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (!highlight) {  	curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  	//check to make sure that FC and BC are in range 0-32  	if (curForeColor > TextColor.colorRange)  		curForeColor = displayLines [curLine].TextColor;  	if (curBackColor > TextColor.colorRange)  		curBackColor = backColor;  } else//if highlighting then:   {  	pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   	//check to make sure that FC and BC are in range 0-32  	if (pastForeColor > TextColor.colorRange)  		pastForeColor = displayLines [curLine].TextColor;  	//only happen on exceptional case (this is only for safety' no significant whatsoever)  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (!highlight) {  	curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  	//check to make sure that FC and BC are in range 0-32  	if (curForeColor > TextColor.colorRange)  		curForeColor = displayLines [curLine].TextColor;  	if (curBackColor > TextColor.colorRange)  		curBackColor = backColor;  } else//if highlighting then:   {  	pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   	//check to make sure that FC and BC are in range 0-32  	if (pastForeColor > TextColor.colorRange)  		pastForeColor = displayLines [curLine].TextColor;  	//only happen on exceptional case (this is only for safety' no significant whatsoever)  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (!highlight) {  	curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  	//check to make sure that FC and BC are in range 0-32  	if (curForeColor > TextColor.colorRange)  		curForeColor = displayLines [curLine].TextColor;  	if (curBackColor > TextColor.colorRange)  		curBackColor = backColor;  } else//if highlighting then:   {  	pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   	//check to make sure that FC and BC are in range 0-32  	if (pastForeColor > TextColor.colorRange)  		pastForeColor = displayLines [curLine].TextColor;  	//only happen on exceptional case (this is only for safety' no significant whatsoever)  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: if (!highlight) {  	curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  	//check to make sure that FC and BC are in range 0-32  	if (curForeColor > TextColor.colorRange)  		curForeColor = displayLines [curLine].TextColor;  	if (curBackColor > TextColor.colorRange)  		curBackColor = backColor;  } else//if highlighting then:   {  	pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  	//remember what color this text suppose to be (will be restored to the text on the right if highlighting only happen to text on the left)   	//check to make sure that FC and BC are in range 0-32  	if (pastForeColor > TextColor.colorRange)  		pastForeColor = displayLines [curLine].TextColor;  	//only happen on exceptional case (this is only for safety' no significant whatsoever)  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: curForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: curBackColor = Convert.ToInt32 (line.ToString ().Substring (3' 2));  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: pastForeColor = Convert.ToInt32 (line.ToString ().Substring (1' 2));  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: line.Remove (0' 5);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,OnDisplayText,The following statement contains a magic number: ButtonRenderer.DrawButton (g' new Rectangle (displayRect.Right - 200' displayRect.Top - 50' 100' 30)' "Hide"' Font' false' PushButtonState.Normal);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: while (m.Success) {  	var oldLen = sLine.Length;  	sLine.Remove (m.Index' m.Length);  	if (Regex.Match (m.Value' parseBackColor).Success) {  		var rem = m.Value.Remove (0' 1);  		var intstr = rem.Split (new[] {  			'''  		});  		//get the fore color  		var fc = int.Parse (intstr [0]);  		//get the back color  		var bc = int.Parse (intstr [1]);  		currentBackColor = bc;  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + bc.ToString ("00"));  		if (foreColorInd < 32) {  			foreColorInd++;  			backColorInd++;  			foreColorNest [foreColorInd] = fc;  			backColorNest [backColorInd] = bc;  		}  		oldLen--;  	} else if (Regex.Match (m.Value' parseForeColor).Success) {  		var fc = int.Parse (m.Value.Remove (0' 1));  		if (currentBackColor > -1)  			sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  		else  			sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  		//note: any background_color > 32 automatically use current backcolor  		//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  		if (foreColorInd < 32) {  			foreColorInd++;  			backColorInd++;  			foreColorNest [foreColorInd] = fc;  			backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  		}  	} else if (Regex.Match (m.Value' parseColorChar).Success) {  		if (foreColorInd > 0)  			foreColorInd--;  		if (backColorInd > 0)  			backColorInd--;  		var prevForeColor = foreColorNest [foreColorInd];  		var backForeColor = backColorNest [backColorInd];  		sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  		currentBackColor = backForeColor;  		//currentBackColor = -1;  		//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  		//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  	} else if (Regex.Match (m.Value' parseColorResetChar).Success) {  		foreColorInd = 0;  		backColorInd = 0;  		currentBackColor = -1;  		sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  	}  	m = parseIrcCodes.Match (sLine.ToString ()' sLine.Length - oldLen);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: while (m.Success) {  	var oldLen = sLine.Length;  	sLine.Remove (m.Index' m.Length);  	if (Regex.Match (m.Value' parseBackColor).Success) {  		var rem = m.Value.Remove (0' 1);  		var intstr = rem.Split (new[] {  			'''  		});  		//get the fore color  		var fc = int.Parse (intstr [0]);  		//get the back color  		var bc = int.Parse (intstr [1]);  		currentBackColor = bc;  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + bc.ToString ("00"));  		if (foreColorInd < 32) {  			foreColorInd++;  			backColorInd++;  			foreColorNest [foreColorInd] = fc;  			backColorNest [backColorInd] = bc;  		}  		oldLen--;  	} else if (Regex.Match (m.Value' parseForeColor).Success) {  		var fc = int.Parse (m.Value.Remove (0' 1));  		if (currentBackColor > -1)  			sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  		else  			sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  		//note: any background_color > 32 automatically use current backcolor  		//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  		if (foreColorInd < 32) {  			foreColorInd++;  			backColorInd++;  			foreColorNest [foreColorInd] = fc;  			backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  		}  	} else if (Regex.Match (m.Value' parseColorChar).Success) {  		if (foreColorInd > 0)  			foreColorInd--;  		if (backColorInd > 0)  			backColorInd--;  		var prevForeColor = foreColorNest [foreColorInd];  		var backForeColor = backColorNest [backColorInd];  		sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  		currentBackColor = backForeColor;  		//currentBackColor = -1;  		//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  		//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  	} else if (Regex.Match (m.Value' parseColorResetChar).Success) {  		foreColorInd = 0;  		backColorInd = 0;  		currentBackColor = -1;  		sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  	}  	m = parseIrcCodes.Match (sLine.ToString ()' sLine.Length - oldLen);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: while (m.Success) {  	var oldLen = sLine.Length;  	sLine.Remove (m.Index' m.Length);  	if (Regex.Match (m.Value' parseBackColor).Success) {  		var rem = m.Value.Remove (0' 1);  		var intstr = rem.Split (new[] {  			'''  		});  		//get the fore color  		var fc = int.Parse (intstr [0]);  		//get the back color  		var bc = int.Parse (intstr [1]);  		currentBackColor = bc;  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + bc.ToString ("00"));  		if (foreColorInd < 32) {  			foreColorInd++;  			backColorInd++;  			foreColorNest [foreColorInd] = fc;  			backColorNest [backColorInd] = bc;  		}  		oldLen--;  	} else if (Regex.Match (m.Value' parseForeColor).Success) {  		var fc = int.Parse (m.Value.Remove (0' 1));  		if (currentBackColor > -1)  			sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  		else  			sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  		//note: any background_color > 32 automatically use current backcolor  		//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  		if (foreColorInd < 32) {  			foreColorInd++;  			backColorInd++;  			foreColorNest [foreColorInd] = fc;  			backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  		}  	} else if (Regex.Match (m.Value' parseColorChar).Success) {  		if (foreColorInd > 0)  			foreColorInd--;  		if (backColorInd > 0)  			backColorInd--;  		var prevForeColor = foreColorNest [foreColorInd];  		var backForeColor = backColorNest [backColorInd];  		sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  		currentBackColor = backForeColor;  		//currentBackColor = -1;  		//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  		//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  	} else if (Regex.Match (m.Value' parseColorResetChar).Success) {  		foreColorInd = 0;  		backColorInd = 0;  		currentBackColor = -1;  		sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  	}  	m = parseIrcCodes.Match (sLine.ToString ()' sLine.Length - oldLen);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (Regex.Match (m.Value' parseBackColor).Success) {  	var rem = m.Value.Remove (0' 1);  	var intstr = rem.Split (new[] {  		'''  	});  	//get the fore color  	var fc = int.Parse (intstr [0]);  	//get the back color  	var bc = int.Parse (intstr [1]);  	currentBackColor = bc;  	sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + bc.ToString ("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = bc;  	}  	oldLen--;  } else if (Regex.Match (m.Value' parseForeColor).Success) {  	var fc = int.Parse (m.Value.Remove (0' 1));  	if (currentBackColor > -1)  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  	else  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  	//note: any background_color > 32 automatically use current backcolor  	//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  	}  } else if (Regex.Match (m.Value' parseColorChar).Success) {  	if (foreColorInd > 0)  		foreColorInd--;  	if (backColorInd > 0)  		backColorInd--;  	var prevForeColor = foreColorNest [foreColorInd];  	var backForeColor = backColorNest [backColorInd];  	sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  	currentBackColor = backForeColor;  	//currentBackColor = -1;  	//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  	//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  } else if (Regex.Match (m.Value' parseColorResetChar).Success) {  	foreColorInd = 0;  	backColorInd = 0;  	currentBackColor = -1;  	sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (Regex.Match (m.Value' parseBackColor).Success) {  	var rem = m.Value.Remove (0' 1);  	var intstr = rem.Split (new[] {  		'''  	});  	//get the fore color  	var fc = int.Parse (intstr [0]);  	//get the back color  	var bc = int.Parse (intstr [1]);  	currentBackColor = bc;  	sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + bc.ToString ("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = bc;  	}  	oldLen--;  } else if (Regex.Match (m.Value' parseForeColor).Success) {  	var fc = int.Parse (m.Value.Remove (0' 1));  	if (currentBackColor > -1)  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  	else  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  	//note: any background_color > 32 automatically use current backcolor  	//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  	}  } else if (Regex.Match (m.Value' parseColorChar).Success) {  	if (foreColorInd > 0)  		foreColorInd--;  	if (backColorInd > 0)  		backColorInd--;  	var prevForeColor = foreColorNest [foreColorInd];  	var backForeColor = backColorNest [backColorInd];  	sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  	currentBackColor = backForeColor;  	//currentBackColor = -1;  	//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  	//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  } else if (Regex.Match (m.Value' parseColorResetChar).Success) {  	foreColorInd = 0;  	backColorInd = 0;  	currentBackColor = -1;  	sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (Regex.Match (m.Value' parseBackColor).Success) {  	var rem = m.Value.Remove (0' 1);  	var intstr = rem.Split (new[] {  		'''  	});  	//get the fore color  	var fc = int.Parse (intstr [0]);  	//get the back color  	var bc = int.Parse (intstr [1]);  	currentBackColor = bc;  	sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + bc.ToString ("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = bc;  	}  	oldLen--;  } else if (Regex.Match (m.Value' parseForeColor).Success) {  	var fc = int.Parse (m.Value.Remove (0' 1));  	if (currentBackColor > -1)  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  	else  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  	//note: any background_color > 32 automatically use current backcolor  	//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  	}  } else if (Regex.Match (m.Value' parseColorChar).Success) {  	if (foreColorInd > 0)  		foreColorInd--;  	if (backColorInd > 0)  		backColorInd--;  	var prevForeColor = foreColorNest [foreColorInd];  	var backForeColor = backColorNest [backColorInd];  	sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  	currentBackColor = backForeColor;  	//currentBackColor = -1;  	//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  	//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  } else if (Regex.Match (m.Value' parseColorResetChar).Success) {  	foreColorInd = 0;  	backColorInd = 0;  	currentBackColor = -1;  	sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (foreColorInd < 32) {  	foreColorInd++;  	backColorInd++;  	foreColorNest [foreColorInd] = fc;  	backColorNest [backColorInd] = bc;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (Regex.Match (m.Value' parseForeColor).Success) {  	var fc = int.Parse (m.Value.Remove (0' 1));  	if (currentBackColor > -1)  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  	else  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  	//note: any background_color > 32 automatically use current backcolor  	//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  	}  } else if (Regex.Match (m.Value' parseColorChar).Success) {  	if (foreColorInd > 0)  		foreColorInd--;  	if (backColorInd > 0)  		backColorInd--;  	var prevForeColor = foreColorNest [foreColorInd];  	var backForeColor = backColorNest [backColorInd];  	sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  	currentBackColor = backForeColor;  	//currentBackColor = -1;  	//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  	//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  } else if (Regex.Match (m.Value' parseColorResetChar).Success) {  	foreColorInd = 0;  	backColorInd = 0;  	currentBackColor = -1;  	sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (Regex.Match (m.Value' parseForeColor).Success) {  	var fc = int.Parse (m.Value.Remove (0' 1));  	if (currentBackColor > -1)  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + currentBackColor.ToString ("00"));  	else  		sLine.Insert (m.Index' TextColor.NewColorChar + fc.ToString ("00") + "99");  	//note: any background_color > 32 automatically use current backcolor  	//sLine.Insert(m.Index' newColorChar.ToString() + fc.ToString("00") + backColor.ToString("00"));  	if (foreColorInd < 32) {  		foreColorInd++;  		backColorInd++;  		foreColorNest [foreColorInd] = fc;  		backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  	}  } else if (Regex.Match (m.Value' parseColorChar).Success) {  	if (foreColorInd > 0)  		foreColorInd--;  	if (backColorInd > 0)  		backColorInd--;  	var prevForeColor = foreColorNest [foreColorInd];  	var backForeColor = backColorNest [backColorInd];  	sLine.Insert (m.Index' TextColor.NewColorChar + prevForeColor.ToString ("00") + backForeColor.ToString ("00"));  	currentBackColor = backForeColor;  	//currentBackColor = -1;  	//sLine.Insert(m.Index' newColorChar.ToString() + foreColor.ToString("00") + backColor.ToString("00"));  	//sLine.Insert(m.Index' TextColor.NewColorChar + foreColor.ToString("00") + "99"); //note: any background_color > 32 automatically use current backcolor  } else if (Regex.Match (m.Value' parseColorResetChar).Success) {  	foreColorInd = 0;  	backColorInd = 0;  	currentBackColor = -1;  	sLine.Insert (m.Index' TextColor.NewColorChar + TextColor.text.ToString ("00") + TextColor.background.ToString ("00"));  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (foreColorInd < 32) {  	foreColorInd++;  	backColorInd++;  	foreColorNest [foreColorInd] = fc;  	backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: if (foreColorInd < 32) {  	foreColorInd++;  	backColorInd++;  	foreColorNest [foreColorInd] = fc;  	backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,RedefineColorCodes,The following statement contains a magic number: backColorNest [backColorInd] = currentBackColor > -1 ? currentBackColor : 99;  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: try {  	if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  		var g = CreateGraphics ();  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.TextRenderingHint = TextRenderingHint.AntiAlias;  		var sf = StringFormat.GenericTypographic;  		sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  		var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  		var line = displayLines [lineNumber].Line.StripAllCodes ();  		//get all character of the line (Note: StripAllCodes() is a function in TextColor.cs)  		//do line-width check once if "x" is greater than line width' else check every character for the correct position where "x" is pointing at.   		//int width = MS(g' line' Font' 0' sf).Width; //<-- you can uncomment this and comment the next line. The bad thing is: it underestimate end position if there's emotIcon' it cut some char during selection  		var width = MS (g' lineEmot' Font);  		if (x > width) {  			g.Dispose ();  			return line.Length;  			//end of line  		}  		//check every character INCLUDING icon position for the correct position where "x" is pointing at.  		float lookWidth = 0;  		for (var i = 0; i < line.Length; i++)//check every character in a line  		 {  			if ((char)lineEmot [i] == TextColor.EmotChar) {  				var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  				lineEmot = lineEmot.Remove (i' 4);  				var bm = TextImage.GetImage (emotNumber);  				lookWidth += bm.Width;  				i--;  				//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  				continue;  			}  			float charWidth = MS (g' line [i].ToString ()' Font);  			lookWidth += charWidth;  			if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  			 {  				g.Dispose ();  				return i;  			}  		}  		g.Dispose ();  		return line.Length;  	}  } catch (Exception ee) {  	Trace.WriteLine (string.Format ("TextWindow ReturnChar: lineNumber {0}' x {1}"' lineNumber' x));  	Trace.WriteLine ("TextWindow ReturnChar Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: try {  	if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  		var g = CreateGraphics ();  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.TextRenderingHint = TextRenderingHint.AntiAlias;  		var sf = StringFormat.GenericTypographic;  		sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  		var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  		var line = displayLines [lineNumber].Line.StripAllCodes ();  		//get all character of the line (Note: StripAllCodes() is a function in TextColor.cs)  		//do line-width check once if "x" is greater than line width' else check every character for the correct position where "x" is pointing at.   		//int width = MS(g' line' Font' 0' sf).Width; //<-- you can uncomment this and comment the next line. The bad thing is: it underestimate end position if there's emotIcon' it cut some char during selection  		var width = MS (g' lineEmot' Font);  		if (x > width) {  			g.Dispose ();  			return line.Length;  			//end of line  		}  		//check every character INCLUDING icon position for the correct position where "x" is pointing at.  		float lookWidth = 0;  		for (var i = 0; i < line.Length; i++)//check every character in a line  		 {  			if ((char)lineEmot [i] == TextColor.EmotChar) {  				var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  				lineEmot = lineEmot.Remove (i' 4);  				var bm = TextImage.GetImage (emotNumber);  				lookWidth += bm.Width;  				i--;  				//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  				continue;  			}  			float charWidth = MS (g' line [i].ToString ()' Font);  			lookWidth += charWidth;  			if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  			 {  				g.Dispose ();  				return i;  			}  		}  		g.Dispose ();  		return line.Length;  	}  } catch (Exception ee) {  	Trace.WriteLine (string.Format ("TextWindow ReturnChar: lineNumber {0}' x {1}"' lineNumber' x));  	Trace.WriteLine ("TextWindow ReturnChar Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: try {  	if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  		var g = CreateGraphics ();  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.TextRenderingHint = TextRenderingHint.AntiAlias;  		var sf = StringFormat.GenericTypographic;  		sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  		var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  		var line = displayLines [lineNumber].Line.StripAllCodes ();  		//get all character of the line (Note: StripAllCodes() is a function in TextColor.cs)  		//do line-width check once if "x" is greater than line width' else check every character for the correct position where "x" is pointing at.   		//int width = MS(g' line' Font' 0' sf).Width; //<-- you can uncomment this and comment the next line. The bad thing is: it underestimate end position if there's emotIcon' it cut some char during selection  		var width = MS (g' lineEmot' Font);  		if (x > width) {  			g.Dispose ();  			return line.Length;  			//end of line  		}  		//check every character INCLUDING icon position for the correct position where "x" is pointing at.  		float lookWidth = 0;  		for (var i = 0; i < line.Length; i++)//check every character in a line  		 {  			if ((char)lineEmot [i] == TextColor.EmotChar) {  				var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  				lineEmot = lineEmot.Remove (i' 4);  				var bm = TextImage.GetImage (emotNumber);  				lookWidth += bm.Width;  				i--;  				//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  				continue;  			}  			float charWidth = MS (g' line [i].ToString ()' Font);  			lookWidth += charWidth;  			if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  			 {  				g.Dispose ();  				return i;  			}  		}  		g.Dispose ();  		return line.Length;  	}  } catch (Exception ee) {  	Trace.WriteLine (string.Format ("TextWindow ReturnChar: lineNumber {0}' x {1}"' lineNumber' x));  	Trace.WriteLine ("TextWindow ReturnChar Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  	var g = CreateGraphics ();  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.TextRenderingHint = TextRenderingHint.AntiAlias;  	var sf = StringFormat.GenericTypographic;  	sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  	var line = displayLines [lineNumber].Line.StripAllCodes ();  	//get all character of the line (Note: StripAllCodes() is a function in TextColor.cs)  	//do line-width check once if "x" is greater than line width' else check every character for the correct position where "x" is pointing at.   	//int width = MS(g' line' Font' 0' sf).Width; //<-- you can uncomment this and comment the next line. The bad thing is: it underestimate end position if there's emotIcon' it cut some char during selection  	var width = MS (g' lineEmot' Font);  	if (x > width) {  		g.Dispose ();  		return line.Length;  		//end of line  	}  	//check every character INCLUDING icon position for the correct position where "x" is pointing at.  	float lookWidth = 0;  	for (var i = 0; i < line.Length; i++)//check every character in a line  	 {  		if ((char)lineEmot [i] == TextColor.EmotChar) {  			var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  			lineEmot = lineEmot.Remove (i' 4);  			var bm = TextImage.GetImage (emotNumber);  			lookWidth += bm.Width;  			i--;  			//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  			continue;  		}  		float charWidth = MS (g' line [i].ToString ()' Font);  		lookWidth += charWidth;  		if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  		 {  			g.Dispose ();  			return i;  		}  	}  	g.Dispose ();  	return line.Length;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  	var g = CreateGraphics ();  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.TextRenderingHint = TextRenderingHint.AntiAlias;  	var sf = StringFormat.GenericTypographic;  	sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  	var line = displayLines [lineNumber].Line.StripAllCodes ();  	//get all character of the line (Note: StripAllCodes() is a function in TextColor.cs)  	//do line-width check once if "x" is greater than line width' else check every character for the correct position where "x" is pointing at.   	//int width = MS(g' line' Font' 0' sf).Width; //<-- you can uncomment this and comment the next line. The bad thing is: it underestimate end position if there's emotIcon' it cut some char during selection  	var width = MS (g' lineEmot' Font);  	if (x > width) {  		g.Dispose ();  		return line.Length;  		//end of line  	}  	//check every character INCLUDING icon position for the correct position where "x" is pointing at.  	float lookWidth = 0;  	for (var i = 0; i < line.Length; i++)//check every character in a line  	 {  		if ((char)lineEmot [i] == TextColor.EmotChar) {  			var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  			lineEmot = lineEmot.Remove (i' 4);  			var bm = TextImage.GetImage (emotNumber);  			lookWidth += bm.Width;  			i--;  			//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  			continue;  		}  		float charWidth = MS (g' line [i].ToString ()' Font);  		lookWidth += charWidth;  		if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  		 {  			g.Dispose ();  			return i;  		}  	}  	g.Dispose ();  	return line.Length;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  	var g = CreateGraphics ();  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.TextRenderingHint = TextRenderingHint.AntiAlias;  	var sf = StringFormat.GenericTypographic;  	sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  	var line = displayLines [lineNumber].Line.StripAllCodes ();  	//get all character of the line (Note: StripAllCodes() is a function in TextColor.cs)  	//do line-width check once if "x" is greater than line width' else check every character for the correct position where "x" is pointing at.   	//int width = MS(g' line' Font' 0' sf).Width; //<-- you can uncomment this and comment the next line. The bad thing is: it underestimate end position if there's emotIcon' it cut some char during selection  	var width = MS (g' lineEmot' Font);  	if (x > width) {  		g.Dispose ();  		return line.Length;  		//end of line  	}  	//check every character INCLUDING icon position for the correct position where "x" is pointing at.  	float lookWidth = 0;  	for (var i = 0; i < line.Length; i++)//check every character in a line  	 {  		if ((char)lineEmot [i] == TextColor.EmotChar) {  			var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  			lineEmot = lineEmot.Remove (i' 4);  			var bm = TextImage.GetImage (emotNumber);  			lookWidth += bm.Width;  			i--;  			//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  			continue;  		}  		float charWidth = MS (g' line [i].ToString ()' Font);  		lookWidth += charWidth;  		if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  		 {  			g.Dispose ();  			return i;  		}  	}  	g.Dispose ();  	return line.Length;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: for (var i = 0; i < line.Length; i++)//check every character in a line   {  	if ((char)lineEmot [i] == TextColor.EmotChar) {  		var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  		lineEmot = lineEmot.Remove (i' 4);  		var bm = TextImage.GetImage (emotNumber);  		lookWidth += bm.Width;  		i--;  		//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  		continue;  	}  	float charWidth = MS (g' line [i].ToString ()' Font);  	lookWidth += charWidth;  	if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  	 {  		g.Dispose ();  		return i;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: for (var i = 0; i < line.Length; i++)//check every character in a line   {  	if ((char)lineEmot [i] == TextColor.EmotChar) {  		var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  		lineEmot = lineEmot.Remove (i' 4);  		var bm = TextImage.GetImage (emotNumber);  		lookWidth += bm.Width;  		i--;  		//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  		continue;  	}  	float charWidth = MS (g' line [i].ToString ()' Font);  	lookWidth += charWidth;  	if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  	 {  		g.Dispose ();  		return i;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: for (var i = 0; i < line.Length; i++)//check every character in a line   {  	if ((char)lineEmot [i] == TextColor.EmotChar) {  		var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  		lineEmot = lineEmot.Remove (i' 4);  		var bm = TextImage.GetImage (emotNumber);  		lookWidth += bm.Width;  		i--;  		//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  		continue;  	}  	float charWidth = MS (g' line [i].ToString ()' Font);  	lookWidth += charWidth;  	if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)  	 {  		g.Dispose ();  		return i;  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: if ((char)lineEmot [i] == TextColor.EmotChar) {  	var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  	lineEmot = lineEmot.Remove (i' 4);  	var bm = TextImage.GetImage (emotNumber);  	lookWidth += bm.Width;  	i--;  	//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  	continue;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: if ((char)lineEmot [i] == TextColor.EmotChar) {  	var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  	lineEmot = lineEmot.Remove (i' 4);  	var bm = TextImage.GetImage (emotNumber);  	lookWidth += bm.Width;  	i--;  	//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  	continue;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: lineEmot = lineEmot.Remove (i' 4);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnChar,The following statement contains a magic number: if ((int)lookWidth >= x + (int)charWidth / 2)//check whether this character is on cursor position or not.  Note: char checking & x-coordinate is checked from left to right (everything is from left to right)   {  	g.Dispose ();  	return i;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: try {  	if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  		var g = CreateGraphics ();  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.TextRenderingHint = TextRenderingHint.AntiAlias;  		var sf = StringFormat.GenericTypographic;  		sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  		var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  		var line = displayLines [lineNumber].Line.StripAllCodes ();  		//do line-width check once if "x" is greater than line width'  		var width = MS (g' line' Font);  		//int width = MS(g' lineEmot' Font' 0' sf).Width; / //<-- you can uncomment this and comment the previous line. The bad thing is: will overestimate hyperlinks ending' which make you able to click empty space  		if (x > width) {  			g.Dispose ();  			return "";  		}  		if (x <= 0) {  			g.Dispose ();  			return "";  		}  		var space = 0;  		var foundSpace = false;  		float lookWidth = 0;  		for (var i = 0; i < line.Length; i++) {  			if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  			 {  				var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  				lineEmot = lineEmot.Remove (i' 4);  				//clear emot char from lineEmot  				var bm = TextImage.GetImage (emotNumber);  				lookWidth += bm.Width;  				//add emot size  				i--;  				//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  				continue;  			}  			if ((int)lookWidth >= x && foundSpace) {  				if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  					// this line wraps from the previous one.   					var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  					var prevwidth = MS (g' prevline' Font);  					g.Dispose ();  					return ReturnWord (lineNumber - 1' prevwidth);  				}  				g.Dispose ();  				return line.Substring (space' i - space);  				//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  			}  			if (line [i] == (char)32)//equal to "space"  			 {  				if (!foundSpace) {  					if ((int)lookWidth >= x) {  						foundSpace = true;  						//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  						i--;  						//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  					} else  						space = i + 1;  					//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  				}  			}  			lookWidth += MS (g' line [i].ToString ()' Font);  		}  		if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  			// this line wraps from the previous one.   			var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  			if (prevline [prevline.Length - 1] != ' ') {  				var prevwidth = MS (g' prevline' Font);  				g.Dispose ();  				return ReturnWord (lineNumber - 1' prevwidth);  			}  		}  		if (!foundSpace && space < line.Length) {  			//wrap to the next line  			if (lineNumber < TotalDisplayLines) {  				var extra = "";  				var currentLine = displayLines [lineNumber].TextLine;  				while (lineNumber < TotalDisplayLines) {  					lineNumber++;  					if (displayLines [lineNumber].TextLine != currentLine)  						break;  					extra += displayLines [lineNumber].Line.StripAllCodes ();  					if (extra.IndexOf (' ') > -1) {  						extra = extra.Substring (0' extra.IndexOf (' '));  						break;  					}  				}  				g.Dispose ();  				return line.Substring (space) + extra;  			}  		}  		g.Dispose ();  	}  } catch (Exception ee) {  	Trace.WriteLine (string.Format ("TextWindow ReturnWord: lineNumber {0}' x {1}"' lineNumber' x));  	Trace.WriteLine ("TextWindow ReturnWord Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: try {  	if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  		var g = CreateGraphics ();  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.TextRenderingHint = TextRenderingHint.AntiAlias;  		var sf = StringFormat.GenericTypographic;  		sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  		var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  		var line = displayLines [lineNumber].Line.StripAllCodes ();  		//do line-width check once if "x" is greater than line width'  		var width = MS (g' line' Font);  		//int width = MS(g' lineEmot' Font' 0' sf).Width; / //<-- you can uncomment this and comment the previous line. The bad thing is: will overestimate hyperlinks ending' which make you able to click empty space  		if (x > width) {  			g.Dispose ();  			return "";  		}  		if (x <= 0) {  			g.Dispose ();  			return "";  		}  		var space = 0;  		var foundSpace = false;  		float lookWidth = 0;  		for (var i = 0; i < line.Length; i++) {  			if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  			 {  				var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  				lineEmot = lineEmot.Remove (i' 4);  				//clear emot char from lineEmot  				var bm = TextImage.GetImage (emotNumber);  				lookWidth += bm.Width;  				//add emot size  				i--;  				//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  				continue;  			}  			if ((int)lookWidth >= x && foundSpace) {  				if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  					// this line wraps from the previous one.   					var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  					var prevwidth = MS (g' prevline' Font);  					g.Dispose ();  					return ReturnWord (lineNumber - 1' prevwidth);  				}  				g.Dispose ();  				return line.Substring (space' i - space);  				//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  			}  			if (line [i] == (char)32)//equal to "space"  			 {  				if (!foundSpace) {  					if ((int)lookWidth >= x) {  						foundSpace = true;  						//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  						i--;  						//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  					} else  						space = i + 1;  					//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  				}  			}  			lookWidth += MS (g' line [i].ToString ()' Font);  		}  		if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  			// this line wraps from the previous one.   			var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  			if (prevline [prevline.Length - 1] != ' ') {  				var prevwidth = MS (g' prevline' Font);  				g.Dispose ();  				return ReturnWord (lineNumber - 1' prevwidth);  			}  		}  		if (!foundSpace && space < line.Length) {  			//wrap to the next line  			if (lineNumber < TotalDisplayLines) {  				var extra = "";  				var currentLine = displayLines [lineNumber].TextLine;  				while (lineNumber < TotalDisplayLines) {  					lineNumber++;  					if (displayLines [lineNumber].TextLine != currentLine)  						break;  					extra += displayLines [lineNumber].Line.StripAllCodes ();  					if (extra.IndexOf (' ') > -1) {  						extra = extra.Substring (0' extra.IndexOf (' '));  						break;  					}  				}  				g.Dispose ();  				return line.Substring (space) + extra;  			}  		}  		g.Dispose ();  	}  } catch (Exception ee) {  	Trace.WriteLine (string.Format ("TextWindow ReturnWord: lineNumber {0}' x {1}"' lineNumber' x));  	Trace.WriteLine ("TextWindow ReturnWord Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: try {  	if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  		var g = CreateGraphics ();  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.TextRenderingHint = TextRenderingHint.AntiAlias;  		var sf = StringFormat.GenericTypographic;  		sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  		var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  		var line = displayLines [lineNumber].Line.StripAllCodes ();  		//do line-width check once if "x" is greater than line width'  		var width = MS (g' line' Font);  		//int width = MS(g' lineEmot' Font' 0' sf).Width; / //<-- you can uncomment this and comment the previous line. The bad thing is: will overestimate hyperlinks ending' which make you able to click empty space  		if (x > width) {  			g.Dispose ();  			return "";  		}  		if (x <= 0) {  			g.Dispose ();  			return "";  		}  		var space = 0;  		var foundSpace = false;  		float lookWidth = 0;  		for (var i = 0; i < line.Length; i++) {  			if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  			 {  				var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  				lineEmot = lineEmot.Remove (i' 4);  				//clear emot char from lineEmot  				var bm = TextImage.GetImage (emotNumber);  				lookWidth += bm.Width;  				//add emot size  				i--;  				//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  				continue;  			}  			if ((int)lookWidth >= x && foundSpace) {  				if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  					// this line wraps from the previous one.   					var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  					var prevwidth = MS (g' prevline' Font);  					g.Dispose ();  					return ReturnWord (lineNumber - 1' prevwidth);  				}  				g.Dispose ();  				return line.Substring (space' i - space);  				//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  			}  			if (line [i] == (char)32)//equal to "space"  			 {  				if (!foundSpace) {  					if ((int)lookWidth >= x) {  						foundSpace = true;  						//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  						i--;  						//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  					} else  						space = i + 1;  					//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  				}  			}  			lookWidth += MS (g' line [i].ToString ()' Font);  		}  		if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  			// this line wraps from the previous one.   			var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  			if (prevline [prevline.Length - 1] != ' ') {  				var prevwidth = MS (g' prevline' Font);  				g.Dispose ();  				return ReturnWord (lineNumber - 1' prevwidth);  			}  		}  		if (!foundSpace && space < line.Length) {  			//wrap to the next line  			if (lineNumber < TotalDisplayLines) {  				var extra = "";  				var currentLine = displayLines [lineNumber].TextLine;  				while (lineNumber < TotalDisplayLines) {  					lineNumber++;  					if (displayLines [lineNumber].TextLine != currentLine)  						break;  					extra += displayLines [lineNumber].Line.StripAllCodes ();  					if (extra.IndexOf (' ') > -1) {  						extra = extra.Substring (0' extra.IndexOf (' '));  						break;  					}  				}  				g.Dispose ();  				return line.Substring (space) + extra;  			}  		}  		g.Dispose ();  	}  } catch (Exception ee) {  	Trace.WriteLine (string.Format ("TextWindow ReturnWord: lineNumber {0}' x {1}"' lineNumber' x));  	Trace.WriteLine ("TextWindow ReturnWord Error:" + ee.Message' ee.StackTrace);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  	var g = CreateGraphics ();  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.TextRenderingHint = TextRenderingHint.AntiAlias;  	var sf = StringFormat.GenericTypographic;  	sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  	var line = displayLines [lineNumber].Line.StripAllCodes ();  	//do line-width check once if "x" is greater than line width'  	var width = MS (g' line' Font);  	//int width = MS(g' lineEmot' Font' 0' sf).Width; / //<-- you can uncomment this and comment the previous line. The bad thing is: will overestimate hyperlinks ending' which make you able to click empty space  	if (x > width) {  		g.Dispose ();  		return "";  	}  	if (x <= 0) {  		g.Dispose ();  		return "";  	}  	var space = 0;  	var foundSpace = false;  	float lookWidth = 0;  	for (var i = 0; i < line.Length; i++) {  		if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  		 {  			var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  			lineEmot = lineEmot.Remove (i' 4);  			//clear emot char from lineEmot  			var bm = TextImage.GetImage (emotNumber);  			lookWidth += bm.Width;  			//add emot size  			i--;  			//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  			continue;  		}  		if ((int)lookWidth >= x && foundSpace) {  			if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  				// this line wraps from the previous one.   				var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  				var prevwidth = MS (g' prevline' Font);  				g.Dispose ();  				return ReturnWord (lineNumber - 1' prevwidth);  			}  			g.Dispose ();  			return line.Substring (space' i - space);  			//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  		}  		if (line [i] == (char)32)//equal to "space"  		 {  			if (!foundSpace) {  				if ((int)lookWidth >= x) {  					foundSpace = true;  					//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  					i--;  					//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  				} else  					space = i + 1;  				//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  			}  		}  		lookWidth += MS (g' line [i].ToString ()' Font);  	}  	if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  		// this line wraps from the previous one.   		var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  		if (prevline [prevline.Length - 1] != ' ') {  			var prevwidth = MS (g' prevline' Font);  			g.Dispose ();  			return ReturnWord (lineNumber - 1' prevwidth);  		}  	}  	if (!foundSpace && space < line.Length) {  		//wrap to the next line  		if (lineNumber < TotalDisplayLines) {  			var extra = "";  			var currentLine = displayLines [lineNumber].TextLine;  			while (lineNumber < TotalDisplayLines) {  				lineNumber++;  				if (displayLines [lineNumber].TextLine != currentLine)  					break;  				extra += displayLines [lineNumber].Line.StripAllCodes ();  				if (extra.IndexOf (' ') > -1) {  					extra = extra.Substring (0' extra.IndexOf (' '));  					break;  				}  			}  			g.Dispose ();  			return line.Substring (space) + extra;  		}  	}  	g.Dispose ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  	var g = CreateGraphics ();  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.TextRenderingHint = TextRenderingHint.AntiAlias;  	var sf = StringFormat.GenericTypographic;  	sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  	var line = displayLines [lineNumber].Line.StripAllCodes ();  	//do line-width check once if "x" is greater than line width'  	var width = MS (g' line' Font);  	//int width = MS(g' lineEmot' Font' 0' sf).Width; / //<-- you can uncomment this and comment the previous line. The bad thing is: will overestimate hyperlinks ending' which make you able to click empty space  	if (x > width) {  		g.Dispose ();  		return "";  	}  	if (x <= 0) {  		g.Dispose ();  		return "";  	}  	var space = 0;  	var foundSpace = false;  	float lookWidth = 0;  	for (var i = 0; i < line.Length; i++) {  		if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  		 {  			var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  			lineEmot = lineEmot.Remove (i' 4);  			//clear emot char from lineEmot  			var bm = TextImage.GetImage (emotNumber);  			lookWidth += bm.Width;  			//add emot size  			i--;  			//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  			continue;  		}  		if ((int)lookWidth >= x && foundSpace) {  			if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  				// this line wraps from the previous one.   				var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  				var prevwidth = MS (g' prevline' Font);  				g.Dispose ();  				return ReturnWord (lineNumber - 1' prevwidth);  			}  			g.Dispose ();  			return line.Substring (space' i - space);  			//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  		}  		if (line [i] == (char)32)//equal to "space"  		 {  			if (!foundSpace) {  				if ((int)lookWidth >= x) {  					foundSpace = true;  					//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  					i--;  					//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  				} else  					space = i + 1;  				//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  			}  		}  		lookWidth += MS (g' line [i].ToString ()' Font);  	}  	if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  		// this line wraps from the previous one.   		var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  		if (prevline [prevline.Length - 1] != ' ') {  			var prevwidth = MS (g' prevline' Font);  			g.Dispose ();  			return ReturnWord (lineNumber - 1' prevwidth);  		}  	}  	if (!foundSpace && space < line.Length) {  		//wrap to the next line  		if (lineNumber < TotalDisplayLines) {  			var extra = "";  			var currentLine = displayLines [lineNumber].TextLine;  			while (lineNumber < TotalDisplayLines) {  				lineNumber++;  				if (displayLines [lineNumber].TextLine != currentLine)  					break;  				extra += displayLines [lineNumber].Line.StripAllCodes ();  				if (extra.IndexOf (' ') > -1) {  					extra = extra.Substring (0' extra.IndexOf (' '));  					break;  				}  			}  			g.Dispose ();  			return line.Substring (space) + extra;  		}  	}  	g.Dispose ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: if (lineNumber < TotalDisplayLines && lineNumber >= 0) {  	var g = CreateGraphics ();  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.TextRenderingHint = TextRenderingHint.AntiAlias;  	var sf = StringFormat.GenericTypographic;  	sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;  	var lineEmot = displayLines [lineNumber].Line.StripAllCodesExceptEmot ();  	var line = displayLines [lineNumber].Line.StripAllCodes ();  	//do line-width check once if "x" is greater than line width'  	var width = MS (g' line' Font);  	//int width = MS(g' lineEmot' Font' 0' sf).Width; / //<-- you can uncomment this and comment the previous line. The bad thing is: will overestimate hyperlinks ending' which make you able to click empty space  	if (x > width) {  		g.Dispose ();  		return "";  	}  	if (x <= 0) {  		g.Dispose ();  		return "";  	}  	var space = 0;  	var foundSpace = false;  	float lookWidth = 0;  	for (var i = 0; i < line.Length; i++) {  		if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  		 {  			var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  			lineEmot = lineEmot.Remove (i' 4);  			//clear emot char from lineEmot  			var bm = TextImage.GetImage (emotNumber);  			lookWidth += bm.Width;  			//add emot size  			i--;  			//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  			continue;  		}  		if ((int)lookWidth >= x && foundSpace) {  			if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  				// this line wraps from the previous one.   				var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  				var prevwidth = MS (g' prevline' Font);  				g.Dispose ();  				return ReturnWord (lineNumber - 1' prevwidth);  			}  			g.Dispose ();  			return line.Substring (space' i - space);  			//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  		}  		if (line [i] == (char)32)//equal to "space"  		 {  			if (!foundSpace) {  				if ((int)lookWidth >= x) {  					foundSpace = true;  					//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  					i--;  					//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  				} else  					space = i + 1;  				//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  			}  		}  		lookWidth += MS (g' line [i].ToString ()' Font);  	}  	if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  		// this line wraps from the previous one.   		var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  		if (prevline [prevline.Length - 1] != ' ') {  			var prevwidth = MS (g' prevline' Font);  			g.Dispose ();  			return ReturnWord (lineNumber - 1' prevwidth);  		}  	}  	if (!foundSpace && space < line.Length) {  		//wrap to the next line  		if (lineNumber < TotalDisplayLines) {  			var extra = "";  			var currentLine = displayLines [lineNumber].TextLine;  			while (lineNumber < TotalDisplayLines) {  				lineNumber++;  				if (displayLines [lineNumber].TextLine != currentLine)  					break;  				extra += displayLines [lineNumber].Line.StripAllCodes ();  				if (extra.IndexOf (' ') > -1) {  					extra = extra.Substring (0' extra.IndexOf (' '));  					break;  				}  			}  			g.Dispose ();  			return line.Substring (space) + extra;  		}  	}  	g.Dispose ();  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: for (var i = 0; i < line.Length; i++) {  	if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  	 {  		var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  		lineEmot = lineEmot.Remove (i' 4);  		//clear emot char from lineEmot  		var bm = TextImage.GetImage (emotNumber);  		lookWidth += bm.Width;  		//add emot size  		i--;  		//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  		continue;  	}  	if ((int)lookWidth >= x && foundSpace) {  		if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  			// this line wraps from the previous one.   			var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  			var prevwidth = MS (g' prevline' Font);  			g.Dispose ();  			return ReturnWord (lineNumber - 1' prevwidth);  		}  		g.Dispose ();  		return line.Substring (space' i - space);  		//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  	}  	if (line [i] == (char)32)//equal to "space"  	 {  		if (!foundSpace) {  			if ((int)lookWidth >= x) {  				foundSpace = true;  				//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  				i--;  				//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  			} else  				space = i + 1;  			//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  		}  	}  	lookWidth += MS (g' line [i].ToString ()' Font);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: for (var i = 0; i < line.Length; i++) {  	if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  	 {  		var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  		lineEmot = lineEmot.Remove (i' 4);  		//clear emot char from lineEmot  		var bm = TextImage.GetImage (emotNumber);  		lookWidth += bm.Width;  		//add emot size  		i--;  		//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  		continue;  	}  	if ((int)lookWidth >= x && foundSpace) {  		if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  			// this line wraps from the previous one.   			var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  			var prevwidth = MS (g' prevline' Font);  			g.Dispose ();  			return ReturnWord (lineNumber - 1' prevwidth);  		}  		g.Dispose ();  		return line.Substring (space' i - space);  		//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  	}  	if (line [i] == (char)32)//equal to "space"  	 {  		if (!foundSpace) {  			if ((int)lookWidth >= x) {  				foundSpace = true;  				//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  				i--;  				//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  			} else  				space = i + 1;  			//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  		}  	}  	lookWidth += MS (g' line [i].ToString ()' Font);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: for (var i = 0; i < line.Length; i++) {  	if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon  	 {  		var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  		lineEmot = lineEmot.Remove (i' 4);  		//clear emot char from lineEmot  		var bm = TextImage.GetImage (emotNumber);  		lookWidth += bm.Width;  		//add emot size  		i--;  		//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  		continue;  	}  	if ((int)lookWidth >= x && foundSpace) {  		if (displayLines [lineNumber].Previous && lineNumber > 0 && space == 0) {  			// this line wraps from the previous one.   			var prevline = displayLines [lineNumber - 1].Line.StripAllCodes ();  			var prevwidth = MS (g' prevline' Font);  			g.Dispose ();  			return ReturnWord (lineNumber - 1' prevwidth);  		}  		g.Dispose ();  		return line.Substring (space' i - space);  		//Substring(space' i - space)' in example: xxx__Yxxxx_T_xxx OR Yxx_T_xxxxx__xxx (where T is pointing at spaces' Y pointing at 1st letter)  	}  	if (line [i] == (char)32)//equal to "space"  	 {  		if (!foundSpace) {  			if ((int)lookWidth >= x) {  				foundSpace = true;  				//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  				i--;  				//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  			} else  				space = i + 1;  			//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  		}  	}  	lookWidth += MS (g' line [i].ToString ()' Font);  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon   {  	var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  	lineEmot = lineEmot.Remove (i' 4);  	//clear emot char from lineEmot  	var bm = TextImage.GetImage (emotNumber);  	lookWidth += bm.Width;  	//add emot size  	i--;  	//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  	continue;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: if ((char)lineEmot [i] == TextColor.EmotChar)//equal to an emot icon   {  	var emotNumber = Convert.ToInt32 (lineEmot.ToString ().Substring (i + 1' 3));  	lineEmot = lineEmot.Remove (i' 4);  	//clear emot char from lineEmot  	var bm = TextImage.GetImage (emotNumber);  	lookWidth += bm.Width;  	//add emot size  	i--;  	//halt pointer position for this time once (at second try the emot char will be gone' its size is added and continue checking the other stuff)  	continue;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: lineEmot = lineEmot.Remove (i' 4);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,ReturnWord,The following statement contains a magic number: if (line [i] == (char)32)//equal to "space"   {  	if (!foundSpace) {  		if ((int)lookWidth >= x) {  			foundSpace = true;  			//current position' in example: xxx__xxxxx_T_xxx (where T is pointing at space on right)  			i--;  			//halt pointer position for this time once (at second loop the mid-code will be executed to return the Substring)  		} else  			space = i + 1;  		//i + 1 position' in example: xxx__Yxxxx__xxx (Y at 1st letter after a space)  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,UpdateScrollBar,The following statement contains a magic number: if (InvokeRequired) {  	ScrollValueDelegate s = UpdateScrollBar;  	Invoke (s' new object[] {  		newValue'  		offsetValue  	});  } else {  	var nearBottom = vScrollBar.Value + 5 >= TotalDisplayLines;  	var isBottom = vScrollBar.Value >= 1 + vScrollBar.Maximum - vScrollBar.LargeChange;  	//exactly at UI's scrollbar bottom  	if (showMaxLines < TotalDisplayLines) {  		vScrollBar.LargeChange = Math.Max (showMaxLines - 3' 1);  		//include previous 3 lines for continuity  		vScrollBar.Enabled = true;  	} else {  		vScrollBar.LargeChange = TotalDisplayLines;  		vScrollBar.Enabled = false;  	}  	if (newValue != 0) {  		vScrollBar.Minimum = 1;  		vScrollBar.Maximum = Math.Max (-1 + TotalDisplayLines + vScrollBar.LargeChange' 1);  		// maximum value that can be reached through UI is: 1 + Maximum - LargeChange. Ref: http://msdn.microsoft.com/en-us/library/system.windows.forms.scrollbar.maximum(v=vs.110).aspx  		if (!vScrollBar.Enabled || !vScrollBar.Visible)  			isBottom = true;  		if (isBottom || hideScroll || nearBottom)  			vScrollBar.Value = newValue;  		//always set to TotalDisplayLines to make scrollbar follow new chat message feed   		else  			vScrollBar.Value = vScrollBar.Value + offsetValue;  		//this fix scrollbar lost user's position when all text is being shifted upward to make room for new chat message  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,UpdateScrollBar,The following statement contains a magic number: if (InvokeRequired) {  	ScrollValueDelegate s = UpdateScrollBar;  	Invoke (s' new object[] {  		newValue'  		offsetValue  	});  } else {  	var nearBottom = vScrollBar.Value + 5 >= TotalDisplayLines;  	var isBottom = vScrollBar.Value >= 1 + vScrollBar.Maximum - vScrollBar.LargeChange;  	//exactly at UI's scrollbar bottom  	if (showMaxLines < TotalDisplayLines) {  		vScrollBar.LargeChange = Math.Max (showMaxLines - 3' 1);  		//include previous 3 lines for continuity  		vScrollBar.Enabled = true;  	} else {  		vScrollBar.LargeChange = TotalDisplayLines;  		vScrollBar.Enabled = false;  	}  	if (newValue != 0) {  		vScrollBar.Minimum = 1;  		vScrollBar.Maximum = Math.Max (-1 + TotalDisplayLines + vScrollBar.LargeChange' 1);  		// maximum value that can be reached through UI is: 1 + Maximum - LargeChange. Ref: http://msdn.microsoft.com/en-us/library/system.windows.forms.scrollbar.maximum(v=vs.110).aspx  		if (!vScrollBar.Enabled || !vScrollBar.Visible)  			isBottom = true;  		if (isBottom || hideScroll || nearBottom)  			vScrollBar.Value = newValue;  		//always set to TotalDisplayLines to make scrollbar follow new chat message feed   		else  			vScrollBar.Value = vScrollBar.Value + offsetValue;  		//this fix scrollbar lost user's position when all text is being shifted upward to make room for new chat message  	}  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,UpdateScrollBar,The following statement contains a magic number: if (showMaxLines < TotalDisplayLines) {  	vScrollBar.LargeChange = Math.Max (showMaxLines - 3' 1);  	//include previous 3 lines for continuity  	vScrollBar.Enabled = true;  } else {  	vScrollBar.LargeChange = TotalDisplayLines;  	vScrollBar.Enabled = false;  }  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,UpdateScrollBar,The following statement contains a magic number: vScrollBar.LargeChange = Math.Max (showMaxLines - 3' 1);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Location = new System.Drawing.Point (278' 0);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Size = new System.Drawing.Size (17' 239);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Size = new System.Drawing.Size (17' 239);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (295' 239);  
Magic Number,ZeroKLobby.MicroLobby,TextWindow,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\TextWindow.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (295' 239);  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnSubmit = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.OK'  	Location = new Point (70' 255)'  	Size = new Size (104' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "OK"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnSubmit = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.OK'  	Location = new Point (70' 255)'  	Size = new Size (104' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "OK"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnSubmit = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.OK'  	Location = new Point (70' 255)'  	Size = new Size (104' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "OK"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnSubmit = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.OK'  	Location = new Point (70' 255)'  	Size = new Size (104' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "OK"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbLogin = new ZklTextBox {  	Location = new Point (237' 123)'  	Size = new Size (146' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbLogin = new ZklTextBox {  	Location = new Point (237' 123)'  	Size = new Size (146' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbLogin = new ZklTextBox {  	Location = new Point (237' 123)'  	Size = new Size (146' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbLogin = new ZklTextBox {  	Location = new Point (237' 123)'  	Size = new Size (146' 24)'  	TabIndex = 1  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbPassword = new ZklTextBox {  	Location = new Point (237' 164)'  	Size = new Size (146' 24)'  	TabIndex = 2'  	TextBox =  {  		UseSystemPasswordChar = true  	}  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbPassword = new ZklTextBox {  	Location = new Point (237' 164)'  	Size = new Size (146' 24)'  	TabIndex = 2'  	TextBox =  {  		UseSystemPasswordChar = true  	}  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbPassword = new ZklTextBox {  	Location = new Point (237' 164)'  	Size = new Size (146' 24)'  	TabIndex = 2'  	TextBox =  {  		UseSystemPasswordChar = true  	}  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbPassword = new ZklTextBox {  	Location = new Point (237' 164)'  	Size = new Size (146' 24)'  	TabIndex = 2'  	TextBox =  {  		UseSystemPasswordChar = true  	}  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: tbPassword = new ZklTextBox {  	Location = new Point (237' 164)'  	Size = new Size (146' 24)'  	TabIndex = 2'  	TextBox =  {  		UseSystemPasswordChar = true  	}  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: lbInfo = new Label {  	BackColor = Color.Transparent'  	ForeColor = Color.Red'  	Location = new Point (29' 20)'  	Size = new Size (414' 51)'  	Text = "Error"'  	TextAlign = ContentAlignment.MiddleCenter  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: lbInfo = new Label {  	BackColor = Color.Transparent'  	ForeColor = Color.Red'  	Location = new Point (29' 20)'  	Size = new Size (414' 51)'  	Text = "Error"'  	TextAlign = ContentAlignment.MiddleCenter  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: lbInfo = new Label {  	BackColor = Color.Transparent'  	ForeColor = Color.Red'  	Location = new Point (29' 20)'  	Size = new Size (414' 51)'  	Text = "Error"'  	TextAlign = ContentAlignment.MiddleCenter  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: lbInfo = new Label {  	BackColor = Color.Transparent'  	ForeColor = Color.Red'  	Location = new Point (29' 20)'  	Size = new Size (414' 51)'  	Text = "Error"'  	TextAlign = ContentAlignment.MiddleCenter  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnCancel = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.Cancel'  	Location = new Point (286' 255)'  	Size = new Size (97' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "Cancel"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnCancel = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.Cancel'  	Location = new Point (286' 255)'  	Size = new Size (97' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "Cancel"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnCancel = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.Cancel'  	Location = new Point (286' 255)'  	Size = new Size (97' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "Cancel"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: btnCancel = new BitmapButton {  	ButtonStyle = FrameBorderRenderer.StyleType.DarkHive'  	DialogResult = DialogResult.Cancel'  	Location = new Point (286' 255)'  	Size = new Size (97' 44)'  	SoundType = SoundPalette.SoundType.Click'  	Text = "Cancel"  };  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: ClientSize = new Size (482' 331);  
Magic Number,ZeroKLobby.MicroLobby,LoginForm,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\LoginForm.cs,LoginForm,The following statement contains a magic number: ClientSize = new Size (482' 331);  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,PrivateMessageControl,The following statement contains a magic number: ChatBox.IRCForeColor = 14;  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.Location = new System.Drawing.Point (0' 389);  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.Size = new System.Drawing.Size (455' 20);  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,InitializeComponent,The following statement contains a magic number: this.sendBox.Size = new System.Drawing.Size (455' 20);  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,InitializeComponent,The following statement contains a magic number: this.ChatBox.Size = new System.Drawing.Size (455' 389);  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,InitializeComponent,The following statement contains a magic number: this.ChatBox.Size = new System.Drawing.Size (455' 389);  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (455' 409);  
Magic Number,ZeroKLobby.MicroLobby,PrivateMessageControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PrivateMessageControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (455' 409);  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.Length > 0 && e.Text [0] == '/') {  	if (e.Text.StartsWith ("/me")) {  		e.Text = e.Text.Substring (4);  		e.IsEmote = true;  	} else {  		e.Cancel = true;  		var words = e.Text.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  			if (words.Length == 2)  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  			else {  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  				Program.AutoJoinManager.AddPassword (words [1]' words [2]);  			}  		} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  			Program.TasClient.LeaveChannel (e.Channel);  		else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  			Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  		else if (words [0] == "/disconnect")  			Program.TasClient.RequestDisconnect ();  		else if (words [0] == "/raw")  			Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  		//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  		else  			MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  	}  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.Length > 0 && e.Text [0] == '/') {  	if (e.Text.StartsWith ("/me")) {  		e.Text = e.Text.Substring (4);  		e.IsEmote = true;  	} else {  		e.Cancel = true;  		var words = e.Text.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  			if (words.Length == 2)  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  			else {  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  				Program.AutoJoinManager.AddPassword (words [1]' words [2]);  			}  		} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  			Program.TasClient.LeaveChannel (e.Channel);  		else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  			Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  		else if (words [0] == "/disconnect")  			Program.TasClient.RequestDisconnect ();  		else if (words [0] == "/raw")  			Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  		//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  		else  			MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  	}  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.Length > 0 && e.Text [0] == '/') {  	if (e.Text.StartsWith ("/me")) {  		e.Text = e.Text.Substring (4);  		e.IsEmote = true;  	} else {  		e.Cancel = true;  		var words = e.Text.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  			if (words.Length == 2)  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  			else {  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  				Program.AutoJoinManager.AddPassword (words [1]' words [2]);  			}  		} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  			Program.TasClient.LeaveChannel (e.Channel);  		else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  			Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  		else if (words [0] == "/disconnect")  			Program.TasClient.RequestDisconnect ();  		else if (words [0] == "/raw")  			Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  		//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  		else  			MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  	}  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.Length > 0 && e.Text [0] == '/') {  	if (e.Text.StartsWith ("/me")) {  		e.Text = e.Text.Substring (4);  		e.IsEmote = true;  	} else {  		e.Cancel = true;  		var words = e.Text.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  			if (words.Length == 2)  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  			else {  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  				Program.AutoJoinManager.AddPassword (words [1]' words [2]);  			}  		} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  			Program.TasClient.LeaveChannel (e.Channel);  		else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  			Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  		else if (words [0] == "/disconnect")  			Program.TasClient.RequestDisconnect ();  		else if (words [0] == "/raw")  			Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  		//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  		else  			MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  	}  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.Length > 0 && e.Text [0] == '/') {  	if (e.Text.StartsWith ("/me")) {  		e.Text = e.Text.Substring (4);  		e.IsEmote = true;  	} else {  		e.Cancel = true;  		var words = e.Text.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  			if (words.Length == 2)  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  			else {  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  				Program.AutoJoinManager.AddPassword (words [1]' words [2]);  			}  		} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  			Program.TasClient.LeaveChannel (e.Channel);  		else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  			Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  		else if (words [0] == "/disconnect")  			Program.TasClient.RequestDisconnect ();  		else if (words [0] == "/raw")  			Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  		//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  		else  			MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  	}  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.Length > 0 && e.Text [0] == '/') {  	if (e.Text.StartsWith ("/me")) {  		e.Text = e.Text.Substring (4);  		e.IsEmote = true;  	} else {  		e.Cancel = true;  		var words = e.Text.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  			if (words.Length == 2)  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  			else {  				Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  				Program.AutoJoinManager.AddPassword (words [1]' words [2]);  			}  		} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  			Program.TasClient.LeaveChannel (e.Channel);  		else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  			Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  		else if (words [0] == "/disconnect")  			Program.TasClient.RequestDisconnect ();  		else if (words [0] == "/raw")  			Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  		//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  		else  			MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  	}  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.StartsWith ("/me")) {  	e.Text = e.Text.Substring (4);  	e.IsEmote = true;  } else {  	e.Cancel = true;  	var words = e.Text.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  		if (words.Length == 2)  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  		else {  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  			Program.AutoJoinManager.AddPassword (words [1]' words [2]);  		}  	} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  		Program.TasClient.LeaveChannel (e.Channel);  	else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  		Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  	else if (words [0] == "/disconnect")  		Program.TasClient.RequestDisconnect ();  	else if (words [0] == "/raw")  		Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  	//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  	else  		MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.StartsWith ("/me")) {  	e.Text = e.Text.Substring (4);  	e.IsEmote = true;  } else {  	e.Cancel = true;  	var words = e.Text.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  		if (words.Length == 2)  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  		else {  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  			Program.AutoJoinManager.AddPassword (words [1]' words [2]);  		}  	} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  		Program.TasClient.LeaveChannel (e.Channel);  	else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  		Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  	else if (words [0] == "/disconnect")  		Program.TasClient.RequestDisconnect ();  	else if (words [0] == "/raw")  		Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  	//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  	else  		MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.StartsWith ("/me")) {  	e.Text = e.Text.Substring (4);  	e.IsEmote = true;  } else {  	e.Cancel = true;  	var words = e.Text.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  		if (words.Length == 2)  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  		else {  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  			Program.AutoJoinManager.AddPassword (words [1]' words [2]);  		}  	} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  		Program.TasClient.LeaveChannel (e.Channel);  	else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  		Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  	else if (words [0] == "/disconnect")  		Program.TasClient.RequestDisconnect ();  	else if (words [0] == "/raw")  		Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  	//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  	else  		MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.StartsWith ("/me")) {  	e.Text = e.Text.Substring (4);  	e.IsEmote = true;  } else {  	e.Cancel = true;  	var words = e.Text.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  		if (words.Length == 2)  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  		else {  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  			Program.AutoJoinManager.AddPassword (words [1]' words [2]);  		}  	} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  		Program.TasClient.LeaveChannel (e.Channel);  	else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  		Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  	else if (words [0] == "/disconnect")  		Program.TasClient.RequestDisconnect ();  	else if (words [0] == "/raw")  		Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  	//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  	else  		MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.StartsWith ("/me")) {  	e.Text = e.Text.Substring (4);  	e.IsEmote = true;  } else {  	e.Cancel = true;  	var words = e.Text.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  		if (words.Length == 2)  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  		else {  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  			Program.AutoJoinManager.AddPassword (words [1]' words [2]);  		}  	} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  		Program.TasClient.LeaveChannel (e.Channel);  	else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  		Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  	else if (words [0] == "/disconnect")  		Program.TasClient.RequestDisconnect ();  	else if (words [0] == "/raw")  		Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  	//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  	else  		MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (e.Text.StartsWith ("/me")) {  	e.Text = e.Text.Substring (4);  	e.IsEmote = true;  } else {  	e.Cancel = true;  	var words = e.Text.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  		if (words.Length == 2)  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  		else {  			Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  			Program.AutoJoinManager.AddPassword (words [1]' words [2]);  		}  	} else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  		Program.TasClient.LeaveChannel (e.Channel);  	else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  		Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  	else if (words [0] == "/disconnect")  		Program.TasClient.RequestDisconnect ();  	else if (words [0] == "/raw")  		Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  	//else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  	else  		MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: e.Text = e.Text.Substring (4);  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  	if (words.Length == 2)  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  	else {  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  		Program.AutoJoinManager.AddPassword (words [1]' words [2]);  	}  } else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  	Program.TasClient.LeaveChannel (e.Channel);  else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  	if (words.Length == 2)  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  	else {  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  		Program.AutoJoinManager.AddPassword (words [1]' words [2]);  	}  } else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  	Program.TasClient.LeaveChannel (e.Channel);  else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  	if (words.Length == 2)  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  	else {  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  		Program.AutoJoinManager.AddPassword (words [1]' words [2]);  	}  } else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  	Program.TasClient.LeaveChannel (e.Channel);  else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  	if (words.Length == 2)  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  	else {  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  		Program.AutoJoinManager.AddPassword (words [1]' words [2]);  	}  } else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  	Program.TasClient.LeaveChannel (e.Channel);  else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if ((words [0] == "/j" || words [0] == "/join" || words [0] == "/channel") && words.Length > 1) {  	if (words.Length == 2)  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  	else {  		Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  		Program.AutoJoinManager.AddPassword (words [1]' words [2]);  	}  } else if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  	Program.TasClient.LeaveChannel (e.Channel);  else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (words.Length == 2)  	Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  else {  	Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  	Program.AutoJoinManager.AddPassword (words [1]' words [2]);  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (words.Length == 2)  	Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  else {  	Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  	Program.AutoJoinManager.AddPassword (words [1]' words [2]);  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (words.Length == 2)  	Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty));  else {  	Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  	Program.AutoJoinManager.AddPassword (words [1]' words [2]);  }  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: Program.TasClient.JoinChannel (words [1].Replace ("#"' String.Empty)' words [2]);  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: Program.AutoJoinManager.AddPassword (words [1]' words [2]);  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  	Program.TasClient.LeaveChannel (e.Channel);  else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if (words [0] == "/p" || words [0] == "/part" || words [0] == "/l" || words [0] == "/leave")  	Program.TasClient.LeaveChannel (e.Channel);  else if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: if ((words [0] == "/pm" || words [0] == "/msg" || words [0] == "/message" || words [0] == "/w") && words.Length > 2)  	Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  else if (words [0] == "/disconnect")  	Program.TasClient.RequestDisconnect ();  else if (words [0] == "/raw")  	Program.TasClient.SendRaw (ZkData.Utils.Glue (words' 1));  //else if (words[0] == "/help") NavigationControl.Instance.Path = "help";  else  	MainWindow.Instance.NotifyUser ("server"' "Command not recognized");  
Magic Number,ZeroKLobby.MicroLobby,SayCommandHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SayCommandHandler.cs,client_Saying,The following statement contains a magic number: Program.TasClient.Say (SayPlace.User' words [1]' ZkData.Utils.Glue (words' 2)' false);  
Magic Number,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,InsertColorCharacter,The following statement contains a magic number: if (TextBox.SelectionLength > 1)//color selection   {  	var curSelectionStart = TextBox.SelectionStart;  	var selLen = TextBox.SelectionLength;  	Text = Text.Insert (curSelectionStart + TextBox.SelectionLength' "\x03");  	Text = Text.Insert (curSelectionStart' "\x03" + textColor + "'" + backColor);  	TextBox.SelectionStart = curSelectionStart + selLen + 6;  } else if (TextBox.SelectionStart > 0)//color previous word   {  	var end = TextBox.SelectionStart;  	var begin = TextBox.SelectionStart - 1;  	while (begin > 0 && (Text.Substring (begin' 1) == " " || Text.Substring (begin' 1) == "\t")) {  		begin = begin - 1;  	}  	while (begin > 0 && Text.Substring (begin' 1) != " " && Text.Substring (begin' 1) != "\t") {  		begin = begin - 1;  	}  	Text = Text.Insert (end' "\x03");  	Text = Text.Insert (begin' "\x03" + textColor + "'" + backColor);  	TextBox.SelectionStart = end + 6;  }  
Magic Number,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,InsertColorCharacter,The following statement contains a magic number: if (TextBox.SelectionLength > 1)//color selection   {  	var curSelectionStart = TextBox.SelectionStart;  	var selLen = TextBox.SelectionLength;  	Text = Text.Insert (curSelectionStart + TextBox.SelectionLength' "\x03");  	Text = Text.Insert (curSelectionStart' "\x03" + textColor + "'" + backColor);  	TextBox.SelectionStart = curSelectionStart + selLen + 6;  } else if (TextBox.SelectionStart > 0)//color previous word   {  	var end = TextBox.SelectionStart;  	var begin = TextBox.SelectionStart - 1;  	while (begin > 0 && (Text.Substring (begin' 1) == " " || Text.Substring (begin' 1) == "\t")) {  		begin = begin - 1;  	}  	while (begin > 0 && Text.Substring (begin' 1) != " " && Text.Substring (begin' 1) != "\t") {  		begin = begin - 1;  	}  	Text = Text.Insert (end' "\x03");  	Text = Text.Insert (begin' "\x03" + textColor + "'" + backColor);  	TextBox.SelectionStart = end + 6;  }  
Magic Number,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,InsertColorCharacter,The following statement contains a magic number: TextBox.SelectionStart = curSelectionStart + selLen + 6;  
Magic Number,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,InsertColorCharacter,The following statement contains a magic number: if (TextBox.SelectionStart > 0)//color previous word   {  	var end = TextBox.SelectionStart;  	var begin = TextBox.SelectionStart - 1;  	while (begin > 0 && (Text.Substring (begin' 1) == " " || Text.Substring (begin' 1) == "\t")) {  		begin = begin - 1;  	}  	while (begin > 0 && Text.Substring (begin' 1) != " " && Text.Substring (begin' 1) != "\t") {  		begin = begin - 1;  	}  	Text = Text.Insert (end' "\x03");  	Text = Text.Insert (begin' "\x03" + textColor + "'" + backColor);  	TextBox.SelectionStart = end + 6;  }  
Magic Number,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,InsertColorCharacter,The following statement contains a magic number: TextBox.SelectionStart = end + 6;  
Magic Number,ZeroKLobby.MicroLobby,SendBox,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\SendBox.cs,OnMouseDown,The following statement contains a magic number: if (clickCount % 3 == 0)  	SelectAll ();  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (but.Checked == true)  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' rectangle' FrameBorderRenderer.StyleType.DarkHiveGlow);  else if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (but.Checked == true)  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' rectangle' FrameBorderRenderer.StyleType.DarkHiveGlow);  else if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (but.Checked == true)  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' rectangle' FrameBorderRenderer.StyleType.DarkHiveGlow);  else if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (but.Checked == true)  	FrameBorderRenderer.Instance.RenderToGraphics (e.Graphics' rectangle' FrameBorderRenderer.StyleType.DarkHiveGlow);  else if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,MyToolTabItemRenderer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,OnRenderButtonBackground,The following statement contains a magic number: if (e.Item.Selected) {  	var glow = new SolidBrush (Color.FromArgb (89' 23' 252' 255));  	e.Graphics.FillRectangle (glow' rectangle);  } else  	base.OnRenderButtonBackground (e);  
Magic Number,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,AddTab,The following statement contains a magic number: if (control is BattleChatControl)  	button.Height = button.Height * 2;  
Magic Number,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,AddTab,The following statement contains a magic number: button.Height = button.Height * 2;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,ChatControl,The following statement contains a magic number: ChatBox.IRCForeColor = 14;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,ChatControl,The following statement contains a magic number: minuteTimer = new Timer (60000) {  	AutoReset = true  };  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,ChatControl,The following statement contains a magic number: topicBox.IRCForeColor = 14;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerListMapSplitContainer.Margin = new Padding (2);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerListMapSplitContainer.Size = new Size (326' 793);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerListMapSplitContainer.Size = new Size (326' 793);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerListMapSplitContainer.SplitterDistance = 565;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerListMapSplitContainer.SplitterWidth = 3;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerBoxSearchBarContainer.Size = new Size (326' 565);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerBoxSearchBarContainer.Size = new Size (326' 565);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerBoxSearchBarContainer.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerBox.Location = new Point (0' 24);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerBox.Size = new Size (326' 541);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerBox.Size = new Size (326' 541);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: searchBarContainer.ColumnCount = 2;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: searchBarContainer.Size = new Size (326' 30);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: searchBarContainer.Size = new Size (326' 30);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerSearchBox.Location = new Point (23' 22);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerSearchBox.Location = new Point (23' 22);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerSearchBox.Size = new Size (300' 20);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: playerSearchBox.Size = new Size (300' 20);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: sendBox.Location = new Point (0' 765);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: sendBox.Size = new Size (800' 28);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: sendBox.Size = new Size (800' 28);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: topicPanel.Size = new Size (800' 0);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: topicPanel.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: hideButton.Location = new Point (711' -29);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: hideButton.Location = new Point (711' -29);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: hideButton.Size = new Size (75' 23);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: hideButton.Size = new Size (75' 23);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: hideButton.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: topicBox.BackColor = Color.FromArgb ((int)(byte)0' (int)(byte)30' (int)(byte)40);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: topicBox.BackColor = Color.FromArgb ((int)(byte)0' (int)(byte)30' (int)(byte)40);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: topicBox.Size = new Size (800' 0);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: topicBox.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: ChatBox.Size = new Size (800' 765);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: ChatBox.Size = new Size (800' 765);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: splitContainer1.Size = new Size (1130' 793);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: splitContainer1.Size = new Size (1130' 793);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: splitContainer1.SplitterDistance = 800;  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (1130' 793);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (1130' 793);  
Magic Number,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,PlayerBox_MouseClick,The following statement contains a magic number: if (playerBox_zklclick.clickCount >= 2) {  	//Double click  	var playerListItem = playerBox.SelectedItem as PlayerListItem;  	if (playerListItem != null && playerListItem.User != null)  		Program.MainWindow.navigationControl.Path = "chat/user/" + playerListItem.User.Name;  } else {  	var item = playerBox.HoverItem;  	if (item != null && item.UserName != null) {  		playerBox.SelectedItem = item;  		if (item.User != null && !Program.Conf.LeftClickSelectsPlayer)  			ShowPlayerContextMenu (item.User' playerBox' mea.Location);  	}  	//playerBox.ClearSelected();  }  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,PopupNotify,The following statement contains a magic number: WaitTime = 4000;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,PopupNotify,The following statement contains a magic number: AnimateTime = 250;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: closeButton.Location = new Point (280' 8);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: closeButton.Location = new Point (280' 8);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: closeButton.Size = new Size (16' 16);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: closeButton.Size = new Size (16' 16);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: iconBox.Location = new Point (8' 8);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: iconBox.Location = new Point (8' 8);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: iconBox.Size = new Size (50' 50);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: iconBox.Size = new Size (50' 50);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.ForeColor = Color.FromArgb (((int)(((byte)(30))))' ((int)(((byte)(68))))' ((int)(((byte)(135)))));  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.ForeColor = Color.FromArgb (((int)(((byte)(30))))' ((int)(((byte)(68))))' ((int)(((byte)(135)))));  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.ForeColor = Color.FromArgb (((int)(((byte)(30))))' ((int)(((byte)(68))))' ((int)(((byte)(135)))));  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.Location = new Point (72' 8);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.Location = new Point (72' 8);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.Size = new Size (23' 13);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.Size = new Size (23' 13);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyTitle.TabIndex = 2;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyMessage.Location = new Point (72' 40);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyMessage.Location = new Point (72' 40);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyMessage.Size = new Size (224' 10);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyMessage.Size = new Size (224' 10);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: NotifyMessage.TabIndex = 3;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new Size (5' 13);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new Size (5' 13);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size (304' 66);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size (304' 66);  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,SetLayout,The following statement contains a magic number: Height = iconBox.Height + 2 * padding + 2 * border;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,SetLayout,The following statement contains a magic number: Height = iconBox.Height + 2 * padding + 2 * border;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,SetLayout,The following statement contains a magic number: closeButton.Left = Width - padding - border - closeButton.Width + 3;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,SetLayout,The following statement contains a magic number: closeButton.Top = padding + border - 3;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,SetLayout,The following statement contains a magic number: NotifyTitle.Top = iconBox.Top - 5;  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,displayTimer_Tick,The following statement contains a magic number: if (WaitOnMouseOver && Bounds.Contains (Cursor.Position))  	displayTimer.Interval = 1000;  //try every second' now  else {  	displayTimer.Stop ();  	UnNotify ();  }  
Magic Number,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,displayTimer_Tick,The following statement contains a magic number: displayTimer.Interval = 1000;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: g.DrawImage (image' bounds.Left + x' bounds.Top' 16' 16);  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: g.DrawImage (image' bounds.Left + x' bounds.Top' 16' 16);  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: x += 19;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: TextRenderer.DrawText (g' text' font' new Point (bounds.Left + x' bounds.Top - 2)' color' TextFormatFlags.PreserveGraphicsTranslateTransform);  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: if (BotBattleStatus != null) {  	var bot = BotBattleStatus;  	x += 19;  	drawImage (ZklResources.robot);  	var botDisplayName = bot.aiLib;  	drawText (botDisplayName + " (" + bot.owner + ")"' textColor);  	return;  }  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: x += 19;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: if (Images.CountryFlags.TryGetValue (user.Country' out flag) && flag != null)  	g.DrawImageUnscaled (flag' bounds.Left + x' bounds.Top + 4);  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: g.DrawImageUnscaled (flag' bounds.Left + x' bounds.Top + 4);  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: x += 16;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,DrawPlayerLine,The following statement contains a magic number: x += 2;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,GetSortingKey,The following statement contains a magic number: if (UserBattleStatus != null) {  	name = UserBattleStatus.Name;  	if (UserBattleStatus.IsSpectator)  		SortCategory = (int)PlayerListItem.SortCats.Spectators;  	else  		SortCategory = UserBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  } else if (BotBattleStatus != null) {  	name = BotBattleStatus.Name;  	SortCategory = BotBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  } else if (UserName != null)  	name = UserName;  else if (Title != null)  	name = Title;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,GetSortingKey,The following statement contains a magic number: if (UserBattleStatus != null) {  	name = UserBattleStatus.Name;  	if (UserBattleStatus.IsSpectator)  		SortCategory = (int)PlayerListItem.SortCats.Spectators;  	else  		SortCategory = UserBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  } else if (BotBattleStatus != null) {  	name = BotBattleStatus.Name;  	SortCategory = BotBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  } else if (UserName != null)  	name = UserName;  else if (Title != null)  	name = Title;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,GetSortingKey,The following statement contains a magic number: if (UserBattleStatus.IsSpectator)  	SortCategory = (int)PlayerListItem.SortCats.Spectators;  else  	SortCategory = UserBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,GetSortingKey,The following statement contains a magic number: SortCategory = UserBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,GetSortingKey,The following statement contains a magic number: if (BotBattleStatus != null) {  	name = BotBattleStatus.Name;  	SortCategory = BotBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  } else if (UserName != null)  	name = UserName;  else if (Title != null)  	name = Title;  
Magic Number,ZeroKLobby.MicroLobby,PlayerListItem,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PlayerListItem.cs,GetSortingKey,The following statement contains a magic number: SortCategory = BotBattleStatus.AllyNumber * 2 + 1 + (int)PlayerListItem.SortCats.Uncategorized;  
Magic Number,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,The following statement contains a magic number: if (m.Msg == WM_MOUSEWHEEL) {  	var control = MainWindow.Instance.GetHoveredControl ();  	if (control != null) {  		if (control is WebBrowser) {  			#if (!__MonoCS__)  									var brows = control as WebBrowser;                         if (brows.Document != null) //check whether the page exist before adding a scroll bar                         {  						    var delta = ((int)m.WParam >> 16);                             var htmlDoc = brows.Document.DomDocument as HTMLDocument;                             if (htmlDoc != null) htmlDoc.parentWindow.scrollBy(0' -delta); 						} 						#endif  		} else {  			if (Environment.OSVersion.Platform == PlatformID.Unix) {  				if (!control.Focused)  					control.Focus ();  				// this is needed on linux for some stupid reason  				var winforms = Assembly.GetAssembly (typeof(System.Windows.Forms.Control));  				var xplat = winforms.GetType ("System.Windows.Forms.XplatUI");  				if (xplat != null) {  					var mi = xplat.GetMethod ("SendMessage"' BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod' null' new[] {  						winforms.GetType ("System.Windows.Forms.Message&")  					}' null);  					if (mi != null)  						mi.Invoke (null' new object[] {  							m  						});  					else  						Trace.TraceError ("Method SendMessage not found in XplatUI");  				} else  					Trace.TraceError ("XplatUI not found");  			} else  				SendMessage ((int)control.Handle' m.Msg' (int)m.WParam' (int)m.LParam);  		}  		return true;  	}  } else if (m.Msg == WM_XBUTTONDOWN) {  	if (((int)m.WParam & 131072) > 0)  		Program.MainWindow.navigationControl.NavigateForward ();  	if (((int)m.WParam & 65536) > 0)  		Program.MainWindow.navigationControl.NavigateBack ();  }  
Magic Number,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,The following statement contains a magic number: if (m.Msg == WM_MOUSEWHEEL) {  	var control = MainWindow.Instance.GetHoveredControl ();  	if (control != null) {  		if (control is WebBrowser) {  			#if (!__MonoCS__)  									var brows = control as WebBrowser;                         if (brows.Document != null) //check whether the page exist before adding a scroll bar                         {  						    var delta = ((int)m.WParam >> 16);                             var htmlDoc = brows.Document.DomDocument as HTMLDocument;                             if (htmlDoc != null) htmlDoc.parentWindow.scrollBy(0' -delta); 						} 						#endif  		} else {  			if (Environment.OSVersion.Platform == PlatformID.Unix) {  				if (!control.Focused)  					control.Focus ();  				// this is needed on linux for some stupid reason  				var winforms = Assembly.GetAssembly (typeof(System.Windows.Forms.Control));  				var xplat = winforms.GetType ("System.Windows.Forms.XplatUI");  				if (xplat != null) {  					var mi = xplat.GetMethod ("SendMessage"' BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod' null' new[] {  						winforms.GetType ("System.Windows.Forms.Message&")  					}' null);  					if (mi != null)  						mi.Invoke (null' new object[] {  							m  						});  					else  						Trace.TraceError ("Method SendMessage not found in XplatUI");  				} else  					Trace.TraceError ("XplatUI not found");  			} else  				SendMessage ((int)control.Handle' m.Msg' (int)m.WParam' (int)m.LParam);  		}  		return true;  	}  } else if (m.Msg == WM_XBUTTONDOWN) {  	if (((int)m.WParam & 131072) > 0)  		Program.MainWindow.navigationControl.NavigateForward ();  	if (((int)m.WParam & 65536) > 0)  		Program.MainWindow.navigationControl.NavigateBack ();  }  
Magic Number,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,The following statement contains a magic number: if (m.Msg == WM_XBUTTONDOWN) {  	if (((int)m.WParam & 131072) > 0)  		Program.MainWindow.navigationControl.NavigateForward ();  	if (((int)m.WParam & 65536) > 0)  		Program.MainWindow.navigationControl.NavigateBack ();  }  
Magic Number,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,The following statement contains a magic number: if (m.Msg == WM_XBUTTONDOWN) {  	if (((int)m.WParam & 131072) > 0)  		Program.MainWindow.navigationControl.NavigateForward ();  	if (((int)m.WParam & 65536) > 0)  		Program.MainWindow.navigationControl.NavigateBack ();  }  
Magic Number,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,The following statement contains a magic number: if (((int)m.WParam & 131072) > 0)  	Program.MainWindow.navigationControl.NavigateForward ();  
Magic Number,ZeroKLobby.MicroLobby,ScrollMessageFilter,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ScrollMessageFilter.cs,PreFilterMessage,The following statement contains a magic number: if (((int)m.WParam & 65536) > 0)  	Program.MainWindow.navigationControl.NavigateBack ();  
Magic Number,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,PwBar,The following statement contains a magic number: timer.Interval = 1000;  
Magic Number,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,InitializeComponent,The following statement contains a magic number: this.pnl.Size = new System.Drawing.Size (1222' 32);  
Magic Number,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,InitializeComponent,The following statement contains a magic number: this.pnl.Size = new System.Drawing.Size (1222' 32);  
Magic Number,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1222' 32);  
Magic Number,ZeroKLobby.Notifications,PwBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\PwBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1222' 32);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Location = new System.Drawing.Point (21' 20);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Location = new System.Drawing.Point (21' 20);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Size = new System.Drawing.Size (46' 15);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Size = new System.Drawing.Size (46' 15);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Location = new System.Drawing.Point (1156' 12);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Location = new System.Drawing.Point (1156' 12);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Size = new System.Drawing.Size (82' 34);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Size = new System.Drawing.Size (82' 34);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1256' 59);  
Magic Number,ZeroKLobby.Notifications,MatchMakerBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\MatchMakerBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1256' 59);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: tas.PreviewSaid += (sender' e) => {  	var args = e.Data;  	if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  		//SPRINGIE's  		if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var question = args.Text.Substring (6' lid - 6);  				var data = args.Text.Substring (lid + 1);  				if (data.Contains ("END:"))  					Program.NotifySection.RemoveBar (this);  				else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					} else  						e.Cancel = true;  					// vote bar already visible' dont spam vote text again  					lbQuestion.Text = question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  					if (m2.Success) {  						var yes = int.Parse (m2.Groups [1].Value);  						var yesMax = int.Parse (m2.Groups [2].Value);  						var no = int.Parse (m2.Groups [3].Value);  						var noMax = int.Parse (m2.Groups [4].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			}  		} //SPAD's  		else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  		 {  			var lid = args.Text.LastIndexOf ('"');  			if (lid != -1) {  				var openingVoteText = args.Text.IndexOf ('"');  				var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  				var data = args.Text.Substring (openingVoteText + 2);  				if (data.Contains ("passed") || data.Contains ("failed")) {  					Program.NotifySection.RemoveBar (this);  					isSpad = false;  				} else {  					if (!Program.NotifySection.Bars.Contains (this)) {  						Program.NotifySection.AddBar (this);  						isSpad = true;  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  					}  					lbQuestion.Text = "Poll: " + question;  					//add vote text into linklabel  					lbQuestion.Links.Clear ();  					//remove all link (convert to normal text?)  					foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  						//find map link  						lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  					//activate link for map link  					lbYes.Text = "?/?";  					lbNo.Text = "?/?";  					pbYes.Maximum = 3;  					pbYes.Value = 1;  					pbNo.Maximum = 3;  					pbNo.Value = 0;  				}  			}  		} else if (isSpad == true)//SPAD at mid of vote event  		 {  			if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  			 {  				var lid = args.Text.LastIndexOf ("[");  				if (lid != -1) {  					var data = args.Text.Substring (lid + 1);  					var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  					var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  					if (m1.Success) {  						if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  						 {  							Program.NotifySection.AddBar (this);  							if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  								Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  						}  						var yes = int.Parse (m1.Groups [1].Value);  						var yesMax = int.Parse (m1.Groups [2].Value);  						var no = int.Parse (m2.Groups [1].Value);  						var noMax = int.Parse (m2.Groups [2].Value);  						lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  						lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  						pbYes.Maximum = yesMax;  						pbYes.Value = yes;  						pbNo.Maximum = noMax;  						pbNo.Value = no;  					}  				}  			} //SPAD' sudden vote cancellation  			else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  			|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  			|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  			|| args.Text.Contains ("Vote cancelled by")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			}  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if ((tas.MyBattle != null && args.Place == SayPlace.Battle && args.UserName == GlobalConst.NightwatchName) || (args.Place == SayPlace.Channel && args.UserName == GlobalConst.NightwatchName)) {  	//SPRINGIE's  	if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var question = args.Text.Substring (6' lid - 6);  			var data = args.Text.Substring (lid + 1);  			if (data.Contains ("END:"))  				Program.NotifySection.RemoveBar (this);  			else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				} else  					e.Cancel = true;  				// vote bar already visible' dont spam vote text again  				lbQuestion.Text = question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  				if (m2.Success) {  					var yes = int.Parse (m2.Groups [1].Value);  					var yesMax = int.Parse (m2.Groups [2].Value);  					var no = int.Parse (m2.Groups [3].Value);  					var noMax = int.Parse (m2.Groups [4].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		}  	} //SPAD's  	else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote  	 {  		var lid = args.Text.LastIndexOf ('"');  		if (lid != -1) {  			var openingVoteText = args.Text.IndexOf ('"');  			var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  			var data = args.Text.Substring (openingVoteText + 2);  			if (data.Contains ("passed") || data.Contains ("failed")) {  				Program.NotifySection.RemoveBar (this);  				isSpad = false;  			} else {  				if (!Program.NotifySection.Bars.Contains (this)) {  					Program.NotifySection.AddBar (this);  					isSpad = true;  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  				}  				lbQuestion.Text = "Poll: " + question;  				//add vote text into linklabel  				lbQuestion.Links.Clear ();  				//remove all link (convert to normal text?)  				foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  					//find map link  					lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  				//activate link for map link  				lbYes.Text = "?/?";  				lbNo.Text = "?/?";  				pbYes.Maximum = 3;  				pbYes.Value = 1;  				pbNo.Maximum = 3;  				pbNo.Value = 0;  			}  		}  	} else if (isSpad == true)//SPAD at mid of vote event  	 {  		if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  		 {  			var lid = args.Text.LastIndexOf ("[");  			if (lid != -1) {  				var data = args.Text.Substring (lid + 1);  				var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  				var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  				if (m1.Success) {  					if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  					 {  						Program.NotifySection.AddBar (this);  						if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  							Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  					}  					var yes = int.Parse (m1.Groups [1].Value);  					var yesMax = int.Parse (m1.Groups [2].Value);  					var no = int.Parse (m2.Groups [1].Value);  					var noMax = int.Parse (m2.Groups [2].Value);  					lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  					lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  					pbYes.Maximum = yesMax;  					pbYes.Value = yes;  					pbNo.Maximum = noMax;  					pbNo.Value = no;  				}  			}  		} //SPAD' sudden vote cancellation  		else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  		|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  		|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  		|| args.Text.Contains ("Vote cancelled by")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.StartsWith ("Poll:"))//SPRINGIE start & end & mid of vote (OFFICIAL' COMPLETE)   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var question = args.Text.Substring (6' lid - 6);  		var data = args.Text.Substring (lid + 1);  		if (data.Contains ("END:"))  			Program.NotifySection.RemoveBar (this);  		else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			} else  				e.Cancel = true;  			// vote bar already visible' dont spam vote text again  			lbQuestion.Text = question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  			if (m2.Success) {  				var yes = int.Parse (m2.Groups [1].Value);  				var yesMax = int.Parse (m2.Groups [2].Value);  				var no = int.Parse (m2.Groups [3].Value);  				var noMax = int.Parse (m2.Groups [4].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	}  } //SPAD's  else if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var question = args.Text.Substring (6' lid - 6);  	var data = args.Text.Substring (lid + 1);  	if (data.Contains ("END:"))  		Program.NotifySection.RemoveBar (this);  	else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		} else  			e.Cancel = true;  		// vote bar already visible' dont spam vote text again  		lbQuestion.Text = question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  		if (m2.Success) {  			var yes = int.Parse (m2.Groups [1].Value);  			var yesMax = int.Parse (m2.Groups [2].Value);  			var no = int.Parse (m2.Groups [3].Value);  			var noMax = int.Parse (m2.Groups [4].Value);  			lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  			lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  			pbYes.Maximum = yesMax;  			pbYes.Value = yes;  			pbNo.Maximum = noMax;  			pbNo.Value = no;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var question = args.Text.Substring (6' lid - 6);  	var data = args.Text.Substring (lid + 1);  	if (data.Contains ("END:"))  		Program.NotifySection.RemoveBar (this);  	else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		} else  			e.Cancel = true;  		// vote bar already visible' dont spam vote text again  		lbQuestion.Text = question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  		if (m2.Success) {  			var yes = int.Parse (m2.Groups [1].Value);  			var yesMax = int.Parse (m2.Groups [2].Value);  			var no = int.Parse (m2.Groups [3].Value);  			var noMax = int.Parse (m2.Groups [4].Value);  			lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  			lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  			pbYes.Maximum = yesMax;  			pbYes.Value = yes;  			pbNo.Maximum = noMax;  			pbNo.Value = no;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var question = args.Text.Substring (6' lid - 6);  	var data = args.Text.Substring (lid + 1);  	if (data.Contains ("END:"))  		Program.NotifySection.RemoveBar (this);  	else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		} else  			e.Cancel = true;  		// vote bar already visible' dont spam vote text again  		lbQuestion.Text = question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  		if (m2.Success) {  			var yes = int.Parse (m2.Groups [1].Value);  			var yesMax = int.Parse (m2.Groups [2].Value);  			var no = int.Parse (m2.Groups [3].Value);  			var noMax = int.Parse (m2.Groups [4].Value);  			lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  			lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  			pbYes.Maximum = yesMax;  			pbYes.Value = yes;  			pbNo.Maximum = noMax;  			pbNo.Value = no;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var question = args.Text.Substring (6' lid - 6);  	var data = args.Text.Substring (lid + 1);  	if (data.Contains ("END:"))  		Program.NotifySection.RemoveBar (this);  	else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		} else  			e.Cancel = true;  		// vote bar already visible' dont spam vote text again  		lbQuestion.Text = question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  		if (m2.Success) {  			var yes = int.Parse (m2.Groups [1].Value);  			var yesMax = int.Parse (m2.Groups [2].Value);  			var no = int.Parse (m2.Groups [3].Value);  			var noMax = int.Parse (m2.Groups [4].Value);  			lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  			lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  			pbYes.Maximum = yesMax;  			pbYes.Value = yes;  			pbNo.Maximum = noMax;  			pbNo.Value = no;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var question = args.Text.Substring (6' lid - 6);  	var data = args.Text.Substring (lid + 1);  	if (data.Contains ("END:"))  		Program.NotifySection.RemoveBar (this);  	else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		} else  			e.Cancel = true;  		// vote bar already visible' dont spam vote text again  		lbQuestion.Text = question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  		if (m2.Success) {  			var yes = int.Parse (m2.Groups [1].Value);  			var yesMax = int.Parse (m2.Groups [2].Value);  			var no = int.Parse (m2.Groups [3].Value);  			var noMax = int.Parse (m2.Groups [4].Value);  			lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  			lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  			pbYes.Maximum = yesMax;  			pbYes.Value = yes;  			pbNo.Maximum = noMax;  			pbNo.Value = no;  		}  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (data.Contains ("END:"))  	Program.NotifySection.RemoveBar (this);  else {  	if (!Program.NotifySection.Bars.Contains (this)) {  		Program.NotifySection.AddBar (this);  		if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  			Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  	} else  		e.Cancel = true;  	// vote bar already visible' dont spam vote text again  	lbQuestion.Text = question;  	//add vote text into linklabel  	lbQuestion.Links.Clear ();  	//remove all link (convert to normal text?)  	foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  		//find map link  		lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  	//activate link for map link  	var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  	if (m2.Success) {  		var yes = int.Parse (m2.Groups [1].Value);  		var yesMax = int.Parse (m2.Groups [2].Value);  		var no = int.Parse (m2.Groups [3].Value);  		var noMax = int.Parse (m2.Groups [4].Value);  		lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  		lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  		pbYes.Maximum = yesMax;  		pbYes.Value = yes;  		pbNo.Maximum = noMax;  		pbNo.Value = no;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (data.Contains ("END:"))  	Program.NotifySection.RemoveBar (this);  else {  	if (!Program.NotifySection.Bars.Contains (this)) {  		Program.NotifySection.AddBar (this);  		if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  			Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  	} else  		e.Cancel = true;  	// vote bar already visible' dont spam vote text again  	lbQuestion.Text = question;  	//add vote text into linklabel  	lbQuestion.Links.Clear ();  	//remove all link (convert to normal text?)  	foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  		//find map link  		lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  	//activate link for map link  	var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  	if (m2.Success) {  		var yes = int.Parse (m2.Groups [1].Value);  		var yesMax = int.Parse (m2.Groups [2].Value);  		var no = int.Parse (m2.Groups [3].Value);  		var noMax = int.Parse (m2.Groups [4].Value);  		lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  		lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  		pbYes.Maximum = yesMax;  		pbYes.Value = yes;  		pbNo.Maximum = noMax;  		pbNo.Value = no;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (data.Contains ("END:"))  	Program.NotifySection.RemoveBar (this);  else {  	if (!Program.NotifySection.Bars.Contains (this)) {  		Program.NotifySection.AddBar (this);  		if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  			Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  	} else  		e.Cancel = true;  	// vote bar already visible' dont spam vote text again  	lbQuestion.Text = question;  	//add vote text into linklabel  	lbQuestion.Links.Clear ();  	//remove all link (convert to normal text?)  	foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  		//find map link  		lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  	//activate link for map link  	var m2 = Regex.Match (data' "!y=([0-9]+)/([0-9]+)' !n=([0-9]+)/([0-9]+)");  	if (m2.Success) {  		var yes = int.Parse (m2.Groups [1].Value);  		var yesMax = int.Parse (m2.Groups [2].Value);  		var no = int.Parse (m2.Groups [3].Value);  		var noMax = int.Parse (m2.Groups [4].Value);  		lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  		lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  		pbYes.Maximum = yesMax;  		pbYes.Value = yes;  		pbNo.Maximum = noMax;  		pbNo.Value = no;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (m2.Success) {  	var yes = int.Parse (m2.Groups [1].Value);  	var yesMax = int.Parse (m2.Groups [2].Value);  	var no = int.Parse (m2.Groups [3].Value);  	var noMax = int.Parse (m2.Groups [4].Value);  	lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  	lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  	pbYes.Maximum = yesMax;  	pbYes.Value = yes;  	pbNo.Maximum = noMax;  	pbNo.Value = no;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (m2.Success) {  	var yes = int.Parse (m2.Groups [1].Value);  	var yesMax = int.Parse (m2.Groups [2].Value);  	var no = int.Parse (m2.Groups [3].Value);  	var noMax = int.Parse (m2.Groups [4].Value);  	lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  	lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  	pbYes.Maximum = yesMax;  	pbYes.Value = yes;  	pbNo.Maximum = noMax;  	pbNo.Value = no;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (m2.Success) {  	var yes = int.Parse (m2.Groups [1].Value);  	var yesMax = int.Parse (m2.Groups [2].Value);  	var no = int.Parse (m2.Groups [3].Value);  	var noMax = int.Parse (m2.Groups [4].Value);  	lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  	lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  	pbYes.Maximum = yesMax;  	pbYes.Value = yes;  	pbNo.Maximum = noMax;  	pbNo.Value = no;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.Contains ("called a vote for command") || args.Text.Contains ("Vote for command"))//SPAD' at start & end of vote   {  	var lid = args.Text.LastIndexOf ('"');  	if (lid != -1) {  		var openingVoteText = args.Text.IndexOf ('"');  		var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  		var data = args.Text.Substring (openingVoteText + 2);  		if (data.Contains ("passed") || data.Contains ("failed")) {  			Program.NotifySection.RemoveBar (this);  			isSpad = false;  		} else {  			if (!Program.NotifySection.Bars.Contains (this)) {  				Program.NotifySection.AddBar (this);  				isSpad = true;  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  			}  			lbQuestion.Text = "Poll: " + question;  			//add vote text into linklabel  			lbQuestion.Links.Clear ();  			//remove all link (convert to normal text?)  			foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  				//find map link  				lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  			//activate link for map link  			lbYes.Text = "?/?";  			lbNo.Text = "?/?";  			pbYes.Maximum = 3;  			pbYes.Value = 1;  			pbNo.Maximum = 3;  			pbNo.Value = 0;  		}  	}  } else if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var openingVoteText = args.Text.IndexOf ('"');  	var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  	var data = args.Text.Substring (openingVoteText + 2);  	if (data.Contains ("passed") || data.Contains ("failed")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	} else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			isSpad = true;  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		}  		lbQuestion.Text = "Poll: " + question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		lbYes.Text = "?/?";  		lbNo.Text = "?/?";  		pbYes.Maximum = 3;  		pbYes.Value = 1;  		pbNo.Maximum = 3;  		pbNo.Value = 0;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var openingVoteText = args.Text.IndexOf ('"');  	var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  	var data = args.Text.Substring (openingVoteText + 2);  	if (data.Contains ("passed") || data.Contains ("failed")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	} else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			isSpad = true;  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		}  		lbQuestion.Text = "Poll: " + question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		lbYes.Text = "?/?";  		lbNo.Text = "?/?";  		pbYes.Maximum = 3;  		pbYes.Value = 1;  		pbNo.Maximum = 3;  		pbNo.Value = 0;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var openingVoteText = args.Text.IndexOf ('"');  	var question = args.Text.Substring (openingVoteText + 1' lid - openingVoteText - 1);  	var data = args.Text.Substring (openingVoteText + 2);  	if (data.Contains ("passed") || data.Contains ("failed")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	} else {  		if (!Program.NotifySection.Bars.Contains (this)) {  			Program.NotifySection.AddBar (this);  			isSpad = true;  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  		}  		lbQuestion.Text = "Poll: " + question;  		//add vote text into linklabel  		lbQuestion.Links.Clear ();  		//remove all link (convert to normal text?)  		foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  			//find map link  			lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  		//activate link for map link  		lbYes.Text = "?/?";  		lbNo.Text = "?/?";  		pbYes.Maximum = 3;  		pbYes.Value = 1;  		pbNo.Maximum = 3;  		pbNo.Value = 0;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (data.Contains ("passed") || data.Contains ("failed")) {  	Program.NotifySection.RemoveBar (this);  	isSpad = false;  } else {  	if (!Program.NotifySection.Bars.Contains (this)) {  		Program.NotifySection.AddBar (this);  		isSpad = true;  		if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  			Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  	}  	lbQuestion.Text = "Poll: " + question;  	//add vote text into linklabel  	lbQuestion.Links.Clear ();  	//remove all link (convert to normal text?)  	foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  		//find map link  		lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  	//activate link for map link  	lbYes.Text = "?/?";  	lbNo.Text = "?/?";  	pbYes.Maximum = 3;  	pbYes.Value = 1;  	pbNo.Maximum = 3;  	pbNo.Value = 0;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (data.Contains ("passed") || data.Contains ("failed")) {  	Program.NotifySection.RemoveBar (this);  	isSpad = false;  } else {  	if (!Program.NotifySection.Bars.Contains (this)) {  		Program.NotifySection.AddBar (this);  		isSpad = true;  		if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  			Program.MainWindow.NotifyUser ("chat/battle"' string.Format ("Poll: {0}"' question)' true' true);  	}  	lbQuestion.Text = "Poll: " + question;  	//add vote text into linklabel  	lbQuestion.Links.Clear ();  	//remove all link (convert to normal text?)  	foreach (Match match in Regex.Matches (question' @"((mailto|spring|http|https|ftp|ftps)\://(\S+))"))  		//find map link  		lbQuestion.Links.Add (match.Groups [1].Index' match.Groups [1].Length);  	//activate link for map link  	lbYes.Text = "?/?";  	lbNo.Text = "?/?";  	pbYes.Maximum = 3;  	pbYes.Value = 1;  	pbNo.Maximum = 3;  	pbNo.Value = 0;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: pbYes.Maximum = 3;  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: pbNo.Maximum = 3;  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (isSpad == true)//SPAD at mid of vote event   {  	if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count  	 {  		var lid = args.Text.LastIndexOf ("[");  		if (lid != -1) {  			var data = args.Text.Substring (lid + 1);  			var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  			var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  			if (m1.Success) {  				if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  				 {  					Program.NotifySection.AddBar (this);  					if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  						Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  				}  				var yes = int.Parse (m1.Groups [1].Value);  				var yesMax = int.Parse (m1.Groups [2].Value);  				var no = int.Parse (m2.Groups [1].Value);  				var noMax = int.Parse (m2.Groups [2].Value);  				lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  				lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  				pbYes.Maximum = yesMax;  				pbYes.Value = yes;  				pbNo.Maximum = noMax;  				pbNo.Value = no;  			}  		}  	} //SPAD' sudden vote cancellation  	else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  	|| (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  	|| (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  	|| args.Text.Contains ("Vote cancelled by")) {  		Program.NotifySection.RemoveBar (this);  		isSpad = false;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var data = args.Text.Substring (lid + 1);  		var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  		var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  		if (m1.Success) {  			if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  			 {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  			}  			var yes = int.Parse (m1.Groups [1].Value);  			var yesMax = int.Parse (m1.Groups [2].Value);  			var no = int.Parse (m2.Groups [1].Value);  			var noMax = int.Parse (m2.Groups [2].Value);  			lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  			lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  			pbYes.Maximum = yesMax;  			pbYes.Value = yes;  			pbNo.Maximum = noMax;  			pbNo.Value = no;  		}  	}  } //SPAD' sudden vote cancellation  else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  || (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  || (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  || args.Text.Contains ("Vote cancelled by")) {  	Program.NotifySection.RemoveBar (this);  	isSpad = false;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (args.Text.Contains ("Vote in progress:"))//SPAD' update vote count   {  	var lid = args.Text.LastIndexOf ("[");  	if (lid != -1) {  		var data = args.Text.Substring (lid + 1);  		var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  		var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  		if (m1.Success) {  			if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  			 {  				Program.NotifySection.AddBar (this);  				if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  					Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  			}  			var yes = int.Parse (m1.Groups [1].Value);  			var yesMax = int.Parse (m1.Groups [2].Value);  			var no = int.Parse (m2.Groups [1].Value);  			var noMax = int.Parse (m2.Groups [2].Value);  			lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  			lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  			pbYes.Maximum = yesMax;  			pbYes.Value = yes;  			pbNo.Maximum = noMax;  			pbNo.Value = no;  		}  	}  } //SPAD' sudden vote cancellation  else if (args.Text.Contains ("Vote cancelled' launching game...") //vote cancelled when game launch  || (args.Text.Contains ("Game starting' cancelling") && args.Text.Contains ("vote")) //vote cancelled when game starting  || (args.Text.Contains ("Cancelling") && args.Text.Contains ("vote")) //vote cancelled by veto power  || args.Text.Contains ("Vote cancelled by")) {  	Program.NotifySection.RemoveBar (this);  	isSpad = false;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var data = args.Text.Substring (lid + 1);  	var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  	var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  	if (m1.Success) {  		if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  		 {  			Program.NotifySection.AddBar (this);  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  		}  		var yes = int.Parse (m1.Groups [1].Value);  		var yesMax = int.Parse (m1.Groups [2].Value);  		var no = int.Parse (m2.Groups [1].Value);  		var noMax = int.Parse (m2.Groups [2].Value);  		lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  		lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  		pbYes.Maximum = yesMax;  		pbYes.Value = yes;  		pbNo.Maximum = noMax;  		pbNo.Value = no;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (lid != -1) {  	var data = args.Text.Substring (lid + 1);  	var m1 = Regex.Match (data' "y:([0-9]+)/([0-9]+)");  	var m2 = Regex.Match (data' "n:([0-9]+)/([0-9]+)");  	if (m1.Success) {  		if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  		 {  			Program.NotifySection.AddBar (this);  			if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  				Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  		}  		var yes = int.Parse (m1.Groups [1].Value);  		var yesMax = int.Parse (m1.Groups [2].Value);  		var no = int.Parse (m2.Groups [1].Value);  		var noMax = int.Parse (m2.Groups [2].Value);  		lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  		lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  		pbYes.Maximum = yesMax;  		pbYes.Value = yes;  		pbNo.Maximum = noMax;  		pbNo.Value = no;  	}  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (m1.Success) {  	if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  	 {  		Program.NotifySection.AddBar (this);  		if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  			Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  	}  	var yes = int.Parse (m1.Groups [1].Value);  	var yesMax = int.Parse (m1.Groups [2].Value);  	var no = int.Parse (m2.Groups [1].Value);  	var noMax = int.Parse (m2.Groups [2].Value);  	lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  	lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  	pbYes.Maximum = yesMax;  	pbYes.Value = yes;  	pbNo.Maximum = noMax;  	pbNo.Value = no;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,VoteBar,The following statement contains a magic number: if (m1.Success) {  	if (!Program.NotifySection.Bars.Contains (this))//readd SPAD vote bar if was closed manually before vote finished  	 {  		Program.NotifySection.AddBar (this);  		if (tas.MyBattleStatus == null || (!tas.MyUser.IsInGame && !tas.MyBattleStatus.IsSpectator))  			Program.MainWindow.NotifyUser ("chat/battle"' lbQuestion.Text' true' true);  	}  	var yes = int.Parse (m1.Groups [1].Value);  	var yesMax = int.Parse (m1.Groups [2].Value);  	var no = int.Parse (m2.Groups [1].Value);  	var noMax = int.Parse (m2.Groups [2].Value);  	lbYes.Text = string.Format ("{0}/{1}"' yes' yesMax);  	lbNo.Text = string.Format ("{0}/{1}"' no' noMax);  	pbYes.Maximum = yesMax;  	pbYes.Value = yes;  	pbNo.Maximum = noMax;  	pbNo.Value = no;  }  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbYes.Location = new System.Drawing.Point (145' 43);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbYes.Location = new System.Drawing.Point (145' 43);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbYes.Size = new System.Drawing.Size (1070' 23);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbYes.Size = new System.Drawing.Size (1070' 23);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbNo.Location = new System.Drawing.Point (145' 70);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbNo.Location = new System.Drawing.Point (145' 70);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbNo.Size = new System.Drawing.Size (1070' 23);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.pbNo.Size = new System.Drawing.Size (1070' 23);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbYes.Location = new System.Drawing.Point (75' 40);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbYes.Location = new System.Drawing.Point (75' 40);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbYes.Size = new System.Drawing.Size (46' 18);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbYes.Size = new System.Drawing.Size (46' 18);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbYes.TabIndex = 3;  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbNo.Location = new System.Drawing.Point (75' 70);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbNo.Location = new System.Drawing.Point (75' 70);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbNo.Size = new System.Drawing.Size (46' 18);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbNo.Size = new System.Drawing.Size (46' 18);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbNo.TabIndex = 4;  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnYes.Location = new System.Drawing.Point (19' 33);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnYes.Location = new System.Drawing.Point (19' 33);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnYes.Size = new System.Drawing.Size (50' 27);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnYes.Size = new System.Drawing.Size (50' 27);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnYes.TabIndex = 5;  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnNo.Location = new System.Drawing.Point (19' 66);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnNo.Location = new System.Drawing.Point (19' 66);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnNo.Size = new System.Drawing.Size (50' 27);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnNo.Size = new System.Drawing.Size (50' 27);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.btnNo.TabIndex = 6;  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbQuestion.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbQuestion.Location = new System.Drawing.Point (142' 16);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbQuestion.Location = new System.Drawing.Point (142' 16);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbQuestion.Size = new System.Drawing.Size (41' 13);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbQuestion.Size = new System.Drawing.Size (41' 13);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.lbQuestion.TabIndex = 2;  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1256' 117);  
Magic Number,ZeroKLobby.Notifications,VoteBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\VoteBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1256' 117);  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: btnDetail = new BitmapButton {  	Text = "Connect"'  	Left = 10'  	Top = 10'  	Width = 100'  	Height = 60'  	Font = Config.GeneralFontBig  };  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: btnDetail = new BitmapButton {  	Text = "Connect"'  	Left = 10'  	Top = 10'  	Width = 100'  	Height = 60'  	Font = Config.GeneralFontBig  };  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: btnDetail = new BitmapButton {  	Text = "Connect"'  	Left = 10'  	Top = 10'  	Width = 100'  	Height = 60'  	Font = Config.GeneralFontBig  };  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: btnDetail = new BitmapButton {  	Text = "Connect"'  	Left = 10'  	Top = 10'  	Width = 100'  	Height = 60'  	Font = Config.GeneralFontBig  };  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: lbState = new Label {  	AutoSize = true'  	Location = new Point (120' 30)'  	Name = "lbState"'  	ForeColor = Config.TextColor'  	BackColor = Color.Transparent'  	Text = "Connect to the Spring multiplayer lobby server."  };  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: lbState = new Label {  	AutoSize = true'  	Location = new Point (120' 30)'  	Name = "lbState"'  	ForeColor = Config.TextColor'  	BackColor = Color.Transparent'  	Text = "Connect to the Spring multiplayer lobby server."  };  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (300' 80);  
Magic Number,ZeroKLobby.Notifications,ConnectBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\ConnectBar.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (300' 80);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: picoChat.IRCForeColor = 14;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: btnStart.Image = Buttons.fight.GetResizedWithCache (38' 38);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: btnStart.Image = Buttons.fight.GetResizedWithCache (38' 38);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: btnLeave.Image = Buttons.exit.GetResizedWithCache (38' 38);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: btnLeave.Image = Buttons.exit.GetResizedWithCache (38' 38);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: client.MyBattleRemoved += (s' e) => {  	var t = new Timer ();  	var tryCount = 0;  	t.Interval = 1000;  	t.Tick += (s2' e2) => {  		tryCount++;  		if (tryCount > 15) {  			t.Stop ();  			t.Dispose ();  		} else if (client.IsLoggedIn && client.MyBattle == null) {  			var bat = client.ExistingBattles.Values.FirstOrDefault (x => x.FounderName == lastBattleFounder && !x.IsPassworded);  			if (bat != null) {  				ActionHandler.JoinBattle (bat.BattleID' null);  				t.Stop ();  				t.Dispose ();  			}  		}  	};  	t.Start ();  };  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: client.MyBattleRemoved += (s' e) => {  	var t = new Timer ();  	var tryCount = 0;  	t.Interval = 1000;  	t.Tick += (s2' e2) => {  		tryCount++;  		if (tryCount > 15) {  			t.Stop ();  			t.Dispose ();  		} else if (client.IsLoggedIn && client.MyBattle == null) {  			var bat = client.ExistingBattles.Values.FirstOrDefault (x => x.FounderName == lastBattleFounder && !x.IsPassworded);  			if (bat != null) {  				ActionHandler.JoinBattle (bat.BattleID' null);  				t.Stop ();  				t.Dispose ();  			}  		}  	};  	t.Start ();  };  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: t.Interval = 1000;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: t.Tick += (s2' e2) => {  	tryCount++;  	if (tryCount > 15) {  		t.Stop ();  		t.Dispose ();  	} else if (client.IsLoggedIn && client.MyBattle == null) {  		var bat = client.ExistingBattles.Values.FirstOrDefault (x => x.FounderName == lastBattleFounder && !x.IsPassworded);  		if (bat != null) {  			ActionHandler.JoinBattle (bat.BattleID' null);  			t.Stop ();  			t.Dispose ();  		}  	}  };  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: if (tryCount > 15) {  	t.Stop ();  	t.Dispose ();  } else if (client.IsLoggedIn && client.MyBattle == null) {  	var bat = client.ExistingBattles.Values.FirstOrDefault (x => x.FounderName == lastBattleFounder && !x.IsPassworded);  	if (bat != null) {  		ActionHandler.JoinBattle (bat.BattleID' null);  		t.Stop ();  		t.Dispose ();  	}  }  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,BattleBar,The following statement contains a magic number: timer.Interval = 2000;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.lbPlayers.Location = new System.Drawing.Point (68' 13);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.lbPlayers.Location = new System.Drawing.Point (68' 13);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.lbPlayers.Size = new System.Drawing.Size (0' 18);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.lbPlayers.TabIndex = 3;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (2' "run.ico");  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (3' "spec.png");  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName (4' "quickmatch_off.png");  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Padding = new System.Windows.Forms.Padding (0' 8' 0' 8);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Padding = new System.Windows.Forms.Padding (0' 8' 0' 8);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (1222' 96);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (1222' 96);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 15;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnLeave.Location = new System.Drawing.Point (1134' 12);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnLeave.Location = new System.Drawing.Point (1134' 12);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnLeave.Size = new System.Drawing.Size (68' 68);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnLeave.Size = new System.Drawing.Size (68' 68);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnLeave.TabIndex = 12;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.Font = new System.Drawing.Font ("Verdana"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238)));  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.Location = new System.Drawing.Point (537' 8);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.Location = new System.Drawing.Point (537' 8);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.Margin = new System.Windows.Forms.Padding (0' 0' 3' 0);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.MinimumSize = new System.Drawing.Size (12' 12);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.MinimumSize = new System.Drawing.Size (12' 12);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.Size = new System.Drawing.Size (591' 80);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.Size = new System.Drawing.Size (591' 80);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.picoChat.TabIndex = 12;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.gameBox.Location = new System.Drawing.Point (217' 8);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.gameBox.Location = new System.Drawing.Point (217' 8);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.gameBox.Size = new System.Drawing.Size (311' 76);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.gameBox.Size = new System.Drawing.Size (311' 76);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.gameBox.TabIndex = 11;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Location = new System.Drawing.Point (15' 12);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Location = new System.Drawing.Point (15' 12);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Size = new System.Drawing.Size (68' 68);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Size = new System.Drawing.Size (68' 68);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.TabIndex = 13;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlaySpecContainer.Location = new System.Drawing.Point (98' 15);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlaySpecContainer.Location = new System.Drawing.Point (98' 15);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlaySpecContainer.RowCount = 2;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlaySpecContainer.Size = new System.Drawing.Size (116' 56);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlaySpecContainer.Size = new System.Drawing.Size (116' 56);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlaySpecContainer.TabIndex = 18;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlay.Location = new System.Drawing.Point (2' 2);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlay.Location = new System.Drawing.Point (2' 2);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlay.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlay.Size = new System.Drawing.Size (112' 24);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlay.Size = new System.Drawing.Size (112' 24);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioPlay.TabIndex = 16;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioSpec.Location = new System.Drawing.Point (2' 30);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioSpec.Location = new System.Drawing.Point (2' 30);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioSpec.Margin = new System.Windows.Forms.Padding (2);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioSpec.Size = new System.Drawing.Size (112' 24);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioSpec.Size = new System.Drawing.Size (112' 24);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.radioSpec.TabIndex = 16;  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (492' 96);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (492' 96);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1222' 96);  
Magic Number,ZeroKLobby.Notifications,BattleBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\BattleBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1222' 96);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Location = new System.Drawing.Point (21' 20);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Location = new System.Drawing.Point (21' 20);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Size = new System.Drawing.Size (46' 15);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.lbText.Size = new System.Drawing.Size (46' 15);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Location = new System.Drawing.Point (1156' 12);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Location = new System.Drawing.Point (1156' 12);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Size = new System.Drawing.Size (82' 34);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.bitmapButton1.Size = new System.Drawing.Size (82' 34);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1256' 59);  
Magic Number,ZeroKLobby.Notifications,WarningBar,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\WarningBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1256' 59);  
Magic Number,ZeroKLobby.Steam,SteamClientHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamClientHelper.cs,ConnectToSteam,The following statement contains a magic number: timer = new Timer (100);  
Magic Number,ZeroKLobby.Steam,SteamClientHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamClientHelper.cs,TimerOnElapsed,The following statement contains a magic number: try {  	timer.Stop ();  	if (tickCounter % 300 == 0) {  		if (!IsOnline) {  			if (SteamAPI.Init () && SteamAPI.IsSteamRunning ()) {  				IsOnline = true;  				SteamOnline ();  			}  		}  	}  	if (IsOnline) {  		if (SteamAPI.IsSteamRunning ())  			SteamAPI.RunCallbacks ();  		else {  			IsOnline = false;  			SteamOffline ();  		}  	}  } catch (DllNotFoundException ex) {  	Trace.TraceWarning ("Error initializing steam' disabling susbystem: {0} library not found"' ex.Message);  	if (timer != null)  		timer.Dispose ();  } catch (Exception ex) {  	Trace.TraceError (ex.ToString ());  } finally {  	tickCounter++;  	timer.Start ();  }  
Magic Number,ZeroKLobby.Steam,SteamClientHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Steam\SteamClientHelper.cs,TimerOnElapsed,The following statement contains a magic number: if (tickCounter % 300 == 0) {  	if (!IsOnline) {  		if (SteamAPI.Init () && SteamAPI.IsSteamRunning ()) {  			IsOnline = true;  			SteamOnline ();  		}  	}  }  
Magic Number,ZeroKLobby.Lines,FromServerLine,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Lines\FromServerLine.cs,FromServerLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line)) {  	var parts = line.Split (new[] {  		' '  	}' 2);  	if (parts.Length == 2) {  		Command = parts [0];  		Args = parts [1];  	} else  		Command = line;  }  
Magic Number,ZeroKLobby.Lines,FromServerLine,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Lines\FromServerLine.cs,FromServerLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line)) {  	var parts = line.Split (new[] {  		' '  	}' 2);  	if (parts.Length == 2) {  		Command = parts [0];  		Args = parts [1];  	} else  		Command = line;  }  
Magic Number,ZeroKLobby.Lines,FromServerLine,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Lines\FromServerLine.cs,FromServerLine,The following statement contains a magic number: if (parts.Length == 2) {  	Command = parts [0];  	Args = parts [1];  } else  	Command = line;  
Magic Number,ZeroKLobby.Lines,ToServerLine,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Lines\ToServerLine.cs,ToServerLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line)) {  	var parts = line.Split (new[] {  		' '  	}' 2);  	if (parts.Length == 2) {  		Command = parts [0];  		Args = parts [1];  	} else  		Command = line;  }  
Magic Number,ZeroKLobby.Lines,ToServerLine,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Lines\ToServerLine.cs,ToServerLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line)) {  	var parts = line.Split (new[] {  		' '  	}' 2);  	if (parts.Length == 2) {  		Command = parts [0];  		Args = parts [1];  	} else  		Command = line;  }  
Magic Number,ZeroKLobby.Lines,ToServerLine,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Lines\ToServerLine.cs,ToServerLine,The following statement contains a magic number: if (parts.Length == 2) {  	Command = parts [0];  	Args = parts [1];  } else  	Command = line;  
Magic Number,SpringDownloader.Notifications,NotifySection,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\NotifySection.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding (5);  
Magic Number,SpringDownloader.Notifications,NotifySection,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\NotifySection.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (418' 10);  
Magic Number,SpringDownloader.Notifications,NotifySection,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\Notifications\NotifySection.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (418' 10);  
Missing Default,ZeroKLobby,ActionHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\ActionHandler.cs,PerformAction,The following switch statement is missing a default case: switch (command) {  case "logout":  	Program.TasClient.RequestDisconnect ();  	Program.Conf.LobbyPlayerName = "";  	Program.Conf.LobbyPlayerPassword = "";  	Program.ConnectBar.TryToConnectTasClient ();  	break;  case "start_mission":  	StartMission (arg);  	break;  case "start_replay":  	var parts = arg.Split (''');  	StartReplay (parts [0]' parts [1]' parts [2]' parts [3]);  	break;  case "host_mission":  	HostBattle (game: arg);  	break;  case "start_script_mission":  	StartScriptMission (arg);  	break;  case "select_map":  	if (Program.TasClient.MyBattle != null)  		Program.TasClient.Say (SayPlace.Battle' null' "!map " + arg' false);  	else {  		HostBattle (map: arg);  	}  	break;  case "add_friend":  	Program.TasClient.SetRelation (arg' Relation.Friend);  	break;  case "join_battle":  	JoinPlayer (arg);  	break;  case "join_player":  	JoinPlayer (arg);  	break;  case "benchmark":  	var bench = new Benchmarker.MainForm (Program.SpringPaths' Program.SpringScanner' Program.Downloader);  	bench.Show ();  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following switch statement is missing a default case: switch (kvp2.Key) {  case "shortname":  	name = (kvp2.Value as String);  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,LocalReplay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\LocalReplay.cs,ReadReplayInfo,The following switch statement is missing a default case: switch (kvp2.Key) {  case "name":  	name = (kvp2.Value as String);  	break;  case "elo":  	int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out eloNumbers);  	break;  case "rank":  	int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out rankNumbers);  	break;  case "spectator":  	int numbers = 0;  	int.TryParse ((kvp2.Value as String)' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  	isSpectator = (numbers > 0);  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadSideInfo,The following switch statement is missing a default case: switch (kvp2.Key) {  case "name":  	name = value;  	break;  case "startunit":  	startunit = value;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadMissionSlot,The following switch statement is missing a default case: switch (kvp2.Key) {  case "AllyID":  	int.TryParse (value' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  	slot.AllyID = numbers;  	break;  case "AllyName":  	slot.AllyName = value;  	break;  case "IsHuman":  	slot.IsHuman = (value == "true");  	break;  case "IsRequired":  	slot.IsRequired = (value == "true");  	break;  case "TeamID":  	int.TryParse (value' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  	slot.TeamID = numbers;  	break;  case "TeamName":  	slot.TeamName = value;  	break;  case "Color":  	int.TryParse (value' NumberStyles.Integer' CultureInfo.InvariantCulture' out numbers);  	slot.Color = numbers;  	//var springColor = (MyCol)numbers;  	//slot.ColorR = springColor.R;  	//slot.ColorG = springColor.G;  	//slot.ColorB = springColor.B;  	break;  //case "ColorR":  //    break;  //case "ColorG":  //    break;  //case "ColorB":  //    break;  case "AiShortName":  	slot.AiShortName = value;  	break;  case "AiVersion":  	slot.AiVersion = value;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,GetAIInfo,The following switch statement is missing a default case: switch (kvp2.Key) {  case "key":  	key = value;  	break;  case "value":  	valueIn = value;  	break;  case "desc":  	desc = value;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadLuaAI,The following switch statement is missing a default case: switch (kvp2.Key) {  case "name":  	name = value;  	break;  case "desc":  	desc = value;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ParseModInfo,The following switch statement is missing a default case: switch (kvp.Key) {  case "name":  	modInfo.Name = value;  	break;  case "description":  	modInfo.Description = value;  	break;  case "shortname":  	modInfo.ShortName = value;  	break;  case "version":  	modInfo.PrimaryModVersion = value;  	break;  case "mutator":  	modInfo.Mutator = value;  	break;  case "game":  	modInfo.Game = value;  	break;  case "shortGame":  	modInfo.ShortGame = value;  	break;  case "modtype":  	//TODO modtype??  	break;  case "depend":  	var listDepend = new List<string> ();  	foreach (var kvp2 in (kvp.Value as Dictionary<String' Object>)) {  		var value2 = (kvp2.Value as String);  		listDepend.Add (value2);  	}  	modInfo.Dependencies = listDepend;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby.ExtrasTab,CrudeLUAReader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ExtrasTab\SkirmishControlTool.cs,ReadOptionsTable,The following switch statement is missing a default case: switch (kvp4.Key) {  case "key":  	listOption.Key = value2;  	break;  case "name":  	listOption.Name = value2;  	break;  case "desc":  	listOption.Description = value2;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby,BattleListControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\BattleListControl.cs,FilterSpecialWordCheck,The following switch statement is missing a default case: switch (word) {  case "PASSWORD":  	isMatch = battle.IsPassworded;  	return true;  case "INGAME":  	isMatch = battle.IsInGame;  	return true;  case "FULL":  	isMatch = battle.NonSpectatorCount >= battle.MaxPlayers;  	return true;  }  
Missing Default,ZeroKLobby.MicroLobby,ModStore,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModStore.cs,GetModOptionSummary,The following switch statement is missing a default case: switch (o.option.Type) {  case OptionType.Bool:  	line = o.option.Name + ": " + (o.pair.Value == "0" ? "No" : "Yes");  	break;  case OptionType.Number:  	line = o.option.Name + ": " + o.pair.Value;  	break;  case OptionType.String:  	line = o.option.Name + ": " + o.pair.Value;  	break;  case OptionType.List:  	var valueName = o.option.ListOptions.Single (opt => opt.Key == o.pair.Value).Name;  	line = o.option.Name + ": " + valueName;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,HandleMod,The following switch statement is missing a default case: switch (option.Type) {  case OptionType.Bool:  	control = new CheckBox {  		Checked = option.Default != "0"  	};  	((CheckBox)control).CheckedChanged += proposedChanged;  	break;  case OptionType.Number:  	control = new NumericUpDown {  		Minimum = (decimal)option.Min'  		Maximum = (decimal)option.Max'  		Increment = (decimal)option.Step'  		Value = decimal.Parse (option.Default' CultureInfo.InvariantCulture)'  		DecimalPlaces = (int)(-Math.Floor (Math.Min (0' Math.Log10 (option.Step))))'  	};  	((NumericUpDown)control).ValueChanged += proposedChanged;  	break;  case OptionType.String:  	control = new TextBox {  		Text = option.Default  	};  	control.TextChanged += proposedChanged;  	break;  case OptionType.List:  	var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == option.Default));  	var box = new ComboBox {  		DropDownStyle = ComboBoxStyle.DropDownList  	};  	box.Items.AddRange (option.ListOptions.Select (o => o.Name).ToArray ());  	if (optionIndex > -1)  		box.SelectedIndex = optionIndex;  	control = box;  	box.SelectedIndexChanged += proposedChanged;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby,ModOptionsControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ModOptionsControl.cs,SetModOptions,The following switch statement is missing a default case: switch (option.Type) {  case OptionType.Bool:  	var box = (CheckBox)control;  	box.Checked = setOption.Value != "0";  	break;  case OptionType.List:  	{  		var optionIndex = option.ListOptions.IndexOf (option.ListOptions.Single (o => o.Key == setOption.Value));  		var comboBox = (ComboBox)control;  		comboBox.SelectedIndex = optionIndex;  	}  	break;  case OptionType.Number: {  	var numeric = (NumericUpDown)control;  	numeric.Value = decimal.Parse (setOption.Value' CultureInfo.InvariantCulture).Constrain (numeric.Minimum' numeric.Maximum);  	break;  }  case OptionType.String:  	control.Text = setOption.Value;  	break;  }  
Missing Default,ZeroKLobby.MicroLobby,ToolTabs,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ToolTabs.cs,SetHilite,The following switch statement is missing a default case: switch (level) {  case HiliteLevel.None:  	button.BackColor = Color.Empty;  	button.Font = new Font (oldFont' FontStyle.Regular);  	//oldFont.Dispose();  	break;  case HiliteLevel.Bold:  	button.BackColor = Color.Empty;  	button.Font = new Font (oldFont' FontStyle.Bold | FontStyle.Italic);  	//oldFont.Dispose();  	break;  case HiliteLevel.Flash:  	button.Font = new Font (oldFont' FontStyle.Bold);  	//oldFont.Dispose();  	break;  }  
Missing Default,ZeroKLobby.MicroLobby,ChatControl,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\ChatControl.cs,FilterSpecialWordCheck,The following switch statement is missing a default case: switch (word) {  case "BOT":  	isMatch = user.IsBot;  	return true;  case "AFK":  	isMatch = user.IsAway;  	return true;  case "ADMIN":  	isMatch = user.IsAdmin;  	return true;  case "INGAME":  	isMatch = user.IsInGame;  	return true;  case "INBATTLE":  	isMatch = user.IsInBattleRoom;  	return true;  case "FRIEND":  	isMatch = Program.TasClient.Friends.Any (x => x == user.Name);  	return true;  }  
Missing Default,ZeroKLobby.MicroLobby,PopupNotify,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZeroKLobby\MicroLobby\PopupNotify.cs,DrawThemeCloseButton,The following switch statement is missing a default case: switch (state) {  case CloseButtonState.Hot:  	vse = VisualStyleElement.Window.CloseButton.Hot;  	break;  case CloseButtonState.Normal:  	vse = VisualStyleElement.Window.CloseButton.Normal;  	break;  case CloseButtonState.Pushed:  	vse = VisualStyleElement.Window.CloseButton.Pressed;  	break;  }  
