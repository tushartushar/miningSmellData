Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The method has 141 lines of code.
Long Method,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The method has 118 lines of code.
Long Method,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The method has 261 lines of code.
Complex Method,ZkLobbyServer,CmdPredict,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,CmdSetOptions,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,BattleCommand,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\BattleCommand.cs,GetRunPermissions,Cyclomatic complexity of the method is 18
Complex Method,ZkLobbyServer,ChannelManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,CanJoin,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,ChatRelay,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,OnAnySourceMessage,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,ClientConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,ForumListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,ZkDataContextOnAfterEntityChange,Cyclomatic complexity of the method is 14
Complex Method,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,Cyclomatic complexity of the method is 17
Complex Method,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,Cyclomatic complexity of the method is 14
Complex Method,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,Cyclomatic complexity of the method is 14
Complex Method,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,Cyclomatic complexity of the method is 14
Complex Method,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AreYouReadyResponse,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AddOrUpdateUser,Cyclomatic complexity of the method is 10
Complex Method,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CanBeAdded,Cyclomatic complexity of the method is 10
Complex Method,ZkLobbyServer,PartyManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessPartyInviteResponse,Cyclomatic complexity of the method is 11
Complex Method,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessPlayerJoin,Cyclomatic complexity of the method is 10
Complex Method,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartGame,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,Cyclomatic complexity of the method is 15
Complex Method,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateBattleStatus,Cyclomatic complexity of the method is 10
Complex Method,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ApplyBalanceResults,Cyclomatic complexity of the method is 12
Complex Method,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,Cyclomatic complexity of the method is 15
Complex Method,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostSay,Cyclomatic complexity of the method is 11
Complex Method,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,Cyclomatic complexity of the method is 22
Complex Method,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,Cyclomatic complexity of the method is 25
Complex Method,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,Cyclomatic complexity of the method is 14
Complex Method,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,Cyclomatic complexity of the method is 13
Complex Method,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,Cyclomatic complexity of the method is 30
Complex Method,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,TimerOnElapsed,Cyclomatic complexity of the method is 8
Long Parameter List,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,CommandPoll,The method has 6 parameters. Parameters: battle' yesNoVote' absoluteMajorityVote' mapSelection' mapName' ring
Long Parameter List,ZkLobbyServer,ChatRelayMessage,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\IChatRelaySource.cs,ChatRelayMessage,The method has 5 parameters. Parameters: channel' user' message' source' isEmote
Long Parameter List,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,ProposedBattle,The method has 5 parameters. Parameters: size' initialPlayer' queue' eloCutOffExponent' allPlayers
Long Parameter List,ZkLobbyServer,OfflineMessageHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\OfflineMessageHandler.cs,SendMissedMessagesAsync,The method has 5 parameters. Parameters: sender' place' target' accountID' maxCount
Long Parameter List,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartVote,The method has 5 parameters. Parameters: cmd' e' args' timeout' poll
Long Parameter List,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartVote,The method has 6 parameters. Parameters: eligibilitySelector' options' creator' topic' poll' timeout
Long Parameter List,ZkLobbyServer,ZkServerTraceListener,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,ZkLobbyServer,ZkServerTraceListener,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The method has 5 parameters. Parameters: result' server' sb' db' text
Long Statement,ZkLobbyServer,CmdAutohost,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdAutohost.cs,ExecuteArmed,The length of the statement  "                await battle.SayBattle("This battle is now an autohost. It will stay open until this command is executed again. Maps are rotated after each game. Title' player limit' password and modoptions are locked. Use !maxelo' !minelo' !maxlevel' !minlevel' !minmapsupportlevel to customize this autohost."); " is 297.
Long Statement,ZkLobbyServer,CmdEngine,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdEngine.cs,Arm,The length of the statement  "                battle.Respond(e' $"You cannot change engine to version other than {battle.server.Engine} here' use custom passworded room"); " is 125.
Long Statement,ZkLobbyServer,CmdKick,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdKick.cs,Arm,The length of the statement  "            if (e != null && battle.spring.IsRunning && !IsAdmin(battle' e.User) && battle.spring.LobbyStartContext?.Players.Any(x => x.Name == e.User && !x.IsSpectator) == false) " is 167.
Long Statement,ZkLobbyServer,CmdMap,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdMap.cs,Arm,The length of the statement  "                ? MapPicker.GetRecommendedMap(battle.GetContext()' (battle.MinimalMapSupportLevel > MapSupportLevel.Featured) ? battle.MinimalMapSupportLevel : MapSupportLevel.Featured) " is 169.
Long Statement,ZkLobbyServer,CmdMap,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdMap.cs,Arm,The length of the statement  "                        battle.Respond(e' $"The map {unsupportedMap.InternalName} {GlobalConst.BaseSiteUrl}/Maps/Detail/{unsupportedMap.ResourceID} is not available on this autohost. Play it in a player hosted battle."); " is 196.
Long Statement,ZkLobbyServer,CmdMap,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdMap.cs,Arm,The length of the statement  "                        battle.Respond(e' $"The map {unsupportedMap.InternalName} {GlobalConst.BaseSiteUrl}/Maps/Detail/{unsupportedMap.ResourceID} is not supported. Unsupported maps can only be played on passworded hosts."); " is 201.
Long Statement,ZkLobbyServer,CmdMap,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdMap.cs,Arm,The length of the statement  "                alternativeMap = MapPicker.FindResources(ResourceType.Map' arguments' MapSupportLevel.Supported' true).FirstOrDefault(); " is 120.
Long Statement,ZkLobbyServer,CmdMap,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdMap.cs,ExecuteArmed,The length of the statement  "                if (alternativeMap != null) await battle.SayBattle($"Did you mean {alternativeMap.InternalName} {GlobalConst.BaseSiteUrl}/Maps/Detail/{alternativeMap.ResourceID}?"); " is 165.
Long Statement,ZkLobbyServer,CmdPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPoll.cs,Arm,The length of the statement  "            if (commandToRun.GetRunPermissions(battle' e.User' out reason) >= RunPermission.Vote && commandToRun.Access != AccessType.NoCheck && commandToRun.Access != AccessType.Admin && !(commandToRun.Access == AccessType.NotIngameNotAutohost && battle.IsAutohost)) " is 255.
Long Statement,ZkLobbyServer,CmdPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPoll.cs,GetRunPermissions,The length of the statement  "            if (commandToRun == null) return base.GetRunPermissions(battle' userName' out reason) >= RunPermission.Vote ? RunPermission.Vote : RunPermission.None; " is 150.
Long Statement,ZkLobbyServer,CmdPredict,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The length of the statement  "                            teams = PartitionBalance.Balance(Balancer.BalanceMode.ClanWise' b.Users.Values.Where(u => !u.IsSpectator).Select(x => x.LobbyUser).Select(x => new PartitionBalance.PlayerItem(x.AccountID' x.EffectiveElo' x.Clan' x.PartyID)).ToList()) " is 233.
Long Statement,ZkLobbyServer,CmdPredict,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The length of the statement  "                    await battle.SayBattle( $"Team {teams[i].OrderByDescending(x => x.GetRating(cat).Elo).Select(x => x.Name).Aggregate((a' y) => a + "' " + y)} has a {Math.Round(1000 * chances[i]) / 10}% chance to win"); " is 201.
Long Statement,ZkLobbyServer,CmdResign,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,Arm,The length of the statement  "            if (DateTime.UtcNow.Subtract(battle.spring.IngameStartTime ?? DateTime.UtcNow).TotalSeconds < GlobalConst.MinDurationForElo) " is 124.
Long Statement,ZkLobbyServer,CmdResign,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,ExecuteArmed,The length of the statement  "            if (s.IsRunning) foreach (var p in s.LobbyStartContext.Players.Where(x => x.AllyID == alliance && !x.IsSpectator)) s.ResignPlayer(p.Name); " is 138.
Long Statement,ZkLobbyServer,CmdRing,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,Arm,The length of the statement  "                    if ((p.SyncStatus != SyncStatuses.Synced || p.IsSpectator) || (battle.spring.IsRunning && ingameEntry?.IsSpectator == false && ingameEntry?.IsIngameReady == false)) userList.Add(p.Name); " is 186.
Long Statement,ZkLobbyServer,CmdRing,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,ExecuteArmed,The length of the statement  "                await battle.server.GhostSay(new Say() { User = e.User' Target = s' Text = e.User + " wants your attention"' IsEmote = true' Ring = true' Place = SayPlace.User }); " is 163.
Long Statement,ZkLobbyServer,CmdSpecAfk,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSpecAfk.cs,ExecuteArmed,The length of the statement  "                await battle.server.GhostSay(new Say() { User = GlobalConst.NightwatchName' Target = usr.Name' Text = "You have been forced to spectator status due to inactivity."' IsEmote = true' Ring = true' Place = SayPlace.User }); " is 219.
Long Statement,ZkLobbyServer,CmdSpec,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSpec.cs,ExecuteArmed,The length of the statement  "                foreach (var usr in battle.Users.Values.Where(x => !x.IsSpectator && x.LobbyUser.IsAway)) await battle.Spectate(usr.Name); " is 122.
Long Statement,ZkLobbyServer,CmdStart,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdStart.cs,ExecuteArmed,The length of the statement  "                await battle.SayBattle("The following users are afk and will be spectated: " + afkers.Select(x => x.Name).StringJoin()); " is 120.
Long Statement,ZkLobbyServer,CmdStart,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdStart.cs,ExecuteArmed,The length of the statement  "                await battle.SayBattle("The following users are still downloading the map: " + unready.Select(x => x.Name).StringJoin()); " is 121.
Long Statement,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The length of the statement  "            if (yesNoVote) battle.SayGame(string.Format("Poll: {0} [!y={1}/{3}' !n={2}/{3}]"' Topic' userVotes.Count(x => x.Value == 0)' userVotes.Count(x => x.Value == 1)' winCount)); " is 172.
Long Statement,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,GetBattlePollOutcome,The length of the statement  "            msg.Message = yesNoVote ? (msg.Success ? $"Vote passed: {Topic}" : $"Vote failed: {Topic}") : (msg.Success ? $"Vote passed: Selected {msg.WinningOption.Name}." : "Vote failed: No absolute majority achieved."); " is 209.
Long Statement,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,PublishResult,The length of the statement  "                    if (battle.Mode == PlasmaShared.AutohostMode.Teams && battle.Users.Values.Count(x => !x.IsSpectator) > 3) cat = MapRatings.Category.CasualTeams; " is 144.
Long Statement,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,PublishResult,The length of the statement  "                    if (battle.Mode == PlasmaShared.AutohostMode.GameFFA && battle.Users.Values.Count(x => !x.IsSpectator) >= 3) cat = MapRatings.Category.FFA; " is 139.
Long Statement,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Vote,The length of the statement  "                if (yesNoVote) battle.SayGame(string.Format("Poll: {0} [!y={1}/{3}' !n={2}/{3}]"' Topic' userVotes.Count(x => x.Value == 0)' userVotes.Count(x => x.Value == 1)' winCount)); " is 172.
Long Statement,ZkLobbyServer,BattleCommand,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\BattleCommand.cs,GetIneligibilityReasonFunc,The length of the statement  "                if (GetRunPermissions(battle' x' out reason) >= BattleCommand.RunPermission.Vote && !IsSpectator(battle' x' battle.Users[x])) return null; " is 138.
Long Statement,ZkLobbyServer,BattleCommand,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\BattleCommand.cs,GetRunPermissions,The length of the statement  "            var defPerm = hasElevatedRights ? RunPermission.Run : (isSpectator || isAway || user?.BanVotes == true ? RunPermission.None : RunPermission.Vote); " is 146.
Long Statement,ZkLobbyServer,BattleCommand,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\BattleCommand.cs,GetRunPermissions,The length of the statement  "            if ((Access == AccessType.NotIngameNotAutohost || Access == AccessType.IngameNotAutohost) && battle.IsAutohost && !hasAdminRights) " is 130.
Long Statement,ZkLobbyServer,BattleCommand,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\BattleCommand.cs,GetRunPermissions,The length of the statement  "                reason = "This command cannot be used on autohosts' either ask a moderator to change the settings or create your own host."; " is 124.
Long Statement,ZkLobbyServer,BattleListUpdater,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\BattleListUpdater.cs,TimerOnElapsed,The length of the statement  "                        server.Battles.Values.Where(x => x != null).Select(x => Tuple.Create(x.BattleID' x.NonSpectatorCount' x.SpectatorCount))); " is 122.
Long Statement,ZkLobbyServer,ChannelManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,CanJoin,The length of the statement  "            else if (factionChannels.ContainsKey(channel)) return acc.Level >= GlobalConst.FactionChannelMinLevel && acc.FactionID == factionChannels[channel].FactionID; " is 157.
Long Statement,ZkLobbyServer,ChatRelay,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,TimerCallback,The length of the statement  "                        $"[game: {server.ConnectedUsers.Count} online' {server.MatchMaker.GetTotalWaiting()} in queue' {server.Battles.Values.Where(x => x != null).Sum(x => (int?)x.NonSpectatorCount + x.SpectatorCount) ?? 0} in custom]"; " is 213.
Long Statement,ZkLobbyServer,ChatRelay,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,OnAnySourceMessage,The length of the statement  "                    sb.AppendFormat("MatchMaker queue {0}\n"' string.Join("' "' server.MatchMaker.GetQueueCounts().Select(x => $"{x.Key}: {x.Value}"))); " is 132.
Long Statement,ZkLobbyServer,ChatRelay,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,OnAnySourceMessage,The length of the statement  "                            .Select(x => $"{x.Mode.Description()} {x.NonSpectatorCount}+{x.SpectatorCount}/{x.MaxPlayers} {x.MapName} {x.Title}"))); " is 120.
Long Statement,ZkLobbyServer,ClientConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,OnConnected,The length of the statement  "            await SendCommand(new Welcome() { Engine = server.Engine' Game = server.Game' Version = server.Version' UserCount = server.ConnectedUsers.Count' Factions = cachedFactions' UserCountLimited = MiscVar.ZklsMaxUsers > 0}); " is 218.
Long Statement,ZkLobbyServer,ClientConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The length of the statement  "                foreach (var b in server.Battles.Values.Where(x => x != null)) await SendCommand(new BattleAdded() { Header = b.GetHeader() }); " is 127.
Long Statement,ZkLobbyServer,ClientConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The length of the statement  "                defChans.AddRange(server.Channels.Where(x => x.Value.Users.ContainsKey(user.Name)).Select(x => x.Key)); // add currently connected channels to list too " is 151.
Long Statement,ZkLobbyServer,ClientConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The length of the statement  "                    if (s.LobbyStartContext.Players.Any(x => !x.IsSpectator && x.Name == Name) && !s.Context.ActualPlayers.Any(x=>x.Name == Name && x.LoseTime != null)) " is 148.
Long Statement,ZkLobbyServer,DiscordRelaySource,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\DiscordRelaySource.cs,DiscordOnMessageReceived,The length of the statement  "                if (discord.GetGuild(serverID).GetChannel(msg.Channel.Id) != null) if (!msg.Author.IsBot && msg.Author.Username != GlobalConst.NightwatchName) OnChatRelayMessage?.Invoke(this' new ChatRelayMessage(msg.Channel.Name' GetName(msg.Author)' TranslateMentions(msg)' source' false)); " is 276.
Long Statement,ZkLobbyServer,ForumListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,ZkDataContextOnAfterEntityChange,The length of the statement  "                var conus = server.ConnectedUsers.Values.FirstOrDefault(x => x != null && x.User.AccountID == changedAccountID && x.IsLoggedIn); " is 128.
Long Statement,ZkLobbyServer,ForumListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,ZkDataContextOnAfterEntityChange,The length of the statement  "                        if (thread.LastPost >= cachedPublicForumList.ForumItems.Min(x=>(DateTime?)x.Time)) CachePublicForumList(); // its a modified post and its date belongs to top 10' update " is 168.
Long Statement,ZkLobbyServer,ForumListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,CachePublicForumList,The length of the statement  "                var accessibleThreads = db.ForumThreads.Where(x => x.RestrictedClanID == null && x.ForumCategory.ForumMode != ForumMode.Archive); " is 129.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The length of the statement  "                    if (info != null) accBySteamID = db.Accounts.Include(x => x.Clan).Include(x => x.Faction).FirstOrDefault(x => x.SteamID == info.steamid); " is 137.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The length of the statement  "                        accByLogin = db.Accounts.Include(x => x.Clan).Include(x => x.Faction).FirstOrDefault(x => x.Name == login.Name) ?? db.Accounts.Include(x => x.Clan).Include(x => x.Faction).FirstOrDefault(x => x.Name.Equals(login.Name' StringComparison.CurrentCultureIgnoreCase)); " is 262.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The length of the statement  "                    if (!acc.HasVpnException && GlobalConst.VpnCheckEnabled) if (HasVpn(ip' acc' db)) return BlockLogin("Connection using proxy or VPN is not allowed! (You can ask for exception)"' acc' ip' userID); " is 194.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "            if (!Account.IsValidLobbyName(register.Name)) return new RegisterResponse(RegisterResponse.Code.NameHasInvalidCharacters); " is 122.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "            if (server.ConnectedUsers.ContainsKey(register.Name)) return new RegisterResponse(RegisterResponse.Code.AlreadyConnected); " is 122.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "            if (string.IsNullOrEmpty(register.PasswordHash) && string.IsNullOrEmpty(register.SteamAuthToken)) return new RegisterResponse(RegisterResponse.Code.MissingBothPasswordAndToken); " is 177.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "                    if (info != null && existingByName.SteamID == info.steamid) return new RegisterResponse(RegisterResponse.Code.AlreadyRegisteredWithThisSteamToken); " is 147.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "                    if (info == null && !string.IsNullOrEmpty(register.PasswordHash) && existingByName.VerifyPassword(register.PasswordHash)) return new RegisterResponse(RegisterResponse.Code.AlreadyRegisteredWithThisPassword); " is 207.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,UpdateUserFromAccount,The length of the statement  "            user.EffectiveMmElo = (int)Math.Round(Math.Min(acc.GetRating(RatingCategory.MatchMaking).LadderElo' acc.GetRating(RatingCategory.MatchMaking).RealElo)); " is 152.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "                    //Trace.TraceInformation($"VPN check for USER {acc.Name}\nnetname: {data["netname"]}\norgname: {data["org-name"]}\ndescr: {data["descr"]}\nabuse-mailbox: {data["abuse-mailbox"]}"' false); " is 187.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "                    if (blockedHosts.Any(x => data["abuse-mailbox"].Contains(x)) || blockedHosts.Any(x => data["notify"].Contains(x))) return true; " is 127.
Long Statement,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,Talk,The length of the statement  "            if (server.ConnectedUsers.TryGetValue(GlobalConst.NightwatchName' out cli)) cli.Process(new Say { IsEmote = true' Place = SayPlace.Channel' Target = "zkadmin"' Text = text }); " is 175.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                        .Select(x => new { OwnerAccountID = x.OwnerAccountID' Owner = x.Owner.Name' Target = x.Target.Name' Relation = x.Relation' SteamID = x.Target.SteamID }) " is 152.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Friend) && (x.OwnerAccountID == User.AccountID)).Select(x => x.Target)); " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Friend) && (x.OwnerAccountID != User.AccountID)).Select(x => x.Owner)); " is 131.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                FriendEntries = new List<FriendEntry>(rels.Where(x => (x.Relation == Relation.Friend) && (x.OwnerAccountID == User.AccountID)).Select(x => new FriendEntry() { Name = x.Target' SteamID = x.SteamID?.ToString() })); " is 212.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Ignore) && (x.OwnerAccountID == User.AccountID)).Select(x => x.Target)); " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Ignore) && (x.OwnerAccountID != User.AccountID)).Select(x => x.Owner)); " is 131.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            if (server.Channels.TryGetValue(chanKick.ChannelName' out channel) && channel.Users.TryGetValue(chanKick.UserName' out user)) " is 125.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                await client.Respond(string.Format("You were kicked from channel {0} by {1} : {2}"' chanKick.ChannelName' Name' chanKick.Reason)); " is 130.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            var channel = server.Channels.GetOrAdd(joinChannel.ChannelName' (n) => new Channel() { Name = joinChannel.ChannelName' }); " is 122.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                await SendCommand(new JoinChannelResponse() { Success = false' Reason = "invalid password"' ChannelName = joinChannel.ChannelName }); " is 133.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            var visibleUsers = !channel.IsDeluge ? channel.Users.Keys.ToList() : channel.Users.Keys.Where(x => server.CanUserSee(Name' x)).ToList(); " is 136.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            var canSeeMe = !channel.IsDeluge ? channel.Users.Keys.ToList() : channel.Users.Keys.Where(x => server.CanUserSee(x' Name)).ToList(); " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            server.OfflineMessageHandler.SendMissedMessagesAsync(this' SayPlace.Channel' joinChannel.ChannelName' User.AccountID' channel.IsDeluge ? OfflineMessageHandler.DelugeMessageResendCount : OfflineMessageHandler.MessageResendCount); " is 228.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                var users = !channel.IsDeluge ? channel.Users.Keys.ToList() : channel.Users.Keys.Where(x => server.CanUserSee(x' Name)).ToList(); " is 129.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            if (DateTime.UtcNow.AddMilliseconds(-5 * GlobalConst.MinMillisecondsBetweenMessages) > chatWait) chatWait = DateTime.UtcNow.AddMilliseconds(-5 * GlobalConst.MinMillisecondsBetweenMessages); " is 189.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            chatWait = chatWait.AddMilliseconds(Math.Max(GlobalConst.MinMillisecondsBetweenMessages' GlobalConst.MillisecondsPerCharacter * say.Text.Length)); " is 146.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                await Respond("Your rights have been restricted. You can only open passworded battles. Check your user page for details."); " is 123.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                    if (!string.IsNullOrEmpty(rel.TargetName)) await Respond("No such account found"); // only warn if name is set and not just steam id " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                                x => (x != null) && x.Users.ContainsKey(Name) && x.Users.ContainsKey(targetConnectedUser.Name))) await SendCommand(new ChannelUserAdded() { ChannelName = chan.Name' UserName = targetConnectedUser.Name }); " is 204.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,RemoveConnection,The length of the statement  "                foreach (var chan in server.Channels.Values.Where(x => x.Users.ContainsKey(Name)).ToList()) await Process(new LeaveChannel() { ChannelName = chan.Name }); " is 154.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,RemoveConnection,The length of the statement  "                await server.Broadcast(server.ConnectedUsers.Values.Where(x => x != null && server.CanUserSee(x' this))' new UserDisconnected() { Name = Name' Reason = reason }); " is 162.
Long Statement,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LeaveBattle,The length of the statement  "                        if (battle.Bots.TryRemove(b.Name' out obs)) await server.Broadcast(battle.Users.Keys' new RemoveBot() { Name = b.Name }); " is 121.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AreYouReadyResponse,The length of the statement  "                        lastTimePlayerDeniedMatch[entry.Name] = DateTime.UtcNow; //store that this player is probably not interested in suggestive MM games " is 131.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The length of the statement  "            if (server.Battles.Values.Any(x => x.IsInGame && DateTime.UtcNow.Subtract(x.RunningSince ?? DateTime.UtcNow).TotalMinutes < DynamicConfig.Instance.MmMinimumMinutesBetweenGames && x.spring.LobbyStartContext.Players.Count(p => !p.IsSpectator) > 1 && x.spring.LobbyStartContext.Players.Any(p => !p.IsSpectator && p.Name == user.Name))) " is 332.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The length of the statement  "                await user.Respond($"You have recently started a match. Please play for at least {DynamicConfig.Instance.MmMinimumMinutesBetweenGames} minutes before starting another match"); " is 175.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The length of the statement  "            lastTimePlayerDeniedMatch.TryRemove(user.Name' out player); //this player might be interested in suggestive MM games after all " is 126.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,GetEligibleQuickJoinPlayers,The length of the statement  "            return users.Where(x => !(lastTimePlayerDeniedMatch.TryGetValue(x.Name' out lastDenied) && DateTime.UtcNow.Subtract(lastDenied).TotalMinutes < DynamicConfig.Instance.MmMinimumMinutesBetweenSuggestions)).ToList();  " is 212.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MassJoin,The length of the statement  "            await server.UserLogSay($"{users.Count} players have been added to the {wantedQueues.Select(q => q.Name).StringJoin()} queue via Quickplay: {users.Select(q => q.Name).StringJoin()}."); " is 184.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AddOrUpdateUser,The length of the statement  "            if (party != null) wantedQueues = wantedQueues.Where(x => x.MaxSize / 2 >= party.UserNames.Count).ToList(); // if is in party keep only queues where party fits " is 159.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AddOrUpdateUser,The length of the statement  "                if (entry?.QueueTypes?.Count > 0 && entry?.QuickPlay == false) await server.UserLogSay($"{user.Name} has left the matchmaker."); " is 128.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AddOrUpdateUser,The length of the statement  "            //if many people are joined simultaneously' wait until join is completed before sending updates or trying to create battles. " is 124.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AddOrUpdateUser,The length of the statement  "            await server.UserLogSay($"{user.Name} has joined the following queues: {wantedQueues.Select(q => q.Name).StringJoin()}."); " is 122.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,BannedSeconds,The length of the statement  "            if (bannedPlayers.TryGetValue(name' out banEntry) && (DateTime.UtcNow.Subtract(banEntry.BannedTime).TotalSeconds < banEntry.BanSeconds)) return (int)(banEntry.BanSeconds - DateTime.UtcNow.Subtract(banEntry.BannedTime).TotalSeconds); " is 232.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,BannedSeconds,The length of the statement  "            if (banEntry != null && DateTime.UtcNow.Subtract(banEntry.BannedTime).TotalSeconds > BanReset) bannedPlayers.TryRemove(name' out banEntry); " is 139.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,CountIngamePeople,The length of the statement  "            foreach (var bat in server.Battles.Values.OfType<MatchMakerBattle>().Where(x => (x != null) && x.IsMatchMakerBattle && x.IsInGame)) " is 131.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,RemoveSingleUser,The length of the statement  "                if (server.ConnectedUsers.TryGetValue(name' out conUser) && (conUser != null)) if (entry?.InvitedToPlay == true) await conUser.SendCommand(new AreYouReadyResult() { AreYouBanned = true' IsBattleStarting = false' }); " is 215.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,ResetAndSendMmInvitations,The length of the statement  "                if (toInvite.Contains(usr) || usr.QuickPlay) //invite all quickplay players' there will be lots of declines so don't care about making battles yet " is 146.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,ResetAndSendMmInvitations,The length of the statement  "                server.UserLogSay($"{quickPlayInvites.Count} players have been sent quickplay MM invites: {quickPlayInvites.StringJoin()}."); " is 125.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,ResolveToRealBattles,The length of the statement  "                server.UserLogSay($"{nonAccepts.Where(x => !x.QuickPlay).Count()} players have ignored their pop-up MM invites: {nonAccepts.Where(x => !x.QuickPlay).Select(x => x.Name).StringJoin()}."); " is 186.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,ResolveToRealBattles,The length of the statement  "                server.UserLogSay($"{nonAccepts.Where(x => x.QuickPlay).Count()} players have ignored their quickplay MM invites: {nonAccepts.Where(x => x.QuickPlay).Select(x => x.Name).StringJoin()}."); " is 187.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,ResolveToRealBattles,The length of the statement  "                server.UserLogSay($"{readyAndFailed.Where(x => !x.QuickPlay).Count()} players have accepted their pop-up MM invites with no match: {readyAndFailed.Where(x => !x.QuickPlay).Select(x => x.Name).StringJoin()}."); " is 209.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,ResolveToRealBattles,The length of the statement  "                server.UserLogSay($"{readyAndFailed.Where(x => x.QuickPlay).Count()} players have accepted their quickplay MM invites with no match: {readyAndFailed.Where(x => x.QuickPlay).Select(x => x.Name).StringJoin()}."); " is 210.
Long Statement,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,UpdatePlayerStatus,The length of the statement  "                        ret.InstantStartQueues.AddRange(testBattles.Where(x => x.Players.Contains(testSelf)).Select(x => x.QueueType.Name).Distinct().ToList()); " is 136.
Long Statement,ZkLobbyServer,PlayerEntry,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.PlayerEntry.cs,GenerateWantedBattles,The length of the statement  "                    var qtMaxWait = qt.MaxSize > qt.MinSize ? allPlayers.Where(x => x.QueueTypes.Contains(qt)).Max(x => x.SizeWaitRatio) : 0;  " is 121.
Long Statement,ZkLobbyServer,PlayerEntry,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.PlayerEntry.cs,GenerateWantedBattles,The length of the statement  "                            if (Party == null || (qt.Mode == AutohostMode.GameChickens && Party.UserNames.Count<=i) || Party.UserNames.Count == i / 2) " is 122.
Long Statement,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,AddPlayer,The length of the statement  "                    //Trace.TraceError("MM: added party {6} MinElo: {0}->{1} ({4})'  MaxElo: {2}->{3} ({5})"' minEloOrg' MinElo' maxEloOrg' MaxElo' GetPartyMaxElo(player.Party' allPlayers)' GetPartyMinElo(player.Party' allPlayers)' player.Name); " is 225.
Long Statement,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,AddPlayer,The length of the statement  "                        //Trace.TraceError("MM: added player {6} MinElo: {0}->{1} ({4})'  MaxElo: {2}->{3} ({5})"' minEloOrg' MinElo' maxEloOrg' MaxElo' GetPlayerMaxElo(player)' GetPlayerMinElo(player)' player.Name); " is 192.
Long Statement,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,VerifyBalance,The length of the statement  "                    var players = Players.Select(x => x.LobbyUser).Select(x => new PlayerItem(x.AccountID' x.EffectiveMmElo' x.Clan' x.PartyID)).ToList(); " is 134.
Long Statement,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CanBeAdded,The length of the statement  "                    if ((GetPartyMinElo(other.Party' allPlayers) - MinElo > width) || (MaxElo - GetPartyMaxElo(other.Party' allPlayers) > width)) " is 125.
Long Statement,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CanBeAdded,The length of the statement  "                        //Trace.TraceError("MM: cannot add party {0}' {1} - {2} > {3} || {4} - {5} > {3}"' other.Name' GetPartyMinElo(other.Party' allPlayers)' MinElo' width' MaxElo' GetPartyMaxElo(other.Party' allPlayers)); " is 200.
Long Statement,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CanBeAdded,The length of the statement  "                    //Trace.TraceError("MM: cannot add {0}' {1} - {2} > {3} || {4} - {5} > {3}"' other.Name' GetPlayerMinElo(other)' MinElo' width' MaxElo' GetPlayerMaxElo(other)); " is 160.
Long Statement,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,VerifyPartySizeFits,The length of the statement  "                    if ((party.UserNames.Count + t1 > maxTeamSize) && (party.UserNames.Count + t2 > maxTeamSize)) return false; // cannot fit new party to still balance " is 148.
Long Statement,ZkLobbyServer,NewsListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\NewsListManager.cs,CacheNewsList,The length of the statement  "                    NewsItems = db.LobbyNews.OrderBy(x => x.PinnedOrder ?? int.MaxValue).ThenByDescending(x => x.Created).Take(10).ToList().Select(x => new NewsItem " is 144.
Long Statement,ZkLobbyServer,PartyManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessInviteToParty,The length of the statement  "                if (myParty == null && usr.MyBattle == null && target.MyBattle != null && !target.MyBattle.IsPassworded) await server.ForceJoinBattle(usr.Name' target.MyBattle); " is 161.
Long Statement,ZkLobbyServer,PartyManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessPartyInviteResponse,The length of the statement  "                        var targetBattle = inviterUser.MyBattle ?? inviteeUser.MyBattle; // join inviter user's battle' if its empty join invitee user's battle " is 135.
Long Statement,ZkLobbyServer,PartyManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,AddFriendsBy,The length of the statement  "                if (server.ConnectedUsers.TryGetValue(p' out usr)) foreach (var f in usr.FriendBy) if (server.ConnectedUsers.ContainsKey(f) && !result.Contains(f)) result.Add(f); " is 162.
Long Statement,ZkLobbyServer,PartyManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,RemoveFromParty,The length of the statement  "            if (party.UserNames.Count == 2 && names.Any(x => party.UserNames.Contains(x))) names = party.UserNames.ToArray(); // party has just two people and we remove one of them -> remove all " is 182.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The length of the statement  "            if ((say.Place == SayPlace.Battle) && !say.IsEmote && (user?.User.BanMute != true) && (user?.User.BanSpecChat != true) && say.AllowRelay) spring.SayGame($"<{say.User}>{say.Text}"); // relay to spring " is 199.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessPlayerJoin,The length of the statement  "            await server.Broadcast(Users.Keys.Where(x => x != user.Name)' ubs.ToUpdateBattleStatus()); // send my UBS to others in battle " is 125.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,RecalcSpectators,The length of the statement  "                    await server.Broadcast(Users.Keys' new BattleUpdate() { Header = new BattleHeader() { SpectatorCount = specCount' BattleID = BattleID' PlayerCount = NonSpectatorCount } }); " is 172.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,RequestConnectSpring,The length of the statement  "            if (!Users.TryGetValue(conus.Name' out ubs) && !(IsInGame && spring.LobbyStartContext.Players.Any(x => x.Name == conus.Name))) " is 126.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,Spectate,The length of the statement  "            if (server.ConnectedUsers.TryGetValue(name' out usr)) await usr.Process(new UpdateUserBattleStatus() { Name = usr.Name' IsSpectator = true }); " is 142.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartGame,The length of the statement  "                    if (server.ConnectedUsers.TryGetValue(us.Name' out user)) await user.SendCommand(GetConnectSpringStructure(us.ScriptPassword)); " is 127.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartGame,The length of the statement  "            await Task.WhenAll(startSetup.Players.Where(x => !x.IsSpectator).Select(x => server.MatchMaker.RemoveUser(x.Name' false))); " is 123.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The length of the statement  "            if (MaxPlayers > DynamicConfig.Instance.MaximumBattlePlayers && !IsAutohost) MaxPlayers = DynamicConfig.Instance.MaximumBattlePlayers; " is 134.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The length of the statement  "            HostedMod = MapPicker.FindResources(ResourceType.Mod' ModName ?? server.Game ?? GlobalConst.DefaultZkTag).FirstOrDefault(); " is 123.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateBattleStatus,The length of the statement  "                    SayBattle("Your rating (" + Math.Min(ubs.LobbyUser.EffectiveElo' ubs.LobbyUser.EffectiveMmElo) + ") is too high. The maximum rating to play in this battle is " + MaxElo + "."' ubs.Name); " is 186.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateBattleStatus,The length of the statement  "                    SayBattle("Your rating (" + Math.Max(ubs.LobbyUser.EffectiveElo' ubs.LobbyUser.EffectiveMmElo) + ") is too low. The minimum rating to play in this battle is " + MinElo + "."' ubs.Name); " is 185.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateBattleStatus,The length of the statement  "                    SayBattle("Your level (" + ubs.LobbyUser.Level + ") is too high. The maximum level to play in this battle is " + MaxLevel + "."' ubs.Name); " is 139.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateBattleStatus,The length of the statement  "                    SayBattle("Your level (" + ubs.LobbyUser.Level + ") is too low. The minimum level to play in this battle is " + MinLevel + "."' ubs.Name); " is 138.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateBattleStatus,The length of the statement  "                    SayBattle("Your Rank (" + Ranks.RankNames[ubs.LobbyUser.Rank] + ") is too high. The maximum Rank to play in this battle is " + Ranks.RankNames[MaxRank] + "."' ubs.Name); " is 169.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateBattleStatus,The length of the statement  "                    SayBattle("Your Rank (" + Ranks.RankNames[ubs.LobbyUser.Rank] + ") is too low. The minimum Rank to play in this battle is " + Ranks.RankNames[MinRank] + "."' ubs.Name); " is 168.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,OnDedicatedExited,The length of the statement  "            var playingEligibleUsers = server.MatchMaker.GetEligibleQuickJoinPlayers(Users.Values.Where(x => !x.LobbyUser.IsAway && !x.IsSpectator && x.Name != null).Select(x => server.ConnectedUsers[x.Name]).ToList()); " is 207.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,OnDedicatedExited,The length of the statement  "                var availableUsers = Users.Values.Where(x => !x.LobbyUser.IsAway && x.Name != null).Select(x => server.ConnectedUsers[x.Name]).ToList(); " is 136.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,OnDedicatedExited,The length of the statement  "            if (IsAutohost || (!Users.ContainsKey(FounderName) || Users[FounderName].LobbyUser?.IsAway == true) && Mode != AutohostMode.None && Mode != AutohostMode.Planetwars && !IsPassworded) " is 181.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,CreateMultiMapPoll,The length of the statement  "                        map = MapPicker.GetRecommendedMap(GetContext()' MinimalMapSupportLevel' MapRatings.GetMapRanking(Mode).TakeWhile(x => x.Percentile < 0.2).Select(x => x.Map).Where(x => !pickedMaps.Contains(x.ResourceID)).AsQueryable()); //choose at least 50% popular maps " is 254.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,CreateMultiMapPoll,The length of the statement  "                        map = MapPicker.GetRecommendedMap(GetContext()' (MinimalMapSupportLevel < MapSupportLevel.Featured) ? MapSupportLevel.Supported : MinimalMapSupportLevel' db.Resources.Where(x => !pickedMaps.Contains(x.ResourceID))); " is 215.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,CreateMultiMapPoll,The length of the statement  "            return await StartVote(new CmdMap().GetIneligibilityReasonFunc(this)' options' null' "Choose the next map"' poll' MapVoteTime); " is 127.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,MapVoteEnded,The length of the statement  "            if (Users.Values.Count(x => !x.IsSpectator) >= MinimumAutostartPlayers) StartVote(new CmdStart()' null' ""' MapVoteTime); " is 121.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ApplyBalanceResults,The length of the statement  "            foreach (var u in Users.Values.Select(x => x.ToUpdateBattleStatus()).ToList()) await server.Broadcast(Users.Keys' u); // send other's status to self " is 148.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,PickHostingPort,The length of the statement  "                var reservedPorts = server.Battles.Values.Where(x => x != null).Select(x => x.hostingPort).Distinct().ToDictionary(x => x' x => true); " is 134.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,spring_BattleStarted,The length of the statement  "                    string message = string.Format("Players {0} did not choose a start position. Game will be aborted."' e.PlayersUnreadyOnStart.StringJoin()); " is 139.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,spring_BattleStarted,The length of the statement  "                    server.UserLogSay($"Battle aborted because {e.PlayersUnreadyOnStart.Count} players didn't join their MM game: {e.PlayersUnreadyOnStart.StringJoin()}."); " is 152.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,spring_PlayerSaid,The length of the statement  "                if (!server.ConnectedUsers.TryGetValue(e.Username' out user) || user.User.BanMute || (user.User.BanSpecChat && !isPlayer)) " is 122.
Long Statement,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,DedicatedServerStarted,The length of the statement  "                    foreach (var u in spring.LobbyStartContext.Players.Where(x => !x.IsSpectator)) service.NotifyMissionRun(u.Name' HostedMod.Mission.Name); " is 136.
Long Statement,ZkLobbyServer,SpringRelaySource,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringRelaySource.cs,OnSpringTasSaid,The length of the statement  "                    OnChatRelayMessage?.Invoke(this' new ChatRelayMessage(args.Channel' args.UserName' args.Text' SaySource.Spring' args.IsEmote)); " is 127.
Long Statement,ZkLobbyServer,SpringRelaySource,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringRelaySource.cs,SendMessage,The length of the statement  "                    if (msg.User != GlobalConst.NightwatchName) SpringTas.Say(TasClient.SayPlace.Channel' msg.Channel' string.Format("<{0}> {1}"' msg.User' msg.Message)' msg.IsEmote); " is 163.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,Broadcast,The length of the statement  "            await Task.WhenAll(ConnectedUsers.Values.Where(x => x != null).Select(async (client) => { await client.SendLine(line); })); " is 123.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,SyncUserToAll,The length of the statement  "            await Broadcast(ConnectedUsers.Values.Where(x=>x!=null).Where(x => CanUserSee(x' changer) && !HasSeen(x' changer))' changer.User); " is 130.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,The length of the statement  "            if (!ConnectedUsers.TryGetValue(watcher' out uWatcher) || !ConnectedUsers.TryGetValue(watched' out uWatched)) return false; " is 123.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,The length of the statement  "                                .OrderBy(x => Math.Abs((x.User?.EffectiveMmElo??1200) - myEffectiveElo)).Select(x => x.Name).Take(GlobalConst.DelugeChannelDisplayUsers); " is 137.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,HasSeen,The length of the statement  "            if (!ConnectedUsers.TryGetValue(watcher' out uWatcher) || !ConnectedUsers.TryGetValue(watched' out uWatched)) return true; " is 122.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,UserLogSay,The length of the statement  "            var say = new Say() { Place = SayPlace.Channel' Target = GlobalConst.UserLogChannel' Text = text' User = GlobalConst.NightwatchName' Time = DateTime.UtcNow }; " is 158.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostSay,The length of the statement  "                    if (say.User != GlobalConst.NightwatchName && ConnectedUsers.TryGetValue(say.User' out connectedUser)) await connectedUser.SendCommand(say); " is 140.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,Shutdown,The length of the statement  "            foreach (var usr in ConnectedUsers.Values) if (usr != null) foreach (var con in usr.Connections.Keys) con?.RequestClose(); " is 122.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,PublishAccountUpdate,The length of the statement  "                    if (chan.Value.Users.ContainsKey(acc.Name) && !ChannelManager.CanJoin(acc' chan.Key)) await conus.Process(new LeaveChannel() { ChannelName = chan.Key }); " is 153.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,PublishAccountUpdate,The length of the statement  "                    else if (!chan.Value.Users.ContainsKey(acc.Name) && defaultChannels.Contains(acc.Name)) await conus.Process(new JoinChannel() { ChannelName = chan.Key' Password = chan.Value.Password }); " is 186.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,PublishUserProfilePlanetwarsPlayers,The length of the statement  "            ConnectedUsers.Values.Where(x => x != null && x.IsLoggedIn && !string.IsNullOrEmpty(x.User.Faction)).AsParallel().ForAll(conus => " is 129.
Long Statement,ZkLobbyServer,TcpTransportServerListener,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The length of the statement  "                    listener.Server.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption(GlobalConst.TcpLingerStateEnabled' GlobalConst.TcpLingerStateSeconds)); " is 171.
Long Statement,ZkLobbyServer,TcpTransportServerListener,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The length of the statement  "                    if (!SetHandleInformation(listener.Server.Handle' HANDLE_FLAGS.INHERIT | HANDLE_FLAGS.PROTECT_FROM_CLOSE' 0)) throw new ApplicationException("Unable to set socket flags: " + Marshal.GetLastWin32Error()); " is 203.
Long Statement,ZkLobbyServer,ZkServerTraceListener,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,ProcessEvent,The length of the statement  "                var say = new Say() { Place = SayPlace.Channel' Target = GlobalConst.ErrorChannel' Text = text' User = GlobalConst.NightwatchName' Time=DateTime.UtcNow}; " is 153.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                var allyteams = context.Players.Where(x => !x.IsSpectator).Select(p => p.AllyID).Union(context.Bots.Select(b => b.AllyID)).Distinct().Count(); " is 142.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                        if (context.Players.Where(x => !x.IsSpectator).Select(p => p.AllyID).Distinct().Count() == 1 && botPlayers > 0 && context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.GameChickens; " is 183.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                        else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true); " is 134.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                                x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList(); " is 122.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                            else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true); " is 134.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                        if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList(); " is 130.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,FindResources,The length of the statement  "            if (test.Any() && !ignoreExactMatches) return test.OrderByDescending(x => x.MapSupportLevel).ThenByDescending(x => x.ResourceID); " is 129.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,FindResources,The length of the statement  "            return ret.OrderByDescending(x => x.MapSupportLevel).ThenByDescending(x => x.InternalName == term || x.RapidTag == term).ThenByDescending(x => x.ResourceID); " is 157.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,GetTeamsDifference,The length of the statement  "            //Trace.TraceInformation("trying teams: " + string.Join(" | "' t.Select(x => string.Join(" ; "' x.Items.Select(y => string.Join(" ' "' y.EloElements.Select(z => z.ToString()))))))); " is 181.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,GetTeamsDifference,The length of the statement  "                return (t[0].EloAvg - t[1].EloAvg) * (t[0].EloAvg - t[1].EloAvg) + 0.01 * (t[0].EloStdev - t[1].EloStdev) * (t[0].EloStdev - t[1].EloStdev); " is 140.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                    fallback.Message += "\nWarning: STANDARD TEAM BALANCE USED' PlanetWars not possible with those teams' too many from one faction"; " is 129.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                if (mode == BalanceMode.ClanWise && (bestTeams == null || GetTeamsDifference(bestTeams) > MaxCbalanceDifference || sizesWrong)) return new Balancer().LegacyBalance(teamCount' BalanceMode.Normal' b' unmovablePlayers); " is 216.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                    fallback.Message += "\nWarning: STANDARD TEAM BALANCE USED' PlanetWars not possible with those teams' too many from one faction"; " is 129.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                            "Failed to balance {0} - too many people from same clan or faction (in teams game you can try !random and !forcestart)"); " is 121.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                if (unmovablePlayers == null || unmovablePlayers.Length == 0) bestTeams = bestTeams.Shuffle(); // permute when not unmovable players present " is 140.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                    text += string.Format("={0}%)"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ((team.EloAvg - bestTeams.Where(x => !x.Equals(team)).Select(x => x.EloAvg).Average())) / 400.0))) * 100.0 * 2 / bestTeams.Count)); " is 206.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                                    res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context); " is 122.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                            if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none") " is 133.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                                //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended."; " is 122.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                                if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' }); " is 132.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                                    for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' }); " is 152.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PlanetwarsBalance,The length of the statement  "                    foreach (var b in planet.PlanetStructures.Select(x => x.StructureType).Where(x => !string.IsNullOrEmpty(x.EffectBots))) res.Bots.Add(new BotTeam { AllyID = 1' BotAI = b.EffectBots' BotName = "Aliens" + cnt++ }); " is 211.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,VerifySpecCheaters,The length of the statement  "                        .ToDictionary(x => x.AccountID' x => x.AccountIPs.OrderByDescending(y => y.LastLogin).Select(y => y.IP).FirstOrDefault()); " is 122.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SubmitSpringBattleResult,The length of the statement  "                Dictionary<int' int> orgLevels = sb.SpringBattlePlayers.Select(x => x.Account).ToDictionary(x => x.AccountID' x => x.Level); " is 124.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SubmitSpringBattleResult,The length of the statement  "                bool noElo = result.LobbyStartContext.ModOptions.Any(x => x.Key.ToLower() == "noelo" && x.Value != "0" && x.Value != "false"); " is 126.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The length of the statement  "            if (result.LobbyStartContext.Mode != AutohostMode.Planetwars || sb.PlayerCount < 2 || sb.Duration < GlobalConst.MinDurationForPlanetwars || sb.Duration > GlobalConst.MaxDurationForPlanetwars) return; " is 199.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The length of the statement  "            List<int> winnerTeams = sb.SpringBattlePlayers.Where(x => x.IsInVictoryTeam && !x.IsSpectator).Select(x => x.AllyNumber).Distinct().ToList(); " is 141.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SaveSpringBattle,The length of the statement  "            var victoryAllyID = result.ActualPlayers.Where(x => x.IsVictoryTeam).Select(x => (int?)x.AllyNumber).FirstOrDefault() ?? -1; " is 124.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SaveSpringBattle,The length of the statement  "            if (victoryAllyID == -1) victoryAllyID = (result.ActualPlayers.Min(x => (int?)x.AllyNumber)??-1) + 1; // no player won' its likely to be next lowes team (stupid hack needed) " is 173.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SaveSpringBattle,The length of the statement  "            return db.SpringBattles.FirstOrDefault(x => x.SpringBattleID == sb.SpringBattleID); // reselect from db to get proper lazy proxies " is 130.
Long Statement,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The length of the statement  "            //There are N^2 possibilities' but we only look at the N ones where the sum of both is as close to the target as possible " is 121.
Long Statement,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The length of the statement  "            UInt64 bestAssignment = 0; //Each bit from right to left represents whether the ith player is in the first or second team " is 121.
Long Statement,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The length of the statement  "            var text = string.Format("( ( 1={0}%) : 2={1}%))"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' -ret.EloDifference / 400.0))) * 100.0)' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0))) * 100.0)); " is 216.
Long Statement,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,BalanceInterface,The length of the statement  "                    players = b.Players.Where(y => !y.IsSpectator).Select(x => new PlayerItem(x.LobbyID' accs.First(a => a.AccountID == x.LobbyID).GetRating(b.ApplicableRating).Elo' x.Clan' x.PartyID)).ToList(); " is 191.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                    var groupedByTeam = context.Players.Where(x => !x.IsSpectator).GroupBy(x => x.AllyID).OrderByDescending(x => x.Count()); " is 120.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                    ret.ModOptions["pw_attackerIP"] = (planet.PlanetFactions.FirstOrDefault(x => x.FactionID == attacker.FactionID)?.Influence ?? 0).ToString(CultureInfo.InvariantCulture); " is 168.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                    ret.ModOptions["pw_attackerWinLoseCC"] = GlobalConst.PlanetWarsAttackerWinLoseCcMultiplier.ToString(CultureInfo.InvariantCulture); " is 130.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                    ret.ModOptions["pw_defenderWinKillCC"] = GlobalConst.PlanetWarsDefenderWinKillCcMultiplier.ToString(CultureInfo.InvariantCulture); " is 130.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                        userParams["ignored"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Ignore).Select(x => x.Target.Name)); " is 135.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                        userParams["friends"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Friend).Select(x => x.Target.Name)); " is 135.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                                                (x.RoleType.RestrictFactionID == null || x.RoleType.RestrictFactionID == user.FactionID)).OrderBy(x => x.RoleType.DisplayOrder).Select(x => (int?)x.RoleType.DisplayOrder).FirstOrDefault() ?? 999).ToString(); " is 207.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                                userParams["pwInstructions"] = Convert.ToBase64String(Encoding.UTF8.GetBytes(GetPwInstructions(planet' user' db' attacker))); " is 125.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                            if (accountIDsWithExtraComms.ContainsKey(user.AccountID)) userParams["extracomm"] = accountIDsWithExtraComms[user.AccountID].ToString(); " is 136.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                                            var slots = db.CommanderSlots.ToList().Where(x => x.MorphLevel == i && (x.ChassisID == null || (x.ChassisID == c.ChassisUnlockID))).ToList(); " is 141.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                        var s in planet.PlanetStructures.Where(x => x.StructureType != null && !string.IsNullOrEmpty(x.StructureType.IngameUnitName))) " is 126.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("You are attacking the {0} planet {1} and have {2:N1} of the {3:N1} influence required to conquer this planet.\n\n"' " is 132.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you win with your Command Center intact you will gain {0:N1} influence ({1:N1} base + {2:N1} from dropships - {3:N1} from defense). " + " is 155.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you are losing' try to kill enemy Command Center as destroying it gains you {0:N1} influence in defeat." + " is 126.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                    sb.AppendFormat("Destroy the planetary infrastructure as any structures destroyed here will be disabled on the strategic map." + " is 128.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you lose' {4} will gain {0:N1} influence ({1:N1} base + {2:N1} from dropships - {3:N1} from defense)." + " is 124.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                    sb.AppendFormat("Protect your planetary infrastructure as any structures destroyed here will be disabled on the strategic map." + " is 129.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                                    " Do not destroy your own in anticipation of a loss as all structures are automatically disabled on newly conquered planets."); " is 127.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,AcceptChallenge,The length of the statement  "                        $"Battle for planet {Challenge.Name} starts on zk://@join_player:{Challenge.Attackers.FirstOrDefault()}  Roster: {string.Join("'"' Challenge.Attackers)} vs {string.Join("'"' Challenge.Defenders)}"; " is 197.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,JoinPlanet,The length of the statement  "                    else if ((Challenge != null) && GetDefendingFactions(Challenge).Any(y=>y.FactionID == faction.FactionID)) await JoinPlanetDefense(planetId' name); " is 146.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,GetAttackDeadline,The length of the statement  "            if (missedDefenseFactionID == AttackingFaction.FactionID) extra = Math.Min(missedDefenseCount * GlobalConst.PlanetWarsMinutesToAttack' 60); " is 139.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,GetDefendingFactions,The length of the statement  "                    foreach (var of in db.Factions.Where(x=>!x.IsDeleted && x.FactionID != target.OwnerFactionID && x.FactionID != AttackingFaction.FactionID)) " is 139.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,GetDefendingFactions,The length of the statement  "                        if (of.GaveTreatyRight(planet' x=>x.EffectBalanceSameSide == true)) ret.Add(factions.First(x=>x.FactionID == of.FactionID)); " is 124.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,InternalAddOption,The length of the statement  "                StructureImages = planet.PlanetStructures.Select(x => x.IsActive ? x.StructureType.MapIcon : x.StructureType.DisabledMapIcon).ToList() " is 134.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,JoinPlanetAttack,The length of the statement  "                            foreach (var aop in AttackOptions.Where(x => x.PlanetID != targetPlanetId)) aop.Attackers.RemoveAll(x => x == userName); " is 120.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,TimerOnElapsed,The length of the statement  "                if (MiscVar.PlanetWarsNextModeTime != null && MiscVar.PlanetWarsNextModeTime < DateTime.UtcNow && MiscVar.PlanetWarsNextMode != null) " is 133.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,TimerOnElapsed,The length of the statement  "                        db.Events.Add(server.PlanetWarsEventCreator.CreateEvent("PlanetWars changed status to {0}"' MiscVar.PlanetWarsMode.Description())); " is 131.
Complex Conditional,ZkLobbyServer,CmdEngine,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdEngine.cs,Arm,The conditional expression  "(battle.Mode != AutohostMode.None || !battle.IsPassworded) && engine != battle.server.Engine && !battle.IsAutohost"  is complex.
Complex Conditional,ZkLobbyServer,CmdForceGame,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdForceGame.cs,Arm,The conditional expression  "(battle.Mode != AutohostMode.None || !battle.IsPassworded) && arguments != "zk:stable" && !battle.IsAutohost"  is complex.
Complex Conditional,ZkLobbyServer,CmdKick,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdKick.cs,Arm,The conditional expression  "e != null && battle.spring.IsRunning && !IsAdmin(battle' e.User) && battle.spring.LobbyStartContext?.Players.Any(x => x.Name == e.User && !x.IsSpectator) == false"  is complex.
Complex Conditional,ZkLobbyServer,CmdGame,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdGame.cs,Arm,The conditional expression  "(battle.Mode != AutohostMode.None || !battle.IsPassworded) && arguments != "zk:stable" && !battle.IsAutohost"  is complex.
Complex Conditional,ZkLobbyServer,CmdPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPoll.cs,Arm,The conditional expression  "commandToRun.GetRunPermissions(battle' e.User' out reason) >= RunPermission.Vote && commandToRun.Access != AccessType.NoCheck && commandToRun.Access != AccessType.Admin && !(commandToRun.Access == AccessType.NotIngameNotAutohost && battle.IsAutohost)"  is complex.
Complex Conditional,ZkLobbyServer,CmdResign,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,GetRunPermissions,The conditional expression  "entry != null && !entry.IsSpectator && (alliance == null || entry.AllyID == alliance)"  is complex.
Complex Conditional,ZkLobbyServer,CmdRing,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,Arm,The conditional expression  "(p.SyncStatus != SyncStatuses.Synced || p.IsSpectator) || (battle.spring.IsRunning && ingameEntry?.IsSpectator == false && ingameEntry?.IsIngameReady == false)"  is complex.
Complex Conditional,ZkLobbyServer,BattleCommand,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\BattleCommand.cs,GetRunPermissions,The conditional expression  "(Access == AccessType.NotIngameNotAutohost || Access == AccessType.IngameNotAutohost) && battle.IsAutohost && !hasAdminRights"  is complex.
Complex Conditional,ZkLobbyServer,ClientConnection,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The conditional expression  "s.LobbyStartContext.Players.Any(x => !x.IsSpectator && x.Name == Name) && !s.Context.ActualPlayers.Any(x=>x.Name == Name && x.LoseTime != null)"  is complex.
Complex Conditional,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The conditional expression  "data["netname"].ToLower().Contains(company) || data["org-name"].ToLower().Contains(company) ||                              data["descr"].ToLower().Contains(company) || data["role"].ToLower().Contains(company) ||                              data["remarks"].ToLower().Contains(company)"  is complex.
Complex Conditional,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The conditional expression  "((say.Place != SayPlace.Battle) && (say.Place != SayPlace.BattlePrivate)) || (MyBattle == null) ||                          (MyBattle.FounderName != Name)"  is complex.
Complex Conditional,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The conditional expression  "server.Battles.Values.Any(x => x.IsInGame && DateTime.UtcNow.Subtract(x.RunningSince ?? DateTime.UtcNow).TotalMinutes < DynamicConfig.Instance.MmMinimumMinutesBetweenGames && x.spring.LobbyStartContext.Players.Count(p => !p.IsSpectator) > 1 && x.spring.LobbyStartContext.Players.Any(p => !p.IsSpectator && p.Name == user.Name))"  is complex.
Complex Conditional,ZkLobbyServer,PlayerEntry,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.PlayerEntry.cs,GenerateWantedBattles,The conditional expression  "Party == null || (qt.Mode == AutohostMode.GameChickens && Party.UserNames.Count<=i) || Party.UserNames.Count == i / 2"  is complex.
Complex Conditional,ZkLobbyServer,PartyManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessInviteToParty,The conditional expression  "myParty == null && usr.MyBattle == null && target.MyBattle != null && !target.MyBattle.IsPassworded"  is complex.
Complex Conditional,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The conditional expression  "(say.Place == SayPlace.Battle) && !say.IsEmote && (user?.User.BanMute != true) && (user?.User.BanSpecChat != true) && say.AllowRelay"  is complex.
Complex Conditional,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,OnDedicatedExited,The conditional expression  "IsAutohost || (!Users.ContainsKey(FounderName) || Users[FounderName].LobbyUser?.IsAway == true) && Mode != AutohostMode.None && Mode != AutohostMode.Planetwars && !IsPassworded"  is complex.
Complex Conditional,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,spring_PlayerSaid,The conditional expression  "!server.ConnectedUsers.TryGetValue(e.Username' out user) || user.User.BanMute || (user.User.BanSpecChat && !isPlayer)"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The conditional expression  "mode == BalanceMode.ClanWise && (bestTeams == null || GetTeamsDifference(bestTeams) > MaxCbalanceDifference || sizesWrong)"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The conditional expression  "result.LobbyStartContext.Mode != AutohostMode.Planetwars || sb.PlayerCount < 2 || sb.Duration < GlobalConst.MinDurationForPlanetwars || sb.Duration > GlobalConst.MaxDurationForPlanetwars"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The conditional expression  "awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze")"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The conditional expression  "awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin")"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The conditional expression  "!allied && user.Faction != null && (user.Faction == attacker || user.Faction == defender)"  is complex.
Empty Catch Block,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,LoginChecker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,pollTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerRunner,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Stop,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerRunner,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Stop,The method has an empty catch block.
Magic Number,ZkLobbyServer,CmdListGames,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdListGames.cs,Arm,The following statement contains a magic number: games = MapPicker.FindResources(ResourceType.Mod' arguments).Take(200).ToList();
Magic Number,ZkLobbyServer,CmdListMaps,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdListMaps.cs,Arm,The following statement contains a magic number: maps = MapPicker.FindResources(ResourceType.Map' arguments' battle.MinimalMapSupportLevel).Take(200).ToList();
Magic Number,ZkLobbyServer,CmdPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPoll.cs,Arm,The following statement contains a magic number: var parts = arguments.Split(new[] { ' ' }' 2);
Magic Number,ZkLobbyServer,CmdPredict,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The following statement contains a magic number: teams.Count < 2
Magic Number,ZkLobbyServer,CmdPredict,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The following statement contains a magic number: await battle.SayBattle( $"Team {teams[i].OrderByDescending(x => x.GetRating(cat).Elo).Select(x => x.Name).Aggregate((a' y) => a + "' " + y)} has a {Math.Round(1000 * chances[i]) / 10}% chance to win");
Magic Number,ZkLobbyServer,CmdPredict,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The following statement contains a magic number: await battle.SayBattle( $"Team {teams[i].OrderByDescending(x => x.GetRating(cat).Elo).Select(x => x.Name).Aggregate((a' y) => a + "' " + y)} has a {Math.Round(1000 * chances[i]) / 10}% chance to win");
Magic Number,ZkLobbyServer,CmdSetOptions,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,The following statement contains a magic number: var parts = pair.Split(new[] { '=' }' 2);
Magic Number,ZkLobbyServer,CmdSetOptions,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,The following statement contains a magic number: parts.Length != 2
Magic Number,ZkLobbyServer,CmdStart,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdStart.cs,ExecuteArmed,The following statement contains a magic number: battle.BlockPolls(10);
Magic Number,ZkLobbyServer,CmdStart,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdStart.cs,ExecuteArmed,The following statement contains a magic number: startTimer = new Timer(10000);
Magic Number,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The following statement contains a magic number: winCount = battle.Users.Values.Count(x => EligiblitySelector(x.Name) == null) / 2 + 1;
Magic Number,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,PublishResult,The following statement contains a magic number: battle.Mode == PlasmaShared.AutohostMode.Teams && battle.Users.Values.Count(x => !x.IsSpectator) > 3
Magic Number,ZkLobbyServer,CommandPoll,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,PublishResult,The following statement contains a magic number: battle.Mode == PlasmaShared.AutohostMode.GameFFA && battle.Users.Values.Count(x => !x.IsSpectator) >= 3
Magic Number,ZkLobbyServer,BattleListUpdater,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\BattleListUpdater.cs,BattleListUpdater,The following statement contains a magic number: timer = new Timer(UpdateIntervalSeconds*1000);
Magic Number,ZkLobbyServer,ChannelManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: RatingSystems.GetRatingSystem(RatingCategory.Casual).GetPlayerRating(lobbyID).Rank <= 20
Magic Number,ZkLobbyServer,ChannelManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: RatingSystems.GetRatingSystem(RatingCategory.MatchMaking).GetPlayerRating(lobbyID).Rank <= 20
Magic Number,ZkLobbyServer,ChatRelay,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,ChatRelay,The following statement contains a magic number: timer = new Timer(TimerCallback' this' 1000' 2000);
Magic Number,ZkLobbyServer,ChatRelay,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,ChatRelay,The following statement contains a magic number: timer = new Timer(TimerCallback' this' 1000' 2000);
Magic Number,ZkLobbyServer,ForumListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,CachePublicForumList,The following statement contains a magic number: cachedPublicForumList = new ForumList()                  {                      ForumItems = accessibleThreads.OrderByDescending(x => x.LastPost).Take(10).ToList().Select(x =>                          new ForumItem()                          {                              ThreadID = x.ForumThreadID'                              Time = x.LastPost ?? x.Created'                              Url = $"{GlobalConst.BaseSiteUrl}/Forum/Thread/{x.ForumThreadID}"'                              Header = x.Title'                              IsRead = false                          }).ToList()                  };
Magic Number,ZkLobbyServer,ForumListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,CachePrivateForumList,The following statement contains a magic number: var threads = (from t in accessibleThreads                      let read = t.ForumThreadLastReads.FirstOrDefault(x => x.AccountID == account.AccountID)                      orderby t.LastPost descending                      select new { Thread = t' Read = (read != null && read.LastRead >= t.LastPost) }).Take(10).ToList();
Magic Number,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: chatWait = DateTime.UtcNow.AddMilliseconds(-5 * GlobalConst.MinMillisecondsBetweenMessages);
Magic Number,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: DateTime.UtcNow.AddMilliseconds(-5 * GlobalConst.MinMillisecondsBetweenMessages) > chatWait
Magic Number,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: openBattle.Header.Title = openBattle.Header.Title.Truncate(200);
Magic Number,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: h.Title = h.Title.Truncate(200);
Magic Number,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: battle.Bots.Count < 50
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Coop"'                  Description = "Play together' against AI or chickens"'                  MinSize = 2'                  MaxSize = 5'                  MaxPartySize = 5'                  EloCutOffExponent = 0'                  Mode = AutohostMode.GameChickens'                  MapSelector = IsCoopMap'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Coop"'                  Description = "Play together' against AI or chickens"'                  MinSize = 2'                  MaxSize = 5'                  MaxPartySize = 5'                  EloCutOffExponent = 0'                  Mode = AutohostMode.GameChickens'                  MapSelector = IsCoopMap'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Coop"'                  Description = "Play together' against AI or chickens"'                  MinSize = 2'                  MaxSize = 5'                  MaxPartySize = 5'                  EloCutOffExponent = 0'                  Mode = AutohostMode.GameChickens'                  MapSelector = IsCoopMap'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "1v1"'                  Description = "1v1 with opponent of similar skill"'                  MinSize = 2'                  MaxSize = 2'                  EloCutOffExponent = 0.97'                  MaxPartySize = 1'                  Mode = AutohostMode.Game1v1'                  MapSelector = Is1v1Map'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "1v1"'                  Description = "1v1 with opponent of similar skill"'                  MinSize = 2'                  MaxSize = 2'                  EloCutOffExponent = 0.97'                  MaxPartySize = 1'                  Mode = AutohostMode.Game1v1'                  MapSelector = Is1v1Map'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "1v1"'                  Description = "1v1 with opponent of similar skill"'                  MinSize = 2'                  MaxSize = 2'                  EloCutOffExponent = 0.97'                  MaxPartySize = 1'                  Mode = AutohostMode.Game1v1'                  MapSelector = Is1v1Map'              });
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: timer = new Timer(TimerSeconds * 1000);
Magic Number,ZkLobbyServer,MatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AddOrUpdateUser,The following statement contains a magic number: wantedQueues = wantedQueues.Where(x => x.MaxSize / 2 >= party.UserNames.Count).ToList();
Magic Number,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,ProposedBattle,The following statement contains a magic number: widthMultiplier = Math.Max(1.0' 1.0 + (Size - 4) * 0.1);
Magic Number,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,ProposedBattle,The following statement contains a magic number: widthMultiplier = Math.Max(1.0' 1.0 + (Size - 4) * 0.1);
Magic Number,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,VerifyBalance,The following statement contains a magic number: minimumWinChance <= 0.01
Magic Number,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: return Math.Round(1500.0 + Math.Pow(input - 1500.0' eloCutOffExponent));
Magic Number,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: return Math.Round(1500.0 + Math.Pow(input - 1500.0' eloCutOffExponent));
Magic Number,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: input >= 1500
Magic Number,ZkLobbyServer,ProposedBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,VerifyPartySizeFits,The following statement contains a magic number: var maxTeamSize = Size/2;
Magic Number,ZkLobbyServer,PlanetWarsServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\PlanetWarsServerBattle.cs,PlanetWarsServerBattle,The following statement contains a magic number: MaxPlayers = option.TeamSize*2;
Magic Number,ZkLobbyServer,NewsListManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\NewsListManager.cs,CacheNewsList,The following statement contains a magic number: cachedNewsList = new NewsList()                  {                      NewsItems = db.LobbyNews.OrderBy(x => x.PinnedOrder ?? int.MaxValue).ThenByDescending(x => x.Created).Take(10).ToList().Select(x => new NewsItem                      {                          Time = x.EventTime'                          Header = x.Title'                          Text = x.Text'                          Image = $"{GlobalConst.BaseSiteUrl}{x.ImageRelativeUrl}"'                          Url = x.Url                      }).ToList()                  };
Magic Number,ZkLobbyServer,PartyManager,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,RemoveFromParty,The following statement contains a magic number: party.UserNames.Count == 2 && names.Any(x => party.UserNames.Contains(x))
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ServerBattle,The following statement contains a magic number: pollTimer = new Timer(PollTimeout * 1000);
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ServerBattle,The following statement contains a magic number: discussionTimer = new Timer(DiscussionSeconds * 1000);
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,IsKicked,The following statement contains a magic number: kickedPlayers.RemoveAll(x => x.TimeOfKicked <= DateTime.UtcNow.AddMinutes(-5));
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,CheckSayForCommand,The following statement contains a magic number: var parts = say.Text.Substring(1).Split(new[] { ' ' }' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartVote,The following statement contains a magic number: pollTimer.Interval = timeout * 1000;
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,OnDedicatedExited,The following statement contains a magic number: DiscussionSeconds = MatchMaker.TimerSeconds + 2;
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,CreateMultiMapPoll,The following statement contains a magic number: map = MapPicker.GetRecommendedMap(GetContext()' MinimalMapSupportLevel' MapRatings.GetMapRanking(Mode).TakeWhile(x => x.Percentile < 0.2).Select(x => x.Map).Where(x => !pickedMaps.Contains(x.ResourceID)).AsQueryable());
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,CreateMultiMapPoll,The following statement contains a magic number: i < NumberOfMapChoices / 2
Magic Number,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,EnsureEngineIsPresent,The following statement contains a magic number: var task = down?.WaitHandle?.AsTask(TimeSpan.FromMinutes(3));
Magic Number,ZkLobbyServer,ServerRunner,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Run,The following statement contains a magic number: listener.Bind(120)
Magic Number,ZkLobbyServer,ServerTextCommands,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following statement contains a magic number: var parts = say.Text.Split(new[] {' '}' 2);
Magic Number,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,The following statement contains a magic number: var myEffectiveElo = uWatcher?.User?.EffectiveElo ?? 1200;
Magic Number,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,The following statement contains a magic number: var channelUsersBySkill = chan.Users.Keys.Select(x => ConnectedUsers.Get(x)).Where(x => x != null)                                  .OrderBy(x => Math.Abs((x.User?.EffectiveMmElo??1200) - myEffectiveElo)).Select(x => x.Name).Take(GlobalConst.DelugeChannelDisplayUsers);
Magic Number,ZkLobbyServer,ZkServerTraceListener,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,ZkServerTraceListener,The following statement contains a magic number: var oldEntry = DateTime.UtcNow.AddDays(-14);
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.GameChickens:                          if (!context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.Teams;                          break;                        case AutohostMode.GameFFA:                          allyteams = humanPlayers;                          break;                        case AutohostMode.None:                          if (allyteams > 2) mode = AutohostMode.GameFFA;                          if (context.Players.Where(x => !x.IsSpectator).Select(p => p.AllyID).Distinct().Count() == 1 && botPlayers > 0 && context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.GameChickens;                          if (humanPlayers == 2 && botPlayers == 0 && allyteams == 2) mode = AutohostMode.Game1v1;                          break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.GameChickens:                          if (!context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.Teams;                          break;                        case AutohostMode.GameFFA:                          allyteams = humanPlayers;                          break;                        case AutohostMode.None:                          if (allyteams > 2) mode = AutohostMode.GameFFA;                          if (context.Players.Where(x => !x.IsSpectator).Select(p => p.AllyID).Distinct().Count() == 1 && botPlayers > 0 && context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.GameChickens;                          if (humanPlayers == 2 && botPlayers == 0 && allyteams == 2) mode = AutohostMode.Game1v1;                          break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.GameChickens:                          if (!context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.Teams;                          break;                        case AutohostMode.GameFFA:                          allyteams = humanPlayers;                          break;                        case AutohostMode.None:                          if (allyteams > 2) mode = AutohostMode.GameFFA;                          if (context.Players.Where(x => !x.IsSpectator).Select(p => p.AllyID).Distinct().Count() == 1 && botPlayers > 0 && context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.GameChickens;                          if (humanPlayers == 2 && botPlayers == 0 && allyteams == 2) mode = AutohostMode.Game1v1;                          break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,GetTeamsDifference,The following statement contains a magic number: return (t[0].EloAvg - t[1].EloAvg) * (t[0].EloAvg - t[1].EloAvg) + 0.01 * (t[0].EloStdev - t[1].EloStdev) * (t[0].EloStdev - t[1].EloStdev);
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,GetTeamsDifference,The following statement contains a magic number: t.Count == 2
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,GetTeamsDifference,The following statement contains a magic number: return (maxElo - minElo) * (maxElo - minElo) + 0.01 * (maxVar - minVar) * (maxVar - minVar);
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The following statement contains a magic number: text += string.Format("={0}%)"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ((team.EloAvg - bestTeams.Where(x => !x.Equals(team)).Select(x => x.EloAvg).Average())) / 400.0))) * 100.0 * 2 / bestTeams.Count));
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The following statement contains a magic number: text += string.Format("={0}%)"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ((team.EloAvg - bestTeams.Where(x => !x.Equals(team)).Select(x => x.EloAvg).Average())) / 400.0))) * 100.0 * 2 / bestTeams.Count));
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The following statement contains a magic number: text += string.Format("={0}%)"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ((team.EloAvg - bestTeams.Where(x => !x.Equals(team)).Select(x => x.EloAvg).Average())) / 400.0))) * 100.0 * 2 / bestTeams.Count));
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The following statement contains a magic number: text += string.Format("={0}%)"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ((team.EloAvg - bestTeams.Where(x => !x.Equals(team)).Select(x => x.EloAvg).Average())) / 400.0))) * 100.0 * 2 / bestTeams.Count));
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart)                              {                                  if (allyCount == null || allyCount == 2)                                  {                                      res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                                  }                                  else                                  {                                      res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                                  }                              }                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart)                              {                                  if (allyCount == null || allyCount == 2)                                  {                                      res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                                  }                                  else                                  {                                      res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                                  }                              }                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart)                              {                                  if (allyCount == null || allyCount == 2)                                  {                                      res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                                  }                                  else                                  {                                      res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                                  }                              }                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart)                              {                                  if (allyCount == null || allyCount == 2)                                  {                                      res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                                  }                                  else                                  {                                      res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                                  }                              }                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart)                              {                                  if (allyCount == null || allyCount == 2)                                  {                                      res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                                  }                                  else                                  {                                      res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                                  }                              }                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,RecursiveBalance,The following statement contains a magic number: iterationsChecked > 2000000
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The following statement contains a magic number: result.LobbyStartContext.Mode != AutohostMode.Planetwars || sb.PlayerCount < 2 || sb.Duration < GlobalConst.MinDurationForPlanetwars || sb.Duration > GlobalConst.MaxDurationForPlanetwars
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: string[] partsSpace = line.Substring(6).Split(new[] { ' ' }' 3);
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: string[] partsSpace = line.Substring(6).Split(new[] { ' ' }' 3);
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: string awardText = partsSpace[2];
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: string[] partsSpace = line.Substring(8).Split(new[] { ' ' }' 2);
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: string[] partsSpace = line.Substring(8).Split(new[] { ' ' }' 2);
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: players.ForEach(x => x.Elo += 1e6);
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: players.Count % 2 != 0
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: int maxTeamSize = players.Count / 2;
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: 2 > partyGroups.Count() || partyGroups.Any(x => x.Count() > maxTeamSize)
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: 2 > clanGroups.Count() || clanGroups.Any(x => x.Count() > maxTeamSize)
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: maxTeamSize = playerGroups.Count / 2;
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: b >= 0 && firstList[a].Sum + secondList[b].Sum > sum / 2
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: bestDiff = sum - 2 * (firstList[a].Sum + secondList[b].Sum);
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: b >= 0 && sum - 2 * (firstList[a].Sum + secondList[b].Sum) < bestDiff
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: DualBalanceResult ret = new DualBalanceResult()              {                  EloDifference = 2 * bestDiff / players.Count'                  Players = players.Where(p => p.Account > 0).Select(x => new PlayerTeam()                  {                      LobbyID = x.Account                  }).ToList()              };
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: var text = string.Format("( ( 1={0}%) : 2={1}%))"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' -ret.EloDifference / 400.0))) * 100.0)' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0))) * 100.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: var text = string.Format("( ( 1={0}%) : 2={1}%))"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' -ret.EloDifference / 400.0))) * 100.0)' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0))) * 100.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: var text = string.Format("( ( 1={0}%) : 2={1}%))"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' -ret.EloDifference / 400.0))) * 100.0)' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0))) * 100.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: var text = string.Format("( ( 1={0}%) : 2={1}%))"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' -ret.EloDifference / 400.0))) * 100.0)' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0))) * 100.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: var text = string.Format("( ( 1={0}%) : 2={1}%))"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' -ret.EloDifference / 400.0))) * 100.0)' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0))) * 100.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: var text = string.Format("( ( 1={0}%) : 2={1}%))"' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' -ret.EloDifference / 400.0))) * 100.0)' (int)Math.Round((1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0))) * 100.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: ret.LowestWinChance = 1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: ret.LowestWinChance = 1.0 / (1.0 + Math.Pow(10' ret.EloDifference / 400.0));
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,Balance,The following statement contains a magic number: ret.Message = string.Format(                  "{0} players balanced {2} to {1} teams {3}. {4} combinations checked' spent {5}ms of CPU time"'                  unmodifiedPlayers.Count'                  2'                  mode'                  text'                  (1UL << maxTeamSize)'                  sw.ElapsedMilliseconds);
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,BalanceInterface,The following statement contains a magic number: b.Players.Where(y => !y.IsSpectator).Count() > 38
Magic Number,ZeroKWeb.SpringieInterface,PartitionBalance,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PartitionBalance.cs,BalanceInterface,The following statement contains a magic number: teamCount != 2
Magic Number,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The following statement contains a magic number: userParams["pwRank"] = (user.AccountRolesByAccountID.Where(                                              x =>                                                  !x.RoleType.IsClanOnly &&                                                  (x.RoleType.RestrictFactionID == null || x.RoleType.RestrictFactionID == user.FactionID)).OrderBy(x => x.RoleType.DisplayOrder).Select(x => (int?)x.RoleType.DisplayOrder).FirstOrDefault() ?? 999).ToString();
Magic Number,ZeroKWeb.SpringieInterface,StartSetup,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The following statement contains a magic number: commProfile["name"] = LuaTable.SanitizeString(c.Name.Substring(0' Math.Min(25' c.Name.Length))) ?? "dummy";
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,PlanetWarsMatchMaker,The following statement contains a magic number: timer = new Timer(1045);
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,GetAttackDeadline,The following statement contains a magic number: extra = Math.Min(missedDefenseCount * GlobalConst.PlanetWarsMinutesToAttack' 60);
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,ResetAttackOptions,The following statement contains a magic number: var cnt = 6;
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,ResetAttackOptions,The following statement contains a magic number: var planet = planets.FirstOrDefault(x => (x.TeamSize == 2) && x.CanMatchMakerPlay(attacker));
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,ResetAttackOptions,The following statement contains a magic number: !AttackOptions.Any(y => y.TeamSize == 2)
Magic Number,Springie,Utils,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\utils\Utils.cs,ToUnix,The following statement contains a magic number: return (long)(t.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0)).TotalSeconds;
Missing Default,ZkLobbyServer,ConnectedUser,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following switch statement is missing a default case: switch (say.Place)              {                  case SayPlace.Channel:                      if (server.Channels.Get(say.Target)?.Users?.ContainsKey(Name) != true) return;                      break;                    case SayPlace.Battle:                      if (MyBattle?.Users?.Keys.Contains(Name) != true) return;                      break;                    case SayPlace.BattlePrivate:                      return;                      break;                    case SayPlace.MessageBox:                      if (!User.IsAdmin) return;                      break;                }
Missing Default,ZkLobbyServer,ServerBattle,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following switch statement is missing a default case: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Missing Default,ZkLobbyServer,ServerTextCommands,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following switch statement is missing a default case: switch (command)                          {                              case "!announce":                                  server.GhostSay(new Say() { Text = argument' User = say.User' Place = SayPlace.MessageBox' Ring = true' });                              break;                                case "!topic":                                  if (say.Place == SayPlace.Channel && !string.IsNullOrEmpty(say.Target))                                  {                                      server.SetTopic(say.Target' argument' say.User);                                  }                              break;                          }
Missing Default,ZkLobbyServer,ZkLobbyServer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostSay,The following switch statement is missing a default case: switch (say.Place)              {                  case SayPlace.Channel:                      Channel channel;                      if (Channels.TryGetValue(say.Target' out channel)) await SyncAndSay(channel.Users.Keys' say);                      OfflineMessageHandler.StoreChatHistoryAsync(say);                      break;                  case SayPlace.User:                      ConnectedUser connectedUser;                      if (ConnectedUsers.TryGetValue(say.Target' out connectedUser)) await SyncAndSay(new List<string>() {say.Target}' say);                      else OfflineMessageHandler.StoreChatHistoryAsync(say);                      if (say.User != GlobalConst.NightwatchName && ConnectedUsers.TryGetValue(say.User' out connectedUser)) await connectedUser.SendCommand(say);                      break;                  case SayPlace.Battle:                      ServerBattle battle;                      if (Battles.TryGetValue(battleID ?? 0' out battle))                      {                          await SyncAndSay(battle.Users.Keys' say);                          await battle.ProcessBattleSay(say);                          OfflineMessageHandler.StoreChatHistoryAsync(say);                      }                      break;                    // admin AH sent only:                  case SayPlace.MessageBox:                      await Broadcast(ConnectedUsers.Values' say);                      break;                  case SayPlace.BattlePrivate:                      ConnectedUser targetUser;                      if (ConnectedUsers.TryGetValue(say.Target' out targetUser)) await targetUser.SendCommand(say);                      break;              }
Missing Default,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following switch statement is missing a default case: switch (mode)                  {                      case AutohostMode.GameChickens:                          if (!context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.Teams;                          break;                        case AutohostMode.GameFFA:                          allyteams = humanPlayers;                          break;                        case AutohostMode.None:                          if (allyteams > 2) mode = AutohostMode.GameFFA;                          if (context.Players.Where(x => !x.IsSpectator).Select(p => p.AllyID).Distinct().Count() == 1 && botPlayers > 0 && context.Bots.Any(b => b.IsChicken)) mode = AutohostMode.GameChickens;                          if (humanPlayers == 2 && botPlayers == 0 && allyteams == 2) mode = AutohostMode.Game1v1;                          break;                  }
Missing Default,ZeroKWeb.SpringieInterface,MapPicker,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following switch statement is missing a default case: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                            ret = ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (humanPlayers > 11) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                          else if (humanPlayers > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                          x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                          else if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          if (!UseNormalMapForChickens)                          {                              ret =                              ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && x.MapIsChickens == true);                          }                          if (!ret.Any() || UseNormalMapForChickens)                          {                              ret = ret.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapWaterLevel == 1));                              if (humanPlayers > 5) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);                              else if (humanPlayers > 4)                                  ret =                                      ret.Where(                                          x =>                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 &&                                              x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);                              else if (humanPlayers > 2) ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);                              else ret = ret.Where(x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);                          }                            list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              ret.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == allyteams)                                  .ToList();                          if (!list.Any())                              list =                                  ret.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true &&                                          (humanPlayers % x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = ret.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList();                            break;                  }
Missing Default,ZeroKWeb.SpringieInterface,Balancer,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following switch statement is missing a default case: switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart)                              {                                  if (allyCount == null || allyCount == 2)                                  {                                      res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                                  }                                  else                                  {                                      res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                                  }                              }                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = PartitionBalance.BalanceInterface(2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }
