Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The method has 72 lines of code.
Long Method,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The method has 130 lines of code.
Long Method,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The method has 73 lines of code.
Complex Method,ZkLobbyServer,CmdSetOptions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,ChatRelay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,OnAnySourceMessage,Cyclomatic complexity of the method is 11
Complex Method,ZkLobbyServer,ClientConnection,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,Cyclomatic complexity of the method is 13
Complex Method,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,Cyclomatic complexity of the method is 7
Complex Method,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,Cyclomatic complexity of the method is 15
Complex Method,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,Cyclomatic complexity of the method is 14
Complex Method,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,RemoveConnection,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,AreYouReadyResponse,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,PartyManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessPartyInviteResponse,Cyclomatic complexity of the method is 11
Complex Method,ZkLobbyServer,PartyManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,AddFriendsBy,Cyclomatic complexity of the method is 7
Complex Method,ZkLobbyServer,PartyManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,AddToParty,Cyclomatic complexity of the method is 7
Complex Method,ZkLobbyServer,ServerTextCommands,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,Cyclomatic complexity of the method is 10
Complex Method,ZkLobbyServer,ZkLobbyServer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostSay,Cyclomatic complexity of the method is 27
Complex Method,ZkLobbyServer,ZkLobbyServer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,Shutdown,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,ZkServerTraceListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,ProcessEvent,Cyclomatic complexity of the method is 7
Complex Method,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,Cyclomatic complexity of the method is 31
Complex Method,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,Cyclomatic complexity of the method is 28
Complex Method,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,Cyclomatic complexity of the method is 26
Complex Method,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessElos,Cyclomatic complexity of the method is 7
Complex Method,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,Cyclomatic complexity of the method is 7
Complex Method,ZeroKWeb.SpringieInterface,PlayerJoinHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlayerJoinHandler.cs,AutohostPlayerJoined,Cyclomatic complexity of the method is 9
Long Parameter List,ZkLobbyServer,ChatRelayMessage,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\IChatRelaySource.cs,ChatRelayMessage,The method has 5 parameters.
Long Parameter List,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,BlockLogin,The method has 4 parameters.
Long Parameter List,ZkLobbyServer,OfflineMessageHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\OfflineMessageHandler.cs,SendMissedMessagesAsync,The method has 5 parameters.
Long Parameter List,ZkLobbyServer,ZkLobbyServer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostChanSay,The method has 4 parameters.
Long Parameter List,ZkLobbyServer,ZkServerTraceListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,TraceEvent,The method has 5 parameters.
Long Parameter List,ZkLobbyServer,ZkServerTraceListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,TraceEvent,The method has 6 parameters.
Long Parameter List,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,BalanceTeams,The method has 4 parameters.
Long Parameter List,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The method has 4 parameters.
Long Parameter List,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The method has 4 parameters.
Long Parameter List,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,SpecPlayerOnCondition,The method has 4 parameters.
Long Parameter List,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessElos,The method has 4 parameters.
Long Parameter List,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The method has 5 parameters.
Long Statement,ZkLobbyServer,CmdMap,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdMap.cs,Arm,The length of the statement  "	map = string.IsNullOrEmpty (arguments) ? MapPicker.GetRecommendedMap (battle.GetContext ()) : MapPicker.FindResources (ResourceType.Map' arguments).FirstOrDefault (); " is 166.
Long Statement,ZkLobbyServer,CmdPoll,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPoll.cs,Arm,The length of the statement  "	if (commandToRun.GetRunPermissions (battle' e.User) >= RunPermission.Vote && commandToRun.Access != AccessType.NoCheck) { " is 121.
Long Statement,ZkLobbyServer,CmdPredict,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The length of the statement  "			grouping = b.spring.LobbyStartContext.Players.Where (u => !u.IsSpectator).GroupBy (u => u.AllyID).ToDictionary (x => x.Key' x => x.Average (y => RatingSystems.DisableRatingSystems ? Account.AccountByName (db' y.Name).BestEffectiveElo : Account.AccountByName (db' y.Name).GetBestRating ().Elo)); " is 294.
Long Statement,ZkLobbyServer,CmdPredict,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The length of the statement  "			grouping = b.Users.Values.Where (u => !u.IsSpectator).GroupBy (u => u.AllyNumber).ToDictionary (x => x.Key' x => x.Average (y => Math.Max (y.LobbyUser.EffectiveMmElo' y.LobbyUser.EffectiveElo))); " is 195.
Long Statement,ZkLobbyServer,CmdResign,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,Arm,The length of the statement  "	if (DateTime.UtcNow.Subtract (battle.spring.IngameStartTime ?? DateTime.UtcNow).TotalSeconds < GlobalConst.MinDurationForElo) { " is 127.
Long Statement,ZkLobbyServer,CmdRing,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,Arm,The length of the statement  "			if ((p.SyncStatus != SyncStatuses.Synced || p.IsSpectator) || (battle.spring.IsRunning && ingameEntry.IsSpectator == false && ingameEntry.IsIngameReady == false)) " is 162.
Long Statement,ZkLobbyServer,CommandPoll,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The length of the statement  "	winCount = battle.Users.Values.Count (x => command.GetRunPermissions (battle' x.Name) >= BattleCommand.RunPermission.Vote && !cmd.IsSpectator (battle' x.Name' x)) / 2 + 1; " is 171.
Long Statement,ZkLobbyServer,BattleListUpdater,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\BattleListUpdater.cs,TimerOnElapsed,The length of the statement  "		var counts = new HashSet<Tuple<int' int' int>> (server.Battles.Values.Where (x => x != null).Select (x => Tuple.Create (x.BattleID' x.NonSpectatorCount' x.SpectatorCount))); " is 173.
Long Statement,ZkLobbyServer,ChannelManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The length of the statement  "	if (server.TopPlayerProvider.GetTop50 ().Take (20).Any (x => x.AccountID == lobbyID) || server.TopPlayerProvider.GetTop50Casual ().Take (20).Any (x => x.AccountID == lobbyID) || topPlayersExceptions.Contains (lobbyID)) " is 218.
Long Statement,ZkLobbyServer,ChatRelay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,OnAnySourceMessage,The length of the statement  "			sb.Append (string.Join ("\n"' server.Battles.Values.Where (x => x != null).OrderByDescending (x => x.NonSpectatorCount).Select (x => ))); " is 137.
Long Statement,ZkLobbyServer,ClientConnection,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The length of the statement  "			if (s.LobbyStartContext.Players.Any (x => !x.IsSpectator && x.Name == Name) && !s.Context.ActualPlayers.Any (x => x.Name == Name && x.LoseTime != null)) { " is 154.
Long Statement,ZkLobbyServer,ClientConnection,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,ToString,The length of the statement  "	return string.Format ("[{0} {1}:{2} {3}]"' number' transport.RemoteEndpointAddress' transport.RemoteEndpointPort' Name); " is 120.
Long Statement,ZkLobbyServer,DiscordRelaySource,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\DiscordRelaySource.cs,DiscordOnMessageReceived,The length of the statement  "				OnChatRelayMessage.Invoke (this' new ChatRelayMessage (msg.Channel.Name' GetName (msg.User)' msg.Message.Text' source' false)); " is 127.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The length of the statement  "				accBySteamID = db.Accounts.Include (x => x.Clan).Include (x => x.Faction).FirstOrDefault (x => x.SteamID == info.steamid); " is 122.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "			if (info == null && !string.IsNullOrEmpty (register.PasswordHash) && existingByName.VerifyPassword (register.PasswordHash)) " is 123.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,UpdateUserFromAccount,The length of the statement  "	user.EffectiveMmElo = (int)Math.Round (RatingSystems.DisableRatingSystems ? acc.EffectiveMmElo : acc.GetRating (RatingCategory.MatchMaking).Elo); " is 145.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,UpdateUserFromAccount,The length of the statement  "	user.EffectiveElo = (int)Math.Round (RatingSystems.DisableRatingSystems ? acc.EffectiveElo : acc.GetRating (RatingCategory.Casual).Elo); " is 136.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,UpdateUserFromAccount,The length of the statement  "	user.RawMmElo = (int)Math.Round (RatingSystems.DisableRatingSystems ? acc.EloMm : acc.GetRating (RatingCategory.MatchMaking).Elo); " is 130.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "			Talk (string.Format ("User {0} {3} has IP {1} on dnsbl.tornevall.org ({2} result/s)"' acc.Name' ip' resolved.Length' string.Format ("{1}/Users/Detail/{0}"' acc.AccountID' GlobalConst.BaseSiteUrl))); " is 198.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "			//Trace.TraceInformation($"VPN check for USER {acc.Name}\nnetname: {data["netname"]}\norgname: {data["org-name"]}\ndescr: {data["descr"]}\nabuse-mailbox: {data["abuse-mailbox"]}"' false); " is 187.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "			if (blockedHosts.Any (x => data ["abuse-mailbox"].Contains (x)) || blockedHosts.Any (x => data ["notify"].Contains (x))) " is 120.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "				if (data ["netname"].ToLower ().Contains (company) || data ["org-name"].ToLower ().Contains (company) || data ["descr"].ToLower ().Contains (company) || data ["role"].ToLower ().Contains (company) || data ["remarks"].ToLower ().Contains (company)) " is 247.
Long Statement,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,IsLanIP,The length of the statement  "			if ((ifAddr.IPv4Mask != null) && (ifAddr.Address.AddressFamily == AddressFamily.InterNetwork) && CheckMask (ifAddr.Address' ifAddr.IPv4Mask' address)) " is 150.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "		var rels = db.AccountRelations.Where (x => (x.TargetAccountID == User.AccountID) || (x.OwnerAccountID == User.AccountID)).Select (x => new { " is 140.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "		FriendNames = new HashSet<string> (rels.Where (x => (x.Relation == Relation.Friend) && (x.OwnerAccountID == User.AccountID)).Select (x => x.Target)); " is 149.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "		FriendBy = new HashSet<string> (rels.Where (x => (x.Relation == Relation.Friend) && (x.OwnerAccountID != User.AccountID)).Select (x => x.Owner)); " is 145.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "		FriendEntries = new List<FriendEntry> (rels.Where (x => (x.Relation == Relation.Friend) && (x.OwnerAccountID == User.AccountID)).Select (x => new FriendEntry () { " is 162.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "		Ignores = new HashSet<string> (rels.Where (x => (x.Relation == Relation.Ignore) && (x.OwnerAccountID == User.AccountID)).Select (x => x.Target)); " is 145.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "		IgnoredBy = new HashSet<string> (rels.Where (x => (x.Relation == Relation.Ignore) && (x.OwnerAccountID != User.AccountID)).Select (x => x.Owner)); " is 146.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "	if (server.Channels.TryGetValue (chanKick.ChannelName' out channel) && channel.Users.TryGetValue (chanKick.UserName' out user)) { " is 129.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "		await client.Respond (string.Format ("You were kicked from channel {0} by {1} : {2}"' chanKick.ChannelName' Name' chanKick.Reason)); " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "	var visibleUsers = !channel.IsDeluge ? channel.Users.Keys.ToList () : channel.Users.Keys.Where (x => server.CanUserSee (Name' x)).ToList (); " is 140.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "	var canSeeMe = !channel.IsDeluge ? channel.Users.Keys.ToList () : channel.Users.Keys.Where (x => server.CanUserSee (x' Name)).ToList (); " is 136.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "	server.OfflineMessageHandler.SendMissedMessagesAsync (this' SayPlace.Channel' joinChannel.ChannelName' User.AccountID' channel.IsDeluge ? OfflineMessageHandler.DelugeMessageResendCount : OfflineMessageHandler.MessageResendCount); " is 229.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "		var users = !channel.IsDeluge ? channel.Users.Keys.ToList () : channel.Users.Keys.Where (x => server.CanUserSee (x' Name)).ToList (); " is 133.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "			if (((say.Place != SayPlace.Battle) && (say.Place != SayPlace.BattlePrivate)) || (MyBattle == null) || (MyBattle.FounderName != Name)) " is 134.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "			if ((status.IsSpectator == false) && (bat.Users [status.Name].IsSpectator == true) && (bat.Users.Values.Count (x => !x.IsSpectator) >= bat.MaxPlayers)) " is 151.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "				foreach (var chan in server.Channels.Values.Where (x => (x != null) && x.Users.ContainsKey (Name) && x.Users.ContainsKey (targetConnectedUser.Name))) " is 149.
Long Statement,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,RemoveConnection,The length of the statement  "		await server.Broadcast (server.ConnectedUsers.Values.Where (x => x != null && server.CanUserSee (x' this))' new UserDisconnected () { " is 133.
Long Statement,ZkLobbyServer,AutoClosedServerBatle,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\AutoClosedServerBatle.cs,OnDedicatedExited,The length of the statement  "		await Task.WhenAll (spring.Context.ActualPlayers.Where (x => x.Name != null).Select (x => server.ConnectedUsers.Get (x.Name)).Where (x => x != null).Select (x => x.Process (new JoinChannel () { " is 193.
Long Statement,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,BannedSeconds,The length of the statement  "	if (bannedPlayers.TryGetValue (name' out banEntry) && (DateTime.UtcNow.Subtract (banEntry.BannedTime).TotalSeconds < banEntry.BanSeconds)) " is 138.
Long Statement,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,CountIngamePeople,The length of the statement  "	foreach (var bat in server.Battles.Values.OfType<MatchMakerBattle> ().Where (x => (x != null) && x.IsMatchMakerBattle && x.IsInGame)) { " is 135.
Long Statement,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,TryToMakeBattle,The length of the statement  "	var playersByElo = otherPlayers.Where (x => x != player).OrderBy (x => Math.Abs (x.LobbyUser.EffectiveMmElo - player.LobbyUser.EffectiveMmElo)).ThenBy (x => x.JoinedTime).ToList (); " is 181.
Long Statement,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,UpdatePlayerStatus,The length of the statement  "		if ((invitationBattles.Any () != true) && (players.Count > 0) && (server.PartyManager.GetParty (name) == null))// nobody invited atm and some in queue " is 150.
Long Statement,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,UpdatePlayerStatus,The length of the statement  "			ret.InstantStartQueues = testBattles.Where (x => x.Players.Contains (testSelf)).Select (x => x.QueueType.Name).Distinct ().ToList (); " is 133.
Long Statement,ZkLobbyServer,OfflineMessageHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\OfflineMessageHandler.cs,SendMissedMessagesAsync,The length of the statement  "				foreach (var entry in db.LobbyChatHistories.Where (x => (x.Target == target) && (x.SayPlace == place) && (x.Time >= acc.LastLogout)).OrderByDescending (x => x.Time).Take (maxCount).OrderBy (x => x.Time)) " is 203.
Long Statement,ZkLobbyServer,OfflineMessageHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\OfflineMessageHandler.cs,SendMissedMessagesAsync,The length of the statement  "					db.LobbyChatHistories.DeleteAllOnSubmit (db.LobbyChatHistories.Where (x => (x.Target == target) && (x.SayPlace == SayPlace.User)).ToList ()); " is 141.
Long Statement,ZkLobbyServer,ServerBattle,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The length of the statement  "	if ((say.Place == SayPlace.Battle) && !say.IsEmote && (user.User.BanMute != true) && (user.User.BanSpecChat != true) && say.AllowRelay) " is 135.
Long Statement,ZkLobbyServer,SpringRelaySource,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringRelaySource.cs,OnSpringTasSaid,The length of the statement  "			OnChatRelayMessage.Invoke (this' new ChatRelayMessage (args.Channel' args.UserName' args.Text' SaySource.Spring' args.IsEmote)); " is 128.
Long Statement,ZkLobbyServer,SpringRelaySource,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringRelaySource.cs,SendMessage,The length of the statement  "				SpringTas.Say (TasClient.SayPlace.Channel' msg.Channel' string.Format ("<{0}> {1}"' msg.User' msg.Message)' msg.IsEmote); " is 121.
Long Statement,ZkLobbyServer,ZkLobbyServer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,The length of the statement  "				var channelUsersBySkill = chan.Users.Keys.Select (x => ConnectedUsers.Get (x)).Where (x => x != null).OrderByDescending (x => x.User.EffectiveMmElo).Select (x => x.Name).Take (GlobalConst.DelugeChannelDisplayUsers); " is 215.
Long Statement,ZkLobbyServer,TcpTransportServerListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The length of the statement  "			listener.Server.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (GlobalConst.TcpLingerStateEnabled' GlobalConst.TcpLingerStateSeconds)); " is 173.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "			var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true); " is 146.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "				ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24); " is 151.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList (); " is 150.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "			ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1)); " is 170.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "				ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24); " is 151.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList (); " is 155.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "				list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList (); " is 161.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "				list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList (); " is 124.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "			var clanGroups = accs.GroupBy (x => b.Players.First (p => p.Name == x.Name).PartyID ?? x.ClanID ?? x.AccountID).ToList (); " is 122.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "			fallback.Message += "\nWarning: STANDARD TEAM BALANCE USED' PlanetWars not possible with those teams' too many from one faction"; " is 129.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "		if (mode == BalanceMode.ClanWise && (bestTeams == null || GetTeamsDifference (bestTeams) > MaxCbalanceDifference || sizesWrong)) " is 128.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "			fallback.Message += "\nWarning: STANDARD TEAM BALANCE USED' PlanetWars not possible with those teams' too many from one faction"; " is 129.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "				fallback.Message += "\nWarning: STANDARD TEAM BALANCE USED' PlanetWars not possible with those teams' too many from one faction"; " is 129.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "			ret.Message = string.Format ("Failed to balance {0} - too many people from same clan or faction (in teams game you can try !random and !forcestart)"); " is 150.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "		ret.Message = string.Format ("{0} players balanced {2} to {1} teams {3}. {4} combinations checked' spent {5}ms of CPU time"' bestTeams.Sum (x => x.Count)' teamCount' mode' text' iterationsChecked' sw.ElapsedMilliseconds); " is 221.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "					res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context); " is 124.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "				res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context); " is 125.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "				if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") { " is 136.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "					//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended."; " is 122.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "				res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context); " is 148.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "				res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context); " is 147.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PlanetwarsBalance,The length of the statement  "			foreach (var b in planet.PlanetStructures.Select (x => x.StructureType).Where (x => !string.IsNullOrEmpty (x.EffectBots))) " is 122.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SubmitSpringBattleResult,The length of the statement  "		Dictionary<int' int> orgLevels = sb.SpringBattlePlayers.Select (x => x.Account).ToDictionary (x => x.AccountID' x => x.Level); " is 126.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SubmitSpringBattleResult,The length of the statement  "				Awards = sb.AccountBattleAwards.Where (x => x.AccountID == p.AccountID).Select (x => new BattleDebriefing.DebriefingAward () { " is 126.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessElos,The length of the statement  "	bool noElo = result.OutputExtras.Any (x => x.StartsWith ("noElo"' true' System.Globalization.CultureInfo.CurrentCulture) == true); " is 130.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The length of the statement  "	if (result.LobbyStartContext.Mode != AutohostMode.Planetwars || sb.PlayerCount < 2 || sb.Duration < GlobalConst.MinDurationForPlanetwars) " is 137.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The length of the statement  "	List<int> winnerTeams = sb.SpringBattlePlayers.Where (x => x.IsInVictoryTeam && !x.IsSpectator).Select (x => x.AllyNumber).Distinct ().ToList (); " is 145.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The length of the statement  "	PlanetWarsTurnHandler.EndTurn (result.LobbyStartContext.Map' result.OutputExtras' db' winNum' sb.SpringBattlePlayers.Where (x => !x.IsSpectator).Select (x => x.Account).ToList ()' text' sb' sb.SpringBattlePlayers.Where (x => !x.IsSpectator && x.AllyNumber == 0).Select (x => x.Account).ToList ()' server.PlanetWarsEventCreator); " is 328.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SaveSpringBattle,The length of the statement  "	var victoryAllyID = result.ActualPlayers.Where (x => x.IsVictoryTeam).Select (x => (int?)x.AllyNumber).FirstOrDefault () ?? -1; " is 127.
Long Statement,ZeroKWeb.SpringieInterface,PlayerJoinHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlayerJoinHandler.cs,AutohostPlayerJoined,The length of the statement  "			var planet = db.Galaxies.Single (x => x.IsDefault).Planets.SingleOrDefault (x => x.Resource.InternalName == context.Map); " is 121.
Long Statement,ZeroKWeb.SpringieInterface,PlayerJoinHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlayerJoinHandler.cs,AutohostPlayerJoined,The length of the statement  "				var facRoles = string.Join ("'"' account.AccountRolesByAccountID.Where (x => !x.RoleType.IsClanOnly).Select (x => x.RoleType.Name).ToList ()); " is 142.
Long Statement,ZeroKWeb.SpringieInterface,PlayerJoinHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlayerJoinHandler.cs,AutohostPlayerJoined,The length of the statement  "				var clanRoles = string.Join ("'"' account.AccountRolesByAccountID.Where (x => x.RoleType.IsClanOnly).Select (x => x.RoleType.Name).ToList ()); " is 142.
Long Statement,ZeroKWeb.SpringieInterface,PlayerJoinHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlayerJoinHandler.cs,AutohostPlayerJoined,The length of the statement  "				res.PublicMessage = string.Format ("Greetings {0} {1}{2}' welcome to {3} planet {4} {6}/PlanetWars/Planet/{5}"' account.Name' facRoles' clanRoles' owner' planet.Name' planet.PlanetID' GlobalConst.BaseSiteUrl); " is 209.
Complex Conditional,ZkLobbyServer,CmdResign,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,GetRunPermissions,The conditional expression  "entry != null && !entry.IsSpectator && (alliance == null || entry.AllyID == alliance)"  is complex.
Complex Conditional,ZkLobbyServer,CmdRing,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,Arm,The conditional expression  "(p.SyncStatus != SyncStatuses.Synced || p.IsSpectator) || (battle.spring.IsRunning && ingameEntry.IsSpectator == false && ingameEntry.IsIngameReady == false)"  is complex.
Complex Conditional,ZkLobbyServer,ClientConnection,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The conditional expression  "s.LobbyStartContext.Players.Any (x => !x.IsSpectator && x.Name == Name) && !s.Context.ActualPlayers.Any (x => x.Name == Name && x.LoseTime != null)"  is complex.
Complex Conditional,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The conditional expression  "data ["netname"].ToLower ().Contains (company) || data ["org-name"].ToLower ().Contains (company) || data ["descr"].ToLower ().Contains (company) || data ["role"].ToLower ().Contains (company) || data ["remarks"].ToLower ().Contains (company)"  is complex.
Complex Conditional,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The conditional expression  "((say.Place != SayPlace.Battle) && (say.Place != SayPlace.BattlePrivate)) || (MyBattle == null) || (MyBattle.FounderName != Name)"  is complex.
Complex Conditional,ZkLobbyServer,PartyManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessInviteToParty,The conditional expression  "myParty == null && usr.MyBattle == null && target.MyBattle != null && !target.MyBattle.IsPassworded"  is complex.
Complex Conditional,ZkLobbyServer,ServerBattle,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The conditional expression  "(say.Place == SayPlace.Battle) && !say.IsEmote && (user.User.BanMute != true) && (user.User.BanSpecChat != true) && say.AllowRelay"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The conditional expression  "mode == BalanceMode.ClanWise && (bestTeams == null || GetTeamsDifference (bestTeams) > MaxCbalanceDifference || sizesWrong)"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The conditional expression  "awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze")"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The conditional expression  "awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin")"  is complex.
Empty Catch Block,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,LoginChecker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerRunner,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Stop,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerRunner,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Stop,The method has an empty catch block.
Magic Number,ZkLobbyServer,CmdListGames,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdListGames.cs,Arm,The following statement contains a magic number: games = MapPicker.FindResources (ResourceType.Mod' arguments).Take (200).ToList ();  
Magic Number,ZkLobbyServer,CmdListMaps,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdListMaps.cs,Arm,The following statement contains a magic number: maps = MapPicker.FindResources (ResourceType.Map' arguments).Take (200).ToList ();  
Magic Number,ZkLobbyServer,CmdSetOptions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,The following statement contains a magic number: foreach (var pair in pairs) {  	var parts = pair.Split (new[] {  		'='  	}' 2);  	if (parts.Length != 2) {  		battle.Respond (e' "requires key=value format");  		return ret;  	}  	var key = parts [0].Trim ();  	var val = parts [1].Trim ();  	var found = false;  	var mod = battle.HostedModInfo;  	foreach (var o in mod.Options) {  		if (o.Key == key) {  			found = true;  			string res;  			if (o.GetPair (val' out res)) {  				ret [key] = val;  			} else  				battle.Respond (e' "Value " + val + " is not valid for this option");  			break;  		}  	}  	if (!found) {  		battle.Respond (e' "No option called " + key + " found");  		return ret;  	}  }  
Magic Number,ZkLobbyServer,CmdSetOptions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,The following statement contains a magic number: foreach (var pair in pairs) {  	var parts = pair.Split (new[] {  		'='  	}' 2);  	if (parts.Length != 2) {  		battle.Respond (e' "requires key=value format");  		return ret;  	}  	var key = parts [0].Trim ();  	var val = parts [1].Trim ();  	var found = false;  	var mod = battle.HostedModInfo;  	foreach (var o in mod.Options) {  		if (o.Key == key) {  			found = true;  			string res;  			if (o.GetPair (val' out res)) {  				ret [key] = val;  			} else  				battle.Respond (e' "Value " + val + " is not valid for this option");  			break;  		}  	}  	if (!found) {  		battle.Respond (e' "No option called " + key + " found");  		return ret;  	}  }  
Magic Number,ZkLobbyServer,CmdSetOptions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,The following statement contains a magic number: if (parts.Length != 2) {  	battle.Respond (e' "requires key=value format");  	return ret;  }  
Magic Number,ZkLobbyServer,CmdVote,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdVote.cs,ExecuteArmed,The following statement contains a magic number: await battle.RegisterVote (e' opt != 2);  
Magic Number,ZkLobbyServer,CommandPoll,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The following statement contains a magic number: winCount = battle.Users.Values.Count (x => command.GetRunPermissions (battle' x.Name) >= BattleCommand.RunPermission.Vote && !cmd.IsSpectator (battle' x.Name' x)) / 2 + 1;  
Magic Number,ZkLobbyServer,CommandPoll,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The following statement contains a magic number: if (winCount <= 0)  	winCount = (battle.NonSpectatorCount / 2 + 1);  
Magic Number,ZkLobbyServer,CommandPoll,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The following statement contains a magic number: winCount = (battle.NonSpectatorCount / 2 + 1);  
Magic Number,ZkLobbyServer,BattleListUpdater,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\BattleListUpdater.cs,BattleListUpdater,The following statement contains a magic number: timer = new Timer (UpdateIntervalSeconds * 1000);  
Magic Number,ZkLobbyServer,ChannelManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: if (server.TopPlayerProvider.GetTop50 ().Take (20).Any (x => x.AccountID == lobbyID) || server.TopPlayerProvider.GetTop50Casual ().Take (20).Any (x => x.AccountID == lobbyID) || topPlayersExceptions.Contains (lobbyID))  	return true;  else  	return false;  
Magic Number,ZkLobbyServer,ChannelManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: if (server.TopPlayerProvider.GetTop50 ().Take (20).Any (x => x.AccountID == lobbyID) || server.TopPlayerProvider.GetTop50Casual ().Take (20).Any (x => x.AccountID == lobbyID) || topPlayersExceptions.Contains (lobbyID))  	return true;  else  	return false;  
Magic Number,ZkLobbyServer,ChatRelay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,ChatRelay,The following statement contains a magic number: timer = new Timer (TimerCallback' this' 1000' 2000);  
Magic Number,ZkLobbyServer,ChatRelay,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,ChatRelay,The following statement contains a magic number: timer = new Timer (TimerCallback' this' 1000' 2000);  
Magic Number,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: openBattle.Header.Title = openBattle.Header.Title.Truncate (200);  
Magic Number,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: h.Title = h.Title.Truncate (200);  
Magic Number,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: if ((battle != null) && !battle.IsInGame) {  	if (battle.Mode != AutohostMode.None && battle.Mode != AutohostMode.GameChickens) {  		await Respond ("Sorry' this room type does not support bots' please use cooperative or custom");  		return;  	}  	BotBattleStatus ubs;  	if (!battle.Bots.TryGetValue (add.Name' out ubs)) {  		if (battle.Bots.Count < 50) {  			ubs = new BotBattleStatus (add.Name' Name' add.AiLib);  		} else {  			await Respond ("Maximal number of bots reached");  			return;  		}  	} else if ((ubs.owner != Name) && !User.IsAdmin && (Name != battle.FounderName)) {  		await Respond (string.Format ("No permissions to edit bot {0}"' add.Name));  		return;  	}  	ubs.UpdateWith (add);  	battle.Bots [ubs.Name] = ubs;  	await server.Broadcast (battle.Users.Keys' ubs.ToUpdateBotStatus ());  }  
Magic Number,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: if (!battle.Bots.TryGetValue (add.Name' out ubs)) {  	if (battle.Bots.Count < 50) {  		ubs = new BotBattleStatus (add.Name' Name' add.AiLib);  	} else {  		await Respond ("Maximal number of bots reached");  		return;  	}  } else if ((ubs.owner != Name) && !User.IsAdmin && (Name != battle.FounderName)) {  	await Respond (string.Format ("No permissions to edit bot {0}"' add.Name));  	return;  }  
Magic Number,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: if (battle.Bots.Count < 50) {  	ubs = new BotBattleStatus (add.Name' Name' add.AiLib);  } else {  	await Respond ("Maximal number of bots reached");  	return;  }  
Magic Number,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Throttle,The following statement contains a magic number: if (bytesSent <= GlobalConst.LobbyThrottleBytesPerSecond * seconds) {  	bytesSent = 0;  	lastThrottleReset = now;  } else {  	var needForSleep = (double)bytesSent / GlobalConst.LobbyThrottleBytesPerSecond - seconds;  	await Task.Delay ((int)Math.Round (needForSleep * 1000.0));  }  
Magic Number,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Throttle,The following statement contains a magic number: await Task.Delay ((int)Math.Round (needForSleep * 1000.0));  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Teams"'  		Description = "Play 2v2 to 4v4 with players of similar skill."'  		MinSize = 4'  		MaxSize = 8'  		MaxPartySize = 4'  		EloCutOffExponent = 0.96'  		Game = server.Game'  		Mode = AutohostMode.Teams'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "Coop"'  		Description = "Play together' against AI"'  		MinSize = 2'  		MaxSize = 5'  		MaxPartySize = 5'  		EloCutOffExponent = 0'  		Game = server.Game'  		Mode = AutohostMode.GameChickens'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  	});  	possibleQueues.Add (new MatchMakerSetup.Queue () {  		Name = "1v1"'  		Description = "1v1 with opponent of similar skill"'  		MinSize = 2'  		MaxSize = 2'  		EloCutOffExponent = 0.975'  		MaxPartySize = 1'  		Game = server.Game'  		Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  		Mode = AutohostMode.Game1v1'  	});  }  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "Teams"'  	Description = "Play 2v2 to 4v4 with players of similar skill."'  	MinSize = 4'  	MaxSize = 8'  	MaxPartySize = 4'  	EloCutOffExponent = 0.96'  	Game = server.Game'  	Mode = AutohostMode.Teams'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "Teams"'  	Description = "Play 2v2 to 4v4 with players of similar skill."'  	MinSize = 4'  	MaxSize = 8'  	MaxPartySize = 4'  	EloCutOffExponent = 0.96'  	Game = server.Game'  	Mode = AutohostMode.Teams'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "Teams"'  	Description = "Play 2v2 to 4v4 with players of similar skill."'  	MinSize = 4'  	MaxSize = 8'  	MaxPartySize = 4'  	EloCutOffExponent = 0.96'  	Game = server.Game'  	Mode = AutohostMode.Teams'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "Teams"'  	Description = "Play 2v2 to 4v4 with players of similar skill."'  	MinSize = 4'  	MaxSize = 8'  	MaxPartySize = 4'  	EloCutOffExponent = 0.96'  	Game = server.Game'  	Mode = AutohostMode.Teams'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.MapIsTeams != false) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "Coop"'  	Description = "Play together' against AI"'  	MinSize = 2'  	MaxSize = 5'  	MaxPartySize = 5'  	EloCutOffExponent = 0'  	Game = server.Game'  	Mode = AutohostMode.GameChickens'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "Coop"'  	Description = "Play together' against AI"'  	MinSize = 2'  	MaxSize = 5'  	MaxPartySize = 5'  	EloCutOffExponent = 0'  	Game = server.Game'  	Mode = AutohostMode.GameChickens'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "Coop"'  	Description = "Play together' against AI"'  	MinSize = 2'  	MaxSize = 5'  	MaxPartySize = 5'  	EloCutOffExponent = 0'  	Game = server.Game'  	Mode = AutohostMode.GameChickens'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "1v1"'  	Description = "1v1 with opponent of similar skill"'  	MinSize = 2'  	MaxSize = 2'  	EloCutOffExponent = 0.975'  	MaxPartySize = 1'  	Game = server.Game'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  	Mode = AutohostMode.Game1v1'  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "1v1"'  	Description = "1v1 with opponent of similar skill"'  	MinSize = 2'  	MaxSize = 2'  	EloCutOffExponent = 0.975'  	MaxPartySize = 1'  	Game = server.Game'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  	Mode = AutohostMode.Game1v1'  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: possibleQueues.Add (new MatchMakerSetup.Queue () {  	Name = "1v1"'  	Description = "1v1 with opponent of similar skill"'  	MinSize = 2'  	MaxSize = 2'  	EloCutOffExponent = 0.975'  	MaxPartySize = 1'  	Game = server.Game'  	Maps = db.Resources.Where (x => (x.MapSupportLevel >= MapSupportLevel.MatchMaker) && (x.TypeID == ResourceType.Map) && x.MapIs1v1 == true && x.MapIsSpecial != true).Select (x => x.InternalName).ToList ()'  	Mode = AutohostMode.Game1v1'  });  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: timer = new Timer (TimerSeconds * 1000);  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The following statement contains a magic number: if (party != null)  	wantedQueues = wantedQueues.Where (x => x.MaxSize / 2 >= party.UserNames.Count).ToList ();  
Magic Number,ZkLobbyServer,MatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The following statement contains a magic number: wantedQueues = wantedQueues.Where (x => x.MaxSize / 2 >= party.UserNames.Count).ToList ();  
Magic Number,ZkLobbyServer,PlanetWarsServerBattle,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\PlanetWarsServerBattle.cs,PlanetWarsServerBattle,The following statement contains a magic number: MaxPlayers = option.TeamSize * 2;  
Magic Number,ZkLobbyServer,PartyManager,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,RemoveFromParty,The following statement contains a magic number: if (party.UserNames.Count == 2 && names.Any (x => party.UserNames.Contains (x)))  	names = party.UserNames.ToArray ();  
Magic Number,ZkLobbyServer,ServerBattle,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ServerBattle,The following statement contains a magic number: pollTimer = new Timer (PollTimeout * 1000);  
Magic Number,ZkLobbyServer,ServerBattle,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,IsKicked,The following statement contains a magic number: kickedPlayers.RemoveAll (x => x.TimeOfKicked <= DateTime.UtcNow.AddMinutes (-5));  
Magic Number,ZkLobbyServer,ServerBattle,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The following statement contains a magic number: if (!say.IsEmote && (say.Text.Length > 1) && say.Text.StartsWith ("!")) {  	var parts = say.Text.Substring (1).Split (new[] {  		' '  	}' 2' StringSplitOptions.RemoveEmptyEntries);  	await RunCommandWithPermissionCheck (say' parts [0]' parts.Skip (1).FirstOrDefault ());  }  
Magic Number,ZkLobbyServer,ServerRunner,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Run,The following statement contains a magic number: foreach (var listener in listeners) {  	if (listener.Bind (120)) {  		ITransportServerListener l = listener;  		var thread = new Thread (() => {  			SynchronizationContext.SetSynchronizationContext (null);  			l.RunLoop (t => {  				var client = new ClientConnection (t' ZkLobbyServer);  			});  		});  		listenThreads.Add (thread);  		thread.Start ();  		thread.Priority = ThreadPriority.AboveNormal;  	}  }  
Magic Number,ZkLobbyServer,ServerRunner,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Run,The following statement contains a magic number: if (listener.Bind (120)) {  	ITransportServerListener l = listener;  	var thread = new Thread (() => {  		SynchronizationContext.SetSynchronizationContext (null);  		l.RunLoop (t => {  			var client = new ClientConnection (t' ZkLobbyServer);  		});  	});  	listenThreads.Add (thread);  	thread.Start ();  	thread.Priority = ThreadPriority.AboveNormal;  }  
Magic Number,ZkLobbyServer,ServerTextCommands,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following statement contains a magic number: try {  	if (say.Text.StartsWith ("!") == true) {  		ConnectedUser conus;  		if (server.ConnectedUsers.TryGetValue (say.User' out conus) && conus.User.IsAdmin) {  			var parts = say.Text.Split (new[] {  				' '  			}' 2);  			var command = parts.FirstOrDefault ();  			var argument = parts.Skip (1).FirstOrDefault ();  			switch (command) {  			case "!announce":  				server.GhostSay (new Say () {  					Text = argument'  					User = say.User'  					Place = SayPlace.MessageBox'  					Ring = true'  				});  				break;  			case "!topic":  				if (say.Place == SayPlace.Channel && !string.IsNullOrEmpty (say.Target)) {  					server.SetTopic (say.Target' argument' say.User);  				}  				break;  			}  		}  	}  } catch (Exception ex) {  	Trace.TraceWarning ("Error processing message  {0} {1} : {2}"' say.User' say.Text' ex);  }  
Magic Number,ZkLobbyServer,ServerTextCommands,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following statement contains a magic number: if (say.Text.StartsWith ("!") == true) {  	ConnectedUser conus;  	if (server.ConnectedUsers.TryGetValue (say.User' out conus) && conus.User.IsAdmin) {  		var parts = say.Text.Split (new[] {  			' '  		}' 2);  		var command = parts.FirstOrDefault ();  		var argument = parts.Skip (1).FirstOrDefault ();  		switch (command) {  		case "!announce":  			server.GhostSay (new Say () {  				Text = argument'  				User = say.User'  				Place = SayPlace.MessageBox'  				Ring = true'  			});  			break;  		case "!topic":  			if (say.Place == SayPlace.Channel && !string.IsNullOrEmpty (say.Target)) {  				server.SetTopic (say.Target' argument' say.User);  			}  			break;  		}  	}  }  
Magic Number,ZkLobbyServer,ServerTextCommands,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following statement contains a magic number: if (server.ConnectedUsers.TryGetValue (say.User' out conus) && conus.User.IsAdmin) {  	var parts = say.Text.Split (new[] {  		' '  	}' 2);  	var command = parts.FirstOrDefault ();  	var argument = parts.Skip (1).FirstOrDefault ();  	switch (command) {  	case "!announce":  		server.GhostSay (new Say () {  			Text = argument'  			User = say.User'  			Place = SayPlace.MessageBox'  			Ring = true'  		});  		break;  	case "!topic":  		if (say.Place == SayPlace.Channel && !string.IsNullOrEmpty (say.Target)) {  			server.SetTopic (say.Target' argument' say.User);  		}  		break;  	}  }  
Magic Number,ZkLobbyServer,TcpTransportServerListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The following statement contains a magic number: do {  	try {  		listener = new TcpListener (new IPEndPoint (IPAddress.Any' GlobalConst.LobbyServerPort));  		listener.Server.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (GlobalConst.TcpLingerStateEnabled' GlobalConst.TcpLingerStateSeconds));  		listener.Server.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' 0);  		if (!SetHandleInformation (listener.Server.Handle' HANDLE_FLAGS.INHERIT | HANDLE_FLAGS.PROTECT_FROM_CLOSE' 0))  			throw new ApplicationException ("Unable to set socket flags: " + Marshal.GetLastWin32Error ());  		listener.Start ();  		Trace.TraceInformation ("Listening at port {0}"' GlobalConst.LobbyServerPort);  		ok = true;  	} catch (Exception ex) {  		Trace.TraceError ("Error binding port {1} :{0}"' ex' GlobalConst.LobbyServerPort);  		Thread.Sleep (1000);  	}  } while (!ok && retryCount-- > 0);  
Magic Number,ZkLobbyServer,TcpTransportServerListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The following statement contains a magic number: try {  	listener = new TcpListener (new IPEndPoint (IPAddress.Any' GlobalConst.LobbyServerPort));  	listener.Server.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (GlobalConst.TcpLingerStateEnabled' GlobalConst.TcpLingerStateSeconds));  	listener.Server.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' 0);  	if (!SetHandleInformation (listener.Server.Handle' HANDLE_FLAGS.INHERIT | HANDLE_FLAGS.PROTECT_FROM_CLOSE' 0))  		throw new ApplicationException ("Unable to set socket flags: " + Marshal.GetLastWin32Error ());  	listener.Start ();  	Trace.TraceInformation ("Listening at port {0}"' GlobalConst.LobbyServerPort);  	ok = true;  } catch (Exception ex) {  	Trace.TraceError ("Error binding port {1} :{0}"' ex' GlobalConst.LobbyServerPort);  	Thread.Sleep (1000);  }  
Magic Number,ZkLobbyServer,TcpTransportServerListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,ZkLobbyServer,ZkServerTraceListener,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,ZkServerTraceListener,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	var oldEntry = DateTime.UtcNow.AddDays (-14);  	db.Database.ExecuteSqlCommand ("delete from LogEntries where Time < {0}"' oldEntry);  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	List<Resource> list = null;  	var players = context.Players.Count (x => !x.IsSpectator);  	var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;  	switch (mode) {  	case AutohostMode.Teams:  	case AutohostMode.None:  		var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  		if (players > 11)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 8)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.Game1v1:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  		break;  	case AutohostMode.GameChickens:  		ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  		if (players > 5)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  		else if (players > 4)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  		else if (players > 2)  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  		else  			ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  		list = ret.ToList ();  		break;  	case AutohostMode.GameFFA:  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  		if (!list.Any ())  			list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  		break;  	}  	if (list != null) {  		var r = new Random ();  		if (list.Count > 0) {  			var resource = list [r.Next (list.Count)];  			return resource;  		}  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 11)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 8)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 5)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  else if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 4)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  else if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: if (players > 2)  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  else  	ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,GetTeamsDifference,The following statement contains a magic number: if (t.Count == 2)  	return Math.Abs (t [0].AvgElo - t [1].AvgElo);  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	switch (mode) {  	case AutohostMode.None:  		{  			if (!isGameStart)  				res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  		}  		break;  	case AutohostMode.Teams:  	case AutohostMode.Game1v1:  		{  			res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  			res.DeleteBots = true;  		}  		break;  	case AutohostMode.GameChickens:  		{  			res.Players = context.Players.ToList ();  			res.Bots = context.Bots.ToList ();  			foreach (var p in res.Players)  				p.AllyID = 0;  			foreach (var b in res.Bots)  				b.AllyID = 1;  			// add chickens via modoptions hackish thingie  			string chickBot = null;  			if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") {  				res.Bots.RemoveAll (x => x.BotAI.StartsWith ("Chicken:"));  				res.Bots.Add (new BotTeam () {  					AllyID = 1'  					BotName = "default_Chicken"'  					BotAI = chickBot  				});  			}  			if (!res.Bots.Any () && res.Players.Count > 0) {  				//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";  				var map = db.Resources.FirstOrDefault (x => x.InternalName == context.Map);  				if (map.MapIsChickens == true)  					res.Bots.Add (new BotTeam () {  						AllyID = 1'  						BotName = "default_Chicken"'  						BotAI = "Chicken: Normal"'  					});  				else {  					for (int i = 1; i <= res.Players.Where (x => !x.IsSpectator).Count (); i++)  						res.Bots.Add (new BotTeam () {  							AllyID = 1'  							BotName = "cai" + i'  							BotAI = "CAI"'  						});  				}  				res.Message = "Adding computer AI player for you";  			}  		}  		break;  	case AutohostMode.GameFFA: {  		res.DeleteBots = true;  		var map = db.Resources.Single (x => x.InternalName == context.Map);  		if (map.MapFFAMaxTeams != null) {  			res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		} else {  			res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		}  		return res;  	}  	case AutohostMode.Planetwars:  		return new Balancer ().PlanetwarsBalance (context);  	}  	return res;  }  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	switch (mode) {  	case AutohostMode.None:  		{  			if (!isGameStart)  				res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  		}  		break;  	case AutohostMode.Teams:  	case AutohostMode.Game1v1:  		{  			res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  			res.DeleteBots = true;  		}  		break;  	case AutohostMode.GameChickens:  		{  			res.Players = context.Players.ToList ();  			res.Bots = context.Bots.ToList ();  			foreach (var p in res.Players)  				p.AllyID = 0;  			foreach (var b in res.Bots)  				b.AllyID = 1;  			// add chickens via modoptions hackish thingie  			string chickBot = null;  			if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") {  				res.Bots.RemoveAll (x => x.BotAI.StartsWith ("Chicken:"));  				res.Bots.Add (new BotTeam () {  					AllyID = 1'  					BotName = "default_Chicken"'  					BotAI = chickBot  				});  			}  			if (!res.Bots.Any () && res.Players.Count > 0) {  				//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";  				var map = db.Resources.FirstOrDefault (x => x.InternalName == context.Map);  				if (map.MapIsChickens == true)  					res.Bots.Add (new BotTeam () {  						AllyID = 1'  						BotName = "default_Chicken"'  						BotAI = "Chicken: Normal"'  					});  				else {  					for (int i = 1; i <= res.Players.Where (x => !x.IsSpectator).Count (); i++)  						res.Bots.Add (new BotTeam () {  							AllyID = 1'  							BotName = "cai" + i'  							BotAI = "CAI"'  						});  				}  				res.Message = "Adding computer AI player for you";  			}  		}  		break;  	case AutohostMode.GameFFA: {  		res.DeleteBots = true;  		var map = db.Resources.Single (x => x.InternalName == context.Map);  		if (map.MapFFAMaxTeams != null) {  			res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		} else {  			res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		}  		return res;  	}  	case AutohostMode.Planetwars:  		return new Balancer ().PlanetwarsBalance (context);  	}  	return res;  }  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: using (var db = new ZkDataContext ()) {  	switch (mode) {  	case AutohostMode.None:  		{  			if (!isGameStart)  				res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  		}  		break;  	case AutohostMode.Teams:  	case AutohostMode.Game1v1:  		{  			res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  			res.DeleteBots = true;  		}  		break;  	case AutohostMode.GameChickens:  		{  			res.Players = context.Players.ToList ();  			res.Bots = context.Bots.ToList ();  			foreach (var p in res.Players)  				p.AllyID = 0;  			foreach (var b in res.Bots)  				b.AllyID = 1;  			// add chickens via modoptions hackish thingie  			string chickBot = null;  			if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") {  				res.Bots.RemoveAll (x => x.BotAI.StartsWith ("Chicken:"));  				res.Bots.Add (new BotTeam () {  					AllyID = 1'  					BotName = "default_Chicken"'  					BotAI = chickBot  				});  			}  			if (!res.Bots.Any () && res.Players.Count > 0) {  				//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";  				var map = db.Resources.FirstOrDefault (x => x.InternalName == context.Map);  				if (map.MapIsChickens == true)  					res.Bots.Add (new BotTeam () {  						AllyID = 1'  						BotName = "default_Chicken"'  						BotAI = "Chicken: Normal"'  					});  				else {  					for (int i = 1; i <= res.Players.Where (x => !x.IsSpectator).Count (); i++)  						res.Bots.Add (new BotTeam () {  							AllyID = 1'  							BotName = "cai" + i'  							BotAI = "CAI"'  						});  				}  				res.Message = "Adding computer AI player for you";  			}  		}  		break;  	case AutohostMode.GameFFA: {  		res.DeleteBots = true;  		var map = db.Resources.Single (x => x.InternalName == context.Map);  		if (map.MapFFAMaxTeams != null) {  			res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		} else {  			res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		}  		return res;  	}  	case AutohostMode.Planetwars:  		return new Balancer ().PlanetwarsBalance (context);  	}  	return res;  }  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode) {  case AutohostMode.None:  	{  		if (!isGameStart)  			res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  	}  	break;  case AutohostMode.Teams:  case AutohostMode.Game1v1:  	{  		res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		res.DeleteBots = true;  	}  	break;  case AutohostMode.GameChickens:  	{  		res.Players = context.Players.ToList ();  		res.Bots = context.Bots.ToList ();  		foreach (var p in res.Players)  			p.AllyID = 0;  		foreach (var b in res.Bots)  			b.AllyID = 1;  		// add chickens via modoptions hackish thingie  		string chickBot = null;  		if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") {  			res.Bots.RemoveAll (x => x.BotAI.StartsWith ("Chicken:"));  			res.Bots.Add (new BotTeam () {  				AllyID = 1'  				BotName = "default_Chicken"'  				BotAI = chickBot  			});  		}  		if (!res.Bots.Any () && res.Players.Count > 0) {  			//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";  			var map = db.Resources.FirstOrDefault (x => x.InternalName == context.Map);  			if (map.MapIsChickens == true)  				res.Bots.Add (new BotTeam () {  					AllyID = 1'  					BotName = "default_Chicken"'  					BotAI = "Chicken: Normal"'  				});  			else {  				for (int i = 1; i <= res.Players.Where (x => !x.IsSpectator).Count (); i++)  					res.Bots.Add (new BotTeam () {  						AllyID = 1'  						BotName = "cai" + i'  						BotAI = "CAI"'  					});  			}  			res.Message = "Adding computer AI player for you";  		}  	}  	break;  case AutohostMode.GameFFA: {  	res.DeleteBots = true;  	var map = db.Resources.Single (x => x.InternalName == context.Map);  	if (map.MapFFAMaxTeams != null) {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	} else {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	}  	return res;  }  case AutohostMode.Planetwars:  	return new Balancer ().PlanetwarsBalance (context);  }  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode) {  case AutohostMode.None:  	{  		if (!isGameStart)  			res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  	}  	break;  case AutohostMode.Teams:  case AutohostMode.Game1v1:  	{  		res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		res.DeleteBots = true;  	}  	break;  case AutohostMode.GameChickens:  	{  		res.Players = context.Players.ToList ();  		res.Bots = context.Bots.ToList ();  		foreach (var p in res.Players)  			p.AllyID = 0;  		foreach (var b in res.Bots)  			b.AllyID = 1;  		// add chickens via modoptions hackish thingie  		string chickBot = null;  		if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") {  			res.Bots.RemoveAll (x => x.BotAI.StartsWith ("Chicken:"));  			res.Bots.Add (new BotTeam () {  				AllyID = 1'  				BotName = "default_Chicken"'  				BotAI = chickBot  			});  		}  		if (!res.Bots.Any () && res.Players.Count > 0) {  			//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";  			var map = db.Resources.FirstOrDefault (x => x.InternalName == context.Map);  			if (map.MapIsChickens == true)  				res.Bots.Add (new BotTeam () {  					AllyID = 1'  					BotName = "default_Chicken"'  					BotAI = "Chicken: Normal"'  				});  			else {  				for (int i = 1; i <= res.Players.Where (x => !x.IsSpectator).Count (); i++)  					res.Bots.Add (new BotTeam () {  						AllyID = 1'  						BotName = "cai" + i'  						BotAI = "CAI"'  					});  			}  			res.Message = "Adding computer AI player for you";  		}  	}  	break;  case AutohostMode.GameFFA: {  	res.DeleteBots = true;  	var map = db.Resources.Single (x => x.InternalName == context.Map);  	if (map.MapFFAMaxTeams != null) {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	} else {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	}  	return res;  }  case AutohostMode.Planetwars:  	return new Balancer ().PlanetwarsBalance (context);  }  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: switch (mode) {  case AutohostMode.None:  	{  		if (!isGameStart)  			res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  	}  	break;  case AutohostMode.Teams:  case AutohostMode.Game1v1:  	{  		res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		res.DeleteBots = true;  	}  	break;  case AutohostMode.GameChickens:  	{  		res.Players = context.Players.ToList ();  		res.Bots = context.Bots.ToList ();  		foreach (var p in res.Players)  			p.AllyID = 0;  		foreach (var b in res.Bots)  			b.AllyID = 1;  		// add chickens via modoptions hackish thingie  		string chickBot = null;  		if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") {  			res.Bots.RemoveAll (x => x.BotAI.StartsWith ("Chicken:"));  			res.Bots.Add (new BotTeam () {  				AllyID = 1'  				BotName = "default_Chicken"'  				BotAI = chickBot  			});  		}  		if (!res.Bots.Any () && res.Players.Count > 0) {  			//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";  			var map = db.Resources.FirstOrDefault (x => x.InternalName == context.Map);  			if (map.MapIsChickens == true)  				res.Bots.Add (new BotTeam () {  					AllyID = 1'  					BotName = "default_Chicken"'  					BotAI = "Chicken: Normal"'  				});  			else {  				for (int i = 1; i <= res.Players.Where (x => !x.IsSpectator).Count (); i++)  					res.Bots.Add (new BotTeam () {  						AllyID = 1'  						BotName = "cai" + i'  						BotAI = "CAI"'  					});  			}  			res.Message = "Adding computer AI player for you";  		}  	}  	break;  case AutohostMode.GameFFA: {  	res.DeleteBots = true;  	var map = db.Resources.Single (x => x.InternalName == context.Map);  	if (map.MapFFAMaxTeams != null) {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	} else {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	}  	return res;  }  case AutohostMode.Planetwars:  	return new Balancer ().PlanetwarsBalance (context);  }  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: if (!isGameStart)  	res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: if (map.MapFFAMaxTeams != null) {  	res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  } else {  	res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  }  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  
Magic Number,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,RecursiveBalance,The following statement contains a magic number: if (iterationsChecked > 2000000)  	return;  
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The following statement contains a magic number: if (result.LobbyStartContext.Mode != AutohostMode.Planetwars || sb.PlayerCount < 2 || sb.Duration < GlobalConst.MinDurationForPlanetwars)  	return;  
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where (x => x.StartsWith ("award") == true)) {  	string[] partsSpace = line.Substring (6).Split (new[] {  		' '  	}' 3);  	string name = partsSpace [0];  	string awardType = partsSpace [1];  	string awardText = partsSpace [2];  	// prevent hax: tourney cups and event coins are never given automatically  	if (awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze"))  		continue;  	if (awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin"))  		continue;  	SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault (x => x.Account.Name == name);  	if (player != null) {  		db.AccountBattleAwards.InsertOnSubmit (new AccountBattleAward {  			Account = player.Account'  			AccountID = player.AccountID'  			SpringBattleID = sb.SpringBattleID'  			AwardKey = awardType'  			AwardDescription = awardText  		});  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where (x => x.StartsWith ("award") == true)) {  	string[] partsSpace = line.Substring (6).Split (new[] {  		' '  	}' 3);  	string name = partsSpace [0];  	string awardType = partsSpace [1];  	string awardText = partsSpace [2];  	// prevent hax: tourney cups and event coins are never given automatically  	if (awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze"))  		continue;  	if (awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin"))  		continue;  	SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault (x => x.Account.Name == name);  	if (player != null) {  		db.AccountBattleAwards.InsertOnSubmit (new AccountBattleAward {  			Account = player.Account'  			AccountID = player.AccountID'  			SpringBattleID = sb.SpringBattleID'  			AwardKey = awardType'  			AwardDescription = awardText  		});  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where (x => x.StartsWith ("award") == true)) {  	string[] partsSpace = line.Substring (6).Split (new[] {  		' '  	}' 3);  	string name = partsSpace [0];  	string awardType = partsSpace [1];  	string awardText = partsSpace [2];  	// prevent hax: tourney cups and event coins are never given automatically  	if (awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze"))  		continue;  	if (awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin"))  		continue;  	SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault (x => x.Account.Name == name);  	if (player != null) {  		db.AccountBattleAwards.InsertOnSubmit (new AccountBattleAward {  			Account = player.Account'  			AccountID = player.AccountID'  			SpringBattleID = sb.SpringBattleID'  			AwardKey = awardType'  			AwardDescription = awardText  		});  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where (x => x.StartsWith ("CHATLOG") == true)) {  	string[] partsSpace = line.Substring (8).Split (new[] {  		' '  	}' 2);  	string name = partsSpace [0];  	string chatlog = partsSpace [1];  	SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault (x => x.Account.Name == name);  	if (player != null) {  		db.LobbyChatHistories.InsertOnSubmit (new LobbyChatHistory {  			IsEmote = false'  			SayPlace = SayPlace.Game'  			User = name'  			Ring = false'  			Target = "B" + sb.SpringBattleID'  			Text = chatlog'  			Time = DateTime.UtcNow  		});  	}  }  
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where (x => x.StartsWith ("CHATLOG") == true)) {  	string[] partsSpace = line.Substring (8).Split (new[] {  		' '  	}' 2);  	string name = partsSpace [0];  	string chatlog = partsSpace [1];  	SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault (x => x.Account.Name == name);  	if (player != null) {  		db.LobbyChatHistories.InsertOnSubmit (new LobbyChatHistory {  			IsEmote = false'  			SayPlace = SayPlace.Game'  			User = name'  			Ring = false'  			Target = "B" + sb.SpringBattleID'  			Text = chatlog'  			Time = DateTime.UtcNow  		});  	}  }  
Magic Number,Springie,Utils,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\utils\Utils.cs,ToUnix,The following statement contains a magic number: return (long)(t.ToUniversalTime () - new DateTime (1970' 1' 1' 0' 0' 0)).TotalSeconds;  
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,PlanetWarsMatchMaker,The following statement contains a magic number: timer = new Timer (1045);  
Missing Default,ZkLobbyServer,ConnectedUser,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following switch statement is missing a default case: switch (say.Place) {  case SayPlace.Channel:  	if (server.Channels.Get (say.Target).Users.ContainsKey (Name) != true)  		return;  	break;  case SayPlace.Battle:  	if (MyBattle.Users.Keys.Contains (Name) != true)  		return;  	break;  case SayPlace.BattlePrivate:  	return;  	break;  case SayPlace.MessageBox:  	if (!User.IsAdmin)  		return;  	break;  }  
Missing Default,ZkLobbyServer,ServerTextCommands,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following switch statement is missing a default case: switch (command) {  case "!announce":  	server.GhostSay (new Say () {  		Text = argument'  		User = say.User'  		Place = SayPlace.MessageBox'  		Ring = true'  	});  	break;  case "!topic":  	if (say.Place == SayPlace.Channel && !string.IsNullOrEmpty (say.Target)) {  		server.SetTopic (say.Target' argument' say.User);  	}  	break;  }  
Missing Default,ZkLobbyServer,ZkLobbyServer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostSay,The following switch statement is missing a default case: switch (say.Place) {  case SayPlace.Channel:  	Channel channel;  	if (Channels.TryGetValue (say.Target' out channel))  		await SyncAndSay (channel.Users.Keys' say);  	OfflineMessageHandler.StoreChatHistoryAsync (say);  	break;  case SayPlace.User:  	ConnectedUser connectedUser;  	if (ConnectedUsers.TryGetValue (say.Target' out connectedUser))  		await SyncAndSay (new List<string> () {  			say.Target  		}' say);  	else  		OfflineMessageHandler.StoreChatHistoryAsync (say);  	if (say.User != GlobalConst.NightwatchName && ConnectedUsers.TryGetValue (say.User' out connectedUser))  		await connectedUser.SendCommand (say);  	break;  case SayPlace.Battle:  	ServerBattle battle;  	if (Battles.TryGetValue (battleID ?? 0' out battle)) {  		await SyncAndSay (battle.Users.Keys' say);  		await battle.ProcessBattleSay (say);  		OfflineMessageHandler.StoreChatHistoryAsync (say);  	}  	break;  // admin AH sent only:  case SayPlace.MessageBox:  	await Broadcast (ConnectedUsers.Values' say);  	break;  case SayPlace.BattlePrivate:  	ConnectedUser targetUser;  	if (ConnectedUsers.TryGetValue (say.Target' out targetUser))  		await targetUser.SendCommand (say);  	break;  }  
Missing Default,ZeroKWeb.SpringieInterface,MapPicker,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following switch statement is missing a default case: switch (mode) {  case AutohostMode.Teams:  case AutohostMode.None:  	var ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);  	if (players > 11)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 8)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.Game1v1:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList ();  	break;  case AutohostMode.GameChickens:  	ret = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true && (x.MapIsChickens == true || x.MapWaterLevel == 1));  	if (players > 5)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16);  	else if (players > 4)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth > 16 * 16 && x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24);  	else if (players > 2)  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 24 * 24 || x.MapIs1v1 == true);  	else  		ret = ret.Where (x => x.MapHeight * x.MapHeight + x.MapWidth * x.MapWidth <= 16 * 16 || x.MapIs1v1 == true);  	list = ret.ToList ();  	break;  case AutohostMode.GameFFA:  	list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && (players % x.MapFFAMaxTeams == 0)).ToList ();  	if (!list.Any ())  		list = db.Resources.Where (x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true).ToList ();  	break;  }  
Missing Default,ZeroKWeb.SpringieInterface,Balancer,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following switch statement is missing a default case: switch (mode) {  case AutohostMode.None:  	{  		if (!isGameStart)  			res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);  	}  	break;  case AutohostMode.Teams:  case AutohostMode.Game1v1:  	{  		res = new Balancer ().LegacyBalance (allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  		res.DeleteBots = true;  	}  	break;  case AutohostMode.GameChickens:  	{  		res.Players = context.Players.ToList ();  		res.Bots = context.Bots.ToList ();  		foreach (var p in res.Players)  			p.AllyID = 0;  		foreach (var b in res.Bots)  			b.AllyID = 1;  		// add chickens via modoptions hackish thingie  		string chickBot = null;  		if (context.ModOptions.TryGetValue ("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty (chickBot) && chickBot != "none") {  			res.Bots.RemoveAll (x => x.BotAI.StartsWith ("Chicken:"));  			res.Bots.Add (new BotTeam () {  				AllyID = 1'  				BotName = "default_Chicken"'  				BotAI = chickBot  			});  		}  		if (!res.Bots.Any () && res.Players.Count > 0) {  			//res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";  			var map = db.Resources.FirstOrDefault (x => x.InternalName == context.Map);  			if (map.MapIsChickens == true)  				res.Bots.Add (new BotTeam () {  					AllyID = 1'  					BotName = "default_Chicken"'  					BotAI = "Chicken: Normal"'  				});  			else {  				for (int i = 1; i <= res.Players.Where (x => !x.IsSpectator).Count (); i++)  					res.Bots.Add (new BotTeam () {  						AllyID = 1'  						BotName = "cai" + i'  						BotAI = "CAI"'  					});  			}  			res.Message = "Adding computer AI player for you";  		}  	}  	break;  case AutohostMode.GameFFA: {  	res.DeleteBots = true;  	var map = db.Resources.Single (x => x.InternalName == context.Map);  	if (map.MapFFAMaxTeams != null) {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams.Value' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	} else {  		res = new Balancer ().LegacyBalance (allyCount ?? map.MapFFAMaxTeams ?? 8' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);  	}  	return res;  }  case AutohostMode.Planetwars:  	return new Balancer ().PlanetwarsBalance (context);  }  
