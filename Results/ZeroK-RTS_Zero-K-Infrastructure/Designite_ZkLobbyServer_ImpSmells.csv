Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The method has 141 lines of code.
Long Method,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The method has 234 lines of code.
Complex Method,ZkLobbyServer,CmdSetOptions,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,BattleCommand,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\BattleCommand.cs,GetRunPermissions,Cyclomatic complexity of the method is 10
Complex Method,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,Cyclomatic complexity of the method is 8
Complex Method,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,Cyclomatic complexity of the method is 14
Complex Method,ZkLobbyServer,PartyManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessPartyInviteResponse,Cyclomatic complexity of the method is 11
Complex Method,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessPlayerJoin,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartGame,Cyclomatic complexity of the method is 9
Complex Method,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ApplyBalanceResults,Cyclomatic complexity of the method is 12
Complex Method,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,Cyclomatic complexity of the method is 13
Complex Method,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,Cyclomatic complexity of the method is 26
Complex Method,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,Cyclomatic complexity of the method is 29
Long Parameter List,ZkLobbyServer,ChatRelayMessage,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\IChatRelaySource.cs,ChatRelayMessage,The method has 5 parameters. Parameters: channel' user' message' source' isEmote
Long Parameter List,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,ProposedBattle,The method has 5 parameters. Parameters: size' initialPlayer' queue' eloCutOffExponent' allPlayers
Long Parameter List,ZkLobbyServer,OfflineMessageHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\OfflineMessageHandler.cs,SendMissedMessagesAsync,The method has 5 parameters. Parameters: sender' place' target' accountID' maxCount
Long Parameter List,ZkLobbyServer,ZkServerTraceListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,ZkLobbyServer,ZkServerTraceListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The method has 5 parameters. Parameters: result' server' sb' db' text
Long Statement,ZkLobbyServer,CmdEngine,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdEngine.cs,Arm,The length of the statement  "                battle.Respond(e' $"You cannot change engine to version other than {battle.server.Engine} here' use custom passworded room"); " is 125.
Long Statement,ZkLobbyServer,CmdPoll,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPoll.cs,GetRunPermissions,The length of the statement  "            if (commandToRun == null) return base.GetRunPermissions(battle' userName) >= RunPermission.Vote ? RunPermission.Vote : RunPermission.None; " is 138.
Long Statement,ZkLobbyServer,CmdPredict,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPredict.cs,ExecuteArmed,The length of the statement  "                        .ToDictionary(x => x.Key' x => x.Average(y => RatingSystems.DisableRatingSystems ? Account.AccountByName(db' y.Name).BestEffectiveElo : Account.AccountByName(db' y.Name).GetBestRating().Elo)); " is 192.
Long Statement,ZkLobbyServer,CmdResign,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,Arm,The length of the statement  "            if (DateTime.UtcNow.Subtract(battle.spring.IngameStartTime ?? DateTime.UtcNow).TotalSeconds < GlobalConst.MinDurationForElo) " is 124.
Long Statement,ZkLobbyServer,CmdResign,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,ExecuteArmed,The length of the statement  "            if (s.IsRunning) foreach (var p in s.LobbyStartContext.Players.Where(x => x.AllyID == alliance && !x.IsSpectator)) s.ResignPlayer(p.Name); " is 138.
Long Statement,ZkLobbyServer,CmdRing,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,Arm,The length of the statement  "                    if ((p.SyncStatus != SyncStatuses.Synced || p.IsSpectator) || (battle.spring.IsRunning && ingameEntry?.IsSpectator == false && ingameEntry?.IsIngameReady == false)) userList.Add(p.Name); " is 186.
Long Statement,ZkLobbyServer,CmdRing,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,ExecuteArmed,The length of the statement  "                await battle.server.GhostSay(new Say() { User = e.User' Target = s' Text = e.User + " wants your attention"' IsEmote = true' Ring = true' Place = SayPlace.User }); " is 163.
Long Statement,ZkLobbyServer,CmdSpec,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSpec.cs,ExecuteArmed,The length of the statement  "                foreach (var usr in battle.Users.Values.Where(x => !x.IsSpectator && x.LobbyUser.IsAway)) await battle.Spectate(usr.Name); " is 122.
Long Statement,ZkLobbyServer,CommandPoll,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The length of the statement  "            winCount = battle.Users.Values.Count(x => command.GetRunPermissions(battle' x.Name) >= BattleCommand.RunPermission.Vote && !cmd.IsSpectator(battle' x.Name' x)) / 2 + 1; " is 168.
Long Statement,ZkLobbyServer,BattleListUpdater,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\BattleListUpdater.cs,TimerOnElapsed,The length of the statement  "                        server.Battles.Values.Where(x => x != null).Select(x => Tuple.Create(x.BattleID' x.NonSpectatorCount' x.SpectatorCount))); " is 122.
Long Statement,ZkLobbyServer,ChannelManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,CanJoin,The length of the statement  "            else if (factionChannels.ContainsKey(channel)) return acc.Level >= GlobalConst.FactionChannelMinLevel && acc.FactionID == factionChannels[channel].FactionID; " is 157.
Long Statement,ZkLobbyServer,ChatRelay,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,TimerCallback,The length of the statement  "                        $"[game: {server.ConnectedUsers.Count} online' {server.MatchMaker.GetTotalWaiting()} in queue' {server.Battles.Values.Where(x => x != null).Sum(x => (int?)x.NonSpectatorCount + x.SpectatorCount) ?? 0} in custom]"; " is 213.
Long Statement,ZkLobbyServer,ChatRelay,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,OnAnySourceMessage,The length of the statement  "                    sb.AppendFormat("MatchMaker queue {0}\n"' string.Join("' "' server.MatchMaker.GetQueueCounts().Select(x => $"{x.Key}: {x.Value}"))); " is 132.
Long Statement,ZkLobbyServer,ChatRelay,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,OnAnySourceMessage,The length of the statement  "                            .Select(x => $"{x.Mode.Description()} {x.NonSpectatorCount}+{x.SpectatorCount}/{x.MaxPlayers} {x.MapName} {x.Title}"))); " is 120.
Long Statement,ZkLobbyServer,ClientConnection,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,OnConnected,The length of the statement  "            await SendCommand(new Welcome() { Engine = server.Engine' Game = server.Game' Version = server.Version' UserCount = server.ConnectedUsers.Count' Factions = cachedFactions}); " is 173.
Long Statement,ZkLobbyServer,ClientConnection,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The length of the statement  "                foreach (var b in server.Battles.Values.Where(x => x != null)) await SendCommand(new BattleAdded() { Header = b.GetHeader() }); " is 127.
Long Statement,ZkLobbyServer,ClientConnection,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The length of the statement  "                defChans.AddRange(server.Channels.Where(x => x.Value.Users.ContainsKey(user.Name)).Select(x => x.Key)); // add currently connected channels to list too " is 151.
Long Statement,ZkLobbyServer,ClientConnection,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The length of the statement  "                    if (s.LobbyStartContext.Players.Any(x => !x.IsSpectator && x.Name == Name) && !s.Context.ActualPlayers.Any(x=>x.Name == Name && x.LoseTime != null)) " is 148.
Long Statement,ZkLobbyServer,DiscordRelaySource,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\DiscordRelaySource.cs,DiscordOnMessageReceived,The length of the statement  "                if (discord.GetGuild(serverID).GetChannel(msg.Channel.Id) != null) if (!msg.Author.IsBot && msg.Author.Username != GlobalConst.NightwatchName) OnChatRelayMessage?.Invoke(this' new ChatRelayMessage(msg.Channel.Name' GetName(msg.Author)' msg.Content' source' false)); " is 265.
Long Statement,ZkLobbyServer,ForumListManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,CachePublicForumList,The length of the statement  "                var accessibleThreads = db.ForumThreads.Where(x => x.RestrictedClanID == null && x.ForumCategory.ForumMode != ForumMode.Archive); " is 129.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The length of the statement  "                    if (info != null) accBySteamID = db.Accounts.Include(x => x.Clan).Include(x => x.Faction).FirstOrDefault(x => x.SteamID == info.steamid); " is 137.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The length of the statement  "                        accByLogin = db.Accounts.Include(x => x.Clan).Include(x => x.Faction).FirstOrDefault(x => x.Name == login.Name) ?? db.Accounts.Include(x => x.Clan).Include(x => x.Faction).FirstOrDefault(x => x.Name.ToUpper() == nameUpper); " is 223.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoLogin,The length of the statement  "                    if (!acc.HasVpnException && GlobalConst.VpnCheckEnabled) if (HasVpn(ip' acc' db)) return BlockLogin("Connection using proxy or VPN is not allowed! (You can ask for exception)"' acc' ip' userID); " is 194.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "            if (!Account.IsValidLobbyName(register.Name)) return new RegisterResponse(RegisterResponse.Code.NameHasInvalidCharacters); " is 122.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "            if (server.ConnectedUsers.ContainsKey(register.Name)) return new RegisterResponse(RegisterResponse.Code.AlreadyConnected); " is 122.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "            if (string.IsNullOrEmpty(register.PasswordHash) && string.IsNullOrEmpty(register.SteamAuthToken)) return new RegisterResponse(RegisterResponse.Code.MissingBothPasswordAndToken); " is 177.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "                    if (info != null && existingByName.SteamID == info.steamid) return new RegisterResponse(RegisterResponse.Code.AlreadyRegisteredWithThisSteamToken); " is 147.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,DoRegister,The length of the statement  "                    if (info == null && !string.IsNullOrEmpty(register.PasswordHash) && existingByName.VerifyPassword(register.PasswordHash)) return new RegisterResponse(RegisterResponse.Code.AlreadyRegisteredWithThisPassword); " is 207.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,UpdateUserFromAccount,The length of the statement  "            user.EffectiveMmElo = (int)Math.Round(RatingSystems.DisableRatingSystems ? acc.EffectiveMmElo : acc.GetRating(RatingCategory.MatchMaking).Elo); " is 143.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,UpdateUserFromAccount,The length of the statement  "            user.EffectiveElo = (int)Math.Round(RatingSystems.DisableRatingSystems ? acc.EffectiveElo : acc.GetRating(RatingCategory.Casual).Elo); " is 134.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,UpdateUserFromAccount,The length of the statement  "            user.RawMmElo = (int)Math.Round(RatingSystems.DisableRatingSystems ? acc.EloMm : acc.GetRating(RatingCategory.MatchMaking).RealElo); " is 132.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "                    //Trace.TraceInformation($"VPN check for USER {acc.Name}\nnetname: {data["netname"]}\norgname: {data["org-name"]}\ndescr: {data["descr"]}\nabuse-mailbox: {data["abuse-mailbox"]}"' false); " is 187.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The length of the statement  "                    if (blockedHosts.Any(x => data["abuse-mailbox"].Contains(x)) || blockedHosts.Any(x => data["notify"].Contains(x))) return true; " is 127.
Long Statement,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,Talk,The length of the statement  "            if (server.ConnectedUsers.TryGetValue(GlobalConst.NightwatchName' out cli)) cli.Process(new Say { IsEmote = true' Place = SayPlace.Channel' Target = "zkadmin"' Text = text }); " is 175.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                        .Select(x => new { OwnerAccountID = x.OwnerAccountID' Owner = x.Owner.Name' Target = x.Target.Name' Relation = x.Relation' SteamID = x.Target.SteamID }) " is 152.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Friend) && (x.OwnerAccountID == User.AccountID)).Select(x => x.Target)); " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Friend) && (x.OwnerAccountID != User.AccountID)).Select(x => x.Owner)); " is 131.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                FriendEntries = new List<FriendEntry>(rels.Where(x => (x.Relation == Relation.Friend) && (x.OwnerAccountID == User.AccountID)).Select(x => new FriendEntry() { Name = x.Target' SteamID = x.SteamID?.ToString() })); " is 212.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Ignore) && (x.OwnerAccountID == User.AccountID)).Select(x => x.Target)); " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LoadFriendsIgnores,The length of the statement  "                    new HashSet<string>(rels.Where(x => (x.Relation == Relation.Ignore) && (x.OwnerAccountID != User.AccountID)).Select(x => x.Owner)); " is 131.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            if (server.Channels.TryGetValue(chanKick.ChannelName' out channel) && channel.Users.TryGetValue(chanKick.UserName' out user)) " is 125.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                await client.Respond(string.Format("You were kicked from channel {0} by {1} : {2}"' chanKick.ChannelName' Name' chanKick.Reason)); " is 130.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            var channel = server.Channels.GetOrAdd(joinChannel.ChannelName' (n) => new Channel() { Name = joinChannel.ChannelName' }); " is 122.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                await SendCommand(new JoinChannelResponse() { Success = false' Reason = "invalid password"' ChannelName = joinChannel.ChannelName }); " is 133.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            var visibleUsers = !channel.IsDeluge ? channel.Users.Keys.ToList() : channel.Users.Keys.Where(x => server.CanUserSee(Name' x)).ToList(); " is 136.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            var canSeeMe = !channel.IsDeluge ? channel.Users.Keys.ToList() : channel.Users.Keys.Where(x => server.CanUserSee(x' Name)).ToList(); " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "            server.OfflineMessageHandler.SendMissedMessagesAsync(this' SayPlace.Channel' joinChannel.ChannelName' User.AccountID' channel.IsDeluge ? OfflineMessageHandler.DelugeMessageResendCount : OfflineMessageHandler.MessageResendCount); " is 228.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                var users = !channel.IsDeluge ? channel.Users.Keys.ToList() : channel.Users.Keys.Where(x => server.CanUserSee(x' Name)).ToList(); " is 129.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                    if (!string.IsNullOrEmpty(rel.TargetName)) await Respond("No such account found"); // only warn if name is set and not just steam id " is 132.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The length of the statement  "                                x => (x != null) && x.Users.ContainsKey(Name) && x.Users.ContainsKey(targetConnectedUser.Name))) await SendCommand(new ChannelUserAdded() { ChannelName = chan.Name' UserName = targetConnectedUser.Name }); " is 204.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,RemoveConnection,The length of the statement  "                foreach (var chan in server.Channels.Values.Where(x => x.Users.ContainsKey(Name)).ToList()) await Process(new LeaveChannel() { ChannelName = chan.Name }); " is 154.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,RemoveConnection,The length of the statement  "                await server.Broadcast(server.ConnectedUsers.Values.Where(x => x != null && server.CanUserSee(x' this))' new UserDisconnected() { Name = Name' Reason = reason }); " is 162.
Long Statement,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,LeaveBattle,The length of the statement  "                            if (battle.Bots.TryRemove(b.Name' out obs)) await server.Broadcast(battle.Users.Keys' new RemoveBot() { Name = b.Name }); " is 121.
Long Statement,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The length of the statement  "            if (party != null) wantedQueues = wantedQueues.Where(x => x.MaxSize / 2 >= party.UserNames.Count).ToList(); // if is in party keep only queues where party fits " is 159.
Long Statement,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,BannedSeconds,The length of the statement  "            if (bannedPlayers.TryGetValue(name' out banEntry) && (DateTime.UtcNow.Subtract(banEntry.BannedTime).TotalSeconds < banEntry.BanSeconds)) return (int)(banEntry.BanSeconds - DateTime.UtcNow.Subtract(banEntry.BannedTime).TotalSeconds); " is 232.
Long Statement,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,BannedSeconds,The length of the statement  "            if (banEntry != null && DateTime.UtcNow.Subtract(banEntry.BannedTime).TotalSeconds > BanReset) bannedPlayers.TryRemove(name' out banEntry); " is 139.
Long Statement,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,CountIngamePeople,The length of the statement  "            foreach (var bat in server.Battles.Values.OfType<MatchMakerBattle>().Where(x => (x != null) && x.IsMatchMakerBattle && x.IsInGame)) " is 131.
Long Statement,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,RemoveSingleUser,The length of the statement  "                if (server.ConnectedUsers.TryGetValue(name' out conUser) && (conUser != null)) if (entry?.InvitedToPlay == true) await conUser.SendCommand(new AreYouReadyResult() { AreYouBanned = true' IsBattleStarting = false' }); " is 215.
Long Statement,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,UpdatePlayerStatus,The length of the statement  "                        ret.InstantStartQueues.AddRange(testBattles.Where(x => x.Players.Contains(testSelf)).Select(x => x.QueueType.Name).Distinct().ToList()); " is 136.
Long Statement,ZkLobbyServer,PlayerEntry,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.PlayerEntry.cs,GenerateWantedBattles,The length of the statement  "                            if (Party == null || (qt.Mode == AutohostMode.GameChickens && Party.UserNames.Count<=i) || Party.UserNames.Count <= i / 2) ret.Add(new ProposedBattle(i' this' qt' qt.EloCutOffExponent' allPlayers)); " is 198.
Long Statement,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,AddPlayer,The length of the statement  "                    //Trace.TraceError("MM: added party {6} MinElo: {0}->{1} ({4})'  MaxElo: {2}->{3} ({5})"' minEloOrg' MinElo' maxEloOrg' MaxElo' GetPartyMaxElo(player.Party' allPlayers)' GetPartyMinElo(player.Party' allPlayers)' player.Name); " is 225.
Long Statement,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,AddPlayer,The length of the statement  "                        //Trace.TraceError("MM: added player {6} MinElo: {0}->{1} ({4})'  MaxElo: {2}->{3} ({5})"' minEloOrg' MinElo' maxEloOrg' MaxElo' GetPlayerMaxElo(player)' GetPlayerMinElo(player)' player.Name); " is 192.
Long Statement,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CanBeAdded,The length of the statement  "                    if ((GetPartyMinElo(other.Party' allPlayers) - MinElo > width) || (MaxElo - GetPartyMaxElo(other.Party' allPlayers) > width)) " is 125.
Long Statement,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CanBeAdded,The length of the statement  "                        //Trace.TraceError("MM: cannot add party {0}' {1} - {2} > {3} || {4} - {5} > {3}"' other.Name' GetPartyMinElo(other.Party' allPlayers)' MinElo' width' MaxElo' GetPartyMaxElo(other.Party' allPlayers)); " is 200.
Long Statement,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CanBeAdded,The length of the statement  "                    //Trace.TraceError("MM: cannot add {0}' {1} - {2} > {3} || {4} - {5} > {3}"' other.Name' GetPlayerMinElo(other)' MinElo' width' MaxElo' GetPlayerMaxElo(other)); " is 160.
Long Statement,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,VerifyPartySizeFits,The length of the statement  "                    if ((party.UserNames.Count + t1 > maxTeamSize) && (party.UserNames.Count + t2 > maxTeamSize)) return false; // cannot fit new party to still balance " is 148.
Long Statement,ZkLobbyServer,PartyManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessInviteToParty,The length of the statement  "                if (myParty == null && usr.MyBattle == null && target.MyBattle != null && !target.MyBattle.IsPassworded) await server.ForceJoinBattle(usr.Name' target.MyBattle); " is 161.
Long Statement,ZkLobbyServer,PartyManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessPartyInviteResponse,The length of the statement  "                        var targetBattle = inviterUser.MyBattle ?? inviteeUser.MyBattle; // join inviter user's battle' if its empty join invitee user's battle " is 135.
Long Statement,ZkLobbyServer,PartyManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,AddFriendsBy,The length of the statement  "                if (server.ConnectedUsers.TryGetValue(p' out usr)) foreach (var f in usr.FriendBy) if (server.ConnectedUsers.ContainsKey(f) && !result.Contains(f)) result.Add(f); " is 162.
Long Statement,ZkLobbyServer,PartyManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,RemoveFromParty,The length of the statement  "            if (party.UserNames.Count == 2 && names.Any(x => party.UserNames.Contains(x))) names = party.UserNames.ToArray(); // party has just two people and we remove one of them -> remove all " is 182.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The length of the statement  "            if ((say.Place == SayPlace.Battle) && !say.IsEmote && (user?.User.BanMute != true) && (user?.User.BanSpecChat != true) && say.AllowRelay) spring.SayGame($"<{say.User}>{say.Text}"); // relay to spring " is 199.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessPlayerJoin,The length of the statement  "            await server.Broadcast(Users.Keys.Where(x => x != user.Name)' ubs.ToUpdateBattleStatus()); // send my UBS to others in battle " is 125.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,RecalcSpectators,The length of the statement  "                    server.Broadcast(Users.Keys' new BattleUpdate() { Header = new BattleHeader() { SpectatorCount = specCount' BattleID = BattleID ' PlayerCount = NonSpectatorCount} }); " is 166.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,RequestConnectSpring,The length of the statement  "            if (!Users.TryGetValue(conus.Name' out ubs) && !(IsInGame && spring.LobbyStartContext.Players.Any(x => x.Name == conus.Name))) " is 126.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,Spectate,The length of the statement  "            if (server.ConnectedUsers.TryGetValue(name' out usr)) await usr.Process(new UpdateUserBattleStatus() { Name = usr.Name' IsSpectator = true }); " is 142.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartGame,The length of the statement  "                    if (server.ConnectedUsers.TryGetValue(us.Name' out user)) await user.SendCommand(GetConnectSpringStructure(us.ScriptPassword)); " is 127.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartGame,The length of the statement  "            await Task.WhenAll(startSetup.Players.Where(x => !x.IsSpectator).Select(x=>server.MatchMaker.RemoveUser(x.Name' false))); " is 121.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The length of the statement  "            HostedMod = MapPicker.FindResources(ResourceType.Mod' ModName ?? server.Game ?? GlobalConst.DefaultZkTag).FirstOrDefault(); " is 123.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ApplyBalanceResults,The length of the statement  "            foreach (var u in Users.Values.Select(x => x.ToUpdateBattleStatus()).ToList()) await server.Broadcast(Users.Keys' u); // send other's status to self " is 148.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,PickHostingPort,The length of the statement  "                var reservedPorts = server.Battles.Values.Where(x => x != null).Select(x => x.hostingPort).Distinct().ToDictionary(x => x' x => true); " is 134.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,spring_PlayerSaid,The length of the statement  "            if (!server.ConnectedUsers.TryGetValue(e.Username' out user) || user.User.BanMute || (user.User.BanSpecChat && !isPlayer)) " is 122.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,spring_PlayerSaid,The length of the statement  "            if (!e.Line.StartsWith("Allies:") && !e.Line.StartsWith("Spectators:")) server.GhostSay(new Say() { User = e.Username' Text = e.Line' Place = SayPlace.Battle' AllowRelay = false}' BattleID); " is 190.
Long Statement,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,DedicatedServerStarted,The length of the statement  "                foreach (var u in spring.LobbyStartContext.Players.Where(x => !x.IsSpectator)) service.NotifyMissionRun(u.Name' HostedMod.Mission.Name); " is 136.
Long Statement,ZkLobbyServer,SpringRelaySource,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringRelaySource.cs,OnSpringTasSaid,The length of the statement  "                    OnChatRelayMessage?.Invoke(this' new ChatRelayMessage(args.Channel' args.UserName' args.Text' SaySource.Spring' args.IsEmote)); " is 127.
Long Statement,ZkLobbyServer,SpringRelaySource,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringRelaySource.cs,SendMessage,The length of the statement  "                    if (msg.User != GlobalConst.NightwatchName) SpringTas.Say(TasClient.SayPlace.Channel' msg.Channel' string.Format("<{0}> {1}"' msg.User' msg.Message)' msg.IsEmote); " is 163.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,Broadcast,The length of the statement  "            await Task.WhenAll(ConnectedUsers.Values.Where(x => x != null).Select(async (client) => { await client.SendLine(line); })); " is 123.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,SyncUserToAll,The length of the statement  "            await Broadcast(ConnectedUsers.Values.Where(x=>x!=null).Where(x => CanUserSee(x' changer) && !HasSeen(x' changer))' changer.User); " is 130.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,CanUserSee,The length of the statement  "            if (!ConnectedUsers.TryGetValue(watcher' out uWatcher) || !ConnectedUsers.TryGetValue(watched' out uWatched)) return false; " is 123.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,HasSeen,The length of the statement  "            if (!ConnectedUsers.TryGetValue(watcher' out uWatcher) || !ConnectedUsers.TryGetValue(watched' out uWatched)) return true; " is 122.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostSay,The length of the statement  "                    if (say.User != GlobalConst.NightwatchName && ConnectedUsers.TryGetValue(say.User' out connectedUser)) await connectedUser.SendCommand(say); " is 140.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,Shutdown,The length of the statement  "            foreach (var usr in ConnectedUsers.Values) if (usr != null) foreach (var con in usr.Connections.Keys) con?.RequestClose(); " is 122.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,PublishAccountUpdate,The length of the statement  "                    if (chan.Value.Users.ContainsKey(acc.Name) && !ChannelManager.CanJoin(acc' chan.Key)) await conus.Process(new LeaveChannel() { ChannelName = chan.Key }); " is 153.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,PublishAccountUpdate,The length of the statement  "                    else if (!chan.Value.Users.ContainsKey(acc.Name) && defaultChannels.Contains(acc.Name)) await conus.Process(new JoinChannel() { ChannelName = chan.Key' Password = chan.Value.Password }); " is 186.
Long Statement,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,PublishUserProfilePlanetwarsPlayers,The length of the statement  "            foreach (var conus in ConnectedUsers.Values.Where(x => x != null && x.IsLoggedIn && !string.IsNullOrEmpty(x.User.Faction))) " is 123.
Long Statement,ZkLobbyServer,TcpTransportServerListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The length of the statement  "                    listener.Server.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption(GlobalConst.TcpLingerStateEnabled' GlobalConst.TcpLingerStateSeconds)); " is 171.
Long Statement,ZkLobbyServer,TcpTransportServerListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The length of the statement  "                    if (!SetHandleInformation(listener.Server.Handle' HANDLE_FLAGS.INHERIT | HANDLE_FLAGS.PROTECT_FROM_CLOSE' 0)) throw new ApplicationException("Unable to set socket flags: " + Marshal.GetLastWin32Error()); " is 203.
Long Statement,ZkLobbyServer,ZkServerTraceListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,ProcessEvent,The length of the statement  "                var say = new Say() { Place = SayPlace.Channel' Target = "zkerror"' Text = text' User = GlobalConst.NightwatchName' Time=DateTime.UtcNow}; " is 138.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                        else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true); " is 123.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                                x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList(); " is 122.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                        else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true); " is 123.
Long Statement,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The length of the statement  "                        if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList(); " is 137.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                    fallback.Message += "\nWarning: STANDARD TEAM BALANCE USED' PlanetWars not possible with those teams' too many from one faction"; " is 129.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                if (mode == BalanceMode.ClanWise && (bestTeams == null || GetTeamsDifference(bestTeams) > MaxCbalanceDifference || sizesWrong)) return new Balancer().LegacyBalance(teamCount' BalanceMode.Normal' b' unmovablePlayers); " is 216.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                    fallback.Message += "\nWarning: STANDARD TEAM BALANCE USED' PlanetWars not possible with those teams' too many from one faction"; " is 129.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                            "Failed to balance {0} - too many people from same clan or faction (in teams game you can try !random and !forcestart)"); " is 121.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The length of the statement  "                if (unmovablePlayers == null || unmovablePlayers.Length == 0) bestTeams = bestTeams.Shuffle(); // permute when not unmovable players present " is 140.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                            if (!isGameStart) res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context); " is 140.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                            res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context); " is 123.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                            if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none") " is 133.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                                //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended."; " is 122.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                                if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' }); " is 132.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The length of the statement  "                                    for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' }); " is 152.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PlanetwarsBalance,The length of the statement  "                    foreach (var b in planet.PlanetStructures.Select(x => x.StructureType).Where(x => !string.IsNullOrEmpty(x.EffectBots))) res.Bots.Add(new BotTeam { AllyID = 1' BotAI = b.EffectBots' BotName = "Aliens" + cnt++ }); " is 211.
Long Statement,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,VerifySpecCheaters,The length of the statement  "                        .ToDictionary(x => x.AccountID' x => x.AccountIPs.OrderByDescending(y => y.LastLogin).Select(y => y.IP).FirstOrDefault()); " is 122.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SubmitSpringBattleResult,The length of the statement  "                Dictionary<int' int> orgLevels = sb.SpringBattlePlayers.Select(x => x.Account).ToDictionary(x => x.AccountID' x => x.Level); " is 124.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessElos,The length of the statement  "            bool noElo = result.OutputExtras.Any(x => x?.StartsWith("noElo"' true' System.Globalization.CultureInfo.CurrentCulture) == true); " is 129.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The length of the statement  "            if (result.LobbyStartContext.Mode != AutohostMode.Planetwars || sb.PlayerCount < 2 || sb.Duration < GlobalConst.MinDurationForPlanetwars) return; " is 145.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The length of the statement  "            List<int> winnerTeams = sb.SpringBattlePlayers.Where(x => x.IsInVictoryTeam && !x.IsSpectator).Select(x => x.AllyNumber).Distinct().ToList(); " is 141.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SaveSpringBattle,The length of the statement  "            var victoryAllyID = result.ActualPlayers.Where(x => x.IsVictoryTeam).Select(x => (int?)x.AllyNumber).FirstOrDefault() ?? -1; " is 124.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SaveSpringBattle,The length of the statement  "            if (victoryAllyID == -1) victoryAllyID = (result.ActualPlayers.Min(x => (int?)x.AllyNumber)??-1) + 1; // no player won' its likely to be next lowes team (stupid hack needed) " is 173.
Long Statement,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,SaveSpringBattle,The length of the statement  "            return db.SpringBattles.FirstOrDefault(x => x.SpringBattleID == sb.SpringBattleID); // reselect from db to get proper lazy proxies " is 130.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                    var groupedByTeam = context.Players.Where(x => !x.IsSpectator).GroupBy(x => x.AllyID).OrderByDescending(x => x.Count()); " is 120.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                        userParams["elo"] = Math.Round(RatingSystems.DisableRatingSystems ? user.BestEffectiveElo : user.GetBestRating().Elo).ToString(); " is 129.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                        userParams["ignored"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Ignore).Select(x=>x.Target.Name)); " is 133.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                        userParams["friends"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Friend).Select(x=>x.Target.Name)); " is 133.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                                                (x.RoleType.RestrictFactionID == null || x.RoleType.RestrictFactionID == user.FactionID)).OrderBy(x=>x.RoleType.DisplayOrder).Select(x => (int?)x.RoleType.DisplayOrder).FirstOrDefault() ?? 999).ToString(); " is 205.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                                userParams["pwInstructions"] = Convert.ToBase64String(Encoding.UTF8.GetBytes(GetPwInstructions(planet' user' db' attacker))); " is 125.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                                            var slots = db.CommanderSlots.ToList().Where(x => x.MorphLevel == i && (x.ChassisID == null || (x.ChassisID == c.ChassisUnlockID))).ToList(); " is 141.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The length of the statement  "                        var s in planet.PlanetStructures.Where(x => x.StructureType != null && !string.IsNullOrEmpty(x.StructureType.IngameUnitName))) " is 126.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("You are attacking {0} planet {1}\n"' planet.Faction != null ? planet.Faction.Name : "neutral"' planet.Name); " is 125.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you win you will gain {0:N1} influence ({1:N1} base + {2:N1} from dropships - {3:N1} from defense)\n"' " is 122.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you are winning' protect your command center. If you lose it' you will only get {0:N1} influence here\n"' attackerWinLoseCc); " is 145.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("You are defending {0} planet {1}\n"' planet.Faction != null ? planet.Faction.Name : "neutral"' planet.Name); " is 125.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you win' attacker will get nothing' but they can disable your PlanetWars structures by destroying them here.\n"); " is 133.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you lose' {4} will gain {0:N1} influence ({1:N1} base + {2:N1} from dropships - {3:N1} from defense)\n"' " is 124.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you are losing' try to kill enemy command center' they will only gain {0:N1} influence\n"' attackerWinLoseCc); " is 130.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("If you are winning' protect your command center. If you win but lose it' they will still get {0:N1} influence here\n"' attackerLoseKillCc); " is 156.
Long Statement,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetPwInstructions,The length of the statement  "                sb.AppendFormat("You should also protect PlanetWars structures as if they die they get disabled on the strategic map\n"); " is 121.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,AcceptChallenge,The length of the statement  "                        $"Battle for planet {Challenge.Name} starts on zk://@join_player:{Challenge.Attackers.FirstOrDefault()}  Roster: {string.Join("'"' Challenge.Attackers)} vs {string.Join("'"' Challenge.Defenders)}"; " is 197.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,JoinPlanet,The length of the statement  "                    else if ((Challenge != null) && GetDefendingFactions(Challenge).Contains(faction)) await JoinPlanetDefense(planetId' name); " is 123.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,GetAttackDeadline,The length of the statement  "            if (missedDefenseFactionID == AttackingFaction.FactionID) extra = Math.Min(missedDefenseCount * GlobalConst.PlanetWarsMinutesToAttack' 60); " is 139.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,GetDefendingFactions,The length of the statement  "                    foreach (var of in db.Factions.Where(x=>!x.IsDeleted && x.FactionID != target.OwnerFactionID && x.FactionID != AttackingFaction.FactionID)) " is 139.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,InternalAddOption,The length of the statement  "                StructureImages = planet.PlanetStructures.Select(x => x.IsActive ? x.StructureType.MapIcon : x.StructureType.DisabledMapIcon).ToList() " is 134.
Long Statement,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,JoinPlanetAttack,The length of the statement  "                            foreach (var aop in AttackOptions.Where(x => x.PlanetID != targetPlanetId)) aop.Attackers.RemoveAll(x => x == userName); " is 120.
Complex Conditional,ZkLobbyServer,CmdResign,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdResign.cs,GetRunPermissions,The conditional expression  "entry != null && !entry.IsSpectator && (alliance == null || entry.AllyID == alliance)"  is complex.
Complex Conditional,ZkLobbyServer,CmdRing,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdRing.cs,Arm,The conditional expression  "(p.SyncStatus != SyncStatuses.Synced || p.IsSpectator) || (battle.spring.IsRunning && ingameEntry?.IsSpectator == false && ingameEntry?.IsIngameReady == false)"  is complex.
Complex Conditional,ZkLobbyServer,ClientConnection,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ClientConnection.cs,Process,The conditional expression  "s.LobbyStartContext.Players.Any(x => !x.IsSpectator && x.Name == Name) && !s.Context.ActualPlayers.Any(x=>x.Name == Name && x.LoseTime != null)"  is complex.
Complex Conditional,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The conditional expression  "data["netname"].ToLower().Contains(company) || data["org-name"].ToLower().Contains(company) ||                              data["descr"].ToLower().Contains(company) || data["role"].ToLower().Contains(company) ||                              data["remarks"].ToLower().Contains(company)"  is complex.
Complex Conditional,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The conditional expression  "((say.Place != SayPlace.Battle) && (say.Place != SayPlace.BattlePrivate)) || (MyBattle == null) ||                          (MyBattle.FounderName != Name)"  is complex.
Complex Conditional,ZkLobbyServer,PlayerEntry,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.PlayerEntry.cs,GenerateWantedBattles,The conditional expression  "Party == null || (qt.Mode == AutohostMode.GameChickens && Party.UserNames.Count<=i) || Party.UserNames.Count <= i / 2"  is complex.
Complex Conditional,ZkLobbyServer,PartyManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,ProcessInviteToParty,The conditional expression  "myParty == null && usr.MyBattle == null && target.MyBattle != null && !target.MyBattle.IsPassworded"  is complex.
Complex Conditional,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The conditional expression  "(say.Place == SayPlace.Battle) && !say.IsEmote && (user?.User.BanMute != true) && (user?.User.BanSpecChat != true) && say.AllowRelay"  is complex.
Complex Conditional,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,spring_PlayerSaid,The conditional expression  "!server.ConnectedUsers.TryGetValue(e.Username' out user) || user.User.BanMute || (user.User.BanSpecChat && !isPlayer)"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,LegacyBalance,The conditional expression  "mode == BalanceMode.ClanWise && (bestTeams == null || GetTeamsDifference(bestTeams) > MaxCbalanceDifference || sizesWrong)"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The conditional expression  "awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze")"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The conditional expression  "awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin")"  is complex.
Complex Conditional,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The conditional expression  "!allied && user.Faction != null && (user.Faction == attacker || user.Faction == defender)"  is complex.
Empty Catch Block,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,LoginChecker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\LoginChecker.cs,HasVpn,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,pollTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerRunner,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Stop,The method has an empty catch block.
Empty Catch Block,ZkLobbyServer,ServerRunner,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Stop,The method has an empty catch block.
Magic Number,ZkLobbyServer,CmdListGames,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdListGames.cs,Arm,The following statement contains a magic number: games = MapPicker.FindResources(ResourceType.Mod' arguments).Take(200).ToList();
Magic Number,ZkLobbyServer,CmdListMaps,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdListMaps.cs,Arm,The following statement contains a magic number: maps = MapPicker.FindResources(ResourceType.Map' arguments).Take(200).ToList();
Magic Number,ZkLobbyServer,CmdPoll,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdPoll.cs,Arm,The following statement contains a magic number: var parts = arguments.Split(new[] { ' ' }' 2);
Magic Number,ZkLobbyServer,CmdSetOptions,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,The following statement contains a magic number: foreach (var pair in pairs)              {                  var parts = pair.Split(new[] { '=' }' 2);                  if (parts.Length != 2)                  {                      battle.Respond(e' "requires key=value format");                      return ret;                  }                  var key = parts[0].Trim(); //Trim() to make "key = value format" ignore whitespace                   var val = parts[1].Trim();                    var found = false;                  var mod = battle.HostedModInfo;                  foreach (var o in mod.Options)                  {                      if (o.Key == key)                      {                          found = true;                          string res;                          if (o.GetPair(val' out res))                          {                              ret[key] = val;                          }                          else battle.Respond(e' "Value " + val + " is not valid for this option");                            break;                      }                  }                  if (!found)                  {                      battle.Respond(e' "No option called " + key + " found");                      return ret;                  }              }
Magic Number,ZkLobbyServer,CmdSetOptions,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdSetOptions.cs,GetOptionsDictionary,The following statement contains a magic number: foreach (var pair in pairs)              {                  var parts = pair.Split(new[] { '=' }' 2);                  if (parts.Length != 2)                  {                      battle.Respond(e' "requires key=value format");                      return ret;                  }                  var key = parts[0].Trim(); //Trim() to make "key = value format" ignore whitespace                   var val = parts[1].Trim();                    var found = false;                  var mod = battle.HostedModInfo;                  foreach (var o in mod.Options)                  {                      if (o.Key == key)                      {                          found = true;                          string res;                          if (o.GetPair(val' out res))                          {                              ret[key] = val;                          }                          else battle.Respond(e' "Value " + val + " is not valid for this option");                            break;                      }                  }                  if (!found)                  {                      battle.Respond(e' "No option called " + key + " found");                      return ret;                  }              }
Magic Number,ZkLobbyServer,CmdVote,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\Commands\CmdVote.cs,ExecuteArmed,The following statement contains a magic number: await battle.RegisterVote(e' opt != 2);
Magic Number,ZkLobbyServer,CommandPoll,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\CommandPoll.cs,Setup,The following statement contains a magic number: winCount = battle.Users.Values.Count(x => command.GetRunPermissions(battle' x.Name) >= BattleCommand.RunPermission.Vote && !cmd.IsSpectator(battle' x.Name' x)) / 2 + 1;
Magic Number,ZkLobbyServer,BattleListUpdater,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\BattleListUpdater.cs,BattleListUpdater,The following statement contains a magic number: timer = new Timer(UpdateIntervalSeconds*1000);
Magic Number,ZkLobbyServer,ChannelManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: if (RatingSystems.DisableRatingSystems) {                  if (server.TopPlayerProvider.GetTop().Take(20).Any(x => x.AccountID == lobbyID)) return true;                  if (server.TopPlayerProvider.GetTopCasual().Take(20).Any(x => x.AccountID == lobbyID)) return true;              } else {                  if (RatingSystems.GetRatingSystem(RatingCategory.Casual).GetPlayerRating(lobbyID).Rank <= 20) return true;                  if (RatingSystems.GetRatingSystem(RatingCategory.MatchMaking).GetPlayerRating(lobbyID).Rank <= 20) return true;              }
Magic Number,ZkLobbyServer,ChannelManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: if (RatingSystems.DisableRatingSystems) {                  if (server.TopPlayerProvider.GetTop().Take(20).Any(x => x.AccountID == lobbyID)) return true;                  if (server.TopPlayerProvider.GetTopCasual().Take(20).Any(x => x.AccountID == lobbyID)) return true;              } else {                  if (RatingSystems.GetRatingSystem(RatingCategory.Casual).GetPlayerRating(lobbyID).Rank <= 20) return true;                  if (RatingSystems.GetRatingSystem(RatingCategory.MatchMaking).GetPlayerRating(lobbyID).Rank <= 20) return true;              }
Magic Number,ZkLobbyServer,ChannelManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: if (RatingSystems.DisableRatingSystems) {                  if (server.TopPlayerProvider.GetTop().Take(20).Any(x => x.AccountID == lobbyID)) return true;                  if (server.TopPlayerProvider.GetTopCasual().Take(20).Any(x => x.AccountID == lobbyID)) return true;              } else {                  if (RatingSystems.GetRatingSystem(RatingCategory.Casual).GetPlayerRating(lobbyID).Rank <= 20) return true;                  if (RatingSystems.GetRatingSystem(RatingCategory.MatchMaking).GetPlayerRating(lobbyID).Rank <= 20) return true;              }
Magic Number,ZkLobbyServer,ChannelManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChannelManager.cs,IsTop20,The following statement contains a magic number: if (RatingSystems.DisableRatingSystems) {                  if (server.TopPlayerProvider.GetTop().Take(20).Any(x => x.AccountID == lobbyID)) return true;                  if (server.TopPlayerProvider.GetTopCasual().Take(20).Any(x => x.AccountID == lobbyID)) return true;              } else {                  if (RatingSystems.GetRatingSystem(RatingCategory.Casual).GetPlayerRating(lobbyID).Rank <= 20) return true;                  if (RatingSystems.GetRatingSystem(RatingCategory.MatchMaking).GetPlayerRating(lobbyID).Rank <= 20) return true;              }
Magic Number,ZkLobbyServer,ChatRelay,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,ChatRelay,The following statement contains a magic number: timer = new Timer(TimerCallback' this' 1000' 2000);
Magic Number,ZkLobbyServer,ChatRelay,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ChatRelay.cs,ChatRelay,The following statement contains a magic number: timer = new Timer(TimerCallback' this' 1000' 2000);
Magic Number,ZkLobbyServer,ForumListManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,CachePublicForumList,The following statement contains a magic number: using (var db = new ZkDataContext())              {                    var accessibleThreads = db.ForumThreads.Where(x => x.RestrictedClanID == null && x.ForumCategory.ForumMode != ForumMode.Archive);                    cachedPublicForumList = new ForumList()                  {                      ForumItems = accessibleThreads.OrderByDescending(x => x.LastPost).Take(10).ToList().Select(x =>                          new ForumItem()                          {                              ThreadID = x.ForumThreadID'                              Time = x.LastPost ?? x.Created'                              Url = $"{GlobalConst.BaseSiteUrl}/Forum/Thread/{x.ForumThreadID}"'                              Header = x.Title'                              IsRead = false                          }).ToList()                  };              }
Magic Number,ZkLobbyServer,ForumListManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ForumListManager.cs,CachePrivateForumList,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  var account = db.Accounts.Find(accountID);                                    var accessibleThreads = db.ForumThreads.Where(x => x.RestrictedClanID == null || x.RestrictedClanID == account.ClanID);                  accessibleThreads = accessibleThreads.Where(x => x.ForumCategory.ForumMode != ForumMode.Archive);                    var threads = (from t in accessibleThreads                      let read = t.ForumThreadLastReads.FirstOrDefault(x => x.AccountID == account.AccountID)                      orderby t.LastPost descending                      select new { Thread = t' Read = read != null && read.LastRead >= t.LastPost }).Take(10).ToList();                                                          var list = new ForumList()                  {                      ForumItems = threads.Select(x =>                          new ForumItem()                          {                              ThreadID = x.Thread.ForumThreadID'                              Time = x.Thread.LastPost ?? x.Thread.Created'                              Url = $"{GlobalConst.BaseSiteUrl}/Forum/Thread/{x.Thread.ForumThreadID}"'                              Header = x.Thread.Title'                              IsRead = x.Read                          }).ToList()                  };                    cachedAccountForumLists[account.AccountID] = list;                    return list;              }
Magic Number,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: openBattle.Header.Title = openBattle.Header.Title.Truncate(200);
Magic Number,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: h.Title = h.Title.Truncate(200);
Magic Number,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following statement contains a magic number: if ((battle != null) && !battle.IsInGame)              {                  if (battle.Mode != AutohostMode.None && battle.Mode != AutohostMode.GameChickens)                  {                      await Respond("Sorry' this room type does not support bots' please use cooperative or custom");                      return;                  }                    BotBattleStatus ubs;                  if (!battle.Bots.TryGetValue(add.Name' out ubs))                  {                      if (battle.Bots.Count < 50)                      {                          ubs = new BotBattleStatus(add.Name' Name' add.AiLib);                      }                      else                      {                          await Respond("Maximal number of bots reached");                          return;                      }                  }                  else if ((ubs.owner != Name) && !User.IsAdmin && (Name != battle.FounderName))                  {                      await Respond(string.Format("No permissions to edit bot {0}"' add.Name));                      return;                  }                  ubs.UpdateWith(add);                  battle.Bots[ubs.Name] = ubs;                  await server.Broadcast(battle.Users.Keys' ubs.ToUpdateBotStatus());              }
Magic Number,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Throttle,The following statement contains a magic number: if (bytesSent <= GlobalConst.LobbyThrottleBytesPerSecond * seconds)              {                  bytesSent = 0;                  lastThrottleReset = now;              }              else              {                  var needForSleep = (double)bytesSent / GlobalConst.LobbyThrottleBytesPerSecond - seconds;                  await Task.Delay((int)Math.Round(needForSleep * 1000.0));              }
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Teams"'                  Description = "Play 2v2 to 4v4 with players of similar skill."'                  MinSize = 4'                  MaxSize = 8'                  MaxPartySize = 4'                  EloCutOffExponent = 0.96'                  Mode = AutohostMode.Teams'                  MapSelector = IsTeamsMap'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Coop"'                  Description = "Play together' against AI or chickens"'                  MinSize = 2'                  MaxSize = 5'                  MaxPartySize = 5'                  EloCutOffExponent = 0'                  Mode = AutohostMode.GameChickens'                  MapSelector = IsCoopMap'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Coop"'                  Description = "Play together' against AI or chickens"'                  MinSize = 2'                  MaxSize = 5'                  MaxPartySize = 5'                  EloCutOffExponent = 0'                  Mode = AutohostMode.GameChickens'                  MapSelector = IsCoopMap'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "Coop"'                  Description = "Play together' against AI or chickens"'                  MinSize = 2'                  MaxSize = 5'                  MaxPartySize = 5'                  EloCutOffExponent = 0'                  Mode = AutohostMode.GameChickens'                  MapSelector = IsCoopMap'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "1v1"'                  Description = "1v1 with opponent of similar skill"'                  MinSize = 2'                  MaxSize = 2'                  EloCutOffExponent = 0.975'                  MaxPartySize = 1'                  Mode = AutohostMode.Game1v1'                  MapSelector = Is1v1Map'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "1v1"'                  Description = "1v1 with opponent of similar skill"'                  MinSize = 2'                  MaxSize = 2'                  EloCutOffExponent = 0.975'                  MaxPartySize = 1'                  Mode = AutohostMode.Game1v1'                  MapSelector = Is1v1Map'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: queueConfigs.Add(new QueueConfig()              {                  Name = "1v1"'                  Description = "1v1 with opponent of similar skill"'                  MinSize = 2'                  MaxSize = 2'                  EloCutOffExponent = 0.975'                  MaxPartySize = 1'                  Mode = AutohostMode.Game1v1'                  MapSelector = Is1v1Map'              });
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,MatchMaker,The following statement contains a magic number: timer = new Timer(TimerSeconds * 1000);
Magic Number,ZkLobbyServer,MatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.cs,QueueRequest,The following statement contains a magic number: if (party != null) wantedQueues = wantedQueues.Where(x => x.MaxSize / 2 >= party.UserNames.Count).ToList();
Magic Number,ZkLobbyServer,PlayerEntry,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.PlayerEntry.cs,GenerateWantedBattles,The following statement contains a magic number: foreach (var qt in QueueTypes)                  {                      // variable game size' allow smaller games the longer the wait of longest waiting player                      var qtMaxWait = qt.MaxSize > qt.MinSize ? allPlayers.Where(x => x.QueueTypes.Contains(qt)).Max(x => x.WaitRatio) : 0;                         for (var i = qt.MaxSize; i >= qt.MaxSize - (qt.MaxSize - qt.MinSize) * qtMaxWait; i--)                          if (qt.Mode == AutohostMode.GameChickens || i % 2 == 0)                          {                              if (Party == null || (qt.Mode == AutohostMode.GameChickens && Party.UserNames.Count<=i) || Party.UserNames.Count <= i / 2) ret.Add(new ProposedBattle(i' this' qt' qt.EloCutOffExponent' allPlayers));                          }                  }
Magic Number,ZkLobbyServer,PlayerEntry,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.PlayerEntry.cs,GenerateWantedBattles,The following statement contains a magic number: foreach (var qt in QueueTypes)                  {                      // variable game size' allow smaller games the longer the wait of longest waiting player                      var qtMaxWait = qt.MaxSize > qt.MinSize ? allPlayers.Where(x => x.QueueTypes.Contains(qt)).Max(x => x.WaitRatio) : 0;                         for (var i = qt.MaxSize; i >= qt.MaxSize - (qt.MaxSize - qt.MinSize) * qtMaxWait; i--)                          if (qt.Mode == AutohostMode.GameChickens || i % 2 == 0)                          {                              if (Party == null || (qt.Mode == AutohostMode.GameChickens && Party.UserNames.Count<=i) || Party.UserNames.Count <= i / 2) ret.Add(new ProposedBattle(i' this' qt' qt.EloCutOffExponent' allPlayers));                          }                  }
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,ProposedBattle,The following statement contains a magic number: widthMultiplier = Math.Max(1.0' 1.0 + (Size - 4) * 0.1);
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,ProposedBattle,The following statement contains a magic number: widthMultiplier = Math.Max(1.0' 1.0 + (Size - 4) * 0.1);
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: if (input >= 1500) return Math.Round(1500.0 + Math.Pow(input - 1500.0' eloCutOffExponent));                  else return 1500.0 - Math.Pow(1500.0 - input' eloCutOffExponent);
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: if (input >= 1500) return Math.Round(1500.0 + Math.Pow(input - 1500.0' eloCutOffExponent));                  else return 1500.0 - Math.Pow(1500.0 - input' eloCutOffExponent);
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: if (input >= 1500) return Math.Round(1500.0 + Math.Pow(input - 1500.0' eloCutOffExponent));                  else return 1500.0 - Math.Pow(1500.0 - input' eloCutOffExponent);
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: if (input >= 1500) return Math.Round(1500.0 + Math.Pow(input - 1500.0' eloCutOffExponent));                  else return 1500.0 - Math.Pow(1500.0 - input' eloCutOffExponent);
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,CutOffFunc,The following statement contains a magic number: if (input >= 1500) return Math.Round(1500.0 + Math.Pow(input - 1500.0' eloCutOffExponent));                  else return 1500.0 - Math.Pow(1500.0 - input' eloCutOffExponent);
Magic Number,ZkLobbyServer,ProposedBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\MatchMaker.ProposedBattle.cs,VerifyPartySizeFits,The following statement contains a magic number: if (QueueType.Mode != AutohostMode.GameChickens)                  {                        var existingPartySizes =                          Players.Where(x => x.Party != null)                              .GroupBy(x => x.Party)                              .Select(x => x.Key.UserNames.Count)                              .OrderByDescending(x => x)                              .ToList();                      var maxTeamSize = Size/2;                      var t1 = 0;                      var t2 = 0;                      foreach (var psize in existingPartySizes)                          if (t1 + psize <= maxTeamSize) t1 += psize;                          else if (t2 + psize <= maxTeamSize) t2 += psize;                        if ((party.UserNames.Count + t1 > maxTeamSize) && (party.UserNames.Count + t2 > maxTeamSize)) return false; // cannot fit new party to still balance                  }
Magic Number,ZkLobbyServer,PlanetWarsServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\MatchMaker\PlanetWarsServerBattle.cs,PlanetWarsServerBattle,The following statement contains a magic number: MaxPlayers = option.TeamSize*2;
Magic Number,ZkLobbyServer,NewsListManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\NewsListManager.cs,CacheNewsList,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  cachedNewsList = new NewsList()                  {                      NewsItems = db.LobbyNews.OrderByDescending(x => x.Created).Take(10).ToList().Select(x => new NewsItem                      {                          Time = x.EventTime'                          Header = x.Title'                          Text = x.Text'                          Image = $"{GlobalConst.BaseSiteUrl}{x.ImageRelativeUrl}"'                          Url = x.Url                      }).ToList()                  };              }
Magic Number,ZkLobbyServer,PartyManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\PartyManager.cs,RemoveFromParty,The following statement contains a magic number: if (party.UserNames.Count == 2 && names.Any(x => party.UserNames.Contains(x))) names = party.UserNames.ToArray();
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ServerBattle,The following statement contains a magic number: pollTimer = new Timer(PollTimeout * 1000);
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,IsKicked,The following statement contains a magic number: kickedPlayers.RemoveAll(x => x.TimeOfKicked <= DateTime.UtcNow.AddMinutes(-5));
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ProcessBattleSay,The following statement contains a magic number: if (!say.IsEmote && (say.Text?.Length > 1) && say.Text.StartsWith("!"))              {                  var parts = say.Text.Substring(1).Split(new[] { ' ' }' 2' StringSplitOptions.RemoveEmptyEntries);                  await RunCommandWithPermissionCheck(say' parts[0]' parts.Skip(1).FirstOrDefault());              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,StartVote,The following statement contains a magic number: if (await poll.Setup(command' e' args))              {                  ActivePoll = poll;                  pollTimer.Interval = PollTimeout * 1000;                  pollTimer.Enabled = true;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: if (MaxPlayers > 32) MaxPlayers = 32;
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following statement contains a magic number: if (MaxPlayers > 32) MaxPlayers = 32;
Magic Number,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,EnsureEngineIsPresent,The following statement contains a magic number: var task = down?.WaitHandle?.AsTask(TimeSpan.FromMinutes(3));
Magic Number,ZkLobbyServer,ServerRunner,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerRunner.cs,Run,The following statement contains a magic number: foreach (var listener in listeners) {                  if (listener.Bind(120)) {                      ITransportServerListener l = listener;                      var thread = new Thread(() =>                      {                          SynchronizationContext.SetSynchronizationContext(null);                          l.RunLoop((t) => { var client = new ClientConnection(t' ZkLobbyServer); });                      });                      listenThreads.Add(thread);                      thread.Start();                      thread.Priority = ThreadPriority.AboveNormal;                                      }              }
Magic Number,ZkLobbyServer,ServerTextCommands,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following statement contains a magic number: try              {                  if (say.Text?.StartsWith("!") == true)                  {                      ConnectedUser conus;                      if (server.ConnectedUsers.TryGetValue(say.User' out conus) && conus.User.IsAdmin)                      {                          var parts = say.Text.Split(new[] {' '}' 2);                          var command = parts.FirstOrDefault();                          var argument = parts.Skip(1).FirstOrDefault();                            switch (command)                          {                              case "!announce":                                  server.GhostSay(new Say() { Text = argument' User = say.User' Place = SayPlace.MessageBox' Ring = true' });                              break;                                case "!topic":                                  if (say.Place == SayPlace.Channel && !string.IsNullOrEmpty(say.Target))                                  {                                      server.SetTopic(say.Target' argument' say.User);                                  }                              break;                          }                      }                  }                }              catch (Exception ex)              {                  Trace.TraceWarning("Error processing message  {0} {1} : {2}"' say?.User' say?.Text' ex);              }
Magic Number,ZkLobbyServer,TcpTransportServerListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\TcpTransportServerListener.cs,Bind,The following statement contains a magic number: do {                  try {                      listener = new TcpListener(new IPEndPoint(IPAddress.Any' GlobalConst.LobbyServerPort));                      listener.Server.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption(GlobalConst.TcpLingerStateEnabled' GlobalConst.TcpLingerStateSeconds));                      listener.Server.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' 0);                      if (!SetHandleInformation(listener.Server.Handle' HANDLE_FLAGS.INHERIT | HANDLE_FLAGS.PROTECT_FROM_CLOSE' 0)) throw new ApplicationException("Unable to set socket flags: " + Marshal.GetLastWin32Error());                        listener.Start();                      Trace.TraceInformation("Listening at port {0}"' GlobalConst.LobbyServerPort);                      ok = true;                  } catch (Exception ex) {                      Trace.TraceError("Error binding port {1} :{0}"' ex' GlobalConst.LobbyServerPort);                      Thread.Sleep(1000);                  }              } while (!ok && retryCount-- > 0);
Magic Number,ZkLobbyServer,ZkServerTraceListener,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkServerTraceListener.cs,ZkServerTraceListener,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  var oldEntry = DateTime.UtcNow.AddDays(-14);                  db.Database.ExecuteSqlCommand("delete from LogEntries where Time < {0}"' oldEntry);              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  List<Resource> list = null;                  var players = context.Players.Count(x => !x.IsSpectator);                    var level = context.IsMatchMakerGame ? MapSupportLevel.MatchMaker : MapSupportLevel.Featured;                    switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }                  if (list != null)                  {                      var r = new Random();                      if (list.Count > 0)                      {                          var resource = list[r.Next(list.Count)];                          return resource;                      }                  }              }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,GetTeamsDifference,The following statement contains a magic number: if (t.Count == 2) return Math.Abs(t[0].AvgElo - t[1].AvgElo);
Magic Number,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart) res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }                  return res;              }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart) res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }                  return res;              }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart) res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }                  return res;              }
Magic Number,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,RecursiveBalance,The following statement contains a magic number: if (iterationsChecked > 2000000) return;
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessPlanetWars,The following statement contains a magic number: if (result.LobbyStartContext.Mode != AutohostMode.Planetwars || sb.PlayerCount < 2 || sb.Duration < GlobalConst.MinDurationForPlanetwars) return;
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where(x => x?.StartsWith("award") == true))              {                  string[] partsSpace = line.Substring(6).Split(new[] { ' ' }' 3);                  string name = partsSpace[0];                  string awardType = partsSpace[1];                  string awardText = partsSpace[2];                    // prevent hax: tourney cups and event coins are never given automatically                  if (awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze")) continue;                  if (awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin")) continue;                    SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault(x => x.Account?.Name == name);                  if (player != null)                  {                      db.AccountBattleAwards.InsertOnSubmit(new AccountBattleAward                      {                          Account = player.Account'                          AccountID = player.AccountID'                          SpringBattleID = sb.SpringBattleID'                          AwardKey = awardType'                          AwardDescription = awardText                      });                  }              }
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where(x => x?.StartsWith("award") == true))              {                  string[] partsSpace = line.Substring(6).Split(new[] { ' ' }' 3);                  string name = partsSpace[0];                  string awardType = partsSpace[1];                  string awardText = partsSpace[2];                    // prevent hax: tourney cups and event coins are never given automatically                  if (awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze")) continue;                  if (awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin")) continue;                    SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault(x => x.Account?.Name == name);                  if (player != null)                  {                      db.AccountBattleAwards.InsertOnSubmit(new AccountBattleAward                      {                          Account = player.Account'                          AccountID = player.AccountID'                          SpringBattleID = sb.SpringBattleID'                          AwardKey = awardType'                          AwardDescription = awardText                      });                  }              }
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where(x => x?.StartsWith("award") == true))              {                  string[] partsSpace = line.Substring(6).Split(new[] { ' ' }' 3);                  string name = partsSpace[0];                  string awardType = partsSpace[1];                  string awardText = partsSpace[2];                    // prevent hax: tourney cups and event coins are never given automatically                  if (awardType != null && (awardType == "gold" || awardType == "silver" || awardType == "bronze")) continue;                  if (awardType != null && (awardType == "goldcoin" || awardType == "silvercoin" || awardType == "bronzecoin")) continue;                    SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault(x => x.Account?.Name == name);                  if (player != null)                  {                      db.AccountBattleAwards.InsertOnSubmit(new AccountBattleAward                      {                          Account = player.Account'                          AccountID = player.AccountID'                          SpringBattleID = sb.SpringBattleID'                          AwardKey = awardType'                          AwardDescription = awardText                      });                  }              }
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where(x => x?.StartsWith("CHATLOG") == true))              {                  string[] partsSpace = line.Substring(8).Split(new[] { ' ' }' 2);                  string name = partsSpace[0];                  string chatlog = partsSpace[1];                    SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault(x => x.Account?.Name == name);                  if (player != null)                  {                      db.LobbyChatHistories.InsertOnSubmit(new LobbyChatHistory                      {                          IsEmote = false'                          SayPlace = SayPlace.Game'                          User = name'                          Ring = false'                          Target = "B" + sb.SpringBattleID'                          Text = chatlog'                          Time = DateTime.UtcNow                      });                  }              }
Magic Number,ZeroKWeb.SpringieInterface,BattleResultHandler,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\BattleResultHandler.cs,ProcessExtras,The following statement contains a magic number: foreach (string line in extras.Where(x => x?.StartsWith("CHATLOG") == true))              {                  string[] partsSpace = line.Substring(8).Split(new[] { ' ' }' 2);                  string name = partsSpace[0];                  string chatlog = partsSpace[1];                    SpringBattlePlayer player = sb.SpringBattlePlayers.FirstOrDefault(x => x.Account?.Name == name);                  if (player != null)                  {                      db.LobbyChatHistories.InsertOnSubmit(new LobbyChatHistory                      {                          IsEmote = false'                          SayPlace = SayPlace.Game'                          User = name'                          Ring = false'                          Target = "B" + sb.SpringBattleID'                          Text = chatlog'                          Time = DateTime.UtcNow                      });                  }              }
Magic Number,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The following statement contains a magic number: try              {                  var mode = context.Mode;                   var commProfiles = new LuaTable();                  var db = new ZkDataContext();                    // calculate to whom to send extra comms                  var accountIDsWithExtraComms = new List<int>();                  if (mode == AutohostMode.Planetwars || mode == AutohostMode.GameFFA || mode == AutohostMode.Teams)                  {                      var groupedByTeam = context.Players.Where(x => !x.IsSpectator).GroupBy(x => x.AllyID).OrderByDescending(x => x.Count());                      var biggest = groupedByTeam.FirstOrDefault();                      if (biggest != null)                      {                          foreach (var other in groupedByTeam.Skip(1))                          {                              var cnt = biggest.Count() - other.Count();                              if (cnt > 0)                              {                                  foreach (var a in                                      other.Select(x => db.Accounts.First(y => y.AccountID == x.LobbyID))                                          .OrderByDescending(x => x.Elo*x.EloWeight)                                          .Take(cnt)) accountIDsWithExtraComms.Add(a.AccountID);                              }                          }                      }                  }                      // write Planetwars details to modoptions (for widget)                  Faction attacker = null;                  Faction defender = null;                  Planet planet = null;                  if (mode == AutohostMode.Planetwars)                  {                      planet = db.Galaxies.First(x => x.IsDefault).Planets.First(x => x.Resource.InternalName == context.Map);                      attacker =                          context.Players.Where(x => x.AllyID == 0 && !x.IsSpectator)                              .Select(x => db.Accounts.First(y => y.AccountID == x.LobbyID))                              .Where(x => x.Faction != null)                              .Select(x => x.Faction)                              .First();                        defender = planet.Faction;                        if (attacker == defender) defender = null;                        ret.ModOptions["attackingFaction"] = attacker.Shortcut;                      ret.ModOptions["attackingFactionName"] = attacker.Name;                      ret.ModOptions["attackingFactionColor"] = attacker.Color;                      if (defender != null)                      {                          ret.ModOptions["defendingFaction"] = defender.Shortcut;                          ret.ModOptions["defendingFactionName"] = defender.Name;                          ret.ModOptions["defendingFactionColor"] = defender.Color;                      }                      else                      {                          ret.ModOptions["defendingFaction"] = "Mercenary";                          ret.ModOptions["defendingFactionName"] = "Local militia";                          ret.ModOptions["defendingFactionColor"] = "#CCCCCC";                      }                      ret.ModOptions["planet"] = planet.Name;                  }                    // write player custom keys (level' elo' is muted' etc.)                  foreach (var p in context.Players)                  {                      var user = db.Accounts.Where(x=>x.AccountID == p.LobbyID).Include(x=>x.RelalationsByOwner).FirstOrDefault();                      if (user != null)                      {                          var userParams = new Dictionary<string' string>();                          ret.UserParameters[p.Name] = userParams;                            userParams["LobbyID"] = user.AccountID.ToString();                          userParams["CountryCode"] = user.Country;                            var userBanMuted = Punishment.GetActivePunishment(user.AccountID' null' null' x => x.BanMute) != null;                          if (userBanMuted) userParams["muted"] = "1";                          userParams["faction"] = user.Faction != null ? user.Faction.Shortcut : "";                          userParams["clan"] = user.Clan != null ? user.Clan.Shortcut : "";                          userParams["clanfull"] = user.Clan != null ? user.Clan.ClanName : "";                            userParams["level"] = user.Level.ToString();                          //userParams["mm_elo"] = Math.Round(user.EffectiveMmElo).ToString();                          //userParams["casual_elo"] = Math.Round(user.EffectiveElo).ToString();                            userParams["elo"] = Math.Round(RatingSystems.DisableRatingSystems ? user.BestEffectiveElo : user.GetBestRating().Elo).ToString();                                                    userParams["icon"] = user.GetIconName();                          userParams["avatar"] = user.Avatar;                          userParams["badges"] = string.Join("'"' user.GetBadges());                          userParams["admin"] = user.AdminLevel >= AdminLevel.Moderator ? "1" : "0";                          if (p.PartyID.HasValue) userParams["PartyID"] = p.PartyID.ToString();                            var userSpecChatBlocked = Punishment.GetActivePunishment(user.AccountID' null' null' x => x.BanSpecChat) != null; ;                          userParams["can_spec_chat"] = userSpecChatBlocked ? "0" : "1";                            userParams["ignored"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Ignore).Select(x=>x.Target.Name));                          userParams["friends"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Friend).Select(x=>x.Target.Name));                                                    if (!p.IsSpectator)                          {                              // set valid PW structure attackers                              if (mode == AutohostMode.Planetwars)                              {                                  userParams["pwRank"] = (user.AccountRolesByAccountID.Where(                                              x =>                                                  !x.RoleType.IsClanOnly &&                                                  (x.RoleType.RestrictFactionID == null || x.RoleType.RestrictFactionID == user.FactionID)).OrderBy(x=>x.RoleType.DisplayOrder).Select(x => (int?)x.RoleType.DisplayOrder).FirstOrDefault() ?? 999).ToString();                                      var allied = user.Faction != null && defender != null && user.Faction != defender &&                                               defender.HasTreatyRight(user.Faction' x => x.EffectPreventIngamePwStructureDestruction == true' planet);                                    if (!allied && user.Faction != null && (user.Faction == attacker || user.Faction == defender))                                  {                                      userParams["canAttackPwStructures"] = "1";                                  }                                    userParams["pwInstructions"] = Convert.ToBase64String(Encoding.UTF8.GetBytes(GetPwInstructions(planet' user' db' attacker)));                              }                                if (accountIDsWithExtraComms.Contains(user.AccountID)) userParams["extracomm"] = "1";                                var commProfileIDs = new LuaTable();                              var userCommandersBanned = Punishment.GetActivePunishment(user.AccountID' null' null' x => x.BanCommanders) != null;                               if (!userCommandersBanned)                              {                                  // set up commander data                                  foreach (var c in user.Commanders.Where(x => x.Unlock != null && x.ProfileNumber <= GlobalConst.CommanderProfileCount)                                      )                                  {                                      try                                      {                                          var commProfile = new LuaTable();                                            if (string.IsNullOrEmpty(c.Name) || c.Name.Any(x => x == '"'))                                          {                                              c.Name = c.CommanderID.ToString();                                          }                                          commProfiles.Add("c" + c.CommanderID' commProfile);                                          commProfileIDs.Add("c" + c.CommanderID);                                            // process decoration icons                                          var decorations = new LuaTable();                                          foreach (var d in                                              c.CommanderDecorations.Where(x => x.Unlock != null).OrderBy(x => x.SlotID).Select(x => x.Unlock))                                          {                                              var iconData = db.CommanderDecorationIcons.FirstOrDefault(x => x.DecorationUnlockID == d.UnlockID);                                              if (iconData != null)                                              {                                                  string iconName = null' iconPosition = null;                                                  // FIXME: handle avatars and preset/custom icons                                                  if (iconData.IconType == (int)DecorationIconTypes.Faction)                                                  {                                                      iconName = user.Faction != null ? user.Faction.Shortcut : null;                                                  }                                                  else if (iconData.IconType == (int)DecorationIconTypes.Clan)                                                  {                                                      iconName = user.Clan != null ? user.Clan.Shortcut : null;                                                  }                                                    if (iconName != null)                                                  {                                                      iconPosition = CommanderDecoration.GetIconPosition(d);                                                      var entry = new LuaTable();                                                      entry.Add("image"' iconName);                                                      decorations.Add("icon_" + iconPosition.ToLower()' entry);                                                  }                                              }                                              else decorations.Add(d.Code);                                          }                                            commProfile["name"] = c.Name.Substring(0' Math.Min(25' c.Name.Length));                                          commProfile["chassis"] = c.Unlock.Code;                                          commProfile["decorations"] = decorations;                                            var modules = new LuaTable();                                          commProfile["modules"] = modules;                                            for (var i = 1; i <= GlobalConst.NumCommanderLevels; i++)                                          {                                              var modulesForLevel = new LuaTable();                                              modules.Add(modulesForLevel);                                              var modulesOrdered = c.CommanderModules.Where(x => x.CommanderSlot.MorphLevel == i).ToList();                                              var slots = db.CommanderSlots.ToList().Where(x => x.MorphLevel == i && (x.ChassisID == null || (x.ChassisID == c.ChassisUnlockID))).ToList();                                              slots.Sort(delegate (CommanderSlot x' CommanderSlot y)                                              {                                                  UnlockTypes type1 = x.UnlockType;                                                  UnlockTypes type2 = y.UnlockType;                                                  if (type1 == UnlockTypes.WeaponManualFire || type1 == UnlockTypes.WeaponBoth)                                                      type1 = UnlockTypes.Weapon;                                                  if (type2 == UnlockTypes.WeaponManualFire || type2 == UnlockTypes.WeaponBoth)                                                      type2 = UnlockTypes.Weapon;                                                  int result = type1.CompareTo(type2);                                                  if (result == 0) return x.CommanderSlotID.CompareTo(y.CommanderSlotID);                                                  else return result;                                              });                                              foreach (var slot in slots)                                              {                                                  String value = String.Empty;                                                  var module = c.CommanderModules.FirstOrDefault(x => x.SlotID == slot.CommanderSlotID);                                                  if (module != null)                                                      value = module.Unlock.Code;                                                  modulesForLevel.Add(value);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          Trace.TraceError(ex.ToString());                                          throw new ApplicationException(                                              $"Error processing commander: {c.CommanderID} - {c.Name} of player {user.AccountID} - {user.Name}"'                                              ex);                                      }                                  }                              }                              else userParams["jokecomm"] = "1";                                userParams["commanders"] = commProfileIDs.ToBase64String();                          }                      }                  }                  ret.ModOptions["commanderTypes"] = commProfiles.ToBase64String();                    // set PW structures                  if (mode == AutohostMode.Planetwars)                  {                      var owner = planet.Faction != null ? planet.Faction.Shortcut : "";                        var pwStructures = new LuaTable();                      foreach (                          var s in planet.PlanetStructures.Where(x => x.StructureType != null && !string.IsNullOrEmpty(x.StructureType.IngameUnitName)))                      {                          pwStructures.Add(s.StructureType.IngameUnitName'                              new LuaTable                              {                                  { "unitname"' s.StructureType.IngameUnitName }'                                  { "owner"' s.Account?.Name }'                                  { "canBeEvacuated"' s.StructureType.IsIngameEvacuable }'                                  { "canBeDestroyed"' s.StructureType.IsIngameDestructible }'                                  //{ "isDestroyed"' s.IsDestroyed ? true : false }'                                  {                                      "name"' $"{owner} {s.StructureType.Name} ({(s.Account != null ? s.Account.Name : "unowned")})" }'                                  { "description"' s.StructureType.Description }                              });                      }                      ret.ModOptions["planetwarsStructures"] = pwStructures.ToBase64String();                  }                    return ret;              }              catch (Exception ex)              {                  Trace.TraceError(ex.ToString());                  throw;              }
Magic Number,ZeroKWeb.SpringieInterface,StartSetup,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\StartSetup.cs,GetDedicatedServerStartSetup,The following statement contains a magic number: try              {                  var mode = context.Mode;                   var commProfiles = new LuaTable();                  var db = new ZkDataContext();                    // calculate to whom to send extra comms                  var accountIDsWithExtraComms = new List<int>();                  if (mode == AutohostMode.Planetwars || mode == AutohostMode.GameFFA || mode == AutohostMode.Teams)                  {                      var groupedByTeam = context.Players.Where(x => !x.IsSpectator).GroupBy(x => x.AllyID).OrderByDescending(x => x.Count());                      var biggest = groupedByTeam.FirstOrDefault();                      if (biggest != null)                      {                          foreach (var other in groupedByTeam.Skip(1))                          {                              var cnt = biggest.Count() - other.Count();                              if (cnt > 0)                              {                                  foreach (var a in                                      other.Select(x => db.Accounts.First(y => y.AccountID == x.LobbyID))                                          .OrderByDescending(x => x.Elo*x.EloWeight)                                          .Take(cnt)) accountIDsWithExtraComms.Add(a.AccountID);                              }                          }                      }                  }                      // write Planetwars details to modoptions (for widget)                  Faction attacker = null;                  Faction defender = null;                  Planet planet = null;                  if (mode == AutohostMode.Planetwars)                  {                      planet = db.Galaxies.First(x => x.IsDefault).Planets.First(x => x.Resource.InternalName == context.Map);                      attacker =                          context.Players.Where(x => x.AllyID == 0 && !x.IsSpectator)                              .Select(x => db.Accounts.First(y => y.AccountID == x.LobbyID))                              .Where(x => x.Faction != null)                              .Select(x => x.Faction)                              .First();                        defender = planet.Faction;                        if (attacker == defender) defender = null;                        ret.ModOptions["attackingFaction"] = attacker.Shortcut;                      ret.ModOptions["attackingFactionName"] = attacker.Name;                      ret.ModOptions["attackingFactionColor"] = attacker.Color;                      if (defender != null)                      {                          ret.ModOptions["defendingFaction"] = defender.Shortcut;                          ret.ModOptions["defendingFactionName"] = defender.Name;                          ret.ModOptions["defendingFactionColor"] = defender.Color;                      }                      else                      {                          ret.ModOptions["defendingFaction"] = "Mercenary";                          ret.ModOptions["defendingFactionName"] = "Local militia";                          ret.ModOptions["defendingFactionColor"] = "#CCCCCC";                      }                      ret.ModOptions["planet"] = planet.Name;                  }                    // write player custom keys (level' elo' is muted' etc.)                  foreach (var p in context.Players)                  {                      var user = db.Accounts.Where(x=>x.AccountID == p.LobbyID).Include(x=>x.RelalationsByOwner).FirstOrDefault();                      if (user != null)                      {                          var userParams = new Dictionary<string' string>();                          ret.UserParameters[p.Name] = userParams;                            userParams["LobbyID"] = user.AccountID.ToString();                          userParams["CountryCode"] = user.Country;                            var userBanMuted = Punishment.GetActivePunishment(user.AccountID' null' null' x => x.BanMute) != null;                          if (userBanMuted) userParams["muted"] = "1";                          userParams["faction"] = user.Faction != null ? user.Faction.Shortcut : "";                          userParams["clan"] = user.Clan != null ? user.Clan.Shortcut : "";                          userParams["clanfull"] = user.Clan != null ? user.Clan.ClanName : "";                            userParams["level"] = user.Level.ToString();                          //userParams["mm_elo"] = Math.Round(user.EffectiveMmElo).ToString();                          //userParams["casual_elo"] = Math.Round(user.EffectiveElo).ToString();                            userParams["elo"] = Math.Round(RatingSystems.DisableRatingSystems ? user.BestEffectiveElo : user.GetBestRating().Elo).ToString();                                                    userParams["icon"] = user.GetIconName();                          userParams["avatar"] = user.Avatar;                          userParams["badges"] = string.Join("'"' user.GetBadges());                          userParams["admin"] = user.AdminLevel >= AdminLevel.Moderator ? "1" : "0";                          if (p.PartyID.HasValue) userParams["PartyID"] = p.PartyID.ToString();                            var userSpecChatBlocked = Punishment.GetActivePunishment(user.AccountID' null' null' x => x.BanSpecChat) != null; ;                          userParams["can_spec_chat"] = userSpecChatBlocked ? "0" : "1";                            userParams["ignored"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Ignore).Select(x=>x.Target.Name));                          userParams["friends"] = string.Join("'"' user.RelalationsByOwner.Where(x => x.Relation == Relation.Friend).Select(x=>x.Target.Name));                                                    if (!p.IsSpectator)                          {                              // set valid PW structure attackers                              if (mode == AutohostMode.Planetwars)                              {                                  userParams["pwRank"] = (user.AccountRolesByAccountID.Where(                                              x =>                                                  !x.RoleType.IsClanOnly &&                                                  (x.RoleType.RestrictFactionID == null || x.RoleType.RestrictFactionID == user.FactionID)).OrderBy(x=>x.RoleType.DisplayOrder).Select(x => (int?)x.RoleType.DisplayOrder).FirstOrDefault() ?? 999).ToString();                                      var allied = user.Faction != null && defender != null && user.Faction != defender &&                                               defender.HasTreatyRight(user.Faction' x => x.EffectPreventIngamePwStructureDestruction == true' planet);                                    if (!allied && user.Faction != null && (user.Faction == attacker || user.Faction == defender))                                  {                                      userParams["canAttackPwStructures"] = "1";                                  }                                    userParams["pwInstructions"] = Convert.ToBase64String(Encoding.UTF8.GetBytes(GetPwInstructions(planet' user' db' attacker)));                              }                                if (accountIDsWithExtraComms.Contains(user.AccountID)) userParams["extracomm"] = "1";                                var commProfileIDs = new LuaTable();                              var userCommandersBanned = Punishment.GetActivePunishment(user.AccountID' null' null' x => x.BanCommanders) != null;                               if (!userCommandersBanned)                              {                                  // set up commander data                                  foreach (var c in user.Commanders.Where(x => x.Unlock != null && x.ProfileNumber <= GlobalConst.CommanderProfileCount)                                      )                                  {                                      try                                      {                                          var commProfile = new LuaTable();                                            if (string.IsNullOrEmpty(c.Name) || c.Name.Any(x => x == '"'))                                          {                                              c.Name = c.CommanderID.ToString();                                          }                                          commProfiles.Add("c" + c.CommanderID' commProfile);                                          commProfileIDs.Add("c" + c.CommanderID);                                            // process decoration icons                                          var decorations = new LuaTable();                                          foreach (var d in                                              c.CommanderDecorations.Where(x => x.Unlock != null).OrderBy(x => x.SlotID).Select(x => x.Unlock))                                          {                                              var iconData = db.CommanderDecorationIcons.FirstOrDefault(x => x.DecorationUnlockID == d.UnlockID);                                              if (iconData != null)                                              {                                                  string iconName = null' iconPosition = null;                                                  // FIXME: handle avatars and preset/custom icons                                                  if (iconData.IconType == (int)DecorationIconTypes.Faction)                                                  {                                                      iconName = user.Faction != null ? user.Faction.Shortcut : null;                                                  }                                                  else if (iconData.IconType == (int)DecorationIconTypes.Clan)                                                  {                                                      iconName = user.Clan != null ? user.Clan.Shortcut : null;                                                  }                                                    if (iconName != null)                                                  {                                                      iconPosition = CommanderDecoration.GetIconPosition(d);                                                      var entry = new LuaTable();                                                      entry.Add("image"' iconName);                                                      decorations.Add("icon_" + iconPosition.ToLower()' entry);                                                  }                                              }                                              else decorations.Add(d.Code);                                          }                                            commProfile["name"] = c.Name.Substring(0' Math.Min(25' c.Name.Length));                                          commProfile["chassis"] = c.Unlock.Code;                                          commProfile["decorations"] = decorations;                                            var modules = new LuaTable();                                          commProfile["modules"] = modules;                                            for (var i = 1; i <= GlobalConst.NumCommanderLevels; i++)                                          {                                              var modulesForLevel = new LuaTable();                                              modules.Add(modulesForLevel);                                              var modulesOrdered = c.CommanderModules.Where(x => x.CommanderSlot.MorphLevel == i).ToList();                                              var slots = db.CommanderSlots.ToList().Where(x => x.MorphLevel == i && (x.ChassisID == null || (x.ChassisID == c.ChassisUnlockID))).ToList();                                              slots.Sort(delegate (CommanderSlot x' CommanderSlot y)                                              {                                                  UnlockTypes type1 = x.UnlockType;                                                  UnlockTypes type2 = y.UnlockType;                                                  if (type1 == UnlockTypes.WeaponManualFire || type1 == UnlockTypes.WeaponBoth)                                                      type1 = UnlockTypes.Weapon;                                                  if (type2 == UnlockTypes.WeaponManualFire || type2 == UnlockTypes.WeaponBoth)                                                      type2 = UnlockTypes.Weapon;                                                  int result = type1.CompareTo(type2);                                                  if (result == 0) return x.CommanderSlotID.CompareTo(y.CommanderSlotID);                                                  else return result;                                              });                                              foreach (var slot in slots)                                              {                                                  String value = String.Empty;                                                  var module = c.CommanderModules.FirstOrDefault(x => x.SlotID == slot.CommanderSlotID);                                                  if (module != null)                                                      value = module.Unlock.Code;                                                  modulesForLevel.Add(value);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          Trace.TraceError(ex.ToString());                                          throw new ApplicationException(                                              $"Error processing commander: {c.CommanderID} - {c.Name} of player {user.AccountID} - {user.Name}"'                                              ex);                                      }                                  }                              }                              else userParams["jokecomm"] = "1";                                userParams["commanders"] = commProfileIDs.ToBase64String();                          }                      }                  }                  ret.ModOptions["commanderTypes"] = commProfiles.ToBase64String();                    // set PW structures                  if (mode == AutohostMode.Planetwars)                  {                      var owner = planet.Faction != null ? planet.Faction.Shortcut : "";                        var pwStructures = new LuaTable();                      foreach (                          var s in planet.PlanetStructures.Where(x => x.StructureType != null && !string.IsNullOrEmpty(x.StructureType.IngameUnitName)))                      {                          pwStructures.Add(s.StructureType.IngameUnitName'                              new LuaTable                              {                                  { "unitname"' s.StructureType.IngameUnitName }'                                  { "owner"' s.Account?.Name }'                                  { "canBeEvacuated"' s.StructureType.IsIngameEvacuable }'                                  { "canBeDestroyed"' s.StructureType.IsIngameDestructible }'                                  //{ "isDestroyed"' s.IsDestroyed ? true : false }'                                  {                                      "name"' $"{owner} {s.StructureType.Name} ({(s.Account != null ? s.Account.Name : "unowned")})" }'                                  { "description"' s.StructureType.Description }                              });                      }                      ret.ModOptions["planetwarsStructures"] = pwStructures.ToBase64String();                  }                    return ret;              }              catch (Exception ex)              {                  Trace.TraceError(ex.ToString());                  throw;              }
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,PlanetWarsMatchMaker,The following statement contains a magic number: timer = new Timer(1045);
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,GetAttackDeadline,The following statement contains a magic number: if (missedDefenseFactionID == AttackingFaction.FactionID) extra = Math.Min(missedDefenseCount * GlobalConst.PlanetWarsMinutesToAttack' 60);
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,ResetAttackOptions,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  var gal = db.Galaxies.First(x => x.IsDefault);                  var cnt = 6;                  var attacker = db.Factions.Single(x => x.FactionID == AttackingFaction.FactionID);                  var planets =                      gal.Planets.Where(x => x.OwnerFactionID != AttackingFaction.FactionID)                          .OrderByDescending(x => x.PlanetFactions.Where(y => y.FactionID == AttackingFaction.FactionID).Sum(y => y.Dropships))                          .ThenByDescending(x => x.PlanetFactions.Where(y => y.FactionID == AttackingFaction.FactionID).Sum(y => y.Influence))                          .ToList();                  // list of planets by attacker's influence                    foreach (var planet in planets)                  {                      if (planet.CanMatchMakerPlay(attacker))                      {                          // pick only those where you can actually attack atm                          InternalAddOption(planet);                          cnt--;                      }                      if (cnt == 0) break;                  }                    if (!AttackOptions.Any(y => y.TeamSize == 2))                  {                      var planet = planets.FirstOrDefault(x => (x.TeamSize == 2) && x.CanMatchMakerPlay(attacker));                      if (planet != null) InternalAddOption(planet);                  }              }
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,ResetAttackOptions,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  var gal = db.Galaxies.First(x => x.IsDefault);                  var cnt = 6;                  var attacker = db.Factions.Single(x => x.FactionID == AttackingFaction.FactionID);                  var planets =                      gal.Planets.Where(x => x.OwnerFactionID != AttackingFaction.FactionID)                          .OrderByDescending(x => x.PlanetFactions.Where(y => y.FactionID == AttackingFaction.FactionID).Sum(y => y.Dropships))                          .ThenByDescending(x => x.PlanetFactions.Where(y => y.FactionID == AttackingFaction.FactionID).Sum(y => y.Influence))                          .ToList();                  // list of planets by attacker's influence                    foreach (var planet in planets)                  {                      if (planet.CanMatchMakerPlay(attacker))                      {                          // pick only those where you can actually attack atm                          InternalAddOption(planet);                          cnt--;                      }                      if (cnt == 0) break;                  }                    if (!AttackOptions.Any(y => y.TeamSize == 2))                  {                      var planet = planets.FirstOrDefault(x => (x.TeamSize == 2) && x.CanMatchMakerPlay(attacker));                      if (planet != null) InternalAddOption(planet);                  }              }
Magic Number,ZeroKWeb,PlanetWarsMatchMaker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\PlanetWarsMatchMaker.cs,ResetAttackOptions,The following statement contains a magic number: using (var db = new ZkDataContext())              {                  var gal = db.Galaxies.First(x => x.IsDefault);                  var cnt = 6;                  var attacker = db.Factions.Single(x => x.FactionID == AttackingFaction.FactionID);                  var planets =                      gal.Planets.Where(x => x.OwnerFactionID != AttackingFaction.FactionID)                          .OrderByDescending(x => x.PlanetFactions.Where(y => y.FactionID == AttackingFaction.FactionID).Sum(y => y.Dropships))                          .ThenByDescending(x => x.PlanetFactions.Where(y => y.FactionID == AttackingFaction.FactionID).Sum(y => y.Influence))                          .ToList();                  // list of planets by attacker's influence                    foreach (var planet in planets)                  {                      if (planet.CanMatchMakerPlay(attacker))                      {                          // pick only those where you can actually attack atm                          InternalAddOption(planet);                          cnt--;                      }                      if (cnt == 0) break;                  }                    if (!AttackOptions.Any(y => y.TeamSize == 2))                  {                      var planet = planets.FirstOrDefault(x => (x.TeamSize == 2) && x.CanMatchMakerPlay(attacker));                      if (planet != null) InternalAddOption(planet);                  }              }
Magic Number,Springie,Utils,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\utils\Utils.cs,ToUnix,The following statement contains a magic number: return (long)(t.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0)).TotalSeconds;
Missing Default,ZkLobbyServer,ConnectedUser,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ConnectedUser.cs,Process,The following switch statement is missing a default case: switch (say.Place)              {                  case SayPlace.Channel:                      if (server.Channels.Get(say.Target)?.Users?.ContainsKey(Name) != true) return;                      break;                    case SayPlace.Battle:                      if (MyBattle?.Users?.Keys.Contains(Name) != true) return;                      break;                    case SayPlace.BattlePrivate:                      return;                      break;                    case SayPlace.MessageBox:                      if (!User.IsAdmin) return;                      break;                }
Missing Default,ZkLobbyServer,ServerBattle,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerBattle.cs,ValidateAndFillDetails,The following switch statement is missing a default case: switch (Mode)              {                  case AutohostMode.Game1v1:                      MaxPlayers = 2;                      break;                  case AutohostMode.Planetwars:                      if (MaxPlayers < 2) MaxPlayers = 16;                      break;                  case AutohostMode.GameChickens:                      if (MaxPlayers < 2) MaxPlayers = 10;                      break;                  case AutohostMode.GameFFA:                      if (MaxPlayers < 3) MaxPlayers = 16;                      break;                  case AutohostMode.Teams:                      if (MaxPlayers < 4) MaxPlayers = 16;                      break;                  case AutohostMode.None:                      if (MaxPlayers == 0) MaxPlayers = 16;                      break;              }
Missing Default,ZkLobbyServer,ServerTextCommands,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ServerTextCommands.cs,OnZkServerSaid,The following switch statement is missing a default case: switch (command)                          {                              case "!announce":                                  server.GhostSay(new Say() { Text = argument' User = say.User' Place = SayPlace.MessageBox' Ring = true' });                              break;                                case "!topic":                                  if (say.Place == SayPlace.Channel && !string.IsNullOrEmpty(say.Target))                                  {                                      server.SetTopic(say.Target' argument' say.User);                                  }                              break;                          }
Missing Default,ZkLobbyServer,ZkLobbyServer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\ZkLobbyServer.cs,GhostSay,The following switch statement is missing a default case: switch (say.Place)              {                  case SayPlace.Channel:                      Channel channel;                      if (Channels.TryGetValue(say.Target' out channel)) await SyncAndSay(channel.Users.Keys' say);                      OfflineMessageHandler.StoreChatHistoryAsync(say);                      break;                  case SayPlace.User:                      ConnectedUser connectedUser;                      if (ConnectedUsers.TryGetValue(say.Target' out connectedUser)) await SyncAndSay(new List<string>() {say.Target}' say);                      else OfflineMessageHandler.StoreChatHistoryAsync(say);                      if (say.User != GlobalConst.NightwatchName && ConnectedUsers.TryGetValue(say.User' out connectedUser)) await connectedUser.SendCommand(say);                      break;                  case SayPlace.Battle:                      ServerBattle battle;                      if (Battles.TryGetValue(battleID ?? 0' out battle))                      {                          await SyncAndSay(battle.Users.Keys' say);                          await battle.ProcessBattleSay(say);                          OfflineMessageHandler.StoreChatHistoryAsync(say);                      }                      break;                    // admin AH sent only:                  case SayPlace.MessageBox:                      await Broadcast(ConnectedUsers.Values' say);                      break;                  case SayPlace.BattlePrivate:                      ConnectedUser targetUser;                      if (ConnectedUsers.TryGetValue(say.Target' out targetUser)) await targetUser.SendCommand(say);                      break;              }
Missing Default,ZeroKWeb.SpringieInterface,MapPicker,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\autohost\MapPicker.cs,GetRecommendedMap,The following switch statement is missing a default case: switch (mode)                  {                      case AutohostMode.Teams:                      case AutohostMode.None:                          var ret =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsTeams != false && x.MapIsSpecial != true);                          if (players > 11) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 8)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.Game1v1:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIs1v1 == true && x.MapIsSpecial != true).ToList();                          break;                      case AutohostMode.GameChickens:                          ret =                              db.Resources.Where(                                  x =>                                      x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsSpecial != true &&                                      (x.MapIsChickens == true || x.MapWaterLevel == 1));                          if (players > 5) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16);                          else if (players > 4)                              ret =                                  ret.Where(                                      x =>                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth > 16*16 &&                                          x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24);                          else if (players > 2) ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 24*24 || x.MapIs1v1 == true);                          else ret = ret.Where(x => x.MapHeight*x.MapHeight + x.MapWidth*x.MapWidth <= 16*16 || x.MapIs1v1 == true);                          list = ret.ToList();                            break;                      case AutohostMode.GameFFA:                          list =                              db.Resources.Where(                                  x => x.TypeID == ResourceType.Map && x.MapSupportLevel >= level && x.MapIsFfa == true && x.MapFFAMaxTeams == players)                                  .ToList();                          if (!list.Any())                              list =                                  db.Resources.Where(                                      x =>                                          x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true &&                                          (players%x.MapFFAMaxTeams == 0)).ToList();                          if (!list.Any()) list = db.Resources.Where(x => x.TypeID == ResourceType.Map && x.MapSupportLevel>=level && x.MapIsFfa == true).ToList();                            break;                  }
Missing Default,ZeroKWeb.SpringieInterface,Balancer,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\ZkLobbyServer\SpringieInterface\Balancer.cs,PerformBalance,The following switch statement is missing a default case: switch (mode)                  {                      case AutohostMode.None:                          {                              if (!isGameStart) res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == true ? BalanceMode.ClanWise : BalanceMode.Normal' context);                          }                          break;                      case AutohostMode.Teams:                      case AutohostMode.Game1v1:                          {                              res = new Balancer().LegacyBalance(allyCount ?? 2' clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise' context);                              res.DeleteBots = true;                          }                          break;                                            case AutohostMode.GameChickens:                          {                              res.Players = context.Players.ToList();                              res.Bots = context.Bots.ToList();                              foreach (var p in res.Players) p.AllyID = 0;                              foreach (var b in res.Bots) b.AllyID = 1;                                // add chickens via modoptions hackish thingie                              string chickBot = null;                              if (context.ModOptions?.TryGetValue("chickenailevel"' out chickBot) == true && !string.IsNullOrEmpty(chickBot) && chickBot != "none")                              {                                  res.Bots.RemoveAll(x => x.BotAI.StartsWith("Chicken:"));                                  res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = chickBot });                              }                                if (!res.Bots.Any() && res.Players.Count > 0)                              {                                  //res.Message = "Add some bot (computer player) as your enemy. Use button on bottom left. Chicken or CAI is recommended.";                                  var map = db.Resources.FirstOrDefault(x => x.InternalName == context.Map);                                  if (map?.MapIsChickens == true) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "default_Chicken"' BotAI = "Chicken: Normal"' });                                  else                                  {                                      for (int i =1; i<= res.Players.Where(x => !x.IsSpectator).Count(); i++) res.Bots.Add(new BotTeam() { AllyID = 1' BotName = "cai" + i' BotAI = "CAI"' });                                  }                                  res.Message = "Adding computer AI player for you";                              }                          }                          break;                      case AutohostMode.GameFFA:                          {                              res.DeleteBots = true;                              var map = db.Resources.Single(x => x.InternalName == context.Map);                              if (map.MapFFAMaxTeams != null)                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams.Value'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              else                              {                                  res = new Balancer().LegacyBalance(                                      allyCount ?? map.MapFFAMaxTeams ?? 8'                                      clanWise == false ? BalanceMode.Normal : BalanceMode.ClanWise'                                      context);                              }                              return res;                          }                      case AutohostMode.Planetwars:                            return new Balancer().PlanetwarsBalance(context);                  }
