Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadInternal,The method has 101 lines of code.
Long Parameter List,MonoTorrent.Common,Toolbox,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\ToolBox.cs,ByteMatch,The method has 5 parameters. Parameters: array1' offset1' array2' offset2' count
Long Parameter List,MonoTorrent.Common,TorrentFile,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentFile.cs,TorrentFile,The method has 7 parameters. Parameters: path' length' startIndex' endIndex' md5' ed2k' sha1
Long Parameter List,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The method has 5 parameters. Parameters: dest' destOffset' src' srcOffset' count
Long Parameter List,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The method has 5 parameters. Parameters: dest' destOffset' src' srcOffset' count
Long Parameter List,MonoTorrent.Client,SparseFile,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\PieceWriter\NtfsSparseFile.cs,CreateFileW,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,MonoTorrent.Client,SparseFile,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\PieceWriter\NtfsSparseFile.cs,DeviceIoControl,The method has 8 parameters. Parameters: hDevice' dwIoControlCode' InBuffer' nInBufferSize' OutBuffer' nOutBufferSize' pBytesReturned' lpOverlapped
Long Parameter List,MonoTorrent.Client,SparseFile,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\PieceWriter\NtfsSparseFile.cs,GetVolumeInformationW,The method has 8 parameters. Parameters: lpRootPathName' lpVolumeNameBuffer' nVolumeNameSize' lpVolumeSerialNumber' lpMaximumComponentLength' lpFileSystemFlags' lpFileSystemNameBuffer' nFileSystemNameSize
Long Parameter List,MonoTorrent.Client,TorrentFileStream,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\TorrentFileStream.cs,TorrentFileStream,The method has 5 parameters. Parameters: filePath' file' mode' access' share
Long Parameter List,MonoTorrent.Client,BufferedIO,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\PieceWriter\PieceData.cs,BufferedIO,The method has 7 parameters. Parameters: manager' buffer' offset' count' pieceLength' files' path
Long Parameter List,MonoTorrent.Client,BufferedIO,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\PieceWriter\PieceData.cs,BufferedIO,The method has 8 parameters. Parameters: manager' buffer' pieceIndex' blockIndex' count' pieceLength' files' path
Long Statement,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The length of the statement  "			for (var i = 0; i < end; i++) array[i] = (buffer[offset++] << 24) | (buffer[offset++] << 16) | (buffer[offset++] << 8) | (buffer[offset++] << 0); " is 145.
Long Statement,MonoTorrent.Common,Hashes,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Hashes.cs,IsValid,The length of the statement  "			if (hash.Length != HashCodeLength) throw new ArgumentException(string.Format("Hash must be {0} bytes in length"' HashCodeLength)' "hash"); " is 138.
Long Statement,MonoTorrent.Common,Hashes,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Hashes.cs,IsValid,The length of the statement  "			if (hashIndex < 0 || hashIndex > count) throw new ArgumentOutOfRangeException("hashIndex"' string.Format("hashIndex must be between 0 and {0}"' count)); " is 152.
Long Statement,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadInternal,The length of the statement  "									if (e is ArgumentOutOfRangeException) creationDate = creationDate.AddMilliseconds(long.Parse(keypair.Value.ToString())); " is 120.
Long Statement,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadInternal,The length of the statement  "								if (e is ArgumentOutOfRangeException) throw new BEncodingException("Argument out of range exception when adding seconds to creation date."' e); " is 143.
Long Statement,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadInternal,The length of the statement  "								else if (e is FormatException) throw new BEncodingException(String.Format("Could not parse {0} into a number"' keypair.Value)' e); " is 130.
Long Statement,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadInternal,The length of the statement  "								else throw new BEncodingException(String.Format("Non-BEncodedList found in announce-list (found {0})"' announces[j].GetType())); " is 128.
Long Statement,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadInternal,The length of the statement  "							else if (keypair.Value is BEncodedList) foreach (BEncodedString str in (BEncodedList)keypair.Value) GetRightHttpSeeds.Add(str.Text); " is 132.
Long Statement,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,ProcessInfo,The length of the statement  "						if ((String.IsNullOrEmpty(publisherUrl)) && (keypair.Value.ToString().Length > 0)) publisherUrl = keypair.Value.ToString(); " is 123.
Long Statement,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,Create,The length of the statement  "			Array.Sort<TorrentFile>(files' delegate(TorrentFile a' TorrentFile b) { return String.CompareOrdinal(a.Path' b.Path); }); " is 121.
Long Statement,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,EndCreate,The length of the statement  "			if (result != this.result) throw new ArgumentException("The supplied async result does not correspond to currently active async result"); " is 137.
Long Statement,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,LoadFiles,The length of the statement  "				if (!((info.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden && IgnoreHiddenFiles)) files.Add(new TorrentFile(filePath' info.Length' 0' 0' null' null' null)); " is 170.
Long Statement,MonoTorrent.BEncoding,BEncodedDictionary,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedDictionary.cs,DecodeInternal,The length of the statement  "							throw new BEncodingException(String.Format("Illegal BEncodedDictionary. The attributes are not ordered correctly. Old key: {0}' New key: {1}"' " is 142.
Long Statement,MonoTorrent.BEncoding,BEncodedString,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,DecodeInternal,The length of the statement  "				if (!int.TryParse(length' out letterCount)) throw new BEncodingException(string.Format("Invalid BEncodedString. Length was '{0}' instead of a number"' length)); " is 160.
Long Statement,MonoTorrent.Client.Messages,BEncodedString,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,DecodeInternal,The length of the statement  "				if (!int.TryParse(length' out letterCount)) throw new BEncodingException(string.Format("Invalid BEncodedString. Length was '{0}' instead of a number"' length)); " is 160.
Long Statement,MonoTorrent.Client,SparseFile,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\PieceWriter\NtfsSparseFile.cs,CanCreateSparse,The length of the statement  "			var result = GetVolumeInformationW(volume' volumeName' MAX_PATH' out serialNumber' out maxComponent' out fsFlags' systemName' MAX_PATH); " is 136.
Long Statement,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,GetBuffer,The length of the statement  "			if (buffer != EmptyBuffer) throw new TorrentException("The old Buffer should have been recovered before getting a new buffer"); " is 127.
Long Statement,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,AllocateBuffers,The length of the statement  "			if (type == BufferType.LargeMessageBuffer) while (number-- > 0) largeMessageBuffers.Enqueue(new ArraySegment<byte>(new byte[LargeMessageBufferSize]' 0' LargeMessageBufferSize)); " is 177.
Long Statement,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,AllocateBuffers,The length of the statement  "			else if (type == BufferType.MediumMessageBuffer) while (number-- > 0) mediumMessageBuffers.Enqueue(new ArraySegment<byte>(new byte[MediumMessageBufferSize]' 0' MediumMessageBufferSize)); " is 186.
Long Statement,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,AllocateBuffers,The length of the statement  "			else if (type == BufferType.SmallMessageBuffer) while (number-- > 0) smallMessageBuffers.Enqueue(new ArraySegment<byte>(new byte[SmallMessageBufferSize]' 0' SmallMessageBufferSize)); " is 182.
Long Statement,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,GetBuffer,The length of the statement  "			if (buffer != EmptyBuffer) throw new TorrentException("The old Buffer should have been recovered before getting a new buffer"); " is 127.
Complex Conditional,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,IsSafe,The conditional expression  "(((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) || ((ch >= '0') && (ch <= '9'))"  is complex.
Complex Conditional,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The conditional expression  "((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))"  is complex.
Complex Conditional,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The conditional expression  "((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))"  is complex.
Empty Catch Block,MonoTorrent.Client,SparseFile,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\PieceWriter\NtfsSparseFile.cs,CreateSparse,The method has an empty catch block.
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,IntToHex,The following statement contains a magic number: if (n <= 9) return (char)(n + 0x30);
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 0x61);
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,HexToInt,The following statement contains a magic number: if ((h >= 'a') && (h <= 'f')) return ((h - 'a') + 10);
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,HexToInt,The following statement contains a magic number: if ((h >= 'A') && (h <= 'F')) return ((h - 'A') + 10);
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var num4 = buf[index];  				if (num4 == 0x2b) num4 = 0x20;  				else if ((num4 == 0x25) && (i < (count - 2)))  				{  					var num5 = HexToInt((char)buf[index + 1]);  					var num6 = HexToInt((char)buf[index + 2]);  					if ((num5 >= 0) && (num6 >= 0))  					{  						num4 = (byte)((num5 << 4) | num6);  						i += 2;  					}  				}  				sourceArray[length++] = num4;  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var num4 = buf[index];  				if (num4 == 0x2b) num4 = 0x20;  				else if ((num4 == 0x25) && (i < (count - 2)))  				{  					var num5 = HexToInt((char)buf[index + 1]);  					var num6 = HexToInt((char)buf[index + 2]);  					if ((num5 >= 0) && (num6 >= 0))  					{  						num4 = (byte)((num5 << 4) | num6);  						i += 2;  					}  				}  				sourceArray[length++] = num4;  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var num4 = buf[index];  				if (num4 == 0x2b) num4 = 0x20;  				else if ((num4 == 0x25) && (i < (count - 2)))  				{  					var num5 = HexToInt((char)buf[index + 1]);  					var num6 = HexToInt((char)buf[index + 2]);  					if ((num5 >= 0) && (num6 >= 0))  					{  						num4 = (byte)((num5 << 4) | num6);  						i += 2;  					}  				}  				sourceArray[length++] = num4;  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var num4 = buf[index];  				if (num4 == 0x2b) num4 = 0x20;  				else if ((num4 == 0x25) && (i < (count - 2)))  				{  					var num5 = HexToInt((char)buf[index + 1]);  					var num6 = HexToInt((char)buf[index + 2]);  					if ((num5 >= 0) && (num6 >= 0))  					{  						num4 = (byte)((num5 << 4) | num6);  						i += 2;  					}  				}  				sourceArray[length++] = num4;  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (var i = 0; i < count; i++)  			{  				var index = offset + i;  				var b = buf[index];  				if (b == 0x2b) b = 0x20;  				else if ((b == 0x25) && (i < (count - 2)))  				{  					if ((buf[index + 1] == 0x75) && (i < (count - 5)))  					{  						var num4 = HexToInt((char)buf[index + 2]);  						var num5 = HexToInt((char)buf[index + 3]);  						var num6 = HexToInt((char)buf[index + 4]);  						var num7 = HexToInt((char)buf[index + 5]);  						if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))) goto Label_00DA;  						var ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num8 = HexToInt((char)buf[index + 1]);  					var num9 = HexToInt((char)buf[index + 2]);  					if ((num8 >= 0) && (num9 >= 0))  					{  						b = (byte)((num8 << 4) | num9);  						i += 2;  					}  				}  				Label_00DA:  				decoder.AddByte(b);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if (ch == '+') ch = ' ';  				else if ((ch == '%') && (i < (length - 2)))  				{  					if ((s[i + 1] == 'u') && (i < (length - 5)))  					{  						var num3 = HexToInt(s[i + 2]);  						var num4 = HexToInt(s[i + 3]);  						var num5 = HexToInt(s[i + 4]);  						var num6 = HexToInt(s[i + 5]);  						if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) goto Label_0106;  						ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);  						i += 5;  						decoder.AddChar(ch);  						continue;  					}  					var num7 = HexToInt(s[i + 1]);  					var num8 = HexToInt(s[i + 2]);  					if ((num7 >= 0) && (num8 >= 0))  					{  						var b = (byte)((num7 << 4) | num8);  						i += 2;  						decoder.AddByte(b);  						continue;  					}  				}  				Label_0106:  				if ((ch & 0xff80) == 0) decoder.AddByte((byte)ch);  				else decoder.AddChar(ch);  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: var buffer = new byte[count + (num2*2)];
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (var j = 0; j < count; j++)  			{  				var num6 = bytes[offset + j];  				var ch2 = (char)num6;  				if (IsSafe(ch2)) buffer[num4++] = num6;  				else if (ch2 == ' ') buffer[num4++] = 0x2b;  				else  				{  					buffer[num4++] = 0x25;  					buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);  					buffer[num4++] = (byte)IntToHex(num6 & 15);  				}  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (var j = 0; j < count; j++)  			{  				var num6 = bytes[offset + j];  				var ch2 = (char)num6;  				if (IsSafe(ch2)) buffer[num4++] = num6;  				else if (ch2 == ' ') buffer[num4++] = 0x2b;  				else  				{  					buffer[num4++] = 0x25;  					buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);  					buffer[num4++] = (byte)IntToHex(num6 & 15);  				}  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (var j = 0; j < count; j++)  			{  				var num6 = bytes[offset + j];  				var ch2 = (char)num6;  				if (IsSafe(ch2)) buffer[num4++] = num6;  				else if (ch2 == ' ') buffer[num4++] = 0x2b;  				else  				{  					buffer[num4++] = 0x25;  					buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);  					buffer[num4++] = (byte)IntToHex(num6 & 15);  				}  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: var buffer = new byte[count + (num*2)];
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (var j = 0; j < count; j++)  			{  				var b = bytes[offset + j];  				if (IsNonAsciiByte(b))  				{  					buffer[num3++] = 0x25;  					buffer[num3++] = (byte)IntToHex((b >> 4) & 15);  					buffer[num3++] = (byte)IntToHex(b & 15);  				}  				else buffer[num3++] = b;  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (var j = 0; j < count; j++)  			{  				var b = bytes[offset + j];  				if (IsNonAsciiByte(b))  				{  					buffer[num3++] = 0x25;  					buffer[num3++] = (byte)IntToHex((b >> 4) & 15);  					buffer[num3++] = (byte)IntToHex(b & 15);  				}  				else buffer[num3++] = b;  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (var j = 0; j < count; j++)  			{  				var b = bytes[offset + j];  				if (IsNonAsciiByte(b))  				{  					buffer[num3++] = 0x25;  					buffer[num3++] = (byte)IntToHex((b >> 4) & 15);  					buffer[num3++] = (byte)IntToHex(b & 15);  				}  				else buffer[num3++] = b;  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if ((ch & 0xff80) == 0)  				{  					if (ignoreAscii || IsSafe(ch)) builder.Append(ch);  					else if (ch == ' ') builder.Append('+');  					else  					{  						builder.Append('%');  						builder.Append(IntToHex((ch >> 4) & '\x000f'));  						builder.Append(IntToHex(ch & '\x000f'));  					}  				}  				else  				{  					builder.Append("%u");  					builder.Append(IntToHex((ch >> 12) & '\x000f'));  					builder.Append(IntToHex((ch >> 8) & '\x000f'));  					builder.Append(IntToHex((ch >> 4) & '\x000f'));  					builder.Append(IntToHex(ch & '\x000f'));  				}  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if ((ch & 0xff80) == 0)  				{  					if (ignoreAscii || IsSafe(ch)) builder.Append(ch);  					else if (ch == ' ') builder.Append('+');  					else  					{  						builder.Append('%');  						builder.Append(IntToHex((ch >> 4) & '\x000f'));  						builder.Append(IntToHex(ch & '\x000f'));  					}  				}  				else  				{  					builder.Append("%u");  					builder.Append(IntToHex((ch >> 12) & '\x000f'));  					builder.Append(IntToHex((ch >> 8) & '\x000f'));  					builder.Append(IntToHex((ch >> 4) & '\x000f'));  					builder.Append(IntToHex(ch & '\x000f'));  				}  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if ((ch & 0xff80) == 0)  				{  					if (ignoreAscii || IsSafe(ch)) builder.Append(ch);  					else if (ch == ' ') builder.Append('+');  					else  					{  						builder.Append('%');  						builder.Append(IntToHex((ch >> 4) & '\x000f'));  						builder.Append(IntToHex(ch & '\x000f'));  					}  				}  				else  				{  					builder.Append("%u");  					builder.Append(IntToHex((ch >> 12) & '\x000f'));  					builder.Append(IntToHex((ch >> 8) & '\x000f'));  					builder.Append(IntToHex((ch >> 4) & '\x000f'));  					builder.Append(IntToHex(ch & '\x000f'));  				}  			}
Magic Number,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (var i = 0; i < length; i++)  			{  				var ch = s[i];  				if ((ch & 0xff80) == 0)  				{  					if (ignoreAscii || IsSafe(ch)) builder.Append(ch);  					else if (ch == ' ') builder.Append('+');  					else  					{  						builder.Append('%');  						builder.Append(IntToHex((ch >> 4) & '\x000f'));  						builder.Append(IntToHex(ch & '\x000f'));  					}  				}  				else  				{  					builder.Append("%u");  					builder.Append(IntToHex((ch >> 12) & '\x000f'));  					builder.Append(IntToHex((ch >> 8) & '\x000f'));  					builder.Append(IntToHex((ch >> 4) & '\x000f'));  					builder.Append(IntToHex(ch & '\x000f'));  				}  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,BitField,The following statement contains a magic number: array = new int[(length + 31)/32];
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,BitField,The following statement contains a magic number: array = new int[(length + 31)/32];
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,BitField,The following statement contains a magic number: this.array = new int[(array.Length + 31)/32];
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,BitField,The following statement contains a magic number: this.array = new int[(array.Length + 31)/32];
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Clone,The following statement contains a magic number: Buffer.BlockCopy(array' 0' b.array' 0' array.Length*4);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstFalse,The following statement contains a magic number: var loopEnd = Math.Min((endIndex/32)' array.Length - 1);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstFalse,The following statement contains a magic number: for (var i = (startIndex/32); i <= loopEnd; i++)  			{  				if (array[i] == ~0) // This one has no false values  					continue;    				start = i*32;  				end = start + 32;  				start = (start < startIndex) ? startIndex : start;  				end = (end > length) ? length : end;  				end = (end > endIndex) ? endIndex : end;  				if (end == Length && end > 0) end--;    				for (var j = start; j <= end; j++)  				{  					if (!Get(j)) // This piece is true  						return j;  				}  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstFalse,The following statement contains a magic number: for (var i = (startIndex/32); i <= loopEnd; i++)  			{  				if (array[i] == ~0) // This one has no false values  					continue;    				start = i*32;  				end = start + 32;  				start = (start < startIndex) ? startIndex : start;  				end = (end > length) ? length : end;  				end = (end > endIndex) ? endIndex : end;  				if (end == Length && end > 0) end--;    				for (var j = start; j <= end; j++)  				{  					if (!Get(j)) // This piece is true  						return j;  				}  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstFalse,The following statement contains a magic number: for (var i = (startIndex/32); i <= loopEnd; i++)  			{  				if (array[i] == ~0) // This one has no false values  					continue;    				start = i*32;  				end = start + 32;  				start = (start < startIndex) ? startIndex : start;  				end = (end > length) ? length : end;  				end = (end > endIndex) ? endIndex : end;  				if (end == Length && end > 0) end--;    				for (var j = start; j <= end; j++)  				{  					if (!Get(j)) // This piece is true  						return j;  				}  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstTrue,The following statement contains a magic number: var loopEnd = Math.Min((endIndex/32)' array.Length - 1);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstTrue,The following statement contains a magic number: for (var i = (startIndex/32); i <= loopEnd; i++)  			{  				if (array[i] == 0) // This one has no true values  					continue;    				start = i*32;  				end = start + 32;  				start = (start < startIndex) ? startIndex : start;  				end = (end > length) ? length : end;  				end = (end > endIndex) ? endIndex : end;  				if (end == Length && end > 0) end--;    				for (var j = start; j <= end; j++)  				{  					if (Get(j)) // This piece is true  						return j;  				}  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstTrue,The following statement contains a magic number: for (var i = (startIndex/32); i <= loopEnd; i++)  			{  				if (array[i] == 0) // This one has no true values  					continue;    				start = i*32;  				end = start + 32;  				start = (start < startIndex) ? startIndex : start;  				end = (end > length) ? length : end;  				end = (end > endIndex) ? endIndex : end;  				if (end == Length && end > 0) end--;    				for (var j = start; j <= end; j++)  				{  					if (Get(j)) // This piece is true  						return j;  				}  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FirstTrue,The following statement contains a magic number: for (var i = (startIndex/32); i <= loopEnd; i++)  			{  				if (array[i] == 0) // This one has no true values  					continue;    				start = i*32;  				end = start + 32;  				start = (start < startIndex) ? startIndex : start;  				end = (end > length) ? length : end;  				end = (end > endIndex) ? endIndex : end;  				if (end == Length && end > 0) end--;    				for (var j = start; j <= end; j++)  				{  					if (Get(j)) // This piece is true  						return j;  				}  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,From,The following statement contains a magic number: Buffer.BlockCopy(value.array' 0' array' 0' array.Length*4);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: var end = Length/32;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: for (var i = 0; i < end; i++) array[i] = (buffer[offset++] << 24) | (buffer[offset++] << 16) | (buffer[offset++] << 8) | (buffer[offset++] << 0);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: for (var i = 0; i < end; i++) array[i] = (buffer[offset++] << 24) | (buffer[offset++] << 16) | (buffer[offset++] << 8) | (buffer[offset++] << 0);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: for (var i = 0; i < end; i++) array[i] = (buffer[offset++] << 24) | (buffer[offset++] << 16) | (buffer[offset++] << 8) | (buffer[offset++] << 0);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: var shift = 24;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: for (var i = end*32; i < Length; i += 8)  			{  				array[array.Length - 1] |= buffer[offset++] << shift;  				shift -= 8;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: for (var i = end*32; i < Length; i += 8)  			{  				array[array.Length - 1] |= buffer[offset++] << shift;  				shift -= 8;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,FromArray,The following statement contains a magic number: for (var i = end*32; i < Length; i += 8)  			{  				array[array.Length - 1] |= buffer[offset++] << shift;  				shift -= 8;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Set,The following statement contains a magic number: if (value)  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) == 0) // If it's not already true  					trueCount++; // Increase true count  				array[index >> 5] |= (1 << (31 - index & 31));  			}  			else  			{  				if ((array[index >> 5] & (1 << (31 - (index & 31)))) != 0) // If it's not already false  					trueCount--; // Decrease true count  				array[index >> 5] &= ~(1 << (31 - (index & 31)));  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: var end = Length/32;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: for (var i = 0; i < end; i++)  			{  				buffer[offset++] = (byte)(array[i] >> 24);  				buffer[offset++] = (byte)(array[i] >> 16);  				buffer[offset++] = (byte)(array[i] >> 8);  				buffer[offset++] = (byte)(array[i] >> 0);  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: for (var i = 0; i < end; i++)  			{  				buffer[offset++] = (byte)(array[i] >> 24);  				buffer[offset++] = (byte)(array[i] >> 16);  				buffer[offset++] = (byte)(array[i] >> 8);  				buffer[offset++] = (byte)(array[i] >> 0);  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: for (var i = 0; i < end; i++)  			{  				buffer[offset++] = (byte)(array[i] >> 24);  				buffer[offset++] = (byte)(array[i] >> 16);  				buffer[offset++] = (byte)(array[i] >> 8);  				buffer[offset++] = (byte)(array[i] >> 0);  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: var shift = 24;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: for (var i = end*32; i < Length; i += 8)  			{  				buffer[offset++] = (byte)(array[array.Length - 1] >> shift);  				shift -= 8;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: for (var i = end*32; i < Length; i += 8)  			{  				buffer[offset++] = (byte)(array[array.Length - 1] >> shift);  				shift -= 8;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToByteArray,The following statement contains a magic number: for (var i = end*32; i < Length; i += 8)  			{  				buffer[offset++] = (byte)(array[array.Length - 1] >> shift);  				shift -= 8;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(array.Length*16);
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Get,The following statement contains a magic number: return (array[index >> 5] & (1 << (31 - (index & 31)))) != 0;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Get,The following statement contains a magic number: return (array[index >> 5] & (1 << (31 - (index & 31)))) != 0;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Get,The following statement contains a magic number: return (array[index >> 5] & (1 << (31 - (index & 31)))) != 0;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Validate,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)  			{  				var v = (uint)array[i];  				v = v - ((v >> 1) & 0x55555555);  				v = (v & 0x33333333) + ((v >> 2) & 0x33333333);  				count += (((v + (v >> 4) & 0xF0F0F0F)*0x1010101)) >> 24;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Validate,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)  			{  				var v = (uint)array[i];  				v = v - ((v >> 1) & 0x55555555);  				v = (v & 0x33333333) + ((v >> 2) & 0x33333333);  				count += (((v + (v >> 4) & 0xF0F0F0F)*0x1010101)) >> 24;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,Validate,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)  			{  				var v = (uint)array[i];  				v = v - ((v >> 1) & 0x55555555);  				v = (v & 0x33333333) + ((v >> 2) & 0x33333333);  				count += (((v + (v >> 4) & 0xF0F0F0F)*0x1010101)) >> 24;  			}
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ZeroUnusedBits,The following statement contains a magic number: var shift = 32 - length%32;
Magic Number,MonoTorrent.Common,BitField,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\BitField.cs,ZeroUnusedBits,The following statement contains a magic number: var shift = 32 - length%32;
Magic Number,MonoTorrent.Common,Toolbox,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\ToolBox.cs,ToHex,The following statement contains a magic number: var sb = new StringBuilder(40);
Magic Number,MonoTorrent.Common,Toolbox,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\ToolBox.cs,ToHex,The following statement contains a magic number: for (var i = 0; i < array.Length; i++)  			{  				var hex = array[i].ToString("X");  				if (hex.Length != 2) sb.Append("0");  				sb.Append(hex);  			}
Magic Number,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,Torrent,The following statement contains a magic number: creationDate = new DateTime(1970' 1' 1' 0' 0' 0);
Magic Number,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadHashPieces,The following statement contains a magic number: if (data.Length%20 != 0) throw new TorrentException("Invalid infohash detected");
Magic Number,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadHashPieces,The following statement contains a magic number: pieces = new Hashes(data' data.Length/20);
Magic Number,MonoTorrent.Common,Torrent,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\Torrent.cs,LoadTorrentFiles,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,TorrentCreator,The following statement contains a magic number: PieceLength = 256*1024;
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,TorrentCreator,The following statement contains a magic number: PieceLength = 256*1024;
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,GetSize,The following statement contains a magic number: if (Directory.Exists(path)) GetAllFilePaths(path' paths);  			else if (File.Exists(path)) paths.Add(path);  			else return 64*1024;
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,GetSize,The following statement contains a magic number: if (Directory.Exists(path)) GetAllFilePaths(path' paths);  			else if (File.Exists(path)) paths.Add(path);  			else return 64*1024;
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: for (var i = 32768; i < 4*1024*1024; i *= 2)  			{  				var pieces = (int)(totalSize/i) + 1;  				if ((pieces*20) < (60*1024)) return i;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: return 4*1024*1024;
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: return 4*1024*1024;
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,RecommendedPieceSize,The following statement contains a magic number: return 4*1024*1024;
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,AddCommonStuff,The following statement contains a magic number: var epocheStart = new DateTime(1970' 1' 1);
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,CalcPiecesHash,The following statement contains a magic number: var piecesBuffer = new byte[GetPieceCount(files)*20];
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,CalcPiecesHash,The following statement contains a magic number: while (totalLength > 0)  			{  				var bytesToRead = (int)Math.Min(totalLength' PieceLength);  				var io = new BufferedIO(null' buffer' (piecesBufferOffset/20)*PieceLength' bytesToRead' bytesToRead' files' path);  				totalLength -= writer.ReadChunk(io);    				// If we are using the synchronous version' result is null  				if (result != null && result.Aborted) return piecesBuffer;    				var currentHash = hasher.ComputeHash(buffer.Array' 0' io.ActualCount);  				RaiseHashed(new TorrentCreatorEventArgs(0'  				                                        0'  				                                        //reader.CurrentFile.Position' reader.CurrentFile.Length'  				                                        piecesBufferOffset*PieceLength'  				                                        (piecesBuffer.Length - 20)*PieceLength));  				Buffer.BlockCopy(currentHash' 0' piecesBuffer' piecesBufferOffset' currentHash.Length);  				piecesBufferOffset += currentHash.Length;  			}
Magic Number,MonoTorrent.Common,TorrentCreator,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentCreator.cs,CalcPiecesHash,The following statement contains a magic number: while (totalLength > 0)  			{  				var bytesToRead = (int)Math.Min(totalLength' PieceLength);  				var io = new BufferedIO(null' buffer' (piecesBufferOffset/20)*PieceLength' bytesToRead' bytesToRead' files' path);  				totalLength -= writer.ReadChunk(io);    				// If we are using the synchronous version' result is null  				if (result != null && result.Aborted) return piecesBuffer;    				var currentHash = hasher.ComputeHash(buffer.Array' 0' io.ActualCount);  				RaiseHashed(new TorrentCreatorEventArgs(0'  				                                        0'  				                                        //reader.CurrentFile.Position' reader.CurrentFile.Length'  				                                        piecesBufferOffset*PieceLength'  				                                        (piecesBuffer.Length - 20)*PieceLength));  				Buffer.BlockCopy(currentHash' 0' piecesBuffer' piecesBufferOffset' currentHash.Length);  				piecesBufferOffset += currentHash.Length;  			}
Magic Number,MonoTorrent.Common,TorrentFile,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\TorrentFile.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,DecodeInternal,The following statement contains a magic number: try  			{  				if (reader.ReadByte() != 'i') // remove the leading 'i'  					throw new BEncodingException("Invalid data found. Aborting.");    				if (reader.PeekChar() == '-')  				{  					sign = -1;  					reader.ReadChar();  				}    				int letter;  				while (((letter = reader.PeekChar()) != -1) && letter != 'e')  				{  					if (letter < '0' || letter > '9') throw new BEncodingException("Invalid number found.");  					number = number*10 + (letter - '0');  					reader.ReadChar();  				}  				if (reader.ReadByte() != 'e') //remove the trailing 'e'  					throw new BEncodingException("Invalid data found. Aborting.");    				number *= sign;  			}  			catch (BEncodingException ex)  			{  				throw new BEncodingException("Couldn't decode number"' ex);  			}  			catch  			{  				throw new BEncodingException("Couldn't decode number");  			}
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (var i = number; i != 0; i /= 10) reversed = reversed*10 + i%10;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (var i = number; i != 0; i /= 10) reversed = reversed*10 + i%10;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (var i = number; i != 0; i /= 10) reversed = reversed*10 + i%10;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (var i = reversed; i != 0; i /= 10) buffer[written++] = (byte)(i%10 + '0');
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (var i = reversed; i != 0; i /= 10) buffer[written++] = (byte)(i%10 + '0');
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (var i = number; i%10 == 0 && number != 0; i /= 10) buffer[written++] = (byte)'0';
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (var i = number; i%10 == 0 && number != 0; i /= 10) buffer[written++] = (byte)'0';
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,LengthInBytes,The following statement contains a magic number: var count = 2;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedNumber.cs,LengthInBytes,The following statement contains a magic number: for (var i = number; i != 0; i /= 10) count++;
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,ReadInt,The following statement contains a magic number: offset += 4;
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,ReadLong,The following statement contains a magic number: offset += 8;
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,ReadShort,The following statement contains a magic number: offset += 2;
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 8));
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: return 2;
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 24));
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 16));
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 8));
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: return 4;
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (int)(value >> 32));
Magic Number,MonoTorrent.BEncoding,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: return 8;
Magic Number,MonoTorrent.BEncoding,BEncodedString,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,LengthInBytes,The following statement contains a magic number: for (var i = textBytes.Length; i != 0; i = i/10) prefix += 1;
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,ReadInt,The following statement contains a magic number: offset += 4;
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,ReadLong,The following statement contains a magic number: offset += 8;
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,ReadShort,The following statement contains a magic number: offset += 2;
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 8));
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: return 2;
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 24));
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 16));
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 8));
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: return 4;
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (int)(value >> 32));
Magic Number,MonoTorrent.Client.Messages,Message,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,Write,The following statement contains a magic number: return 8;
Magic Number,MonoTorrent.Client.Messages,BEncodedString,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.BEncoding\BEncodedString.cs,LengthInBytes,The following statement contains a magic number: for (var i = textBytes.Length; i != 0; i = i/10) prefix += 1;
Magic Number,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,BufferManager,The following statement contains a magic number: AllocateBuffers(4' BufferType.LargeMessageBuffer);
Magic Number,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,BufferManager,The following statement contains a magic number: AllocateBuffers(4' BufferType.MediumMessageBuffer);
Magic Number,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,BufferManager,The following statement contains a magic number: AllocateBuffers(4' BufferType.SmallMessageBuffer);
Magic Number,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,GetBuffer,The following statement contains a magic number: if (type == BufferType.SmallMessageBuffer)  			{  				lock (smallMessageBuffers)  				{  					if (smallMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.SmallMessageBuffer);  					buffer = smallMessageBuffers.Dequeue();  				}  			}    			else if (type == BufferType.MediumMessageBuffer)  			{  				lock (mediumMessageBuffers)  				{  					if (mediumMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.MediumMessageBuffer);  					buffer = mediumMessageBuffers.Dequeue();  				}  			}               				// If we're getting a large buffer and there are none in the pool' just return a new one.  				// Otherwise return one from the pool.  			else if (type == BufferType.LargeMessageBuffer)  			{  				lock (largeMessageBuffers)  				{  					if (largeMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.LargeMessageBuffer);  					buffer = largeMessageBuffers.Dequeue();  				}  			}    			else throw new TorrentException("You cannot directly request a massive buffer");
Magic Number,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,GetBuffer,The following statement contains a magic number: if (type == BufferType.SmallMessageBuffer)  			{  				lock (smallMessageBuffers)  				{  					if (smallMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.SmallMessageBuffer);  					buffer = smallMessageBuffers.Dequeue();  				}  			}    			else if (type == BufferType.MediumMessageBuffer)  			{  				lock (mediumMessageBuffers)  				{  					if (mediumMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.MediumMessageBuffer);  					buffer = mediumMessageBuffers.Dequeue();  				}  			}               				// If we're getting a large buffer and there are none in the pool' just return a new one.  				// Otherwise return one from the pool.  			else if (type == BufferType.LargeMessageBuffer)  			{  				lock (largeMessageBuffers)  				{  					if (largeMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.LargeMessageBuffer);  					buffer = largeMessageBuffers.Dequeue();  				}  			}    			else throw new TorrentException("You cannot directly request a massive buffer");
Magic Number,MonoTorrent.Client,BufferManager,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Client\Managers\BufferManager.cs,GetBuffer,The following statement contains a magic number: if (type == BufferType.SmallMessageBuffer)  			{  				lock (smallMessageBuffers)  				{  					if (smallMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.SmallMessageBuffer);  					buffer = smallMessageBuffers.Dequeue();  				}  			}    			else if (type == BufferType.MediumMessageBuffer)  			{  				lock (mediumMessageBuffers)  				{  					if (mediumMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.MediumMessageBuffer);  					buffer = mediumMessageBuffers.Dequeue();  				}  			}               				// If we're getting a large buffer and there are none in the pool' just return a new one.  				// Otherwise return one from the pool.  			else if (type == BufferType.LargeMessageBuffer)  			{  				lock (largeMessageBuffers)  				{  					if (largeMessageBuffers.Count == 0) AllocateBuffers(5' BufferType.LargeMessageBuffer);  					buffer = largeMessageBuffers.Dequeue();  				}  			}    			else throw new TorrentException("You cannot directly request a massive buffer");
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,InfoHash,The following statement contains a magic number: if (infoHash.Length != 20) throw new ArgumentException("Infohash must be exactly 20 bytes long");
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,Equals,The following statement contains a magic number: return other == null || other.Length != 20 ? false : Toolbox.ByteMatch(Hash' other);
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,FromHex,The following statement contains a magic number: if (infoHash.Length != 40) throw new ArgumentException("Infohash must be 40 characters long");
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,FromHex,The following statement contains a magic number: var hash = new byte[20];
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,FromHex,The following statement contains a magic number: for (var i = 0; i < hash.Length; i++) hash[i] = byte.Parse(infoHash.Substring(i*2' 2)' NumberStyles.HexNumber);
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,FromHex,The following statement contains a magic number: for (var i = 0; i < hash.Length; i++) hash[i] = byte.Parse(infoHash.Substring(i*2' 2)' NumberStyles.HexNumber);
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,FromMagnetLink,The following statement contains a magic number: if (hashEnd - hashStart != 40) throw new ArgumentException("Infohash is not 40 characters long");
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,FromMagnetLink,The following statement contains a magic number: return FromHex(magnetLink.Substring(hashStart' 40));
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MonoTorrent.Common\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Missing Default,MonoTorrent.Common,MyHttpUtility,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\MonoTorrent\MyHttpUtility.cs,IsSafe,The following switch statement is missing a default case: switch (ch)  			{  				case '\'':  				case '(':  				case ')':  				case '*':  				case '-':  				case '.':  				case '_':  				case '!':  					return true;  			}
