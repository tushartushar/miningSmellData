Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PlasmaDownloader,ChobbylaHelper,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,UpdateMissions,Cyclomatic complexity of the method is 8
Complex Method,PlasmaDownloader,ConfigVersions,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ConfigVersions.cs,DeployAndResetConfigs,Cyclomatic complexity of the method is 9
Complex Method,PlasmaDownloader,PlasmaDownloader,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\PlasmaDownloader.cs,GetResource,Cyclomatic complexity of the method is 18
Complex Method,PlasmaDownloader,PlasmaDownloader,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\PlasmaDownloader.cs,GetDependenciesOnly,Cyclomatic complexity of the method is 8
Complex Method,PlasmaDownloader,WebMultiDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,PieceDownloader,Cyclomatic complexity of the method is 10
Complex Method,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,MasterDownloadThread,Cyclomatic complexity of the method is 11
Long Parameter List,PlasmaDownloader,ChobbylaHelper,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,DownloadFile,The method has 6 parameters. Parameters: downloader' desc' type' name' progress' retries
Long Parameter List,PlasmaDownloader,ChobbylaHelper,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,DownloadUrl,The method has 5 parameters. Parameters: downloader' desc' url' filePathTarget' progress
Long Parameter List,PlasmaDownloader.Packages,StreamExtension,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\StreamExtension.cs,ReadExactly,The method has 5 parameters. Parameters: stream' buffer' offset' count' valueToIncrement
Long Statement,PlasmaDownloader,ChobbylaHelper,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,UpdateMissions,The length of the statement  "                            m => !existing.Any(x => (x.MissionID == m.MissionID) && (x.Revision == m.Revision) && (x.DownloadHandle == m.DownloadHandle))) " is 126.
Long Statement,PlasmaDownloader,ChobbylaHelper,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,UpdateMissions,The length of the statement  "                    if (!m.IsScriptMission) if (!await downloader.DownloadFile("Downloading mission " + m.DisplayName' DownloadType.MISSION' m.DownloadHandle' progress).ConfigureAwait(false)) return false; " is 185.
Long Statement,PlasmaDownloader,ChobbylaHelper,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,UpdateMissions,The length of the statement  "                    if (!downloader.DownloadUrl("Downloading image"' m.ImageUrl' Path.Combine(missionsFolder' $"{m.MissionID}.png")' progress)) return false; " is 137.
Long Statement,PlasmaDownloader,ConfigVersions,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ConfigVersions.cs,DeployAndResetConfigs,The length of the statement  "                        var versionEntry in newVers.Versions.Where(x => string.IsNullOrEmpty(x.Platform) || x.Platform == paths.Platform.ToString())) " is 125.
Long Statement,PlasmaDownloader,Download,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Download.cs,Finish,The length of the statement  "                    if (isComplete) IsComplete = !neededDownloads.Any(x => x.IsComplete == false); // set as complete only if all dependencies are ok " is 129.
Long Statement,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The length of the statement  "                        string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' springPaths.Platform)' // for non-live deployments also try live server " is 140.
Long Statement,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The length of the statement  "                        if (assemblyName != null) wc.Headers.Add("user-agent"' string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version)); " is 122.
Long Statement,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,FixPermissions,The length of the statement  "    FilePermissions.S_IRWXU | FilePermissions.S_IRGRP | FilePermissions.S_IXGRP | FilePermissions.S_IROTH | FilePermissions.S_IXOTH); " is 129.
Long Statement,PlasmaDownloader,PlasmaDownloader,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\PlasmaDownloader.cs,GetResource,The length of the statement  "                    if (packageDownloader.GetByInternalName(name) != null || packageDownloader.GetByTag(name) != null) type = DownloadType.RAPID; " is 125.
Long Statement,PlasmaDownloader,PlasmaDownloader,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\PlasmaDownloader.cs,GetResource,The length of the statement  "                        if (packageDownloader.GetByInternalName(name) != null || packageDownloader.GetByTag(name) != null) type = DownloadType.RAPID; " is 125.
Long Statement,PlasmaDownloader.Packages,Sdp2Sdz,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\Sdp2Sdz.cs,ConvertSdp2Sdz,The length of the statement  "            using (var fs = new FileStream(sdpPath' FileMode.Open)) fileList = new SdpArchive(new System.IO.Compression.GZipStream(fs' System.IO.Compression.CompressionMode.Decompress)); " is 174.
Long Statement,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,GetFileList,The length of the statement  "				using (var fs = new FileStream(tempFilelist' FileMode.Open)) fileList = new SdpArchive(new GZipStream(fs' CompressionMode.Decompress)); " is 135.
Long Statement,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,RemoveOtherSdzVersions,The length of the statement  "            var fileNames = Directory.GetFiles(Path.Combine(paths.WritableDirectory' "games")' "*.sdz").Select(Path.GetFileNameWithoutExtension).ToList(); " is 142.
Long Statement,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,RemoveOtherSdzVersions,The length of the statement  "	                fileNames.Contains(other.Value.Hash.ToString())) File.Delete(Path.Combine(paths.WritableDirectory' "games"' other.Value.Hash + ".sdz")); " is 136.
Long Statement,PlasmaDownloader.Packages,Repository,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseVersionList,The length of the statement  "                    if (dependencies != null) dependencies = dependencies.Where(x => !UnitSync.DependencyExceptions.Contains(x) && !string.IsNullOrEmpty(x)).ToArray(); " is 147.
Long Statement,PlasmaDownloader.Packages,Repository,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseVersionList,The length of the statement  "                    if (versionsByTag.TryGetValue(versionName' out oldRev)) if (oldRev.Hash != versionEntry.Hash) changedVersions.Add(versionEntry); " is 128.
Long Statement,PlasmaDownloader.Packages,Version,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ReadFileFromSdp,The length of the statement  "                    using (var fs = new FileStream(sdpPath' FileMode.Open)) sdp = new SdpArchive(new GZipStream(fs' CompressionMode.Decompress)); " is 125.
Long Statement,PlasmaDownloader.Torrents,TorrentDownloader,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,GetDestPath,The length of the statement  "                Utils.GetAlternativeFileName(Utils.MakePath(plasmaDownloader.SpringPaths.WritableDirectory ' type== DownloadType.MAP?"maps":"games"'fileName)); " is 143.
Complex Conditional,PlasmaDownloader,ConfigVersions,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ConfigVersions.cs,DeployAndResetConfigs,The conditional expression  "!oldVers.Versions.Any(                                      x =>                                          x.TargetPath == versionEntry.TargetPath && x.VersionNumber >= versionEntry.VersionNumber &&                                          x.Platform == versionEntry.Platform) || !File.Exists(target)"  is complex.
Complex Conditional,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The conditional expression  "pos > 8 && resbuf[pos] == '\n' && resbuf[pos - 1] == '\r' && resbuf[pos - 2] == '\n' && resbuf[pos - 3] == '\r'"  is complex.
Complex Conditional,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,RemoveOtherSdzVersions,The conditional expression  "other.Value.Hash != packageHash && !other.Key.EndsWith(":stable") && !other.Key.EndsWith(":test") &&  	                fileNames.Contains(other.Value.Hash.ToString())"  is complex.
Complex Conditional,PlasmaDownloader.Torrents,TorrentDownloader,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,DownloadTorrent,The conditional expression  "e == null || e.links == null || e.torrent == null || e.links.Count == 0"  is complex.
Empty Catch Block,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,WebFileDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebFileDownload.cs,wc_DownloadFileCompleted,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,WebMultiDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,MainThread,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The method has an empty catch block.
Magic Number,PlasmaDownloader,ChobbylaHelper,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,DownloadFile,The following statement contains a magic number: var dlTask = down?.WaitHandle.AsTask(TimeSpan.FromMinutes(30));
Magic Number,PlasmaDownloader,Download,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Download.cs,Finish,The following statement contains a magic number: IndividualProgress = 100;
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync(() =>                  {                        var possibleUrls = new List<string>                      {                          string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'                          string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' springPaths.Platform)' // for non-live deployments also try live server                      };                                                                  // for 64bit win also add 32bit engines in case 64bit are missing                      if (springPaths.Platform == SpringPaths.PlatformType.win64)                      {                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' "win32"));                      }                        var downloadUrl = possibleUrls.Where(VerifyFile).FirstOrDefault();                                            if (downloadUrl != null)                      {                          var extension = downloadUrl.Substring(downloadUrl.LastIndexOf('.'));                          var wc = new WebClient() { Proxy = null };                          var assemblyName = Assembly.GetEntryAssembly()?.GetName();                          if (assemblyName != null) wc.Headers.Add("user-agent"' string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version));                          var downloadTempName = Path.GetTempFileName() + extension;                          wc.DownloadProgressChanged += (s' e) =>                          {                              Length = (int)(e.TotalBytesToReceive);                              IndividualProgress = 10 + 0.8*e.ProgressPercentage;                          };                          wc.DownloadFileCompleted += (s' e) =>                          {                              if (e.Cancelled)                              {                                  Trace.TraceInformation("Download {0} cancelled"' Name);                                  Finish(false);                              }                              else if (e.Error != null)                              {                                  Trace.TraceWarning("Error downloading {0}: {1}"' Name' e.Error);                                  Finish(false);                              }                              else                              {                                  Trace.TraceInformation("Installing {0}"' downloadUrl);                                  var timer = new Timer((o) => { IndividualProgress += (100 - IndividualProgress)/10; }' null' 1000' 1000);                                                                    var targetDir = springPaths.GetEngineFolderByVersion(Name);                                  if (!Directory.Exists(targetDir)) Directory.CreateDirectory(targetDir);                                    try                                  {                                      ExtractZipArchive(downloadTempName' targetDir);                                      FixPermissions(targetDir);                                      MarkAsDone(targetDir);                                      Trace.TraceInformation("Install of {0} complete"' Name);                                      springPaths.NotifyNewEngine(Name);                                      Finish(true);                                  }                                  catch (Exception ex)                                  {                                      try                                      {                                          Directory.Delete(targetDir' true);                                      }                                      catch {}                                      Trace.TraceWarning("Install of {0} failed: {1}"' Name' ex);                                      Finish(false);                                  }                                  finally                                  {                                      timer.Dispose();                                  }                              }                              try { File.Delete(downloadTempName);} catch { }                          };                          Trace.TraceInformation("Downloading {0}"' downloadUrl);                          wc.DownloadFileAsync(new Uri(downloadUrl)' downloadTempName' this);                          return;                      }                      else                      {                          Trace.TraceInformation("Cannot find {0}"' Name);                          Finish(false);                      }                  });
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync(() =>                  {                        var possibleUrls = new List<string>                      {                          string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'                          string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' springPaths.Platform)' // for non-live deployments also try live server                      };                                                                  // for 64bit win also add 32bit engines in case 64bit are missing                      if (springPaths.Platform == SpringPaths.PlatformType.win64)                      {                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' "win32"));                      }                        var downloadUrl = possibleUrls.Where(VerifyFile).FirstOrDefault();                                            if (downloadUrl != null)                      {                          var extension = downloadUrl.Substring(downloadUrl.LastIndexOf('.'));                          var wc = new WebClient() { Proxy = null };                          var assemblyName = Assembly.GetEntryAssembly()?.GetName();                          if (assemblyName != null) wc.Headers.Add("user-agent"' string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version));                          var downloadTempName = Path.GetTempFileName() + extension;                          wc.DownloadProgressChanged += (s' e) =>                          {                              Length = (int)(e.TotalBytesToReceive);                              IndividualProgress = 10 + 0.8*e.ProgressPercentage;                          };                          wc.DownloadFileCompleted += (s' e) =>                          {                              if (e.Cancelled)                              {                                  Trace.TraceInformation("Download {0} cancelled"' Name);                                  Finish(false);                              }                              else if (e.Error != null)                              {                                  Trace.TraceWarning("Error downloading {0}: {1}"' Name' e.Error);                                  Finish(false);                              }                              else                              {                                  Trace.TraceInformation("Installing {0}"' downloadUrl);                                  var timer = new Timer((o) => { IndividualProgress += (100 - IndividualProgress)/10; }' null' 1000' 1000);                                                                    var targetDir = springPaths.GetEngineFolderByVersion(Name);                                  if (!Directory.Exists(targetDir)) Directory.CreateDirectory(targetDir);                                    try                                  {                                      ExtractZipArchive(downloadTempName' targetDir);                                      FixPermissions(targetDir);                                      MarkAsDone(targetDir);                                      Trace.TraceInformation("Install of {0} complete"' Name);                                      springPaths.NotifyNewEngine(Name);                                      Finish(true);                                  }                                  catch (Exception ex)                                  {                                      try                                      {                                          Directory.Delete(targetDir' true);                                      }                                      catch {}                                      Trace.TraceWarning("Install of {0} failed: {1}"' Name' ex);                                      Finish(false);                                  }                                  finally                                  {                                      timer.Dispose();                                  }                              }                              try { File.Delete(downloadTempName);} catch { }                          };                          Trace.TraceInformation("Downloading {0}"' downloadUrl);                          wc.DownloadFileAsync(new Uri(downloadUrl)' downloadTempName' this);                          return;                      }                      else                      {                          Trace.TraceInformation("Cannot find {0}"' Name);                          Finish(false);                      }                  });
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync(() =>                  {                        var possibleUrls = new List<string>                      {                          string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'                          string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' springPaths.Platform)' // for non-live deployments also try live server                      };                                                                  // for 64bit win also add 32bit engines in case 64bit are missing                      if (springPaths.Platform == SpringPaths.PlatformType.win64)                      {                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' "win32"));                      }                        var downloadUrl = possibleUrls.Where(VerifyFile).FirstOrDefault();                                            if (downloadUrl != null)                      {                          var extension = downloadUrl.Substring(downloadUrl.LastIndexOf('.'));                          var wc = new WebClient() { Proxy = null };                          var assemblyName = Assembly.GetEntryAssembly()?.GetName();                          if (assemblyName != null) wc.Headers.Add("user-agent"' string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version));                          var downloadTempName = Path.GetTempFileName() + extension;                          wc.DownloadProgressChanged += (s' e) =>                          {                              Length = (int)(e.TotalBytesToReceive);                              IndividualProgress = 10 + 0.8*e.ProgressPercentage;                          };                          wc.DownloadFileCompleted += (s' e) =>                          {                              if (e.Cancelled)                              {                                  Trace.TraceInformation("Download {0} cancelled"' Name);                                  Finish(false);                              }                              else if (e.Error != null)                              {                                  Trace.TraceWarning("Error downloading {0}: {1}"' Name' e.Error);                                  Finish(false);                              }                              else                              {                                  Trace.TraceInformation("Installing {0}"' downloadUrl);                                  var timer = new Timer((o) => { IndividualProgress += (100 - IndividualProgress)/10; }' null' 1000' 1000);                                                                    var targetDir = springPaths.GetEngineFolderByVersion(Name);                                  if (!Directory.Exists(targetDir)) Directory.CreateDirectory(targetDir);                                    try                                  {                                      ExtractZipArchive(downloadTempName' targetDir);                                      FixPermissions(targetDir);                                      MarkAsDone(targetDir);                                      Trace.TraceInformation("Install of {0} complete"' Name);                                      springPaths.NotifyNewEngine(Name);                                      Finish(true);                                  }                                  catch (Exception ex)                                  {                                      try                                      {                                          Directory.Delete(targetDir' true);                                      }                                      catch {}                                      Trace.TraceWarning("Install of {0} failed: {1}"' Name' ex);                                      Finish(false);                                  }                                  finally                                  {                                      timer.Dispose();                                  }                              }                              try { File.Delete(downloadTempName);} catch { }                          };                          Trace.TraceInformation("Downloading {0}"' downloadUrl);                          wc.DownloadFileAsync(new Uri(downloadUrl)' downloadTempName' this);                          return;                      }                      else                      {                          Trace.TraceInformation("Cannot find {0}"' Name);                          Finish(false);                      }                  });
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync(() =>                  {                        var possibleUrls = new List<string>                      {                          string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'                          string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' springPaths.Platform)' // for non-live deployments also try live server                      };                                                                  // for 64bit win also add 32bit engines in case 64bit are missing                      if (springPaths.Platform == SpringPaths.PlatformType.win64)                      {                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' "win32"));                      }                        var downloadUrl = possibleUrls.Where(VerifyFile).FirstOrDefault();                                            if (downloadUrl != null)                      {                          var extension = downloadUrl.Substring(downloadUrl.LastIndexOf('.'));                          var wc = new WebClient() { Proxy = null };                          var assemblyName = Assembly.GetEntryAssembly()?.GetName();                          if (assemblyName != null) wc.Headers.Add("user-agent"' string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version));                          var downloadTempName = Path.GetTempFileName() + extension;                          wc.DownloadProgressChanged += (s' e) =>                          {                              Length = (int)(e.TotalBytesToReceive);                              IndividualProgress = 10 + 0.8*e.ProgressPercentage;                          };                          wc.DownloadFileCompleted += (s' e) =>                          {                              if (e.Cancelled)                              {                                  Trace.TraceInformation("Download {0} cancelled"' Name);                                  Finish(false);                              }                              else if (e.Error != null)                              {                                  Trace.TraceWarning("Error downloading {0}: {1}"' Name' e.Error);                                  Finish(false);                              }                              else                              {                                  Trace.TraceInformation("Installing {0}"' downloadUrl);                                  var timer = new Timer((o) => { IndividualProgress += (100 - IndividualProgress)/10; }' null' 1000' 1000);                                                                    var targetDir = springPaths.GetEngineFolderByVersion(Name);                                  if (!Directory.Exists(targetDir)) Directory.CreateDirectory(targetDir);                                    try                                  {                                      ExtractZipArchive(downloadTempName' targetDir);                                      FixPermissions(targetDir);                                      MarkAsDone(targetDir);                                      Trace.TraceInformation("Install of {0} complete"' Name);                                      springPaths.NotifyNewEngine(Name);                                      Finish(true);                                  }                                  catch (Exception ex)                                  {                                      try                                      {                                          Directory.Delete(targetDir' true);                                      }                                      catch {}                                      Trace.TraceWarning("Install of {0} failed: {1}"' Name' ex);                                      Finish(false);                                  }                                  finally                                  {                                      timer.Dispose();                                  }                              }                              try { File.Delete(downloadTempName);} catch { }                          };                          Trace.TraceInformation("Downloading {0}"' downloadUrl);                          wc.DownloadFileAsync(new Uri(downloadUrl)' downloadTempName' this);                          return;                      }                      else                      {                          Trace.TraceInformation("Cannot find {0}"' Name);                          Finish(false);                      }                  });
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync(() =>                  {                        var possibleUrls = new List<string>                      {                          string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'                          string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' springPaths.Platform)' // for non-live deployments also try live server                      };                                                                  // for 64bit win also add 32bit engines in case 64bit are missing                      if (springPaths.Platform == SpringPaths.PlatformType.win64)                      {                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' "win32"));                      }                        var downloadUrl = possibleUrls.Where(VerifyFile).FirstOrDefault();                                            if (downloadUrl != null)                      {                          var extension = downloadUrl.Substring(downloadUrl.LastIndexOf('.'));                          var wc = new WebClient() { Proxy = null };                          var assemblyName = Assembly.GetEntryAssembly()?.GetName();                          if (assemblyName != null) wc.Headers.Add("user-agent"' string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version));                          var downloadTempName = Path.GetTempFileName() + extension;                          wc.DownloadProgressChanged += (s' e) =>                          {                              Length = (int)(e.TotalBytesToReceive);                              IndividualProgress = 10 + 0.8*e.ProgressPercentage;                          };                          wc.DownloadFileCompleted += (s' e) =>                          {                              if (e.Cancelled)                              {                                  Trace.TraceInformation("Download {0} cancelled"' Name);                                  Finish(false);                              }                              else if (e.Error != null)                              {                                  Trace.TraceWarning("Error downloading {0}: {1}"' Name' e.Error);                                  Finish(false);                              }                              else                              {                                  Trace.TraceInformation("Installing {0}"' downloadUrl);                                  var timer = new Timer((o) => { IndividualProgress += (100 - IndividualProgress)/10; }' null' 1000' 1000);                                                                    var targetDir = springPaths.GetEngineFolderByVersion(Name);                                  if (!Directory.Exists(targetDir)) Directory.CreateDirectory(targetDir);                                    try                                  {                                      ExtractZipArchive(downloadTempName' targetDir);                                      FixPermissions(targetDir);                                      MarkAsDone(targetDir);                                      Trace.TraceInformation("Install of {0} complete"' Name);                                      springPaths.NotifyNewEngine(Name);                                      Finish(true);                                  }                                  catch (Exception ex)                                  {                                      try                                      {                                          Directory.Delete(targetDir' true);                                      }                                      catch {}                                      Trace.TraceWarning("Install of {0} failed: {1}"' Name' ex);                                      Finish(false);                                  }                                  finally                                  {                                      timer.Dispose();                                  }                              }                              try { File.Delete(downloadTempName);} catch { }                          };                          Trace.TraceInformation("Downloading {0}"' downloadUrl);                          wc.DownloadFileAsync(new Uri(downloadUrl)' downloadTempName' this);                          return;                      }                      else                      {                          Trace.TraceInformation("Cannot find {0}"' Name);                          Finish(false);                      }                  });
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync(() =>                  {                        var possibleUrls = new List<string>                      {                          string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'                          string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' springPaths.Platform)' // for non-live deployments also try live server                      };                                                                  // for 64bit win also add 32bit engines in case 64bit are missing                      if (springPaths.Platform == SpringPaths.PlatformType.win64)                      {                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));                          possibleUrls.Add(string.Format("{0}/engine/{2}/{1}.zip"' "https://zero-k.info"' Name' "win32"));                      }                        var downloadUrl = possibleUrls.Where(VerifyFile).FirstOrDefault();                                            if (downloadUrl != null)                      {                          var extension = downloadUrl.Substring(downloadUrl.LastIndexOf('.'));                          var wc = new WebClient() { Proxy = null };                          var assemblyName = Assembly.GetEntryAssembly()?.GetName();                          if (assemblyName != null) wc.Headers.Add("user-agent"' string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version));                          var downloadTempName = Path.GetTempFileName() + extension;                          wc.DownloadProgressChanged += (s' e) =>                          {                              Length = (int)(e.TotalBytesToReceive);                              IndividualProgress = 10 + 0.8*e.ProgressPercentage;                          };                          wc.DownloadFileCompleted += (s' e) =>                          {                              if (e.Cancelled)                              {                                  Trace.TraceInformation("Download {0} cancelled"' Name);                                  Finish(false);                              }                              else if (e.Error != null)                              {                                  Trace.TraceWarning("Error downloading {0}: {1}"' Name' e.Error);                                  Finish(false);                              }                              else                              {                                  Trace.TraceInformation("Installing {0}"' downloadUrl);                                  var timer = new Timer((o) => { IndividualProgress += (100 - IndividualProgress)/10; }' null' 1000' 1000);                                                                    var targetDir = springPaths.GetEngineFolderByVersion(Name);                                  if (!Directory.Exists(targetDir)) Directory.CreateDirectory(targetDir);                                    try                                  {                                      ExtractZipArchive(downloadTempName' targetDir);                                      FixPermissions(targetDir);                                      MarkAsDone(targetDir);                                      Trace.TraceInformation("Install of {0} complete"' Name);                                      springPaths.NotifyNewEngine(Name);                                      Finish(true);                                  }                                  catch (Exception ex)                                  {                                      try                                      {                                          Directory.Delete(targetDir' true);                                      }                                      catch {}                                      Trace.TraceWarning("Install of {0} failed: {1}"' Name' ex);                                      Finish(false);                                  }                                  finally                                  {                                      timer.Dispose();                                  }                              }                              try { File.Delete(downloadTempName);} catch { }                          };                          Trace.TraceInformation("Downloading {0}"' downloadUrl);                          wc.DownloadFileAsync(new Uri(downloadUrl)' downloadTempName' this);                          return;                      }                      else                      {                          Trace.TraceInformation("Cannot find {0}"' Name);                          Finish(false);                      }                  });
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: archive.EntryExtractionEnd += (sender' args) =>                      {                          done++;                          IndividualProgress = 90 + (10 * done / totalSize);                      };
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: archive.EntryExtractionEnd += (sender' args) =>                      {                          done++;                          IndividualProgress = 90 + (10 * done / totalSize);                      };
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,VerifyFile,The following statement contains a magic number: request.Timeout = 5000;
Magic Number,PlasmaDownloader,EngineDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,VerifyFile,The following statement contains a magic number: return len > 100000;
Magic Number,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: tcp.ReceiveTimeout = 8000;
Magic Number,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: tcp.SendTimeout = 8000;
Magic Number,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: tcp.Connect(url.Host' url.Port == 0 ? 80 : url.Port);
Magic Number,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: var resbuf = new byte[8000];
Magic Number,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: pos > 8 && resbuf[pos] == '\n' && resbuf[pos - 1] == '\r' && resbuf[pos - 2] == '\n' && resbuf[pos - 3] == '\r'
Magic Number,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: pos > 8 && resbuf[pos] == '\n' && resbuf[pos - 1] == '\r' && resbuf[pos - 2] == '\n' && resbuf[pos - 3] == '\r'
Magic Number,PlasmaDownloader,PieceGet,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: pos > 8 && resbuf[pos] == '\n' && resbuf[pos - 1] == '\r' && resbuf[pos - 2] == '\n' && resbuf[pos - 3] == '\r'
Magic Number,PlasmaDownloader.Packages,BitArray,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\BitArray.cs,PushBit,The following statement contains a magic number: var bytePos = position/8;
Magic Number,PlasmaDownloader.Packages,BitArray,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\BitArray.cs,PushBit,The following statement contains a magic number: buffer[bytePos] |= (byte)(1 << (position%8));
Magic Number,PlasmaDownloader.Packages,BitArray,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\BitArray.cs,Reset,The following statement contains a magic number: SizeInBytes = (int)Math.Ceiling(sizeInBits/8.0);
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: var numberBuffer = new byte[4];
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: responseStream.ReadExactly(numberBuffer' 0' 4)
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,MasterDownloadThread,The following statement contains a magic number: !IsAborted && !ok && i++ < 3
Magic Number,PlasmaDownloader.Packages,PackageDownloader,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseMaster,The following statement contains a magic number: args.Length < 2
Magic Number,PlasmaDownloader.Packages,Repository,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseVersionList,The following statement contains a magic number: var deps = ar[2];
Magic Number,PlasmaDownloader.Packages,Repository,D:\research\architectureSmells\repos\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseVersionList,The following statement contains a magic number: var internalName = ar[3];
