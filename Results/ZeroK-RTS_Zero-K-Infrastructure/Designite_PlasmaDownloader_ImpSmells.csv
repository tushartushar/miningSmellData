Implementation smell,Namespace,Class,File,Method,Description
Long Method,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The method has 73 lines of code.
Long Method,PlasmaDownloader,PlasmaDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\PlasmaDownloader.cs,GetResource,The method has 74 lines of code.
Long Method,PlasmaDownloader.Torrents,TorrentDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,DownloadTorrent,The method has 62 lines of code.
Complex Method,PlasmaDownloader,ChobbylaHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,UpdateMissions,Cyclomatic complexity of the method is 8
Complex Method,PlasmaDownloader,ConfigVersions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ConfigVersions.cs,DeployAndResetConfigs,Cyclomatic complexity of the method is 9
Complex Method,PlasmaDownloader,PlasmaDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\PlasmaDownloader.cs,GetDependenciesOnly,Cyclomatic complexity of the method is 8
Complex Method,PlasmaDownloader,WebMultiDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,MainThread,Cyclomatic complexity of the method is 11
Complex Method,PlasmaDownloader,WebMultiDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,PieceDownloader,Cyclomatic complexity of the method is 7
Complex Method,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,Cyclomatic complexity of the method is 8
Complex Method,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,Cyclomatic complexity of the method is 12
Complex Method,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,MasterDownloadThread,Cyclomatic complexity of the method is 9
Complex Method,PlasmaDownloader.Packages,PackageDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,DoMasterRefresh,Cyclomatic complexity of the method is 9
Long Parameter List,PlasmaDownloader,ChobbylaHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,DownloadFile,The method has 4 parameters.
Long Parameter List,PlasmaDownloader,ChobbylaHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,DownloadFile,The method has 6 parameters.
Long Parameter List,PlasmaDownloader,ChobbylaHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,DownloadUrl,The method has 5 parameters.
Long Parameter List,PlasmaDownloader,WebMultiDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,WebMultiDownload,The method has 4 parameters.
Long Parameter List,PlasmaDownloader.Packages,StreamExtension,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\StreamExtension.cs,ReadExactly,The method has 4 parameters.
Long Parameter List,PlasmaDownloader.Packages,StreamExtension,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\StreamExtension.cs,ReadExactly,The method has 5 parameters.
Long Statement,PlasmaDownloader,ChobbylaHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,UpdateMissions,The length of the statement  "		var toDownload = missions.Where (m => !existing.Any (x => (x.MissionID == m.MissionID) && (x.Revision == m.Revision) && (x.DownloadHandle == m.DownloadHandle))).ToList (); " is 171.
Long Statement,PlasmaDownloader,ChobbylaHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,UpdateMissions,The length of the statement  "				if (!await downloader.DownloadFile ("Downloading mission " + m.DisplayName' DownloadType.MISSION' m.DownloadHandle' progress).ConfigureAwait (false)) " is 149.
Long Statement,PlasmaDownloader,ConfigVersions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ConfigVersions.cs,DeployAndResetConfigs,The length of the statement  "			foreach (var versionEntry in newVers.Versions.Where (x => string.IsNullOrEmpty (x.Platform) || x.Platform == paths.Platform.ToString ())) { " is 139.
Long Statement,PlasmaDownloader,ConfigVersions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ConfigVersions.cs,DeployAndResetConfigs,The length of the statement  "					if (!oldVers.Versions.Any (x => x.TargetPath == versionEntry.TargetPath && x.VersionNumber >= versionEntry.VersionNumber && x.Platform == versionEntry.Platform) || !File.Exists (target)) { " is 188.
Long Statement,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,FixPermissions,The length of the statement  "			Syscall.chmod (tpath' FilePermissions.S_IRWXU | FilePermissions.S_IRGRP | FilePermissions.S_IXGRP | FilePermissions.S_IROTH | FilePermissions.S_IXOTH); " is 151.
Long Statement,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The length of the statement  "				if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') { " is 122.
Long Statement,PlasmaDownloader.Torrents,TorrentDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,DownloadTorrent,The length of the statement  "			var defPath = Utils.MakePath (plasmaDownloader.SpringPaths.WritableDirectory' down.TypeOfResource == DownloadType.MAP ? "maps" : "games"' down.FileName); " is 153.
Long Statement,PlasmaDownloader.Torrents,TorrentDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,DownloadTorrent,The length of the statement  "			if (e.links.Count () == 1 || e.links.Count (x => !x.Contains ("springfiles.com")) == 1)// mirrors or mirros without jobjol = 1 " is 126.
Long Statement,PlasmaDownloader.Torrents,TorrentDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,DownloadTorrent,The length of the statement  "				var wd = new WebMultiDownload (e.links.Shuffle ()' GetDestPath (down.TypeOfResource' down.FileName)' incomingFolder' tor); " is 122.
Long Statement,PlasmaDownloader.Torrents,TorrentDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,GetDestPath,The length of the statement  "	return Utils.GetAlternativeFileName (Utils.MakePath (plasmaDownloader.SpringPaths.WritableDirectory' type == DownloadType.MAP ? "maps" : "games"' fileName)); " is 157.
Complex Conditional,PlasmaDownloader,ConfigVersions,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ConfigVersions.cs,DeployAndResetConfigs,The conditional expression  "!oldVers.Versions.Any (x => x.TargetPath == versionEntry.TargetPath && x.VersionNumber >= versionEntry.VersionNumber && x.Platform == versionEntry.Platform) || !File.Exists (target)"  is complex.
Complex Conditional,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The conditional expression  "pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r'"  is complex.
Complex Conditional,PlasmaDownloader.Torrents,TorrentDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Torrents\TorrentDownloader.cs,DownloadTorrent,The conditional expression  "e == null || e.links == null || e.torrent == null || e.links.Count == 0"  is complex.
Empty Catch Block,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,WebFileDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebFileDownload.cs,wc_DownloadFileCompleted,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,WebMultiDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,MainThread,The method has an empty catch block.
Empty Catch Block,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The method has an empty catch block.
Magic Number,PlasmaDownloader,ChobbylaHelper,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\ChobbylaHelper.cs,DownloadFile,The following statement contains a magic number: do {  	down = downloader.GetResource (type' name);  	if (progress != null) {  		progress.Status = desc;  		progress.Download = down;  	}  	var dlTask = down.WaitHandle.AsTask (TimeSpan.FromMinutes (30));  	if (dlTask != null)  		await dlTask.ConfigureAwait (false);  } while (down.IsAborted != true && down.IsComplete != true && retries-- > 0);  
Magic Number,PlasmaDownloader,Download,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Download.cs,Finish,The following statement contains a magic number: lock (finishLock) {  	individualComplete = isComplete;  	if (isComplete)  		IndividualProgress = 100;  	// todo fix threading this can sometimes fail due to threads  	if (!neededDownloads.Any (x => x.IsComplete == null)) {  		// no remaining dependencies  		if (isComplete)  			IsComplete = !neededDownloads.Any (x => x.IsComplete == false);  		// set as complete only if all dependencies are ok  		else  			IsComplete = false;  		WaitHandle.Set ();  	}  	foreach (var parent in parents) {  		if (parent != null && parent.individualComplete != null) {  			// propagate completion up to parent  			parent.Finish (parent.individualComplete.Value);  		}  	}  }  
Magic Number,PlasmaDownloader,Download,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Download.cs,Finish,The following statement contains a magic number: if (isComplete)  	IndividualProgress = 100;  
Magic Number,PlasmaDownloader,Download,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Download.cs,Finish,The following statement contains a magic number: IndividualProgress = 100;  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync (() => {  	var possibleUrls = new List<string> {  		string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'  		string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' springPaths.Platform)'  	// for non-live deployments also try live server  	};  	// for 64bit win also add 32bit engines in case 64bit are missing  	if (springPaths.Platform == SpringPaths.PlatformType.win64) {  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' "win32"));  	}  	var downloadUrl = possibleUrls.Where (VerifyFile).FirstOrDefault ();  	if (downloadUrl != null) {  		var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  		var wc = new WebClient () {  			Proxy = null  		};  		var assemblyName = Assembly.GetEntryAssembly ().GetName ();  		if (assemblyName != null)  			wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  		var downloadTempName = Path.GetTempFileName () + extension;  		wc.DownloadProgressChanged += (s' e) => {  			Length = (int)(e.TotalBytesToReceive);  			IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  		};  		wc.DownloadFileCompleted += (s' e) => {  			if (e.Cancelled) {  				Trace.TraceInformation ("Download {0} cancelled"' Name);  				Finish (false);  			} else if (e.Error != null) {  				Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  				Finish (false);  			} else {  				Trace.TraceInformation ("Installing {0}"' downloadUrl);  				var timer = new Timer (o => {  					IndividualProgress += (100 - IndividualProgress) / 10;  				}' null' 1000' 1000);  				var targetDir = springPaths.GetEngineFolderByVersion (Name);  				if (!Directory.Exists (targetDir))  					Directory.CreateDirectory (targetDir);  				try {  					ExtractZipArchive (downloadTempName' targetDir);  					FixPermissions (targetDir);  					MarkAsDone (targetDir);  					Trace.TraceInformation ("Install of {0} complete"' Name);  					springPaths.NotifyNewEngine (Name);  					Finish (true);  				} catch (Exception ex) {  					try {  						Directory.Delete (targetDir' true);  					} catch {  					}  					Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  					Finish (false);  				} finally {  					timer.Dispose ();  				}  			}  			try {  				File.Delete (downloadTempName);  			} catch {  			}  		};  		Trace.TraceInformation ("Downloading {0}"' downloadUrl);  		wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  		return;  	} else {  		Trace.TraceInformation ("Cannot find {0}"' Name);  		Finish (false);  	}  });  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync (() => {  	var possibleUrls = new List<string> {  		string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'  		string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' springPaths.Platform)'  	// for non-live deployments also try live server  	};  	// for 64bit win also add 32bit engines in case 64bit are missing  	if (springPaths.Platform == SpringPaths.PlatformType.win64) {  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' "win32"));  	}  	var downloadUrl = possibleUrls.Where (VerifyFile).FirstOrDefault ();  	if (downloadUrl != null) {  		var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  		var wc = new WebClient () {  			Proxy = null  		};  		var assemblyName = Assembly.GetEntryAssembly ().GetName ();  		if (assemblyName != null)  			wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  		var downloadTempName = Path.GetTempFileName () + extension;  		wc.DownloadProgressChanged += (s' e) => {  			Length = (int)(e.TotalBytesToReceive);  			IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  		};  		wc.DownloadFileCompleted += (s' e) => {  			if (e.Cancelled) {  				Trace.TraceInformation ("Download {0} cancelled"' Name);  				Finish (false);  			} else if (e.Error != null) {  				Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  				Finish (false);  			} else {  				Trace.TraceInformation ("Installing {0}"' downloadUrl);  				var timer = new Timer (o => {  					IndividualProgress += (100 - IndividualProgress) / 10;  				}' null' 1000' 1000);  				var targetDir = springPaths.GetEngineFolderByVersion (Name);  				if (!Directory.Exists (targetDir))  					Directory.CreateDirectory (targetDir);  				try {  					ExtractZipArchive (downloadTempName' targetDir);  					FixPermissions (targetDir);  					MarkAsDone (targetDir);  					Trace.TraceInformation ("Install of {0} complete"' Name);  					springPaths.NotifyNewEngine (Name);  					Finish (true);  				} catch (Exception ex) {  					try {  						Directory.Delete (targetDir' true);  					} catch {  					}  					Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  					Finish (false);  				} finally {  					timer.Dispose ();  				}  			}  			try {  				File.Delete (downloadTempName);  			} catch {  			}  		};  		Trace.TraceInformation ("Downloading {0}"' downloadUrl);  		wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  		return;  	} else {  		Trace.TraceInformation ("Cannot find {0}"' Name);  		Finish (false);  	}  });  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync (() => {  	var possibleUrls = new List<string> {  		string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'  		string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' springPaths.Platform)'  	// for non-live deployments also try live server  	};  	// for 64bit win also add 32bit engines in case 64bit are missing  	if (springPaths.Platform == SpringPaths.PlatformType.win64) {  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' "win32"));  	}  	var downloadUrl = possibleUrls.Where (VerifyFile).FirstOrDefault ();  	if (downloadUrl != null) {  		var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  		var wc = new WebClient () {  			Proxy = null  		};  		var assemblyName = Assembly.GetEntryAssembly ().GetName ();  		if (assemblyName != null)  			wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  		var downloadTempName = Path.GetTempFileName () + extension;  		wc.DownloadProgressChanged += (s' e) => {  			Length = (int)(e.TotalBytesToReceive);  			IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  		};  		wc.DownloadFileCompleted += (s' e) => {  			if (e.Cancelled) {  				Trace.TraceInformation ("Download {0} cancelled"' Name);  				Finish (false);  			} else if (e.Error != null) {  				Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  				Finish (false);  			} else {  				Trace.TraceInformation ("Installing {0}"' downloadUrl);  				var timer = new Timer (o => {  					IndividualProgress += (100 - IndividualProgress) / 10;  				}' null' 1000' 1000);  				var targetDir = springPaths.GetEngineFolderByVersion (Name);  				if (!Directory.Exists (targetDir))  					Directory.CreateDirectory (targetDir);  				try {  					ExtractZipArchive (downloadTempName' targetDir);  					FixPermissions (targetDir);  					MarkAsDone (targetDir);  					Trace.TraceInformation ("Install of {0} complete"' Name);  					springPaths.NotifyNewEngine (Name);  					Finish (true);  				} catch (Exception ex) {  					try {  						Directory.Delete (targetDir' true);  					} catch {  					}  					Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  					Finish (false);  				} finally {  					timer.Dispose ();  				}  			}  			try {  				File.Delete (downloadTempName);  			} catch {  			}  		};  		Trace.TraceInformation ("Downloading {0}"' downloadUrl);  		wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  		return;  	} else {  		Trace.TraceInformation ("Cannot find {0}"' Name);  		Finish (false);  	}  });  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync (() => {  	var possibleUrls = new List<string> {  		string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'  		string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' springPaths.Platform)'  	// for non-live deployments also try live server  	};  	// for 64bit win also add 32bit engines in case 64bit are missing  	if (springPaths.Platform == SpringPaths.PlatformType.win64) {  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' "win32"));  	}  	var downloadUrl = possibleUrls.Where (VerifyFile).FirstOrDefault ();  	if (downloadUrl != null) {  		var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  		var wc = new WebClient () {  			Proxy = null  		};  		var assemblyName = Assembly.GetEntryAssembly ().GetName ();  		if (assemblyName != null)  			wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  		var downloadTempName = Path.GetTempFileName () + extension;  		wc.DownloadProgressChanged += (s' e) => {  			Length = (int)(e.TotalBytesToReceive);  			IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  		};  		wc.DownloadFileCompleted += (s' e) => {  			if (e.Cancelled) {  				Trace.TraceInformation ("Download {0} cancelled"' Name);  				Finish (false);  			} else if (e.Error != null) {  				Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  				Finish (false);  			} else {  				Trace.TraceInformation ("Installing {0}"' downloadUrl);  				var timer = new Timer (o => {  					IndividualProgress += (100 - IndividualProgress) / 10;  				}' null' 1000' 1000);  				var targetDir = springPaths.GetEngineFolderByVersion (Name);  				if (!Directory.Exists (targetDir))  					Directory.CreateDirectory (targetDir);  				try {  					ExtractZipArchive (downloadTempName' targetDir);  					FixPermissions (targetDir);  					MarkAsDone (targetDir);  					Trace.TraceInformation ("Install of {0} complete"' Name);  					springPaths.NotifyNewEngine (Name);  					Finish (true);  				} catch (Exception ex) {  					try {  						Directory.Delete (targetDir' true);  					} catch {  					}  					Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  					Finish (false);  				} finally {  					timer.Dispose ();  				}  			}  			try {  				File.Delete (downloadTempName);  			} catch {  			}  		};  		Trace.TraceInformation ("Downloading {0}"' downloadUrl);  		wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  		return;  	} else {  		Trace.TraceInformation ("Cannot find {0}"' Name);  		Finish (false);  	}  });  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync (() => {  	var possibleUrls = new List<string> {  		string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'  		string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' springPaths.Platform)'  	// for non-live deployments also try live server  	};  	// for 64bit win also add 32bit engines in case 64bit are missing  	if (springPaths.Platform == SpringPaths.PlatformType.win64) {  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' "win32"));  	}  	var downloadUrl = possibleUrls.Where (VerifyFile).FirstOrDefault ();  	if (downloadUrl != null) {  		var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  		var wc = new WebClient () {  			Proxy = null  		};  		var assemblyName = Assembly.GetEntryAssembly ().GetName ();  		if (assemblyName != null)  			wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  		var downloadTempName = Path.GetTempFileName () + extension;  		wc.DownloadProgressChanged += (s' e) => {  			Length = (int)(e.TotalBytesToReceive);  			IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  		};  		wc.DownloadFileCompleted += (s' e) => {  			if (e.Cancelled) {  				Trace.TraceInformation ("Download {0} cancelled"' Name);  				Finish (false);  			} else if (e.Error != null) {  				Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  				Finish (false);  			} else {  				Trace.TraceInformation ("Installing {0}"' downloadUrl);  				var timer = new Timer (o => {  					IndividualProgress += (100 - IndividualProgress) / 10;  				}' null' 1000' 1000);  				var targetDir = springPaths.GetEngineFolderByVersion (Name);  				if (!Directory.Exists (targetDir))  					Directory.CreateDirectory (targetDir);  				try {  					ExtractZipArchive (downloadTempName' targetDir);  					FixPermissions (targetDir);  					MarkAsDone (targetDir);  					Trace.TraceInformation ("Install of {0} complete"' Name);  					springPaths.NotifyNewEngine (Name);  					Finish (true);  				} catch (Exception ex) {  					try {  						Directory.Delete (targetDir' true);  					} catch {  					}  					Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  					Finish (false);  				} finally {  					timer.Dispose ();  				}  			}  			try {  				File.Delete (downloadTempName);  			} catch {  			}  		};  		Trace.TraceInformation ("Downloading {0}"' downloadUrl);  		wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  		return;  	} else {  		Trace.TraceInformation ("Cannot find {0}"' Name);  		Finish (false);  	}  });  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: Utils.StartAsync (() => {  	var possibleUrls = new List<string> {  		string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' springPaths.Platform)'  		string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' springPaths.Platform)'  	// for non-live deployments also try live server  	};  	// for 64bit win also add 32bit engines in case 64bit are missing  	if (springPaths.Platform == SpringPaths.PlatformType.win64) {  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' GlobalConst.BaseSiteUrl' Name' "win32"));  		possibleUrls.Add (string.Format ("{0}/engine/{2}/{1}.zip"' "http://zero-k.info"' Name' "win32"));  	}  	var downloadUrl = possibleUrls.Where (VerifyFile).FirstOrDefault ();  	if (downloadUrl != null) {  		var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  		var wc = new WebClient () {  			Proxy = null  		};  		var assemblyName = Assembly.GetEntryAssembly ().GetName ();  		if (assemblyName != null)  			wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  		var downloadTempName = Path.GetTempFileName () + extension;  		wc.DownloadProgressChanged += (s' e) => {  			Length = (int)(e.TotalBytesToReceive);  			IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  		};  		wc.DownloadFileCompleted += (s' e) => {  			if (e.Cancelled) {  				Trace.TraceInformation ("Download {0} cancelled"' Name);  				Finish (false);  			} else if (e.Error != null) {  				Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  				Finish (false);  			} else {  				Trace.TraceInformation ("Installing {0}"' downloadUrl);  				var timer = new Timer (o => {  					IndividualProgress += (100 - IndividualProgress) / 10;  				}' null' 1000' 1000);  				var targetDir = springPaths.GetEngineFolderByVersion (Name);  				if (!Directory.Exists (targetDir))  					Directory.CreateDirectory (targetDir);  				try {  					ExtractZipArchive (downloadTempName' targetDir);  					FixPermissions (targetDir);  					MarkAsDone (targetDir);  					Trace.TraceInformation ("Install of {0} complete"' Name);  					springPaths.NotifyNewEngine (Name);  					Finish (true);  				} catch (Exception ex) {  					try {  						Directory.Delete (targetDir' true);  					} catch {  					}  					Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  					Finish (false);  				} finally {  					timer.Dispose ();  				}  			}  			try {  				File.Delete (downloadTempName);  			} catch {  			}  		};  		Trace.TraceInformation ("Downloading {0}"' downloadUrl);  		wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  		return;  	} else {  		Trace.TraceInformation ("Cannot find {0}"' Name);  		Finish (false);  	}  });  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (downloadUrl != null) {  	var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  	var wc = new WebClient () {  		Proxy = null  	};  	var assemblyName = Assembly.GetEntryAssembly ().GetName ();  	if (assemblyName != null)  		wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  	var downloadTempName = Path.GetTempFileName () + extension;  	wc.DownloadProgressChanged += (s' e) => {  		Length = (int)(e.TotalBytesToReceive);  		IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  	};  	wc.DownloadFileCompleted += (s' e) => {  		if (e.Cancelled) {  			Trace.TraceInformation ("Download {0} cancelled"' Name);  			Finish (false);  		} else if (e.Error != null) {  			Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  			Finish (false);  		} else {  			Trace.TraceInformation ("Installing {0}"' downloadUrl);  			var timer = new Timer (o => {  				IndividualProgress += (100 - IndividualProgress) / 10;  			}' null' 1000' 1000);  			var targetDir = springPaths.GetEngineFolderByVersion (Name);  			if (!Directory.Exists (targetDir))  				Directory.CreateDirectory (targetDir);  			try {  				ExtractZipArchive (downloadTempName' targetDir);  				FixPermissions (targetDir);  				MarkAsDone (targetDir);  				Trace.TraceInformation ("Install of {0} complete"' Name);  				springPaths.NotifyNewEngine (Name);  				Finish (true);  			} catch (Exception ex) {  				try {  					Directory.Delete (targetDir' true);  				} catch {  				}  				Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  				Finish (false);  			} finally {  				timer.Dispose ();  			}  		}  		try {  			File.Delete (downloadTempName);  		} catch {  		}  	};  	Trace.TraceInformation ("Downloading {0}"' downloadUrl);  	wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  	return;  } else {  	Trace.TraceInformation ("Cannot find {0}"' Name);  	Finish (false);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (downloadUrl != null) {  	var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  	var wc = new WebClient () {  		Proxy = null  	};  	var assemblyName = Assembly.GetEntryAssembly ().GetName ();  	if (assemblyName != null)  		wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  	var downloadTempName = Path.GetTempFileName () + extension;  	wc.DownloadProgressChanged += (s' e) => {  		Length = (int)(e.TotalBytesToReceive);  		IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  	};  	wc.DownloadFileCompleted += (s' e) => {  		if (e.Cancelled) {  			Trace.TraceInformation ("Download {0} cancelled"' Name);  			Finish (false);  		} else if (e.Error != null) {  			Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  			Finish (false);  		} else {  			Trace.TraceInformation ("Installing {0}"' downloadUrl);  			var timer = new Timer (o => {  				IndividualProgress += (100 - IndividualProgress) / 10;  			}' null' 1000' 1000);  			var targetDir = springPaths.GetEngineFolderByVersion (Name);  			if (!Directory.Exists (targetDir))  				Directory.CreateDirectory (targetDir);  			try {  				ExtractZipArchive (downloadTempName' targetDir);  				FixPermissions (targetDir);  				MarkAsDone (targetDir);  				Trace.TraceInformation ("Install of {0} complete"' Name);  				springPaths.NotifyNewEngine (Name);  				Finish (true);  			} catch (Exception ex) {  				try {  					Directory.Delete (targetDir' true);  				} catch {  				}  				Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  				Finish (false);  			} finally {  				timer.Dispose ();  			}  		}  		try {  			File.Delete (downloadTempName);  		} catch {  		}  	};  	Trace.TraceInformation ("Downloading {0}"' downloadUrl);  	wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  	return;  } else {  	Trace.TraceInformation ("Cannot find {0}"' Name);  	Finish (false);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (downloadUrl != null) {  	var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  	var wc = new WebClient () {  		Proxy = null  	};  	var assemblyName = Assembly.GetEntryAssembly ().GetName ();  	if (assemblyName != null)  		wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  	var downloadTempName = Path.GetTempFileName () + extension;  	wc.DownloadProgressChanged += (s' e) => {  		Length = (int)(e.TotalBytesToReceive);  		IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  	};  	wc.DownloadFileCompleted += (s' e) => {  		if (e.Cancelled) {  			Trace.TraceInformation ("Download {0} cancelled"' Name);  			Finish (false);  		} else if (e.Error != null) {  			Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  			Finish (false);  		} else {  			Trace.TraceInformation ("Installing {0}"' downloadUrl);  			var timer = new Timer (o => {  				IndividualProgress += (100 - IndividualProgress) / 10;  			}' null' 1000' 1000);  			var targetDir = springPaths.GetEngineFolderByVersion (Name);  			if (!Directory.Exists (targetDir))  				Directory.CreateDirectory (targetDir);  			try {  				ExtractZipArchive (downloadTempName' targetDir);  				FixPermissions (targetDir);  				MarkAsDone (targetDir);  				Trace.TraceInformation ("Install of {0} complete"' Name);  				springPaths.NotifyNewEngine (Name);  				Finish (true);  			} catch (Exception ex) {  				try {  					Directory.Delete (targetDir' true);  				} catch {  				}  				Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  				Finish (false);  			} finally {  				timer.Dispose ();  			}  		}  		try {  			File.Delete (downloadTempName);  		} catch {  		}  	};  	Trace.TraceInformation ("Downloading {0}"' downloadUrl);  	wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  	return;  } else {  	Trace.TraceInformation ("Cannot find {0}"' Name);  	Finish (false);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (downloadUrl != null) {  	var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  	var wc = new WebClient () {  		Proxy = null  	};  	var assemblyName = Assembly.GetEntryAssembly ().GetName ();  	if (assemblyName != null)  		wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  	var downloadTempName = Path.GetTempFileName () + extension;  	wc.DownloadProgressChanged += (s' e) => {  		Length = (int)(e.TotalBytesToReceive);  		IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  	};  	wc.DownloadFileCompleted += (s' e) => {  		if (e.Cancelled) {  			Trace.TraceInformation ("Download {0} cancelled"' Name);  			Finish (false);  		} else if (e.Error != null) {  			Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  			Finish (false);  		} else {  			Trace.TraceInformation ("Installing {0}"' downloadUrl);  			var timer = new Timer (o => {  				IndividualProgress += (100 - IndividualProgress) / 10;  			}' null' 1000' 1000);  			var targetDir = springPaths.GetEngineFolderByVersion (Name);  			if (!Directory.Exists (targetDir))  				Directory.CreateDirectory (targetDir);  			try {  				ExtractZipArchive (downloadTempName' targetDir);  				FixPermissions (targetDir);  				MarkAsDone (targetDir);  				Trace.TraceInformation ("Install of {0} complete"' Name);  				springPaths.NotifyNewEngine (Name);  				Finish (true);  			} catch (Exception ex) {  				try {  					Directory.Delete (targetDir' true);  				} catch {  				}  				Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  				Finish (false);  			} finally {  				timer.Dispose ();  			}  		}  		try {  			File.Delete (downloadTempName);  		} catch {  		}  	};  	Trace.TraceInformation ("Downloading {0}"' downloadUrl);  	wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  	return;  } else {  	Trace.TraceInformation ("Cannot find {0}"' Name);  	Finish (false);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (downloadUrl != null) {  	var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  	var wc = new WebClient () {  		Proxy = null  	};  	var assemblyName = Assembly.GetEntryAssembly ().GetName ();  	if (assemblyName != null)  		wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  	var downloadTempName = Path.GetTempFileName () + extension;  	wc.DownloadProgressChanged += (s' e) => {  		Length = (int)(e.TotalBytesToReceive);  		IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  	};  	wc.DownloadFileCompleted += (s' e) => {  		if (e.Cancelled) {  			Trace.TraceInformation ("Download {0} cancelled"' Name);  			Finish (false);  		} else if (e.Error != null) {  			Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  			Finish (false);  		} else {  			Trace.TraceInformation ("Installing {0}"' downloadUrl);  			var timer = new Timer (o => {  				IndividualProgress += (100 - IndividualProgress) / 10;  			}' null' 1000' 1000);  			var targetDir = springPaths.GetEngineFolderByVersion (Name);  			if (!Directory.Exists (targetDir))  				Directory.CreateDirectory (targetDir);  			try {  				ExtractZipArchive (downloadTempName' targetDir);  				FixPermissions (targetDir);  				MarkAsDone (targetDir);  				Trace.TraceInformation ("Install of {0} complete"' Name);  				springPaths.NotifyNewEngine (Name);  				Finish (true);  			} catch (Exception ex) {  				try {  					Directory.Delete (targetDir' true);  				} catch {  				}  				Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  				Finish (false);  			} finally {  				timer.Dispose ();  			}  		}  		try {  			File.Delete (downloadTempName);  		} catch {  		}  	};  	Trace.TraceInformation ("Downloading {0}"' downloadUrl);  	wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  	return;  } else {  	Trace.TraceInformation ("Cannot find {0}"' Name);  	Finish (false);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (downloadUrl != null) {  	var extension = downloadUrl.Substring (downloadUrl.LastIndexOf ('.'));  	var wc = new WebClient () {  		Proxy = null  	};  	var assemblyName = Assembly.GetEntryAssembly ().GetName ();  	if (assemblyName != null)  		wc.Headers.Add ("user-agent"' string.Format ("{0} {1}"' assemblyName.Name' assemblyName.Version));  	var downloadTempName = Path.GetTempFileName () + extension;  	wc.DownloadProgressChanged += (s' e) => {  		Length = (int)(e.TotalBytesToReceive);  		IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  	};  	wc.DownloadFileCompleted += (s' e) => {  		if (e.Cancelled) {  			Trace.TraceInformation ("Download {0} cancelled"' Name);  			Finish (false);  		} else if (e.Error != null) {  			Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  			Finish (false);  		} else {  			Trace.TraceInformation ("Installing {0}"' downloadUrl);  			var timer = new Timer (o => {  				IndividualProgress += (100 - IndividualProgress) / 10;  			}' null' 1000' 1000);  			var targetDir = springPaths.GetEngineFolderByVersion (Name);  			if (!Directory.Exists (targetDir))  				Directory.CreateDirectory (targetDir);  			try {  				ExtractZipArchive (downloadTempName' targetDir);  				FixPermissions (targetDir);  				MarkAsDone (targetDir);  				Trace.TraceInformation ("Install of {0} complete"' Name);  				springPaths.NotifyNewEngine (Name);  				Finish (true);  			} catch (Exception ex) {  				try {  					Directory.Delete (targetDir' true);  				} catch {  				}  				Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  				Finish (false);  			} finally {  				timer.Dispose ();  			}  		}  		try {  			File.Delete (downloadTempName);  		} catch {  		}  	};  	Trace.TraceInformation ("Downloading {0}"' downloadUrl);  	wc.DownloadFileAsync (new Uri (downloadUrl)' downloadTempName' this);  	return;  } else {  	Trace.TraceInformation ("Cannot find {0}"' Name);  	Finish (false);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: wc.DownloadProgressChanged += (s' e) => {  	Length = (int)(e.TotalBytesToReceive);  	IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: wc.DownloadProgressChanged += (s' e) => {  	Length = (int)(e.TotalBytesToReceive);  	IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: IndividualProgress = 10 + 0.8 * e.ProgressPercentage;  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: wc.DownloadFileCompleted += (s' e) => {  	if (e.Cancelled) {  		Trace.TraceInformation ("Download {0} cancelled"' Name);  		Finish (false);  	} else if (e.Error != null) {  		Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  		Finish (false);  	} else {  		Trace.TraceInformation ("Installing {0}"' downloadUrl);  		var timer = new Timer (o => {  			IndividualProgress += (100 - IndividualProgress) / 10;  		}' null' 1000' 1000);  		var targetDir = springPaths.GetEngineFolderByVersion (Name);  		if (!Directory.Exists (targetDir))  			Directory.CreateDirectory (targetDir);  		try {  			ExtractZipArchive (downloadTempName' targetDir);  			FixPermissions (targetDir);  			MarkAsDone (targetDir);  			Trace.TraceInformation ("Install of {0} complete"' Name);  			springPaths.NotifyNewEngine (Name);  			Finish (true);  		} catch (Exception ex) {  			try {  				Directory.Delete (targetDir' true);  			} catch {  			}  			Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  			Finish (false);  		} finally {  			timer.Dispose ();  		}  	}  	try {  		File.Delete (downloadTempName);  	} catch {  	}  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: wc.DownloadFileCompleted += (s' e) => {  	if (e.Cancelled) {  		Trace.TraceInformation ("Download {0} cancelled"' Name);  		Finish (false);  	} else if (e.Error != null) {  		Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  		Finish (false);  	} else {  		Trace.TraceInformation ("Installing {0}"' downloadUrl);  		var timer = new Timer (o => {  			IndividualProgress += (100 - IndividualProgress) / 10;  		}' null' 1000' 1000);  		var targetDir = springPaths.GetEngineFolderByVersion (Name);  		if (!Directory.Exists (targetDir))  			Directory.CreateDirectory (targetDir);  		try {  			ExtractZipArchive (downloadTempName' targetDir);  			FixPermissions (targetDir);  			MarkAsDone (targetDir);  			Trace.TraceInformation ("Install of {0} complete"' Name);  			springPaths.NotifyNewEngine (Name);  			Finish (true);  		} catch (Exception ex) {  			try {  				Directory.Delete (targetDir' true);  			} catch {  			}  			Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  			Finish (false);  		} finally {  			timer.Dispose ();  		}  	}  	try {  		File.Delete (downloadTempName);  	} catch {  	}  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: wc.DownloadFileCompleted += (s' e) => {  	if (e.Cancelled) {  		Trace.TraceInformation ("Download {0} cancelled"' Name);  		Finish (false);  	} else if (e.Error != null) {  		Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  		Finish (false);  	} else {  		Trace.TraceInformation ("Installing {0}"' downloadUrl);  		var timer = new Timer (o => {  			IndividualProgress += (100 - IndividualProgress) / 10;  		}' null' 1000' 1000);  		var targetDir = springPaths.GetEngineFolderByVersion (Name);  		if (!Directory.Exists (targetDir))  			Directory.CreateDirectory (targetDir);  		try {  			ExtractZipArchive (downloadTempName' targetDir);  			FixPermissions (targetDir);  			MarkAsDone (targetDir);  			Trace.TraceInformation ("Install of {0} complete"' Name);  			springPaths.NotifyNewEngine (Name);  			Finish (true);  		} catch (Exception ex) {  			try {  				Directory.Delete (targetDir' true);  			} catch {  			}  			Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  			Finish (false);  		} finally {  			timer.Dispose ();  		}  	}  	try {  		File.Delete (downloadTempName);  	} catch {  	}  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: wc.DownloadFileCompleted += (s' e) => {  	if (e.Cancelled) {  		Trace.TraceInformation ("Download {0} cancelled"' Name);  		Finish (false);  	} else if (e.Error != null) {  		Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  		Finish (false);  	} else {  		Trace.TraceInformation ("Installing {0}"' downloadUrl);  		var timer = new Timer (o => {  			IndividualProgress += (100 - IndividualProgress) / 10;  		}' null' 1000' 1000);  		var targetDir = springPaths.GetEngineFolderByVersion (Name);  		if (!Directory.Exists (targetDir))  			Directory.CreateDirectory (targetDir);  		try {  			ExtractZipArchive (downloadTempName' targetDir);  			FixPermissions (targetDir);  			MarkAsDone (targetDir);  			Trace.TraceInformation ("Install of {0} complete"' Name);  			springPaths.NotifyNewEngine (Name);  			Finish (true);  		} catch (Exception ex) {  			try {  				Directory.Delete (targetDir' true);  			} catch {  			}  			Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  			Finish (false);  		} finally {  			timer.Dispose ();  		}  	}  	try {  		File.Delete (downloadTempName);  	} catch {  	}  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Cancelled) {  	Trace.TraceInformation ("Download {0} cancelled"' Name);  	Finish (false);  } else if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Cancelled) {  	Trace.TraceInformation ("Download {0} cancelled"' Name);  	Finish (false);  } else if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Cancelled) {  	Trace.TraceInformation ("Download {0} cancelled"' Name);  	Finish (false);  } else if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Cancelled) {  	Trace.TraceInformation ("Download {0} cancelled"' Name);  	Finish (false);  } else if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: if (e.Error != null) {  	Trace.TraceWarning ("Error downloading {0}: {1}"' Name' e.Error);  	Finish (false);  } else {  	Trace.TraceInformation ("Installing {0}"' downloadUrl);  	var timer = new Timer (o => {  		IndividualProgress += (100 - IndividualProgress) / 10;  	}' null' 1000' 1000);  	var targetDir = springPaths.GetEngineFolderByVersion (Name);  	if (!Directory.Exists (targetDir))  		Directory.CreateDirectory (targetDir);  	try {  		ExtractZipArchive (downloadTempName' targetDir);  		FixPermissions (targetDir);  		MarkAsDone (targetDir);  		Trace.TraceInformation ("Install of {0} complete"' Name);  		springPaths.NotifyNewEngine (Name);  		Finish (true);  	} catch (Exception ex) {  		try {  			Directory.Delete (targetDir' true);  		} catch {  		}  		Trace.TraceWarning ("Install of {0} failed: {1}"' Name' ex);  		Finish (false);  	} finally {  		timer.Dispose ();  	}  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: IndividualProgress += (100 - IndividualProgress) / 10;  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,Start,The following statement contains a magic number: IndividualProgress += (100 - IndividualProgress) / 10;  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: using (var archive = ArchiveFactory.Open (target)) {  	long done = 0;  	var totalSize = archive.Entries.Count () + 1;  	archive.EntryExtractionEnd += (sender' args) => {  		done++;  		IndividualProgress = 90 + (10 * done / totalSize);  	};  	archive.WriteToDirectory (targetDir' ExtractOptions.ExtractFullPath | ExtractOptions.Overwrite);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: using (var archive = ArchiveFactory.Open (target)) {  	long done = 0;  	var totalSize = archive.Entries.Count () + 1;  	archive.EntryExtractionEnd += (sender' args) => {  		done++;  		IndividualProgress = 90 + (10 * done / totalSize);  	};  	archive.WriteToDirectory (targetDir' ExtractOptions.ExtractFullPath | ExtractOptions.Overwrite);  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: archive.EntryExtractionEnd += (sender' args) => {  	done++;  	IndividualProgress = 90 + (10 * done / totalSize);  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: archive.EntryExtractionEnd += (sender' args) => {  	done++;  	IndividualProgress = 90 + (10 * done / totalSize);  };  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: IndividualProgress = 90 + (10 * done / totalSize);  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,ExtractZipArchive,The following statement contains a magic number: IndividualProgress = 90 + (10 * done / totalSize);  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,VerifyFile,The following statement contains a magic number: try {  	var request = WebRequest.Create (url);  	request.Method = "HEAD";  	request.Timeout = 5000;  	var res = request.GetResponse ();  	var len = res.ContentLength;  	request.Abort ();  	return len > 100000;  } catch (Exception ex) {  	return false;  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,VerifyFile,The following statement contains a magic number: try {  	var request = WebRequest.Create (url);  	request.Method = "HEAD";  	request.Timeout = 5000;  	var res = request.GetResponse ();  	var len = res.ContentLength;  	request.Abort ();  	return len > 100000;  } catch (Exception ex) {  	return false;  }  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,VerifyFile,The following statement contains a magic number: request.Timeout = 5000;  
Magic Number,PlasmaDownloader,EngineDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\EngineDownload.cs,VerifyFile,The following statement contains a magic number: return len > 100000;  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: try {  	tcp.ReceiveTimeout = 8000;  	tcp.SendTimeout = 8000;  	tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  	using (var stream = tcp.GetStream ()) {  		var header = new StringBuilder ();  		// make request  		header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  		header.AppendFormat ("Host: {0}\r\n"' url.Host);  		header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  		header.Append ("\r\n");  		var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  		stream.Write (sendbuf' 0' sendbuf.Length);  		// send request  		var resbuf = new byte[8000];  		var pos = 0;  		int readval;  		var headerOk = false;  		while ((readval = stream.ReadByte ()) != -1) {  			resbuf [pos] = (byte)readval;  			if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  				if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  					headerOk = true;  				break;  			}  			pos++;  		}  		if (!headerOk) {  			invalid = true;  			return false;  		}  		var buf = new byte[size];  		buffer = buf;  		stream.ReadExactly (buf' 0' buf.Length' ref done);  		return true;  	}  } catch (Exception ex) {  	Trace.Write ("Error downloading file piece: " + ex.Message);  	return false;  } finally {  	try {  		tcp.Close ();  	} catch {  	}  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: try {  	tcp.ReceiveTimeout = 8000;  	tcp.SendTimeout = 8000;  	tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  	using (var stream = tcp.GetStream ()) {  		var header = new StringBuilder ();  		// make request  		header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  		header.AppendFormat ("Host: {0}\r\n"' url.Host);  		header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  		header.Append ("\r\n");  		var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  		stream.Write (sendbuf' 0' sendbuf.Length);  		// send request  		var resbuf = new byte[8000];  		var pos = 0;  		int readval;  		var headerOk = false;  		while ((readval = stream.ReadByte ()) != -1) {  			resbuf [pos] = (byte)readval;  			if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  				if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  					headerOk = true;  				break;  			}  			pos++;  		}  		if (!headerOk) {  			invalid = true;  			return false;  		}  		var buf = new byte[size];  		buffer = buf;  		stream.ReadExactly (buf' 0' buf.Length' ref done);  		return true;  	}  } catch (Exception ex) {  	Trace.Write ("Error downloading file piece: " + ex.Message);  	return false;  } finally {  	try {  		tcp.Close ();  	} catch {  	}  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: try {  	tcp.ReceiveTimeout = 8000;  	tcp.SendTimeout = 8000;  	tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  	using (var stream = tcp.GetStream ()) {  		var header = new StringBuilder ();  		// make request  		header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  		header.AppendFormat ("Host: {0}\r\n"' url.Host);  		header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  		header.Append ("\r\n");  		var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  		stream.Write (sendbuf' 0' sendbuf.Length);  		// send request  		var resbuf = new byte[8000];  		var pos = 0;  		int readval;  		var headerOk = false;  		while ((readval = stream.ReadByte ()) != -1) {  			resbuf [pos] = (byte)readval;  			if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  				if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  					headerOk = true;  				break;  			}  			pos++;  		}  		if (!headerOk) {  			invalid = true;  			return false;  		}  		var buf = new byte[size];  		buffer = buf;  		stream.ReadExactly (buf' 0' buf.Length' ref done);  		return true;  	}  } catch (Exception ex) {  	Trace.Write ("Error downloading file piece: " + ex.Message);  	return false;  } finally {  	try {  		tcp.Close ();  	} catch {  	}  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: try {  	tcp.ReceiveTimeout = 8000;  	tcp.SendTimeout = 8000;  	tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  	using (var stream = tcp.GetStream ()) {  		var header = new StringBuilder ();  		// make request  		header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  		header.AppendFormat ("Host: {0}\r\n"' url.Host);  		header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  		header.Append ("\r\n");  		var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  		stream.Write (sendbuf' 0' sendbuf.Length);  		// send request  		var resbuf = new byte[8000];  		var pos = 0;  		int readval;  		var headerOk = false;  		while ((readval = stream.ReadByte ()) != -1) {  			resbuf [pos] = (byte)readval;  			if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  				if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  					headerOk = true;  				break;  			}  			pos++;  		}  		if (!headerOk) {  			invalid = true;  			return false;  		}  		var buf = new byte[size];  		buffer = buf;  		stream.ReadExactly (buf' 0' buf.Length' ref done);  		return true;  	}  } catch (Exception ex) {  	Trace.Write ("Error downloading file piece: " + ex.Message);  	return false;  } finally {  	try {  		tcp.Close ();  	} catch {  	}  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: try {  	tcp.ReceiveTimeout = 8000;  	tcp.SendTimeout = 8000;  	tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  	using (var stream = tcp.GetStream ()) {  		var header = new StringBuilder ();  		// make request  		header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  		header.AppendFormat ("Host: {0}\r\n"' url.Host);  		header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  		header.Append ("\r\n");  		var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  		stream.Write (sendbuf' 0' sendbuf.Length);  		// send request  		var resbuf = new byte[8000];  		var pos = 0;  		int readval;  		var headerOk = false;  		while ((readval = stream.ReadByte ()) != -1) {  			resbuf [pos] = (byte)readval;  			if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  				if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  					headerOk = true;  				break;  			}  			pos++;  		}  		if (!headerOk) {  			invalid = true;  			return false;  		}  		var buf = new byte[size];  		buffer = buf;  		stream.ReadExactly (buf' 0' buf.Length' ref done);  		return true;  	}  } catch (Exception ex) {  	Trace.Write ("Error downloading file piece: " + ex.Message);  	return false;  } finally {  	try {  		tcp.Close ();  	} catch {  	}  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: try {  	tcp.ReceiveTimeout = 8000;  	tcp.SendTimeout = 8000;  	tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  	using (var stream = tcp.GetStream ()) {  		var header = new StringBuilder ();  		// make request  		header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  		header.AppendFormat ("Host: {0}\r\n"' url.Host);  		header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  		header.Append ("\r\n");  		var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  		stream.Write (sendbuf' 0' sendbuf.Length);  		// send request  		var resbuf = new byte[8000];  		var pos = 0;  		int readval;  		var headerOk = false;  		while ((readval = stream.ReadByte ()) != -1) {  			resbuf [pos] = (byte)readval;  			if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  				if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  					headerOk = true;  				break;  			}  			pos++;  		}  		if (!headerOk) {  			invalid = true;  			return false;  		}  		var buf = new byte[size];  		buffer = buf;  		stream.ReadExactly (buf' 0' buf.Length' ref done);  		return true;  	}  } catch (Exception ex) {  	Trace.Write ("Error downloading file piece: " + ex.Message);  	return false;  } finally {  	try {  		tcp.Close ();  	} catch {  	}  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: try {  	tcp.ReceiveTimeout = 8000;  	tcp.SendTimeout = 8000;  	tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  	using (var stream = tcp.GetStream ()) {  		var header = new StringBuilder ();  		// make request  		header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  		header.AppendFormat ("Host: {0}\r\n"' url.Host);  		header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  		header.Append ("\r\n");  		var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  		stream.Write (sendbuf' 0' sendbuf.Length);  		// send request  		var resbuf = new byte[8000];  		var pos = 0;  		int readval;  		var headerOk = false;  		while ((readval = stream.ReadByte ()) != -1) {  			resbuf [pos] = (byte)readval;  			if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  				if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  					headerOk = true;  				break;  			}  			pos++;  		}  		if (!headerOk) {  			invalid = true;  			return false;  		}  		var buf = new byte[size];  		buffer = buf;  		stream.ReadExactly (buf' 0' buf.Length' ref done);  		return true;  	}  } catch (Exception ex) {  	Trace.Write ("Error downloading file piece: " + ex.Message);  	return false;  } finally {  	try {  		tcp.Close ();  	} catch {  	}  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: tcp.ReceiveTimeout = 8000;  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: tcp.SendTimeout = 8000;  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: tcp.Connect (url.Host' url.Port == 0 ? 80 : url.Port);  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: using (var stream = tcp.GetStream ()) {  	var header = new StringBuilder ();  	// make request  	header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  	header.AppendFormat ("Host: {0}\r\n"' url.Host);  	header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  	header.Append ("\r\n");  	var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  	stream.Write (sendbuf' 0' sendbuf.Length);  	// send request  	var resbuf = new byte[8000];  	var pos = 0;  	int readval;  	var headerOk = false;  	while ((readval = stream.ReadByte ()) != -1) {  		resbuf [pos] = (byte)readval;  		if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  			if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  				headerOk = true;  			break;  		}  		pos++;  	}  	if (!headerOk) {  		invalid = true;  		return false;  	}  	var buf = new byte[size];  	buffer = buf;  	stream.ReadExactly (buf' 0' buf.Length' ref done);  	return true;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: using (var stream = tcp.GetStream ()) {  	var header = new StringBuilder ();  	// make request  	header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  	header.AppendFormat ("Host: {0}\r\n"' url.Host);  	header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  	header.Append ("\r\n");  	var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  	stream.Write (sendbuf' 0' sendbuf.Length);  	// send request  	var resbuf = new byte[8000];  	var pos = 0;  	int readval;  	var headerOk = false;  	while ((readval = stream.ReadByte ()) != -1) {  		resbuf [pos] = (byte)readval;  		if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  			if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  				headerOk = true;  			break;  		}  		pos++;  	}  	if (!headerOk) {  		invalid = true;  		return false;  	}  	var buf = new byte[size];  	buffer = buf;  	stream.ReadExactly (buf' 0' buf.Length' ref done);  	return true;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: using (var stream = tcp.GetStream ()) {  	var header = new StringBuilder ();  	// make request  	header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  	header.AppendFormat ("Host: {0}\r\n"' url.Host);  	header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  	header.Append ("\r\n");  	var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  	stream.Write (sendbuf' 0' sendbuf.Length);  	// send request  	var resbuf = new byte[8000];  	var pos = 0;  	int readval;  	var headerOk = false;  	while ((readval = stream.ReadByte ()) != -1) {  		resbuf [pos] = (byte)readval;  		if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  			if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  				headerOk = true;  			break;  		}  		pos++;  	}  	if (!headerOk) {  		invalid = true;  		return false;  	}  	var buf = new byte[size];  	buffer = buf;  	stream.ReadExactly (buf' 0' buf.Length' ref done);  	return true;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: using (var stream = tcp.GetStream ()) {  	var header = new StringBuilder ();  	// make request  	header.AppendFormat ("GET {0} HTTP/1.1\r\n"' url.PathAndQuery);  	header.AppendFormat ("Host: {0}\r\n"' url.Host);  	header.AppendFormat ("Range: bytes={0}-{1}\r\n"' from' from + size);  	header.Append ("\r\n");  	var sendbuf = Encoding.ASCII.GetBytes (header.ToString ());  	stream.Write (sendbuf' 0' sendbuf.Length);  	// send request  	var resbuf = new byte[8000];  	var pos = 0;  	int readval;  	var headerOk = false;  	while ((readval = stream.ReadByte ()) != -1) {  		resbuf [pos] = (byte)readval;  		if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  			if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  				headerOk = true;  			break;  		}  		pos++;  	}  	if (!headerOk) {  		invalid = true;  		return false;  	}  	var buf = new byte[size];  	buffer = buf;  	stream.ReadExactly (buf' 0' buf.Length' ref done);  	return true;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: while ((readval = stream.ReadByte ()) != -1) {  	resbuf [pos] = (byte)readval;  	if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  		if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  			headerOk = true;  		break;  	}  	pos++;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: while ((readval = stream.ReadByte ()) != -1) {  	resbuf [pos] = (byte)readval;  	if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  		if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  			headerOk = true;  		break;  	}  	pos++;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: while ((readval = stream.ReadByte ()) != -1) {  	resbuf [pos] = (byte)readval;  	if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  		if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  			headerOk = true;  		break;  	}  	pos++;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  	if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  		headerOk = true;  	break;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  	if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  		headerOk = true;  	break;  }  
Magic Number,PlasmaDownloader,PieceGet,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\WebMultiDownload.cs,Download,The following statement contains a magic number: if (pos > 8 && resbuf [pos] == '\n' && resbuf [pos - 1] == '\r' && resbuf [pos - 2] == '\n' && resbuf [pos - 3] == '\r') {  	if (Encoding.ASCII.GetString (resbuf' 0' pos + 1).Contains ("Content-Range"))  		headerOk = true;  	break;  }  
Magic Number,PlasmaDownloader.Packages,BitArray,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\BitArray.cs,PushBit,The following statement contains a magic number: if (value) {  	var bytePos = position / 8;  	buffer [bytePos] |= (byte)(1 << (position % 8));  }  
Magic Number,PlasmaDownloader.Packages,BitArray,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\BitArray.cs,PushBit,The following statement contains a magic number: if (value) {  	var bytePos = position / 8;  	buffer [bytePos] |= (byte)(1 << (position % 8));  }  
Magic Number,PlasmaDownloader.Packages,BitArray,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\BitArray.cs,PushBit,The following statement contains a magic number: buffer [bytePos] |= (byte)(1 << (position % 8));  
Magic Number,PlasmaDownloader.Packages,BitArray,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\BitArray.cs,Reset,The following statement contains a magic number: SizeInBytes = (int)Math.Ceiling (sizeInBits / 8.0);  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: try {  	doneAll = 0;  	var hashesToDownload = new List<Hash> ();  	var bitArray = new BitArray (fileList.Files.Count);  	for (var i = 0; i < fileList.Files.Count; i++) {  		if (!pool.Exists (fileList.Files [i].Hash)) {  			bitArray.PushBit (true);  			hashesToDownload.Add (fileList.Files [i].Hash);  		} else  			bitArray.PushBit (false);  	}  	var wr = WebRequest.Create (string.Format ("{0}/streamer.cgi?{1}"' urlRoot' packageHash));  	wr.Method = "POST";  	wr.Proxy = null;  	var zippedArray = bitArray.GetByteArray ().Compress ();  	using (var requestStream = wr.GetRequestStream ()) {  		requestStream.Write (zippedArray' 0' zippedArray.Length);  		requestStream.Close ();  		using (var response = wr.GetResponse ()) {  			Length = (int)(response.ContentLength + fileListWebGet.Length);  			var responseStream = response.GetResponseStream ();  			var numberBuffer = new byte[4];  			var cnt = 0;  			while (responseStream.ReadExactly (numberBuffer' 0' 4)) {  				if (IsAborted)  					break;  				var sizeLength = (int)SdpArchive.ParseUint32 (numberBuffer);  				var buf = new byte[sizeLength];  				if (!responseStream.ReadExactly (buf' 0' sizeLength' ref doneAll)) {  					Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  					return false;  				}  				pool.PutToStorage (buf' hashesToDownload [cnt]);  				cnt++;  			}  			if (cnt != hashesToDownload.Count) {  				Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  				return false;  			}  			Trace.TraceInformation ("{0} download complete - {1}"' Name' Utils.PrintByteLength (Length));  		}  	}  	return true;  } catch (Exception ex) {  	Trace.TraceError ("Error downloading {0}: {1}"' Name' ex);  	return false;  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: try {  	doneAll = 0;  	var hashesToDownload = new List<Hash> ();  	var bitArray = new BitArray (fileList.Files.Count);  	for (var i = 0; i < fileList.Files.Count; i++) {  		if (!pool.Exists (fileList.Files [i].Hash)) {  			bitArray.PushBit (true);  			hashesToDownload.Add (fileList.Files [i].Hash);  		} else  			bitArray.PushBit (false);  	}  	var wr = WebRequest.Create (string.Format ("{0}/streamer.cgi?{1}"' urlRoot' packageHash));  	wr.Method = "POST";  	wr.Proxy = null;  	var zippedArray = bitArray.GetByteArray ().Compress ();  	using (var requestStream = wr.GetRequestStream ()) {  		requestStream.Write (zippedArray' 0' zippedArray.Length);  		requestStream.Close ();  		using (var response = wr.GetResponse ()) {  			Length = (int)(response.ContentLength + fileListWebGet.Length);  			var responseStream = response.GetResponseStream ();  			var numberBuffer = new byte[4];  			var cnt = 0;  			while (responseStream.ReadExactly (numberBuffer' 0' 4)) {  				if (IsAborted)  					break;  				var sizeLength = (int)SdpArchive.ParseUint32 (numberBuffer);  				var buf = new byte[sizeLength];  				if (!responseStream.ReadExactly (buf' 0' sizeLength' ref doneAll)) {  					Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  					return false;  				}  				pool.PutToStorage (buf' hashesToDownload [cnt]);  				cnt++;  			}  			if (cnt != hashesToDownload.Count) {  				Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  				return false;  			}  			Trace.TraceInformation ("{0} download complete - {1}"' Name' Utils.PrintByteLength (Length));  		}  	}  	return true;  } catch (Exception ex) {  	Trace.TraceError ("Error downloading {0}: {1}"' Name' ex);  	return false;  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: using (var requestStream = wr.GetRequestStream ()) {  	requestStream.Write (zippedArray' 0' zippedArray.Length);  	requestStream.Close ();  	using (var response = wr.GetResponse ()) {  		Length = (int)(response.ContentLength + fileListWebGet.Length);  		var responseStream = response.GetResponseStream ();  		var numberBuffer = new byte[4];  		var cnt = 0;  		while (responseStream.ReadExactly (numberBuffer' 0' 4)) {  			if (IsAborted)  				break;  			var sizeLength = (int)SdpArchive.ParseUint32 (numberBuffer);  			var buf = new byte[sizeLength];  			if (!responseStream.ReadExactly (buf' 0' sizeLength' ref doneAll)) {  				Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  				return false;  			}  			pool.PutToStorage (buf' hashesToDownload [cnt]);  			cnt++;  		}  		if (cnt != hashesToDownload.Count) {  			Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  			return false;  		}  		Trace.TraceInformation ("{0} download complete - {1}"' Name' Utils.PrintByteLength (Length));  	}  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: using (var requestStream = wr.GetRequestStream ()) {  	requestStream.Write (zippedArray' 0' zippedArray.Length);  	requestStream.Close ();  	using (var response = wr.GetResponse ()) {  		Length = (int)(response.ContentLength + fileListWebGet.Length);  		var responseStream = response.GetResponseStream ();  		var numberBuffer = new byte[4];  		var cnt = 0;  		while (responseStream.ReadExactly (numberBuffer' 0' 4)) {  			if (IsAborted)  				break;  			var sizeLength = (int)SdpArchive.ParseUint32 (numberBuffer);  			var buf = new byte[sizeLength];  			if (!responseStream.ReadExactly (buf' 0' sizeLength' ref doneAll)) {  				Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  				return false;  			}  			pool.PutToStorage (buf' hashesToDownload [cnt]);  			cnt++;  		}  		if (cnt != hashesToDownload.Count) {  			Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  			return false;  		}  		Trace.TraceInformation ("{0} download complete - {1}"' Name' Utils.PrintByteLength (Length));  	}  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: using (var response = wr.GetResponse ()) {  	Length = (int)(response.ContentLength + fileListWebGet.Length);  	var responseStream = response.GetResponseStream ();  	var numberBuffer = new byte[4];  	var cnt = 0;  	while (responseStream.ReadExactly (numberBuffer' 0' 4)) {  		if (IsAborted)  			break;  		var sizeLength = (int)SdpArchive.ParseUint32 (numberBuffer);  		var buf = new byte[sizeLength];  		if (!responseStream.ReadExactly (buf' 0' sizeLength' ref doneAll)) {  			Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  			return false;  		}  		pool.PutToStorage (buf' hashesToDownload [cnt]);  		cnt++;  	}  	if (cnt != hashesToDownload.Count) {  		Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  		return false;  	}  	Trace.TraceInformation ("{0} download complete - {1}"' Name' Utils.PrintByteLength (Length));  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: using (var response = wr.GetResponse ()) {  	Length = (int)(response.ContentLength + fileListWebGet.Length);  	var responseStream = response.GetResponseStream ();  	var numberBuffer = new byte[4];  	var cnt = 0;  	while (responseStream.ReadExactly (numberBuffer' 0' 4)) {  		if (IsAborted)  			break;  		var sizeLength = (int)SdpArchive.ParseUint32 (numberBuffer);  		var buf = new byte[sizeLength];  		if (!responseStream.ReadExactly (buf' 0' sizeLength' ref doneAll)) {  			Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  			return false;  		}  		pool.PutToStorage (buf' hashesToDownload [cnt]);  		cnt++;  	}  	if (cnt != hashesToDownload.Count) {  		Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  		return false;  	}  	Trace.TraceInformation ("{0} download complete - {1}"' Name' Utils.PrintByteLength (Length));  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,LoadFiles,The following statement contains a magic number: while (responseStream.ReadExactly (numberBuffer' 0' 4)) {  	if (IsAborted)  		break;  	var sizeLength = (int)SdpArchive.ParseUint32 (numberBuffer);  	var buf = new byte[sizeLength];  	if (!responseStream.ReadExactly (buf' 0' sizeLength' ref doneAll)) {  		Trace.TraceError ("{0} download failed - unexpected endo fo stream"' Name);  		return false;  	}  	pool.PutToStorage (buf' hashesToDownload [cnt]);  	cnt++;  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,MasterDownloadThread,The following statement contains a magic number: try {  	this.paths = downloader.SpringPaths;  	downloader.PackageDownloader.LoadMasterAndVersions ().Wait ();  	var entry = downloader.PackageDownloader.FindEntry (Name);  	if (entry == null) {  		Finish (false);  		return;  	}  	this.urlRoot = entry.Item1.BaseUrl;  	this.packageHash = entry.Item2.Hash;  	if (File.Exists (Path.Combine (paths.WritableDirectory' "packages"' packageHash + ".sdp")))// SDP exists' abort  	 {  		Finish (true);  		return;  	}  	AddDependencies (entry);  	this.pool = new Pool (paths);  	var fileList = GetFileList ();  	var ok = LoadFiles (fileList);  	var i = 0;  	while (!IsAborted && !ok && i++ < 3)  		ok = LoadFiles (fileList);  	if (ok) {  		var folder = Utils.MakePath (paths.WritableDirectory' "packages");  		if (!Directory.Exists (folder))  			Directory.CreateDirectory (folder);  		var target = Utils.MakePath (folder' packageHash + ".sdp");  		if (File.Exists (target))  			File.Delete (target);  		File.Move (tempFilelist' target);  		Finish (true);  	} else  		Finish (false);  } catch (Exception ex) {  	Abort ();  	Trace.TraceError ("Error downloading {0} {1}"' Name' ex);  	Finish (false);  }  
Magic Number,PlasmaDownloader.Packages,PackageDownload,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownload.cs,MasterDownloadThread,The following statement contains a magic number: while (!IsAborted && !ok && i++ < 3)  	ok = LoadFiles (fileList);  
Magic Number,PlasmaDownloader.Packages,PackageDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseMaster,The following statement contains a magic number: lock (repositories) {  	var toDel = new List<Repository> (repositories);  	foreach (var line in newContent.Split ('\n')) {  		var args = line.Split (''');  		if (args.Length < 2)  			continue;  		var baseUrl = args [1];  		var repo = repositories.SingleOrDefault (x => x.BaseUrl == baseUrl);  		if (repo != null)  			toDel.Remove (repo);  		else {  			repo = new Repository (baseUrl);  			repositories.Add (repo);  		}  	}  	if (toDel.Count > 0)  		foreach (var del in toDel)  			repositories.Remove (del);  }  
Magic Number,PlasmaDownloader.Packages,PackageDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseMaster,The following statement contains a magic number: foreach (var line in newContent.Split ('\n')) {  	var args = line.Split (''');  	if (args.Length < 2)  		continue;  	var baseUrl = args [1];  	var repo = repositories.SingleOrDefault (x => x.BaseUrl == baseUrl);  	if (repo != null)  		toDel.Remove (repo);  	else {  		repo = new Repository (baseUrl);  		repositories.Add (repo);  	}  }  
Magic Number,PlasmaDownloader.Packages,PackageDownloader,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\Shared\PlasmaDownloader\Packages\PackageDownloader.cs,ParseMaster,The following statement contains a magic number: if (args.Length < 2)  	continue;  
