Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The method has 82 lines of code.
Long Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The method has 102 lines of code.
Long Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The method has 109 lines of code.
Long Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The method has 89 lines of code.
Long Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The method has 112 lines of code.
Long Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The method has 62 lines of code.
Long Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadWithMetadata,The method has 67 lines of code.
Long Method,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The method has 89 lines of code.
Complex Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,Cyclomatic complexity of the method is 16
Complex Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,Cyclomatic complexity of the method is 9
Complex Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadMediawikiMessages,Cyclomatic complexity of the method is 11
Complex Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,Cyclomatic complexity of the method is 16
Complex Method,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetApiQueryResult,Cyclomatic complexity of the method is 18
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadWithMetadata,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,Cyclomatic complexity of the method is 21
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,Cyclomatic complexity of the method is 13
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,Cyclomatic complexity of the method is 12
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,Cyclomatic complexity of the method is 14
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplateParameter,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,Cyclomatic complexity of the method is 15
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RenameTo,Cyclomatic complexity of the method is 13
Complex Method,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Delete,Cyclomatic complexity of the method is 11
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,Cyclomatic complexity of the method is 9
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomSpecialPage,Cyclomatic complexity of the method is 12
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomLog,Cyclomatic complexity of the method is 10
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,Cyclomatic complexity of the method is 18
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageLinks,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromGoogleSearchResults,Cyclomatic complexity of the method is 7
Complex Method,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadWithMetadata,Cyclomatic complexity of the method is 14
Complex Method,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,Cyclomatic complexity of the method is 16
Complex Method,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadLocalizedMessages,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetSubstring,Cyclomatic complexity of the method is 10
Complex Method,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,Cyclomatic complexity of the method is 14
Long Parameter List,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The method has 5 parameters.
Long Parameter List,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The method has 5 parameters.
Long Parameter List,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImageFromWeb,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,The method has 5 parameters.
Long Parameter List,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RenameTo,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The method has 5 parameters.
Long Parameter List,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomLog,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromRecentChanges,The method has 8 parameters.
Long Parameter List,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The method has 5 parameters.
Long Parameter List,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetSubstring,The method has 6 parameters.
Long Parameter List,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The method has 4 parameters.
Long Parameter List,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Validator,The method has 4 parameters.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The length of the statement  "	regexes ["editToken"] = new Regex ("(?i)value=\"([^\"]+)\"[^>]+name=\"wpEditToken\"" + "|name=\"wpEditToken\"[^>]+value=\"([^\"]+)\""); " is 135.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The length of the statement  "	regexes ["editTime"] = new Regex ("(?i)value=\"([^\"]+)\"[^>]+name=\"wpEdittime\"" + "|name=\"wpEdittime\"[^>]+value=\"([^\"]+)\""); " is 132.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The length of the statement  "	regexes ["startTime"] = new Regex ("(?i)value=\"([^\"]+)\"[^>]+name=\"wpStarttime\"" + "|name=\"wpStarttime\"[^>]+value=\"([^\"]+)\""); " is 135.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The length of the statement  "	regexes ["baseRevId"] = new Regex ("(?i)value=\"([^\"]+)\"[^>]+name=\"baseRevId\"" + "|name=\"baseRevId\"[^>]+value=\"([^\"]+)\""); " is 131.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The length of the statement  "	string cacheFile = Bot.cacheDir + Path.DirectorySeparatorChar + Bot.UrlEncode (address.Replace ("://"' ".").Replace ("/"' ".")) + ".xml"; " is 137.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The length of the statement  "	string tokensXmlSrc = GetWebPage (apiPath + "?action=query&format=xml&meta=tokens" + "&type=csrf|deleteglobalaccount|patrol|rollback|setglobalaccountstatus" + "|userrights|watch&curtimestamp"); " is 193.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The length of the statement  "	string src = GetWebPage (apiPath + "?action=query&format=xml" + "&meta=siteinfo&siprop=general|namespaces|namespacealiases|magicwords|" + "interwikimap|fileextensions|variables"); " is 179.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The length of the statement  "		name = ('|' + (el.IsEmpty ? "" : el.Value) + '|' + (!el.IsEmpty && el.Value != el.Attribute ("canonical").Value ? el.Attribute ("canonical").Value + '|' : "")).ToString () " is 171.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The length of the statement  "			Console.WriteLine (Bot.nl + Bot.nl + Bot.Msg ("WARNING: This MediaWiki " + "version is outdated' some bot functions may not work properly. Please " + "consider downgrading to DotNetWikiBot {0} to work with " + "this site.") + Bot.nl + Bot.nl' "2.x"); " is 250.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The length of the statement  "	DateTime wikiServerTime = DateTime.ParseExact (generalData ["time"]' "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"' CultureInfo.InvariantCulture); " is 135.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The length of the statement  "	regexes ["magicWordsAndVars"] = new Regex (@"^(?:" + generalData ["magicWords"].ToLower () + '|' + generalData ["variables"] + ')'); " is 132.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The length of the statement  "	string allNsPrefixes = string.Join ("|"' namespaces.Select (x => x.Value.Substring (1' x.Value.Length - 2)).ToArray ()); " is 120.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The length of the statement  "	regexes ["linkToImage2"] = new Regex ("<a href=\"[^\"]*?\" title=\"(" + Regex.Escape (GetNsPrefix (6)) + "[^\"]+?)\">"); " is 120.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadMediawikiMessages,The length of the statement  "			src = GetWebPage (res + (!string.IsNullOrEmpty (src) ? "&offset=" + HttpUtility.HtmlDecode (nextPortionRegex.Match (src).Groups [1].Value) : "")); " is 146.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The length of the statement  "		string postData = string.Format ("wpName={0}&wpPassword={1}&wpDomain={2}" + "&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain)' Bot.UrlEncode (loginToken)); " is 240.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The length of the statement  "		string respStr = PostDataAndGetResult (indexPath + "?title=Special:Userlogin&action=submitlogin&type=login"' postData' true' false); " is 132.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The length of the statement  "		string postData = string.Format ("lgname={0}&lgpassword={1}&lgdomain={2}"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain)); " is 155.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The length of the statement  "		string tokenXmlSrc = PostDataAndGetResult (apiPath + "?action=query&meta=tokens&type=login&format=xml"' ""' true' false); " is 121.
Long Statement,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetApiQueryResult,The length of the statement  "	string queryUri = apiPath + "?format=xml&action=query&" + query + '&' + prefix + "limit=" + (limit > fetchRate ? fetchRate : limit).ToString (); " is 144.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadTextOnly,The length of the statement  "	string res = site.indexPath + "?title=" + Bot.UrlEncode (title) + (string.IsNullOrEmpty (revision) ? "" : "&oldid=" + revision) + "&redirect=no&action=raw&ctype=text/plain&dontcountme=s"; " is 187.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadWithMetadata,The length of the statement  "		string res = site.apiPath + "?action=query&prop=revisions&format=xml" + "&rvprop=content|user|userid|comment|ids|flags|timestamp"; " is 130.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetSecurityTokens,The length of the statement  "	string src = site.GetWebPage (site.apiPath + "?action=query&prop=info&intoken=" + action + "&inprop=protection|watched|watchers|notificationtimestamp|readable" + "&format=xml&titles=" + Bot.UrlEncode (title)); " is 209.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "	if (text != null && Regex.IsMatch (text' @"(?is)\{\{(nobots|bots\|(allow=none|" + @"deny=(?!none)[^\}]*(" + site.userName + @"|all)|optout=all))\}\}")) " is 151.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "		throw new BotDisallowedException (string.Format (Bot.Msg ("Bot action on \"{0}\" page is prohibited " + "by \"nobots\" or \"bots|allow=none\" template.")' title)); " is 163.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "		string postData = string.Format ("action=edit&title={0}&summary={1}&text={2}" + "&watchlist={3}{4}{5}{6}&bot=1&format=xml&token={7}"' Bot.UrlEncode (title)' Bot.UrlEncode (comment)' Bot.UrlEncode (newText)' "nochange"' isMinorEdit ? "&minor=1" : "&notminor=1"' timestamp != DateTime.MinValue ? "&basetimestamp=" + timestamp.ToString ("s") + "Z" : ""' lastLoadTime != DateTime.MinValue ? "&starttimestamp=" + lastLoadTime.AddSeconds (site.timeOffsetSeconds).ToString ("s") + "Z" : ""' Bot.UrlEncode (editToken)); " is 511.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "				throw new EditConflictException (string.Format (Bot.Msg ("Edit conflict occurred while trying to savе page \"{0}\".")' title)); " is 127.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "			throw new BotDisallowedException (string.Format (Bot.Msg ("Error occurred when saving page \"{0}\": " + "Bot operation is not allowed for this account at \"{1}\" site.")' title' site.address)); " is 193.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "		string postData = string.Format ("wpSection=&wpStarttime={0}&wpEdittime={1}{2}&wpScrolltop=&wpTextbox1={3}" + "&wpSummary={4}&wpSave=Save%20Page&wpEditToken={5}{6}{7}{8}"' editStartTime' lastEditTime' string.IsNullOrEmpty (lastEditRevId) ? "&baseRevId=" + lastEditRevId : ""' Bot.UrlEncode (newText)' Bot.UrlEncode (comment)' Bot.UrlEncode (editToken)' watched ? "&wpWatchthis=1" : ""' isMinorEdit ? "&wpMinoredit=1" : ""' reviewVersion ? "&wpReviewEdit=1" : ""); " is 463.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "		string respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=submit"' postData); " is 125.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "			throw new EditConflictException (string.Format (Bot.Msg ("Edit conflict occurred while trying to savе page \"{0}\".")' title)); " is 127.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The length of the statement  "			throw new BotDisallowedException (string.Format (Bot.Msg ("Error occurred when saving page \"{0}\": " + "Bot operation is not allowed for this account at \"{1}\" site.")' title' site.address)); " is 193.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The length of the statement  "		string postData = string.Format ("token={0}&protections=edit={1}|move={2}" + "&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"' Bot.UrlEncode (token)' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' (cascadeMode == true ? "1" : "")' (expiryDate == DateTime.MinValue ? "" : date)' (expiryDate == DateTime.MinValue ? "" : date)' Bot.UrlEncode (reason)); " is 449.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The length of the statement  "		string respStr = site.PostDataAndGetResult (site.apiPath + "?action=protect" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData); " is 140.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The length of the statement  "		string postData = string.Format ("mwProtect-level-edit={0}&mwProtect-level-move={1}" + "&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken)' expiryDate == DateTime.MinValue ? "" : expiryDate.ToString ("u")' // ToString("u") is like "2010-06-15 20:45:30Z" " is 459.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The length of the statement  "			securityToken = XElement.Parse (respStr).Element ("query").Element ("tokens").Attribute ("watchtoken").Value.ToString (); " is 121.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The length of the statement  "			securityToken = XElement.Parse (respStr).Element ("query").Element ("pages").Element ("page").Attribute ("watchtoken").Value.ToString (); " is 137.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The length of the statement  "		string postData = string.Format ("titles={0}{1}&action=watch&token={2}&format=xml"' Bot.UrlEncode (title)' titleFallback' Bot.UrlEncode (securityToken)); " is 153.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The length of the statement  "		string postData = string.Format ("title={0}&action=watch&wpEditToken={1}"' Bot.UrlEncode (title)' Bot.UrlEncode (securityToken)); " is 129.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The length of the statement  "			securityToken = XElement.Parse (respStr).Element ("query").Element ("tokens").Attribute ("watchtoken").Value.ToString (); " is 121.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The length of the statement  "			securityToken = XElement.Parse (respStr).Element ("query").Element ("pages").Element ("page").Attribute ("watchtoken").Value.ToString (); " is 137.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The length of the statement  "		string postData = string.Format ("titles={0}{1}&token={2}" + "&format=xml&action=watch&unwatch=1"' Bot.UrlEncode (title)' titleFallback' Bot.UrlEncode (securityToken)); " is 168.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The length of the statement  "		string postData = string.Format ("title={0}&action=unwatch&wpEditToken={1}"' Bot.UrlEncode (title)' Bot.UrlEncode (securityToken)); " is 131.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ReviseInMsWord,The length of the statement  "	throw new WikiBotException (Bot.Msg ("Page.ReviseInMSWord() function requires MS " + "Office PIAs to be installed and referenced. Please see remarks in function's " + "documentation in \"Documentation.chm\" file for additional instructions.\n")); " is 246.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The length of the statement  "		throw new ArgumentNullException ("filePathName"' string.Format (Bot.Msg ("Image file \"{0}\" doesn't exist.")' filePathName)); " is 126.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The length of the statement  "		throw new WikiBotException (string.Format (Bot.Msg ("Name of file \"{0}\" must " + "contain at least 3 characters (excluding extension) for successful upload.")' filePathName)); " is 177.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The length of the statement  "		sb.Append (paramHead + "wpUploadFile\"; filename=\"" + Bot.UrlEncode (Path.GetFileName (filePathName)) + "\"\r\n" + "Content-Type: application/octet-stream\r\n\r\n"); " is 166.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImageFromWeb,The length of the statement  "	UploadImage (Bot.cacheDir + Path.DirectorySeparatorChar + imageFileName' description' license' copyStatus' imageFileUrl); " is 121.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The length of the statement  "		throw new ArgumentNullException ("site.disambigStr"' Bot.Msg ("You need to " + "manually set site.disambigStr variable before calling this function." + "Please' refer to documentation for details.")); " is 200.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The length of the statement  "		string src = site.GetWebPage (site.apiPath + "?format=xml&action=query" + "&list=langbacklinks&lbllang=en&lbltitle=Template%3ADisambiguation"); " is 143.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The length of the statement  "			throw new ArgumentNullException ("site.disambigStr"' Bot.Msg ("You need to " + "manually set site.disambigStr variable before calling this function." + "Please' refer to documentation for details.")); " is 200.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The length of the statement  "	string src2 = site.GetWebPage (site.apiPath + "?format=xml&action=query" + "&list=backlinks&bllimit=500&blfilterredir=redirects&bltitle=" + Bot.UrlEncode (disambigTemplate)); " is 174.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The length of the statement  "		str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category " is 149.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetInterLanguageLinks,The length of the statement  "	string src = site.GetWebPage (site.apiPath + "?format=xml&action=query&prop=langlinks&lllimit=500&titles=" + Bot.UrlEncode (title)); " is 132.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetSisterwikiLinks,The length of the statement  "	string src = site.GetWebPage (site.apiPath + "?action=query&prop=iwlinks&format=xml&iwlimit=5000&titles=" + Bot.UrlEncode (title)); " is 131.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWikidataItem,The length of the statement  "	Console.WriteLine (string.Format (Bot.Msg ("Wikidata item {0} associated with page \"{1}\" was loaded successfully.")' item' title)); " is 133.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The length of the statement  "	MatchCollection matches = site.regexes ["wikiCategory"].Matches (Regex.Replace (text' "(?is)<nowiki>.+?</nowiki>"' "")); " is 120.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetAllCategories,The length of the statement  "		uri = site.apiPath + "?action=query&prop=categories" + "&clprop=sortkey|hidden&cllimit=5000&format=xml&titles=" + Bot.UrlEncode (title); " is 136.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddToCategory,The length of the statement  "	string cleanCategoryName = !categoryName.Contains ("|") ? categoryName.Trim () : categoryName.Substring (0' categoryName.IndexOf ('|')).Trim (); " is 144.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveFromCategory,The length of the statement  "	regexCategoryName = "[" + char.ToLower (regexCategoryName [firstCharIndex]) + char.ToUpper (regexCategoryName [firstCharIndex]) + "]" + regexCategoryName.Substring (firstCharIndex + 1); " is 185.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveFromCategory,The length of the statement  "	text = Regex.Replace (text' @"\[\[((?i)" + site.GetNsPrefixes (14) + "): ?" + regexCategoryName + @"(\|.*?)?]]\r?\n?"' ""); " is 123.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The length of the statement  "			if (str [0] == ':' || site.regexes ["allNsPrefixes"].IsMatch (str) || str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:")) " is 125.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveTemplate,The length of the statement  "	templateTitle = "(" + Char.ToUpper (templateTitle [0]) + "|" + Char.ToLower (templateTitle [0]) + ")" + (templateTitle.Length > 1 ? templateTitle.Substring (1) : ""); " is 166.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplateParameter,The length of the statement  "	Regex templateTitleRegex = new Regex ("^\\s*(" + Bot.Capitalize (Regex.Escape (templateTitle)) + "|" + Bot.Uncapitalize (Regex.Escape (templateTitle)) + ")\\s*\\|"); " is 165.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The length of the statement  "	Regex templateTitleRegex = new Regex ("^\\s*(" + Bot.Capitalize (Regex.Escape (templateTitle)) + "|" + Bot.Uncapitalize (Regex.Escape (templateTitle)) + ")\\s*\\|"); " is 165.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RenameTo,The length of the statement  "		string postData = string.Format ("from={0}&to={1}&reason={2}{3}{4}&token={5}"' Bot.UrlEncode (title)' Bot.UrlEncode (newTitle)' Bot.UrlEncode (reason)' renameTalkPage ? "&movetalk=1" : ""' renameSubPages ? "&movesubpages=1" : ""' Bot.UrlEncode (token)); " is 253.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RenameTo,The length of the statement  "		string postData = string.Format ("wpNewTitle={0}&wpOldTitle={1}&wpEditToken={2}" + "&wpReason={3}{4}{5}{6}"' Bot.UrlEncode (newTitle)' Bot.UrlEncode (title)' Bot.UrlEncode (securityToken)' Bot.UrlEncode (reason)' renameTalkPage ? "&wpMovetalk=1" : ""' renameSubPages ? "&wpMovesubpages=1" : ""' watched ? "&wpWatch=1" : ""); " is 324.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Delete,The length of the statement  "		string respStr = site.PostDataAndGetResult (site.apiPath + "?action=delete" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData); " is 139.
Long Statement,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Delete,The length of the statement  "		string postData = string.Format ("wpReason={0}&wpEditToken={1}"' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken)); " is 120.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The length of the statement  "		FillFromCustomApiQuery ("list=allpages"' "apnamespace=" + neededNSpace + (acceptRedirects ? "" : "&apfilterredir=nonredirects") + (string.IsNullOrEmpty (firstPageTitle) ? "" : "&apfrom=" + Bot.UrlEncode (firstPageTitle)) + (string.IsNullOrEmpty (lastPageTitle) ? "" : "&apto=" + Bot.UrlEncode (lastPageTitle))' limit); " is 318.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The length of the statement  "			linkToPageRegex = new Regex ("<td[^>]*>(?:<div class=\"allpagesredirect\">)?" + "<a href=\"[^\"]*?\" (?:class=\"mw-redirect\" )?title=\"([^\"]*?)\">"); " is 151.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The length of the statement  "			string res = site.indexPath + "?title=Special:Allpages" + "&from=" + Bot.UrlEncode (string.IsNullOrEmpty (firstPageTitle) ? "!" : firstPageTitle) + Bot.UrlEncode (string.IsNullOrEmpty (lastPageTitle) ? "" : ("&to=" + lastPageTitle)) + "&namespace=" + neededNSpace.ToString (); " is 276.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The length of the statement  "		Console.WriteLine (Bot.Msg ("PageList has been filled with {0} page titles from " + "\"Special:Allpages\" MediaWiki page.")' (pages.Count - count).ToString ()); " is 160.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomSpecialPage,The length of the statement  "		if (pageTitle == "Unusedimages" || pageTitle == "Uncategorizedimages" || pageTitle == "UnusedFiles" || pageTitle == "UncategorizedFiles") " is 137.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomSpecialPage,The length of the statement  "	Console.WriteLine (Bot.Msg ("PageList has been filled with {0} page titles from " + "\"Special:{1}\" page.")' this.Count () - preexistingPages' pageTitle); " is 155.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomLog,The length of the statement  "		string res = site.indexPath + "?title=Special:Log&type=" + logType + "&user=" + Bot.UrlEncode (userName) + "&page=" + Bot.UrlEncode (pageTitle) + "&limit=" + limit.ToString (); " is 176.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomLog,The length of the statement  "	Console.WriteLine (Bot.Msg ("PageList has been filled with {0} page titles from \"{1}\" log.")' this.Count () - preexistingPages' logType); " is 139.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomApiQuery,The length of the statement  "	if (!string.IsNullOrEmpty (Environment.StackTrace) && !Environment.StackTrace.Contains ("FillFrom") && !Environment.StackTrace.Contains ("FillAllFrom")) " is 152.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomApiQuery,The length of the statement  "		Console.WriteLine (string.Format (Bot.Msg ("PageList has been filled with {0} page " + "titles from \"{1}\" bot interface list.")' titles.Count' query)); " is 153.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromRecentChanges,The length of the statement  "	string uri = string.Format ("{0}?title=Special:Recentchanges" + "&hideminor={1}&hidebots={2}&hideanons={3}&hideliu={4}&hidemyself={5}" + "&hideReviewed={6}&limit={7}&days={8}"' site.indexPath' hideMinor ? "1" : "0"' hideBots ? "1" : "0"' hideAnons ? "1" : "0"' hideLogged ? "1" : "0"' hideSelf ? "1" : "0"' hideReviewed ? "1" : "0"' limit.ToString ()' days.ToString ()); " is 370.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromRecentChanges,The length of the statement  "	Console.WriteLine (Bot.Msg ("PageList has been filled with {0} page titles from " + "\"Special:Recentchanges\" page.")' matches.Count); " is 135.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCategory,The length of the statement  "		Console.WriteLine (Bot.Msg ("PageList has been filled with {0} page titles found in \"{1}\"" + " category.")' (pages.Count - count).ToString ()' categoryName); " is 159.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The length of the statement  "			string res = site.indexPath + "?title=" + Bot.UrlEncode (categoryName) + "&from=" + nextPortionRegex.Match (src).Groups [1].Value; " is 130.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The length of the statement  "			Regex linkRegex = new Regex (" href=\"(?:" + (!string.IsNullOrEmpty (site.shortPath) ? Regex.Escape (site.shortPath) + "|" : "") + Regex.Escape (relativeIndexPath) + "\\?title=)" + "(?<title>[^\"]+)"); " is 201.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCategoryTree,The length of the statement  "		Console.WriteLine (Bot.Msg ("PageList has been filled with {0} page titles found in \"{1}\"" + " category.")' Count ().ToString ()' categoryName); " is 146.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The length of the statement  "		string queryUri = site.apiPath + "?action=query&prop=revisions&titles=" + Bot.UrlEncode (pageTitle) + "&rvprop=ids|user|comment|timestamp" + "&format=xml&rvlimit=" + limit.ToString (); " is 184.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The length of the statement  "		string res = site.indexPath + "?title=" + Bot.UrlEncode (pageTitle) + "&limit=" + limit.ToString () + "&action=history"; " is 120.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The length of the statement  "	Console.WriteLine (Bot.Msg ("PageList has been filled with {0} last revisons of \"{1}\" page...")' pages.Count' pageTitle); " is 123.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromTransclusionsOfPage,The length of the statement  "		string res = site.indexPath + "?title=Special:Whatlinkshere/" + Bot.UrlEncode (pageTitle) + "&limit=5000&hidelinks=1&hideredirs=1"; " is 131.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromTransclusionsOfPage,The length of the statement  "		Console.WriteLine (Bot.Msg ("PageList has been filled with titles of pages' which" + " transclude \"{0}\" page.")' pageTitle); " is 126.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The length of the statement  "		FillFromCustomApiQuery ("list=imageusage"' "iutitle=" + Bot.UrlEncode (site.GetNsPrefix (6)) + Bot.UrlEncode (imageFileTitle)' int.MaxValue); " is 141.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The length of the statement  "		Console.WriteLine (Bot.Msg ("PageList has been filled with titles of pages containing \"{0}\"" + " image.")' imageFileTitle); " is 125.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromUserContributions,The length of the statement  "	string res = site.indexPath + "?title=Special:Contributions&target=" + Bot.UrlEncode (userName) + "&limit=" + limit.ToString (); " is 128.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromSearchResults,The length of the statement  "		string res = site.indexPath + "?title=Special:Search&fulltext=Search&search=" + Bot.UrlEncode (searchStr) + "&limit=" + limit.ToString (); " is 138.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromGoogleSearchResults,The length of the statement  "	Uri res = new Uri ("http://www.google.com/search?q=" + Bot.UrlEncode (searchStr) + "+site:" + site.address.Substring (site.address.IndexOf ("://") + 3) + "&num=" + limit.ToString ()); " is 183.
Long Statement,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromGoogleSearchResults,The length of the statement  "	string googleLinkToPagePattern = "<h3[^>]*><a href=\"(?<double_escape>/url\\?q=)?" + Regex.Escape (site.address).Replace ("https:"' "https?:") + "(?:" + (!string.IsNullOrEmpty (site.shortPath) ? Regex.Escape (site.shortPath) + "|" : "") + Regex.Escape (relativeIndexPath) + "\\?title=)?" + "(?<title>[^&\"]+)"; " is 310.
Long Statement,DotNetWikiBot,XmlUrlResolverWithCache,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetEntity,The length of the statement  "		return new FileStream (XmlUrlResolverWithCache.cacheDir + "xhtml1-transitional.dtd"' FileMode.Open' FileAccess.Read' FileShare.Read); " is 133.
Long Statement,DotNetWikiBot,XmlUrlResolverWithCache,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetEntity,The length of the statement  "		return new FileStream (XmlUrlResolverWithCache.cacheDir + "xhtml-lat1.ent"' FileMode.Open' FileAccess.Read' FileShare.Read); " is 124.
Long Statement,DotNetWikiBot,XmlUrlResolverWithCache,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetEntity,The length of the statement  "		return new FileStream (XmlUrlResolverWithCache.cacheDir + "xhtml-symbol.ent"' FileMode.Open' FileAccess.Read' FileShare.Read); " is 126.
Long Statement,DotNetWikiBot,XmlUrlResolverWithCache,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetEntity,The length of the statement  "		return new FileStream (XmlUrlResolverWithCache.cacheDir + "xhtml-special.ent"' FileMode.Open' FileAccess.Read' FileShare.Read); " is 127.
Long Statement,DotNetWikiBot,XmlUrlResolverWithCache,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetEntity,The length of the statement  "			return new FileStream (XmlUrlResolverWithCache.cacheDir + XmlUrlResolverWithCache.cachedFiles [i]' FileMode.Open' FileAccess.Read' FileShare.Read); " is 147.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadLocalizedMessages,The length of the statement  "			Console.Error.WriteLine ("\nLocalized messages not found for language \"{0}\"." + "\nYou can help DotNetWikiBot project by translating the messages in\n" + "\"DotNetWikiBot.i18n.xml\" file and sending it to developers for " + "distribution.\n"' language); " is 255.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The length of the statement  "	while (cursor < text.Length && (text [cursor] == ' ' || text [cursor] == '\n' || text [cursor] == '\r' || text [cursor] == '\t')) " is 129.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The length of the statement  "		while (cursor < text.Length && (text [cursor] == ' ' || text [cursor] == '\n' || text [cursor] == '\r' || text [cursor] == '\t')) " is 129.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The length of the statement  "		while (cursor < text.Length && (text [cursor] == ' ' || text [cursor] == '\n' || text [cursor] == '\r' || text [cursor] == '\t')) " is 129.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SwitchUnsafeHttpHeaderParsing,The length of the statement  "	System.Configuration.Configuration config = System.Configuration.ConfigurationManager.OpenExeConfiguration (System.Configuration.ConfigurationUserLevel.None); " is 158.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SwitchUnsafeHttpHeaderParsing,The length of the statement  "	System.Net.Configuration.SettingsSection section = (System.Net.Configuration.SettingsSection)config.GetSection ("system.net/settings"); " is 135.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,DisableCanonicalizingUriAsFilePath,The length of the statement  "	MethodInfo getSyntax = typeof(UriParser).GetMethod ("GetSyntax"' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic); " is 147.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,DisableCanonicalizingUriAsFilePath,The length of the statement  "	FieldInfo flagsField = typeof(UriParser).GetField ("m_Flags"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 146.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveXMLRootAttributes,The length of the statement  "	int startPos = ((xmlSource.StartsWith ("<!") || xmlSource.StartsWith ("<?")) && xmlSource.IndexOf ('>') != -1) ? xmlSource.IndexOf ('>') + 1 : 0; " is 145.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLReader,The length of the statement  "		xmlSource = xmlSource.Replace ("<!DOCTYPE html>"' "<!DOCTYPE html PUBLIC " + "\"-//W3C//DTD XHTML 1.0 Transitional//EN\" " + "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"); " is 189.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLReader,The length of the statement  "		settings.GetType ().InvokeMember ("DtdProcessing"' BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty' null' settings' new Object[] { " is 181.
Long Statement,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLReader,The length of the statement  "		settings.GetType ().InvokeMember ("ProhibitDtd"' BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty' null' settings' new Object[] { " is 179.
Complex Conditional,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadMediawikiMessages,The conditional expression  "modified && reader.Name == "td" && reader.NodeType == XmlNodeType.Element && reader ["class"] == "am_actual""  is complex.
Complex Conditional,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The conditional expression  "code == 500 || code == 502 || code == 503 || code == 504"  is complex.
Complex Conditional,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The conditional expression  "code == 500 || code == 502 || code == 503 || code == 504"  is complex.
Complex Conditional,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The conditional expression  "str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture)"  is complex.
Complex Conditional,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The conditional expression  "str [0] == ':' || site.regexes ["allNsPrefixes"].IsMatch (str) || str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:")"  is complex.
Complex Conditional,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Contains,The conditional expression  "p.title == page.title && (p.revision == null || page.revision == null || p.revision == page.revision)"  is complex.
Complex Conditional,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomSpecialPage,The conditional expression  "pageTitle == "Unusedimages" || pageTitle == "Uncategorizedimages" || pageTitle == "UnusedFiles" || pageTitle == "UncategorizedFiles""  is complex.
Empty Catch Block,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The method has an empty catch block.
Empty Catch Block,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The method has an empty catch block.
Empty Catch Block,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The method has an empty catch block.
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists (defaultsFile) == true) {  	string[] lines = File.ReadAllLines (defaultsFile' Encoding.UTF8);  	foreach (string line in lines) {  		if (line.StartsWith (address + '|')) {  			string[] tokens = line.Split ('|');  			if (tokens.GetUpperBound (0) < 2) {  				throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  			}  			this.address = tokens [0];  			this.userName = tokens [1];  			this.userPass = tokens [2];  			if (tokens.GetUpperBound (0) >= 3)  				this.userDomain = tokens [3];  		}  	}  	if (string.IsNullOrEmpty (userName) || string.IsNullOrEmpty (userPass))  		throw new WikiBotException (string.Format (Bot.Msg ("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")' address));  } else  	throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file not found."));  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists (defaultsFile) == true) {  	string[] lines = File.ReadAllLines (defaultsFile' Encoding.UTF8);  	foreach (string line in lines) {  		if (line.StartsWith (address + '|')) {  			string[] tokens = line.Split ('|');  			if (tokens.GetUpperBound (0) < 2) {  				throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  			}  			this.address = tokens [0];  			this.userName = tokens [1];  			this.userPass = tokens [2];  			if (tokens.GetUpperBound (0) >= 3)  				this.userDomain = tokens [3];  		}  	}  	if (string.IsNullOrEmpty (userName) || string.IsNullOrEmpty (userPass))  		throw new WikiBotException (string.Format (Bot.Msg ("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")' address));  } else  	throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file not found."));  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists (defaultsFile) == true) {  	string[] lines = File.ReadAllLines (defaultsFile' Encoding.UTF8);  	foreach (string line in lines) {  		if (line.StartsWith (address + '|')) {  			string[] tokens = line.Split ('|');  			if (tokens.GetUpperBound (0) < 2) {  				throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  			}  			this.address = tokens [0];  			this.userName = tokens [1];  			this.userPass = tokens [2];  			if (tokens.GetUpperBound (0) >= 3)  				this.userDomain = tokens [3];  		}  	}  	if (string.IsNullOrEmpty (userName) || string.IsNullOrEmpty (userPass))  		throw new WikiBotException (string.Format (Bot.Msg ("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")' address));  } else  	throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file not found."));  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists (defaultsFile) == true) {  	string[] lines = File.ReadAllLines (defaultsFile' Encoding.UTF8);  	foreach (string line in lines) {  		if (line.StartsWith (address + '|')) {  			string[] tokens = line.Split ('|');  			if (tokens.GetUpperBound (0) < 2) {  				throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  			}  			this.address = tokens [0];  			this.userName = tokens [1];  			this.userPass = tokens [2];  			if (tokens.GetUpperBound (0) >= 3)  				this.userDomain = tokens [3];  		}  	}  	if (string.IsNullOrEmpty (userName) || string.IsNullOrEmpty (userPass))  		throw new WikiBotException (string.Format (Bot.Msg ("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")' address));  } else  	throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file not found."));  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: foreach (string line in lines) {  	if (line.StartsWith (address + '|')) {  		string[] tokens = line.Split ('|');  		if (tokens.GetUpperBound (0) < 2) {  			throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  		}  		this.address = tokens [0];  		this.userName = tokens [1];  		this.userPass = tokens [2];  		if (tokens.GetUpperBound (0) >= 3)  			this.userDomain = tokens [3];  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: foreach (string line in lines) {  	if (line.StartsWith (address + '|')) {  		string[] tokens = line.Split ('|');  		if (tokens.GetUpperBound (0) < 2) {  			throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  		}  		this.address = tokens [0];  		this.userName = tokens [1];  		this.userPass = tokens [2];  		if (tokens.GetUpperBound (0) >= 3)  			this.userDomain = tokens [3];  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: foreach (string line in lines) {  	if (line.StartsWith (address + '|')) {  		string[] tokens = line.Split ('|');  		if (tokens.GetUpperBound (0) < 2) {  			throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  		}  		this.address = tokens [0];  		this.userName = tokens [1];  		this.userPass = tokens [2];  		if (tokens.GetUpperBound (0) >= 3)  			this.userDomain = tokens [3];  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: foreach (string line in lines) {  	if (line.StartsWith (address + '|')) {  		string[] tokens = line.Split ('|');  		if (tokens.GetUpperBound (0) < 2) {  			throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  		}  		this.address = tokens [0];  		this.userName = tokens [1];  		this.userPass = tokens [2];  		if (tokens.GetUpperBound (0) >= 3)  			this.userDomain = tokens [3];  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (line.StartsWith (address + '|')) {  	string[] tokens = line.Split ('|');  	if (tokens.GetUpperBound (0) < 2) {  		throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  	}  	this.address = tokens [0];  	this.userName = tokens [1];  	this.userPass = tokens [2];  	if (tokens.GetUpperBound (0) >= 3)  		this.userDomain = tokens [3];  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (line.StartsWith (address + '|')) {  	string[] tokens = line.Split ('|');  	if (tokens.GetUpperBound (0) < 2) {  		throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  	}  	this.address = tokens [0];  	this.userName = tokens [1];  	this.userPass = tokens [2];  	if (tokens.GetUpperBound (0) >= 3)  		this.userDomain = tokens [3];  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (line.StartsWith (address + '|')) {  	string[] tokens = line.Split ('|');  	if (tokens.GetUpperBound (0) < 2) {  		throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  	}  	this.address = tokens [0];  	this.userName = tokens [1];  	this.userPass = tokens [2];  	if (tokens.GetUpperBound (0) >= 3)  		this.userDomain = tokens [3];  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (line.StartsWith (address + '|')) {  	string[] tokens = line.Split ('|');  	if (tokens.GetUpperBound (0) < 2) {  		throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  	}  	this.address = tokens [0];  	this.userName = tokens [1];  	this.userPass = tokens [2];  	if (tokens.GetUpperBound (0) >= 3)  		this.userDomain = tokens [3];  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (tokens.GetUpperBound (0) < 2) {  	throw new WikiBotException (Bot.Msg ("\"\\Cache\\Defaults.dat\" file is invalid."));  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: this.userPass = tokens [2];  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (tokens.GetUpperBound (0) >= 3)  	this.userDomain = tokens [3];  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (tokens.GetUpperBound (0) >= 3)  	this.userDomain = tokens [3];  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: this.userDomain = tokens [3];  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (Bot.CountMatches (address' "/"' false) == 3 && address.EndsWith ("/"))  	address = address.Remove (address.Length - 1);  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists (cacheFile) == true) {  	cache = XElement.Load (cacheFile);  	indexPath = cache.Descendants ("indexPath").FirstOrDefault ().Value;  } else {  	string src = GetWebPage (address + "/mediawiki");  	// FIXME: ZK hax  	Uri addressUri = new Uri (address);  	Regex hrefRegex = new Regex ("(?i) href=\"(([^\"]*)(index|api)\\.php)");  	try {  		foreach (Match m in hrefRegex.Matches (src)) {  			if (m.Groups [1].Value.StartsWith (address)) {  				indexPath = m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  				if (address.StartsWith ("https:"))  					indexPath = "https:" + m.Groups [2].Value + "index.php";  				else  					indexPath = "http:" + m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  				indexPath = address + m.Groups [2].Value + "index.php";  				break;  			} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  				indexPath = address + "/index.php";  				break;  			}  		}  	} catch {  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	}  	if (indexPath == null)  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	if (indexPath.Contains ("api.php"))  		indexPath = indexPath.Replace ("api.php"' "index.php");  	cache = new XElement ("siteInfo"' new XElement ("indexPath"' indexPath));  	cache.Save (cacheFile);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists (cacheFile) == true) {  	cache = XElement.Load (cacheFile);  	indexPath = cache.Descendants ("indexPath").FirstOrDefault ().Value;  } else {  	string src = GetWebPage (address + "/mediawiki");  	// FIXME: ZK hax  	Uri addressUri = new Uri (address);  	Regex hrefRegex = new Regex ("(?i) href=\"(([^\"]*)(index|api)\\.php)");  	try {  		foreach (Match m in hrefRegex.Matches (src)) {  			if (m.Groups [1].Value.StartsWith (address)) {  				indexPath = m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  				if (address.StartsWith ("https:"))  					indexPath = "https:" + m.Groups [2].Value + "index.php";  				else  					indexPath = "http:" + m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  				indexPath = address + m.Groups [2].Value + "index.php";  				break;  			} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  				indexPath = address + "/index.php";  				break;  			}  		}  	} catch {  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	}  	if (indexPath == null)  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	if (indexPath.Contains ("api.php"))  		indexPath = indexPath.Replace ("api.php"' "index.php");  	cache = new XElement ("siteInfo"' new XElement ("indexPath"' indexPath));  	cache.Save (cacheFile);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists (cacheFile) == true) {  	cache = XElement.Load (cacheFile);  	indexPath = cache.Descendants ("indexPath").FirstOrDefault ().Value;  } else {  	string src = GetWebPage (address + "/mediawiki");  	// FIXME: ZK hax  	Uri addressUri = new Uri (address);  	Regex hrefRegex = new Regex ("(?i) href=\"(([^\"]*)(index|api)\\.php)");  	try {  		foreach (Match m in hrefRegex.Matches (src)) {  			if (m.Groups [1].Value.StartsWith (address)) {  				indexPath = m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  				if (address.StartsWith ("https:"))  					indexPath = "https:" + m.Groups [2].Value + "index.php";  				else  					indexPath = "http:" + m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  				indexPath = address + m.Groups [2].Value + "index.php";  				break;  			} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  				indexPath = address + "/index.php";  				break;  			}  		}  	} catch {  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	}  	if (indexPath == null)  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	if (indexPath.Contains ("api.php"))  		indexPath = indexPath.Replace ("api.php"' "index.php");  	cache = new XElement ("siteInfo"' new XElement ("indexPath"' indexPath));  	cache.Save (cacheFile);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists (cacheFile) == true) {  	cache = XElement.Load (cacheFile);  	indexPath = cache.Descendants ("indexPath").FirstOrDefault ().Value;  } else {  	string src = GetWebPage (address + "/mediawiki");  	// FIXME: ZK hax  	Uri addressUri = new Uri (address);  	Regex hrefRegex = new Regex ("(?i) href=\"(([^\"]*)(index|api)\\.php)");  	try {  		foreach (Match m in hrefRegex.Matches (src)) {  			if (m.Groups [1].Value.StartsWith (address)) {  				indexPath = m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  				if (address.StartsWith ("https:"))  					indexPath = "https:" + m.Groups [2].Value + "index.php";  				else  					indexPath = "http:" + m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  				indexPath = address + m.Groups [2].Value + "index.php";  				break;  			} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  				indexPath = address + "/index.php";  				break;  			}  		}  	} catch {  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	}  	if (indexPath == null)  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	if (indexPath.Contains ("api.php"))  		indexPath = indexPath.Replace ("api.php"' "index.php");  	cache = new XElement ("siteInfo"' new XElement ("indexPath"' indexPath));  	cache.Save (cacheFile);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists (cacheFile) == true) {  	cache = XElement.Load (cacheFile);  	indexPath = cache.Descendants ("indexPath").FirstOrDefault ().Value;  } else {  	string src = GetWebPage (address + "/mediawiki");  	// FIXME: ZK hax  	Uri addressUri = new Uri (address);  	Regex hrefRegex = new Regex ("(?i) href=\"(([^\"]*)(index|api)\\.php)");  	try {  		foreach (Match m in hrefRegex.Matches (src)) {  			if (m.Groups [1].Value.StartsWith (address)) {  				indexPath = m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  				if (address.StartsWith ("https:"))  					indexPath = "https:" + m.Groups [2].Value + "index.php";  				else  					indexPath = "http:" + m.Groups [2].Value + "index.php";  				break;  			} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  				indexPath = address + m.Groups [2].Value + "index.php";  				break;  			} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  				indexPath = address + "/index.php";  				break;  			}  		}  	} catch {  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	}  	if (indexPath == null)  		throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  	if (indexPath.Contains ("api.php"))  		indexPath = indexPath.Replace ("api.php"' "index.php");  	cache = new XElement ("siteInfo"' new XElement ("indexPath"' indexPath));  	cache.Save (cacheFile);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: try {  	foreach (Match m in hrefRegex.Matches (src)) {  		if (m.Groups [1].Value.StartsWith (address)) {  			indexPath = m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  			if (address.StartsWith ("https:"))  				indexPath = "https:" + m.Groups [2].Value + "index.php";  			else  				indexPath = "http:" + m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  			indexPath = address + m.Groups [2].Value + "index.php";  			break;  		} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  			indexPath = address + "/index.php";  			break;  		}  	}  } catch {  	throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: try {  	foreach (Match m in hrefRegex.Matches (src)) {  		if (m.Groups [1].Value.StartsWith (address)) {  			indexPath = m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  			if (address.StartsWith ("https:"))  				indexPath = "https:" + m.Groups [2].Value + "index.php";  			else  				indexPath = "http:" + m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  			indexPath = address + m.Groups [2].Value + "index.php";  			break;  		} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  			indexPath = address + "/index.php";  			break;  		}  	}  } catch {  	throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: try {  	foreach (Match m in hrefRegex.Matches (src)) {  		if (m.Groups [1].Value.StartsWith (address)) {  			indexPath = m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  			if (address.StartsWith ("https:"))  				indexPath = "https:" + m.Groups [2].Value + "index.php";  			else  				indexPath = "http:" + m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  			indexPath = address + m.Groups [2].Value + "index.php";  			break;  		} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  			indexPath = address + "/index.php";  			break;  		}  	}  } catch {  	throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: try {  	foreach (Match m in hrefRegex.Matches (src)) {  		if (m.Groups [1].Value.StartsWith (address)) {  			indexPath = m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  			if (address.StartsWith ("https:"))  				indexPath = "https:" + m.Groups [2].Value + "index.php";  			else  				indexPath = "http:" + m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  			indexPath = address + m.Groups [2].Value + "index.php";  			break;  		} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  			indexPath = address + "/index.php";  			break;  		}  	}  } catch {  	throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: try {  	foreach (Match m in hrefRegex.Matches (src)) {  		if (m.Groups [1].Value.StartsWith (address)) {  			indexPath = m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  			if (address.StartsWith ("https:"))  				indexPath = "https:" + m.Groups [2].Value + "index.php";  			else  				indexPath = "http:" + m.Groups [2].Value + "index.php";  			break;  		} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  			indexPath = address + m.Groups [2].Value + "index.php";  			break;  		} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  			indexPath = address + "/index.php";  			break;  		}  	}  } catch {  	throw new WikiBotException (Bot.Msg ("Can't find path to index.php."));  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: foreach (Match m in hrefRegex.Matches (src)) {  	if (m.Groups [1].Value.StartsWith (address)) {  		indexPath = m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  		if (address.StartsWith ("https:"))  			indexPath = "https:" + m.Groups [2].Value + "index.php";  		else  			indexPath = "http:" + m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  		indexPath = address + m.Groups [2].Value + "index.php";  		break;  	} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  		indexPath = address + "/index.php";  		break;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: foreach (Match m in hrefRegex.Matches (src)) {  	if (m.Groups [1].Value.StartsWith (address)) {  		indexPath = m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  		if (address.StartsWith ("https:"))  			indexPath = "https:" + m.Groups [2].Value + "index.php";  		else  			indexPath = "http:" + m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  		indexPath = address + m.Groups [2].Value + "index.php";  		break;  	} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  		indexPath = address + "/index.php";  		break;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: foreach (Match m in hrefRegex.Matches (src)) {  	if (m.Groups [1].Value.StartsWith (address)) {  		indexPath = m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  		if (address.StartsWith ("https:"))  			indexPath = "https:" + m.Groups [2].Value + "index.php";  		else  			indexPath = "http:" + m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  		indexPath = address + m.Groups [2].Value + "index.php";  		break;  	} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  		indexPath = address + "/index.php";  		break;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: foreach (Match m in hrefRegex.Matches (src)) {  	if (m.Groups [1].Value.StartsWith (address)) {  		indexPath = m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  		if (address.StartsWith ("https:"))  			indexPath = "https:" + m.Groups [2].Value + "index.php";  		else  			indexPath = "http:" + m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  		indexPath = address + m.Groups [2].Value + "index.php";  		break;  	} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  		indexPath = address + "/index.php";  		break;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: foreach (Match m in hrefRegex.Matches (src)) {  	if (m.Groups [1].Value.StartsWith (address)) {  		indexPath = m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  		if (address.StartsWith ("https:"))  			indexPath = "https:" + m.Groups [2].Value + "index.php";  		else  			indexPath = "http:" + m.Groups [2].Value + "index.php";  		break;  	} else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  		indexPath = address + m.Groups [2].Value + "index.php";  		break;  	} else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  		indexPath = address + "/index.php";  		break;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith (address)) {  	indexPath = m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith (address)) {  	indexPath = m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith (address)) {  	indexPath = m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith (address)) {  	indexPath = m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith (address)) {  	indexPath = m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: indexPath = m.Groups [2].Value + "index.php";  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value.StartsWith ("//" + addressUri.Authority)) {  	if (address.StartsWith ("https:"))  		indexPath = "https:" + m.Groups [2].Value + "index.php";  	else  		indexPath = "http:" + m.Groups [2].Value + "index.php";  	break;  } else if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (address.StartsWith ("https:"))  	indexPath = "https:" + m.Groups [2].Value + "index.php";  else  	indexPath = "http:" + m.Groups [2].Value + "index.php";  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (address.StartsWith ("https:"))  	indexPath = "https:" + m.Groups [2].Value + "index.php";  else  	indexPath = "http:" + m.Groups [2].Value + "index.php";  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: indexPath = "https:" + m.Groups [2].Value + "index.php";  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: indexPath = "http:" + m.Groups [2].Value + "index.php";  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (m.Groups [1].Value [0] == '/' && m.Groups [1].Value [1] != '/') {  	indexPath = address + m.Groups [2].Value + "index.php";  	break;  } else if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: indexPath = address + m.Groups [2].Value + "index.php";  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	indexPath = address + "/index.php";  	break;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: timeOffsetSeconds = (int)(wikiServerTime - DateTime.UtcNow).TotalSeconds - 2;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: regexes ["wikiCategory"] = new Regex (@"(?i)\[\[\s*(((" + GetNsPrefixes (14) + @"):(.+?))(\|.+?)?)]]");  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: regexes ["wikiImage"] = new Regex (@"\[\[(?i)((" + GetNsPrefixes (6) + @"):(.+?))(\|(.+?))*?]]");  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: regexes ["linkToImage2"] = new Regex ("<a href=\"[^\"]*?\" title=\"(" + Regex.Escape (GetNsPrefix (6)) + "[^\"]+?)\">");  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  	string loginPageSrc = PostDataAndGetResult (indexPath + "?title=Special:Userlogin"' ""' true' true);  	string loginToken = "";  	int loginTokenPos = loginPageSrc.IndexOf ("<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  	if (loginTokenPos != -1)  		loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  	string postData = string.Format ("wpName={0}&wpPassword={1}&wpDomain={2}" + "&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain)' Bot.UrlEncode (loginToken));  	string respStr = PostDataAndGetResult (indexPath + "?title=Special:Userlogin&action=submitlogin&type=login"' postData' true' false);  	if (respStr.Contains ("<div class=\"errorbox\">"))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  } else {  	string postData = string.Format ("lgname={0}&lgpassword={1}&lgdomain={2}"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain));  	// At first load login security token  	string tokenXmlSrc = PostDataAndGetResult (apiPath + "?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  	XElement tokenXml = XElement.Parse (tokenXmlSrc);  	string respStr = ""' loginToken = "";  	try {  		loginToken = tokenXml.Element ("query").Element ("tokens").Attribute ("logintoken").Value;  	} catch {  		// old fallback method  		respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  		if (respStr.Contains ("result=\"Success\"")) {  			Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  			return;  		}  		int tokenPos = respStr.IndexOf ("token=\"");  		if (tokenPos < 1)  			throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  		loginToken = respStr.Substring (tokenPos + 7' 32);  	}  	postData += "&lgtoken=" + Bot.UrlEncode (loginToken);  	respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  	if (!respStr.Contains ("result=\"Success\""))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  	string loginPageSrc = PostDataAndGetResult (indexPath + "?title=Special:Userlogin"' ""' true' true);  	string loginToken = "";  	int loginTokenPos = loginPageSrc.IndexOf ("<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  	if (loginTokenPos != -1)  		loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  	string postData = string.Format ("wpName={0}&wpPassword={1}&wpDomain={2}" + "&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain)' Bot.UrlEncode (loginToken));  	string respStr = PostDataAndGetResult (indexPath + "?title=Special:Userlogin&action=submitlogin&type=login"' postData' true' false);  	if (respStr.Contains ("<div class=\"errorbox\">"))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  } else {  	string postData = string.Format ("lgname={0}&lgpassword={1}&lgdomain={2}"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain));  	// At first load login security token  	string tokenXmlSrc = PostDataAndGetResult (apiPath + "?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  	XElement tokenXml = XElement.Parse (tokenXmlSrc);  	string respStr = ""' loginToken = "";  	try {  		loginToken = tokenXml.Element ("query").Element ("tokens").Attribute ("logintoken").Value;  	} catch {  		// old fallback method  		respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  		if (respStr.Contains ("result=\"Success\"")) {  			Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  			return;  		}  		int tokenPos = respStr.IndexOf ("token=\"");  		if (tokenPos < 1)  			throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  		loginToken = respStr.Substring (tokenPos + 7' 32);  	}  	postData += "&lgtoken=" + Bot.UrlEncode (loginToken);  	respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  	if (!respStr.Contains ("result=\"Success\""))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  	string loginPageSrc = PostDataAndGetResult (indexPath + "?title=Special:Userlogin"' ""' true' true);  	string loginToken = "";  	int loginTokenPos = loginPageSrc.IndexOf ("<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  	if (loginTokenPos != -1)  		loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  	string postData = string.Format ("wpName={0}&wpPassword={1}&wpDomain={2}" + "&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain)' Bot.UrlEncode (loginToken));  	string respStr = PostDataAndGetResult (indexPath + "?title=Special:Userlogin&action=submitlogin&type=login"' postData' true' false);  	if (respStr.Contains ("<div class=\"errorbox\">"))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  } else {  	string postData = string.Format ("lgname={0}&lgpassword={1}&lgdomain={2}"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain));  	// At first load login security token  	string tokenXmlSrc = PostDataAndGetResult (apiPath + "?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  	XElement tokenXml = XElement.Parse (tokenXmlSrc);  	string respStr = ""' loginToken = "";  	try {  		loginToken = tokenXml.Element ("query").Element ("tokens").Attribute ("logintoken").Value;  	} catch {  		// old fallback method  		respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  		if (respStr.Contains ("result=\"Success\"")) {  			Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  			return;  		}  		int tokenPos = respStr.IndexOf ("token=\"");  		if (tokenPos < 1)  			throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  		loginToken = respStr.Substring (tokenPos + 7' 32);  	}  	postData += "&lgtoken=" + Bot.UrlEncode (loginToken);  	respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  	if (!respStr.Contains ("result=\"Success\""))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  	string loginPageSrc = PostDataAndGetResult (indexPath + "?title=Special:Userlogin"' ""' true' true);  	string loginToken = "";  	int loginTokenPos = loginPageSrc.IndexOf ("<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  	if (loginTokenPos != -1)  		loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  	string postData = string.Format ("wpName={0}&wpPassword={1}&wpDomain={2}" + "&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain)' Bot.UrlEncode (loginToken));  	string respStr = PostDataAndGetResult (indexPath + "?title=Special:Userlogin&action=submitlogin&type=login"' postData' true' false);  	if (respStr.Contains ("<div class=\"errorbox\">"))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  } else {  	string postData = string.Format ("lgname={0}&lgpassword={1}&lgdomain={2}"' Bot.UrlEncode (userName)' Bot.UrlEncode (userPass)' Bot.UrlEncode (userDomain));  	// At first load login security token  	string tokenXmlSrc = PostDataAndGetResult (apiPath + "?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  	XElement tokenXml = XElement.Parse (tokenXmlSrc);  	string respStr = ""' loginToken = "";  	try {  		loginToken = tokenXml.Element ("query").Element ("tokens").Attribute ("logintoken").Value;  	} catch {  		// old fallback method  		respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  		if (respStr.Contains ("result=\"Success\"")) {  			Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  			return;  		}  		int tokenPos = respStr.IndexOf ("token=\"");  		if (tokenPos < 1)  			throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  		loginToken = respStr.Substring (tokenPos + 7' 32);  	}  	postData += "&lgtoken=" + Bot.UrlEncode (loginToken);  	respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  	if (!respStr.Contains ("result=\"Success\""))  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (loginTokenPos != -1)  	loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (loginTokenPos != -1)  	loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: loginToken = loginPageSrc.Substring (loginTokenPos + 48' 32);  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: try {  	loginToken = tokenXml.Element ("query").Element ("tokens").Attribute ("logintoken").Value;  } catch {  	// old fallback method  	respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  	if (respStr.Contains ("result=\"Success\"")) {  		Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  		return;  	}  	int tokenPos = respStr.IndexOf ("token=\"");  	if (tokenPos < 1)  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	loginToken = respStr.Substring (tokenPos + 7' 32);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: try {  	loginToken = tokenXml.Element ("query").Element ("tokens").Attribute ("logintoken").Value;  } catch {  	// old fallback method  	respStr = PostDataAndGetResult (apiPath + "?action=login&format=xml"' postData' true' false);  	if (respStr.Contains ("result=\"Success\"")) {  		Console.WriteLine (Bot.Msg ("Logged in as {0}.")' userName);  		return;  	}  	int tokenPos = respStr.IndexOf ("token=\"");  	if (tokenPos < 1)  		throw new WikiBotException ("\n\n" + Bot.Msg ("Login failed. Check your username and password.") + "\n");  	loginToken = respStr.Substring (tokenPos + 7' 32);  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: loginToken = respStr.Substring (tokenPos + 7' 32);  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: loginToken = respStr.Substring (tokenPos + 7' 32);  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (pageURL);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.ContentType = "application/x-www-form-urlencoded";  	webReq.Headers.Add ("Cache-Control"' "no-cache' must-revalidate");  	webReq.UserAgent = Bot.botVer;  	webReq.AllowAutoRedirect = allowRedirect;  	if (cookies.Count == 0)  		webReq.CookieContainer = new CookieContainer ();  	else  		webReq.CookieContainer = cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	if (!Bot.isRunningOnMono) {  		// Mono bug evasion  		// last checked in January 2015 on Mono 3.12 for Windows  		// http://mono.1490590.n4.nabble.com/...  		// ...EntryPointNotFoundException-CreateZStream-td4661364.html  		webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	}  	if (!string.IsNullOrEmpty (postData)) {  		if (Bot.isRunningOnMono)  			// Mono bug 636219 evasion  			webReq.AllowAutoRedirect = false;  		// https://bugzilla.novell.com/show_bug.cgi?id=636219  		webReq.Method = "POST";  		//webReq.Timeout = 180000;  		postData += "&maxlag=" + maxLag;  		byte[] postBytes = Encoding.UTF8.GetBytes (postData);  		webReq.ContentLength = postBytes.Length;  		Stream reqStrm = webReq.GetRequestStream ();  		reqStrm.Write (postBytes' 0' postBytes.Length);  		reqStrm.Close ();  	}  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		if (webResp.Headers ["Retry-After"] != null)  			throw new WebException ("Service is unavailable due to high load.");  		// API can return HTTP code 200 (OK) along with "Retry-After"  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  			// Mono bug 636219 evasion  			return "";  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > retryTimes)  				throw;  			// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)webResp.StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem' retry  				if (errorCounter > retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (pageURL);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.ContentType = "application/x-www-form-urlencoded";  	webReq.Headers.Add ("Cache-Control"' "no-cache' must-revalidate");  	webReq.UserAgent = Bot.botVer;  	webReq.AllowAutoRedirect = allowRedirect;  	if (cookies.Count == 0)  		webReq.CookieContainer = new CookieContainer ();  	else  		webReq.CookieContainer = cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	if (!Bot.isRunningOnMono) {  		// Mono bug evasion  		// last checked in January 2015 on Mono 3.12 for Windows  		// http://mono.1490590.n4.nabble.com/...  		// ...EntryPointNotFoundException-CreateZStream-td4661364.html  		webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	}  	if (!string.IsNullOrEmpty (postData)) {  		if (Bot.isRunningOnMono)  			// Mono bug 636219 evasion  			webReq.AllowAutoRedirect = false;  		// https://bugzilla.novell.com/show_bug.cgi?id=636219  		webReq.Method = "POST";  		//webReq.Timeout = 180000;  		postData += "&maxlag=" + maxLag;  		byte[] postBytes = Encoding.UTF8.GetBytes (postData);  		webReq.ContentLength = postBytes.Length;  		Stream reqStrm = webReq.GetRequestStream ();  		reqStrm.Write (postBytes' 0' postBytes.Length);  		reqStrm.Close ();  	}  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		if (webResp.Headers ["Retry-After"] != null)  			throw new WebException ("Service is unavailable due to high load.");  		// API can return HTTP code 200 (OK) along with "Retry-After"  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  			// Mono bug 636219 evasion  			return "";  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > retryTimes)  				throw;  			// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)webResp.StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem' retry  				if (errorCounter > retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (pageURL);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.ContentType = "application/x-www-form-urlencoded";  	webReq.Headers.Add ("Cache-Control"' "no-cache' must-revalidate");  	webReq.UserAgent = Bot.botVer;  	webReq.AllowAutoRedirect = allowRedirect;  	if (cookies.Count == 0)  		webReq.CookieContainer = new CookieContainer ();  	else  		webReq.CookieContainer = cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	if (!Bot.isRunningOnMono) {  		// Mono bug evasion  		// last checked in January 2015 on Mono 3.12 for Windows  		// http://mono.1490590.n4.nabble.com/...  		// ...EntryPointNotFoundException-CreateZStream-td4661364.html  		webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	}  	if (!string.IsNullOrEmpty (postData)) {  		if (Bot.isRunningOnMono)  			// Mono bug 636219 evasion  			webReq.AllowAutoRedirect = false;  		// https://bugzilla.novell.com/show_bug.cgi?id=636219  		webReq.Method = "POST";  		//webReq.Timeout = 180000;  		postData += "&maxlag=" + maxLag;  		byte[] postBytes = Encoding.UTF8.GetBytes (postData);  		webReq.ContentLength = postBytes.Length;  		Stream reqStrm = webReq.GetRequestStream ();  		reqStrm.Write (postBytes' 0' postBytes.Length);  		reqStrm.Close ();  	}  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		if (webResp.Headers ["Retry-After"] != null)  			throw new WebException ("Service is unavailable due to high load.");  		// API can return HTTP code 200 (OK) along with "Retry-After"  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  			// Mono bug 636219 evasion  			return "";  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > retryTimes)  				throw;  			// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)webResp.StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem' retry  				if (errorCounter > retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (pageURL);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.ContentType = "application/x-www-form-urlencoded";  	webReq.Headers.Add ("Cache-Control"' "no-cache' must-revalidate");  	webReq.UserAgent = Bot.botVer;  	webReq.AllowAutoRedirect = allowRedirect;  	if (cookies.Count == 0)  		webReq.CookieContainer = new CookieContainer ();  	else  		webReq.CookieContainer = cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	if (!Bot.isRunningOnMono) {  		// Mono bug evasion  		// last checked in January 2015 on Mono 3.12 for Windows  		// http://mono.1490590.n4.nabble.com/...  		// ...EntryPointNotFoundException-CreateZStream-td4661364.html  		webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	}  	if (!string.IsNullOrEmpty (postData)) {  		if (Bot.isRunningOnMono)  			// Mono bug 636219 evasion  			webReq.AllowAutoRedirect = false;  		// https://bugzilla.novell.com/show_bug.cgi?id=636219  		webReq.Method = "POST";  		//webReq.Timeout = 180000;  		postData += "&maxlag=" + maxLag;  		byte[] postBytes = Encoding.UTF8.GetBytes (postData);  		webReq.ContentLength = postBytes.Length;  		Stream reqStrm = webReq.GetRequestStream ();  		reqStrm.Write (postBytes' 0' postBytes.Length);  		reqStrm.Close ();  	}  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		if (webResp.Headers ["Retry-After"] != null)  			throw new WebException ("Service is unavailable due to high load.");  		// API can return HTTP code 200 (OK) along with "Retry-After"  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  			// Mono bug 636219 evasion  			return "";  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > retryTimes)  				throw;  			// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)webResp.StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem' retry  				if (errorCounter > retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	if (webResp.Headers ["Retry-After"] != null)  		throw new WebException ("Service is unavailable due to high load.");  	// API can return HTTP code 200 (OK) along with "Retry-After"  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  		// Mono bug 636219 evasion  		return "";  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > retryTimes)  			throw;  		// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)webResp.StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem' retry  			if (errorCounter > retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	if (webResp.Headers ["Retry-After"] != null)  		throw new WebException ("Service is unavailable due to high load.");  	// API can return HTTP code 200 (OK) along with "Retry-After"  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  		// Mono bug 636219 evasion  		return "";  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > retryTimes)  			throw;  		// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)webResp.StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem' retry  			if (errorCounter > retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	if (webResp.Headers ["Retry-After"] != null)  		throw new WebException ("Service is unavailable due to high load.");  	// API can return HTTP code 200 (OK) along with "Retry-After"  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  		// Mono bug 636219 evasion  		return "";  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > retryTimes)  			throw;  		// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)webResp.StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem' retry  			if (errorCounter > retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	if (webResp.Headers ["Retry-After"] != null)  		throw new WebException ("Service is unavailable due to high load.");  	// API can return HTTP code 200 (OK) along with "Retry-After"  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (webReq.AllowAutoRedirect == false && webResp.StatusCode == HttpStatusCode.Redirect)  		// Mono bug 636219 evasion  		return "";  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		return PostDataAndGetResult (pageURL' postData' getCookies' allowRedirect);  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > retryTimes)  			throw;  		// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)webResp.StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem' retry  			if (errorCounter > retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > retryTimes)  		throw;  	// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > retryTimes)  		throw;  	// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > retryTimes)  		throw;  	// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > retryTimes)  		throw;  	// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)webResp.StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem' retry  		if (errorCounter > retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem' retry  	if (errorCounter > retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem' retry  	if (errorCounter > retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem' retry  	if (errorCounter > retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Site,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem' retry  	if (errorCounter > retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParsePageXml,The following statement contains a magic number: if (doc.GetElementsByTagName ("username").Count != 0) {  	lastUser = doc.GetElementsByTagName ("username") [0].InnerText;  	lastUserId = doc.GetElementsByTagName ("id") [2].InnerText;  } else if (doc.GetElementsByTagName ("ip").Count != 0)  	lastUser = doc.GetElementsByTagName ("ip") [0].InnerText;  else  	lastUser = "(n/a)";  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParsePageXml,The following statement contains a magic number: lastUserId = doc.GetElementsByTagName ("id") [2].InnerText;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Revert,The following statement contains a magic number: pl.FillFromPageHistory (title' 2);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Revert,The following statement contains a magic number: if (pl.Count () != 2) {  	Console.Error.WriteLine (Bot.Msg ("Can't revert page \"{0}\".")' title);  	return;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,The following statement contains a magic number: for (int i = 50; i <= 5000; i *= 10) {  	pl.FillFromPageHistory (title' i);  	lastEditor = pl [0].lastUser;  	foreach (Page p in pl)  		if (p.lastUser != lastEditor) {  			p.Load ();  			Save (p.text' comment' isMinorEdit);  			Console.WriteLine (Bot.Msg ("Last edits of page \"{0}\" by user {1} have been undone.")' title' lastEditor);  			return true;  		}  	if (pl.pages.Count < i)  		break;  	pl.Clear ();  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,The following statement contains a magic number: for (int i = 50; i <= 5000; i *= 10) {  	pl.FillFromPageHistory (title' i);  	lastEditor = pl [0].lastUser;  	foreach (Page p in pl)  		if (p.lastUser != lastEditor) {  			p.Load ();  			Save (p.text' comment' isMinorEdit);  			Console.WriteLine (Bot.Msg ("Last edits of page \"{0}\" by user {1} have been undone.")' title' lastEditor);  			return true;  		}  	if (pl.pages.Count < i)  		break;  	pl.Clear ();  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,The following statement contains a magic number: for (int i = 50; i <= 5000; i *= 10) {  	pl.FillFromPageHistory (title' i);  	lastEditor = pl [0].lastUser;  	foreach (Page p in pl)  		if (p.lastUser != lastEditor) {  			p.Load ();  			Save (p.text' comment' isMinorEdit);  			Console.WriteLine (Bot.Msg ("Last edits of page \"{0}\" by user {1} have been undone.")' title' lastEditor);  			return true;  		}  	if (pl.pages.Count < i)  		break;  	pl.Clear ();  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,The following statement contains a magic number: i *= 10
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (editMode > 2 || editMode < 0)  	throw new ArgumentOutOfRangeException ("editMode"' errorMsg);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (renameMode > 2 || renameMode < 0)  	throw new ArgumentOutOfRangeException ("renameMode"' errorMsg);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {  	string token = "";  	if (site.tokens != null && site.tokens.ContainsKey ("csrftoken"))  		token = site.tokens ["csrftoken"];  	else {  		var tokens = GetSecurityTokens ("protect");  		if (tokens.ContainsKey ("missing"))  			throw new WikiBotException (string.Format (Bot.Msg ("Page \"{0}\" doesn't exist.")' title));  		if (!tokens.ContainsKey ("protecttoken") || tokens ["protecttoken"] == "") {  			Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  			return;  		}  		token = tokens ["protecttoken"];  	}  	string date = Regex.Replace (expiryDate.ToString ("u")' "\\D"' "");  	string postData = string.Format ("token={0}&protections=edit={1}|move={2}" + "&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"' Bot.UrlEncode (token)' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' (cascadeMode == true ? "1" : "")' (expiryDate == DateTime.MinValue ? "" : date)' (expiryDate == DateTime.MinValue ? "" : date)' Bot.UrlEncode (reason));  	string respStr = site.PostDataAndGetResult (site.apiPath + "?action=protect" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData);  	if (respStr.Contains ("<error"))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to delete page \"{0}\".")' title));  } else {  	string respStr = site.GetWebPage (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect");  	Match m = site.regexes ["editToken"].Match (respStr);  	string securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	if (string.IsNullOrEmpty (securityToken)) {  		Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  		return;  	}  	if (site.watchList == null) {  		site.watchList = new PageList (site);  		site.watchList.FillFromWatchList ();  	}  	watched = site.watchList.Contains (this);  	string postData = string.Format ("mwProtect-level-edit={0}&mwProtect-level-move={1}" + "&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken)' expiryDate == DateTime.MinValue ? "" : expiryDate.ToString ("u")' // ToString("u") is like "2010-06-15 20:45:30Z"  	cascadeMode == true ? "&mwProtect-cascade=1" : ""' watched ? "&mwProtectWatch=1" : "");  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect"' postData);  	Regex successMsg = new Regex ("<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode (title) + "\\s*<");  	if (!successMsg.IsMatch (respStr)) {  		throw new WikiBotException (string.Format (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title));  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {  	string token = "";  	if (site.tokens != null && site.tokens.ContainsKey ("csrftoken"))  		token = site.tokens ["csrftoken"];  	else {  		var tokens = GetSecurityTokens ("protect");  		if (tokens.ContainsKey ("missing"))  			throw new WikiBotException (string.Format (Bot.Msg ("Page \"{0}\" doesn't exist.")' title));  		if (!tokens.ContainsKey ("protecttoken") || tokens ["protecttoken"] == "") {  			Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  			return;  		}  		token = tokens ["protecttoken"];  	}  	string date = Regex.Replace (expiryDate.ToString ("u")' "\\D"' "");  	string postData = string.Format ("token={0}&protections=edit={1}|move={2}" + "&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"' Bot.UrlEncode (token)' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' (cascadeMode == true ? "1" : "")' (expiryDate == DateTime.MinValue ? "" : date)' (expiryDate == DateTime.MinValue ? "" : date)' Bot.UrlEncode (reason));  	string respStr = site.PostDataAndGetResult (site.apiPath + "?action=protect" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData);  	if (respStr.Contains ("<error"))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to delete page \"{0}\".")' title));  } else {  	string respStr = site.GetWebPage (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect");  	Match m = site.regexes ["editToken"].Match (respStr);  	string securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	if (string.IsNullOrEmpty (securityToken)) {  		Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  		return;  	}  	if (site.watchList == null) {  		site.watchList = new PageList (site);  		site.watchList.FillFromWatchList ();  	}  	watched = site.watchList.Contains (this);  	string postData = string.Format ("mwProtect-level-edit={0}&mwProtect-level-move={1}" + "&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken)' expiryDate == DateTime.MinValue ? "" : expiryDate.ToString ("u")' // ToString("u") is like "2010-06-15 20:45:30Z"  	cascadeMode == true ? "&mwProtect-cascade=1" : ""' watched ? "&mwProtectWatch=1" : "");  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect"' postData);  	Regex successMsg = new Regex ("<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode (title) + "\\s*<");  	if (!successMsg.IsMatch (respStr)) {  		throw new WikiBotException (string.Format (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title));  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {  	string token = "";  	if (site.tokens != null && site.tokens.ContainsKey ("csrftoken"))  		token = site.tokens ["csrftoken"];  	else {  		var tokens = GetSecurityTokens ("protect");  		if (tokens.ContainsKey ("missing"))  			throw new WikiBotException (string.Format (Bot.Msg ("Page \"{0}\" doesn't exist.")' title));  		if (!tokens.ContainsKey ("protecttoken") || tokens ["protecttoken"] == "") {  			Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  			return;  		}  		token = tokens ["protecttoken"];  	}  	string date = Regex.Replace (expiryDate.ToString ("u")' "\\D"' "");  	string postData = string.Format ("token={0}&protections=edit={1}|move={2}" + "&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"' Bot.UrlEncode (token)' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' (cascadeMode == true ? "1" : "")' (expiryDate == DateTime.MinValue ? "" : date)' (expiryDate == DateTime.MinValue ? "" : date)' Bot.UrlEncode (reason));  	string respStr = site.PostDataAndGetResult (site.apiPath + "?action=protect" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData);  	if (respStr.Contains ("<error"))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to delete page \"{0}\".")' title));  } else {  	string respStr = site.GetWebPage (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect");  	Match m = site.regexes ["editToken"].Match (respStr);  	string securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	if (string.IsNullOrEmpty (securityToken)) {  		Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  		return;  	}  	if (site.watchList == null) {  		site.watchList = new PageList (site);  		site.watchList.FillFromWatchList ();  	}  	watched = site.watchList.Contains (this);  	string postData = string.Format ("mwProtect-level-edit={0}&mwProtect-level-move={1}" + "&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken)' expiryDate == DateTime.MinValue ? "" : expiryDate.ToString ("u")' // ToString("u") is like "2010-06-15 20:45:30Z"  	cascadeMode == true ? "&mwProtect-cascade=1" : ""' watched ? "&mwProtectWatch=1" : "");  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect"' postData);  	Regex successMsg = new Regex ("<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode (title) + "\\s*<");  	if (!successMsg.IsMatch (respStr)) {  		throw new WikiBotException (string.Format (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title));  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {  	string token = "";  	if (site.tokens != null && site.tokens.ContainsKey ("csrftoken"))  		token = site.tokens ["csrftoken"];  	else {  		var tokens = GetSecurityTokens ("protect");  		if (tokens.ContainsKey ("missing"))  			throw new WikiBotException (string.Format (Bot.Msg ("Page \"{0}\" doesn't exist.")' title));  		if (!tokens.ContainsKey ("protecttoken") || tokens ["protecttoken"] == "") {  			Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  			return;  		}  		token = tokens ["protecttoken"];  	}  	string date = Regex.Replace (expiryDate.ToString ("u")' "\\D"' "");  	string postData = string.Format ("token={0}&protections=edit={1}|move={2}" + "&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"' Bot.UrlEncode (token)' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' (cascadeMode == true ? "1" : "")' (expiryDate == DateTime.MinValue ? "" : date)' (expiryDate == DateTime.MinValue ? "" : date)' Bot.UrlEncode (reason));  	string respStr = site.PostDataAndGetResult (site.apiPath + "?action=protect" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData);  	if (respStr.Contains ("<error"))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to delete page \"{0}\".")' title));  } else {  	string respStr = site.GetWebPage (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect");  	Match m = site.regexes ["editToken"].Match (respStr);  	string securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	if (string.IsNullOrEmpty (securityToken)) {  		Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  		return;  	}  	if (site.watchList == null) {  		site.watchList = new PageList (site);  		site.watchList.FillFromWatchList ();  	}  	watched = site.watchList.Contains (this);  	string postData = string.Format ("mwProtect-level-edit={0}&mwProtect-level-move={1}" + "&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken)' expiryDate == DateTime.MinValue ? "" : expiryDate.ToString ("u")' // ToString("u") is like "2010-06-15 20:45:30Z"  	cascadeMode == true ? "&mwProtect-cascade=1" : ""' watched ? "&mwProtectWatch=1" : "");  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect"' postData);  	Regex successMsg = new Regex ("<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode (title) + "\\s*<");  	if (!successMsg.IsMatch (respStr)) {  		throw new WikiBotException (string.Format (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title));  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {  	string token = "";  	if (site.tokens != null && site.tokens.ContainsKey ("csrftoken"))  		token = site.tokens ["csrftoken"];  	else {  		var tokens = GetSecurityTokens ("protect");  		if (tokens.ContainsKey ("missing"))  			throw new WikiBotException (string.Format (Bot.Msg ("Page \"{0}\" doesn't exist.")' title));  		if (!tokens.ContainsKey ("protecttoken") || tokens ["protecttoken"] == "") {  			Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  			return;  		}  		token = tokens ["protecttoken"];  	}  	string date = Regex.Replace (expiryDate.ToString ("u")' "\\D"' "");  	string postData = string.Format ("token={0}&protections=edit={1}|move={2}" + "&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"' Bot.UrlEncode (token)' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' (cascadeMode == true ? "1" : "")' (expiryDate == DateTime.MinValue ? "" : date)' (expiryDate == DateTime.MinValue ? "" : date)' Bot.UrlEncode (reason));  	string respStr = site.PostDataAndGetResult (site.apiPath + "?action=protect" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData);  	if (respStr.Contains ("<error"))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to delete page \"{0}\".")' title));  } else {  	string respStr = site.GetWebPage (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect");  	Match m = site.regexes ["editToken"].Match (respStr);  	string securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	if (string.IsNullOrEmpty (securityToken)) {  		Console.Error.WriteLine (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title);  		return;  	}  	if (site.watchList == null) {  		site.watchList = new PageList (site);  		site.watchList.FillFromWatchList ();  	}  	watched = site.watchList.Contains (this);  	string postData = string.Format ("mwProtect-level-edit={0}&mwProtect-level-move={1}" + "&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"' (editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")' (renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken)' expiryDate == DateTime.MinValue ? "" : expiryDate.ToString ("u")' // ToString("u") is like "2010-06-15 20:45:30Z"  	cascadeMode == true ? "&mwProtect-cascade=1" : ""' watched ? "&mwProtectWatch=1" : "");  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=protect"' postData);  	Regex successMsg = new Regex ("<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode (title) + "\\s*<");  	if (!successMsg.IsMatch (respStr)) {  		throw new WikiBotException (string.Format (Bot.Msg ("Unable to change protection mode for page \"{0}\".")' title));  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The following statement contains a magic number: if (site.useApi) {  	string res = site.apiPath + "?format=xml&action=query&meta=tokens&type=watch" + "&titles=" + Bot.UrlEncode (title);  	string respStr = site.GetWebPage (res);  	string securityToken = "";  	string titleFallback = "";  	try {  		securityToken = XElement.Parse (respStr).Element ("query").Element ("tokens").Attribute ("watchtoken").Value.ToString ();  	} catch {  		// FALLBACK for older version  		res = site.apiPath + "?format=xml&action=query&prop=info&intoken=watch" + "&titles=" + Bot.UrlEncode (title);  		respStr = site.GetWebPage (res);  		securityToken = XElement.Parse (respStr).Element ("query").Element ("pages").Element ("page").Attribute ("watchtoken").Value.ToString ();  		titleFallback = "&title=" + Bot.UrlEncode (title);  	}  	string postData = string.Format ("titles={0}{1}&action=watch&token={2}&format=xml"' Bot.UrlEncode (title)' titleFallback' Bot.UrlEncode (securityToken));  	respStr = site.PostDataAndGetResult (site.apiPath' postData);  } else {  	string res = site.indexPath + "?action=watch&title=" + Bot.UrlEncode (title);  	string respStr = site.GetWebPage (res);  	string securityToken = "";  	Match m = site.regexes ["editToken"].Match (respStr);  	if (m.Success) {  		securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	} else {  		Console.Error.WriteLine (Bot.Msg ("Can't add page \"{0}\" to watchlist.")' title);  		return;  	}  	string postData = string.Format ("title={0}&action=watch&wpEditToken={1}"' Bot.UrlEncode (title)' Bot.UrlEncode (securityToken));  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title)' postData);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The following statement contains a magic number: if (m.Success) {  	securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  } else {  	Console.Error.WriteLine (Bot.Msg ("Can't add page \"{0}\" to watchlist.")' title);  	return;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The following statement contains a magic number: securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The following statement contains a magic number: if (site.useApi) {  	string res = site.apiPath + "?format=xml&action=query&meta=tokens&type=watch" + "&titles=" + Bot.UrlEncode (title);  	string respStr = site.GetWebPage (res);  	string securityToken = "";  	string titleFallback = "";  	try {  		securityToken = XElement.Parse (respStr).Element ("query").Element ("tokens").Attribute ("watchtoken").Value.ToString ();  	} catch {  		// FALLBACK for older version  		res = site.apiPath + "?format=xml&action=query&prop=info&intoken=watch" + "&titles=" + Bot.UrlEncode (title);  		respStr = site.GetWebPage (res);  		securityToken = XElement.Parse (respStr).Element ("query").Element ("pages").Element ("page").Attribute ("watchtoken").Value.ToString ();  		titleFallback = "&title=" + Bot.UrlEncode (title);  	}  	string postData = string.Format ("titles={0}{1}&token={2}" + "&format=xml&action=watch&unwatch=1"' Bot.UrlEncode (title)' titleFallback' Bot.UrlEncode (securityToken));  	respStr = site.PostDataAndGetResult (site.apiPath' postData);  } else {  	string res = site.indexPath + "?action=unwatch&title=" + Bot.UrlEncode (title);  	string respStr = site.GetWebPage (res);  	string securityToken = "";  	Match m = site.regexes ["editToken"].Match (respStr);  	if (m.Success) {  		securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	} else {  		Console.Error.WriteLine (Bot.Msg ("Can't remove page \"{0}\" from watchlist.")' title);  		return;  	}  	string postData = string.Format ("title={0}&action=unwatch&wpEditToken={1}"' Bot.UrlEncode (title)' Bot.UrlEncode (securityToken));  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title)' postData);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The following statement contains a magic number: if (m.Success) {  	securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  } else {  	Console.Error.WriteLine (Bot.Msg ("Can't remove page \"{0}\" from watchlist.")' title);  	return;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The following statement contains a magic number: securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (Path.GetFileNameWithoutExtension (filePathName).Length < 3)  	throw new WikiBotException (string.Format (Bot.Msg ("Name of file \"{0}\" must " + "contain at least 3 characters (excluding extension) for successful upload.")' filePathName));  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (res);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.Method = "POST";  	string boundary = DateTime.Now.Ticks.ToString ("x");  	webReq.ContentType = "multipart/form-data; boundary=" + boundary;  	webReq.UserAgent = Bot.botVer;  	webReq.CookieContainer = site.cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy (System.Net.Cache.HttpRequestCacheLevel.Refresh);  	StringBuilder sb = new StringBuilder ();  	string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  	sb.Append (paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  	sb.Append (paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  	sb.Append (paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  	sb.Append (paramHead + "wpEditToken\"\r\n\r\n" + tokens ["edittoken"] + "\r\n");  	sb.Append (paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  	sb.Append (paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  	sb.Append (paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  	sb.Append (paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  	sb.Append (paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  	sb.Append (paramHead + "wpUploadFile\"; filename=\"" + Bot.UrlEncode (Path.GetFileName (filePathName)) + "\"\r\n" + "Content-Type: application/octet-stream\r\n\r\n");  	byte[] postHeaderBytes = Encoding.UTF8.GetBytes (sb.ToString ());  	byte[] fileBytes = File.ReadAllBytes (filePathName);  	byte[] boundaryBytes = Encoding.ASCII.GetBytes ("\r\n--" + boundary + "--\r\n");  	webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length + boundaryBytes.Length;  	Stream reqStream = webReq.GetRequestStream ();  	reqStream.Write (postHeaderBytes' 0' postHeaderBytes.Length);  	reqStream.Write (fileBytes' 0' fileBytes.Length);  	reqStream.Write (boundaryBytes' 0' boundaryBytes.Length);  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			UploadImage (filePathName' description' license' copyStatus' source);  			return;  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > site.retryTimes)  				throw;  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)((HttpWebResponse)webResp).StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem  				if (errorCounter > site.retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (res);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.Method = "POST";  	string boundary = DateTime.Now.Ticks.ToString ("x");  	webReq.ContentType = "multipart/form-data; boundary=" + boundary;  	webReq.UserAgent = Bot.botVer;  	webReq.CookieContainer = site.cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy (System.Net.Cache.HttpRequestCacheLevel.Refresh);  	StringBuilder sb = new StringBuilder ();  	string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  	sb.Append (paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  	sb.Append (paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  	sb.Append (paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  	sb.Append (paramHead + "wpEditToken\"\r\n\r\n" + tokens ["edittoken"] + "\r\n");  	sb.Append (paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  	sb.Append (paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  	sb.Append (paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  	sb.Append (paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  	sb.Append (paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  	sb.Append (paramHead + "wpUploadFile\"; filename=\"" + Bot.UrlEncode (Path.GetFileName (filePathName)) + "\"\r\n" + "Content-Type: application/octet-stream\r\n\r\n");  	byte[] postHeaderBytes = Encoding.UTF8.GetBytes (sb.ToString ());  	byte[] fileBytes = File.ReadAllBytes (filePathName);  	byte[] boundaryBytes = Encoding.ASCII.GetBytes ("\r\n--" + boundary + "--\r\n");  	webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length + boundaryBytes.Length;  	Stream reqStream = webReq.GetRequestStream ();  	reqStream.Write (postHeaderBytes' 0' postHeaderBytes.Length);  	reqStream.Write (fileBytes' 0' fileBytes.Length);  	reqStream.Write (boundaryBytes' 0' boundaryBytes.Length);  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			UploadImage (filePathName' description' license' copyStatus' source);  			return;  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > site.retryTimes)  				throw;  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)((HttpWebResponse)webResp).StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem  				if (errorCounter > site.retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (res);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.Method = "POST";  	string boundary = DateTime.Now.Ticks.ToString ("x");  	webReq.ContentType = "multipart/form-data; boundary=" + boundary;  	webReq.UserAgent = Bot.botVer;  	webReq.CookieContainer = site.cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy (System.Net.Cache.HttpRequestCacheLevel.Refresh);  	StringBuilder sb = new StringBuilder ();  	string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  	sb.Append (paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  	sb.Append (paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  	sb.Append (paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  	sb.Append (paramHead + "wpEditToken\"\r\n\r\n" + tokens ["edittoken"] + "\r\n");  	sb.Append (paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  	sb.Append (paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  	sb.Append (paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  	sb.Append (paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  	sb.Append (paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  	sb.Append (paramHead + "wpUploadFile\"; filename=\"" + Bot.UrlEncode (Path.GetFileName (filePathName)) + "\"\r\n" + "Content-Type: application/octet-stream\r\n\r\n");  	byte[] postHeaderBytes = Encoding.UTF8.GetBytes (sb.ToString ());  	byte[] fileBytes = File.ReadAllBytes (filePathName);  	byte[] boundaryBytes = Encoding.ASCII.GetBytes ("\r\n--" + boundary + "--\r\n");  	webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length + boundaryBytes.Length;  	Stream reqStream = webReq.GetRequestStream ();  	reqStream.Write (postHeaderBytes' 0' postHeaderBytes.Length);  	reqStream.Write (fileBytes' 0' fileBytes.Length);  	reqStream.Write (boundaryBytes' 0' boundaryBytes.Length);  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			UploadImage (filePathName' description' license' copyStatus' source);  			return;  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > site.retryTimes)  				throw;  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)((HttpWebResponse)webResp).StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem  				if (errorCounter > site.retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (res);  	webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  	webReq.UseDefaultCredentials = true;  	webReq.Method = "POST";  	string boundary = DateTime.Now.Ticks.ToString ("x");  	webReq.ContentType = "multipart/form-data; boundary=" + boundary;  	webReq.UserAgent = Bot.botVer;  	webReq.CookieContainer = site.cookies;  	if (Bot.unsafeHttpHeaderParsingUsed == 0) {  		webReq.ProtocolVersion = HttpVersion.Version10;  		webReq.KeepAlive = false;  	}  	webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy (System.Net.Cache.HttpRequestCacheLevel.Refresh);  	StringBuilder sb = new StringBuilder ();  	string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  	sb.Append (paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  	sb.Append (paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  	sb.Append (paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  	sb.Append (paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  	sb.Append (paramHead + "wpEditToken\"\r\n\r\n" + tokens ["edittoken"] + "\r\n");  	sb.Append (paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  	sb.Append (paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  	sb.Append (paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  	sb.Append (paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  	sb.Append (paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  	sb.Append (paramHead + "wpUploadFile\"; filename=\"" + Bot.UrlEncode (Path.GetFileName (filePathName)) + "\"\r\n" + "Content-Type: application/octet-stream\r\n\r\n");  	byte[] postHeaderBytes = Encoding.UTF8.GetBytes (sb.ToString ());  	byte[] fileBytes = File.ReadAllBytes (filePathName);  	byte[] boundaryBytes = Encoding.ASCII.GetBytes ("\r\n--" + boundary + "--\r\n");  	webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length + boundaryBytes.Length;  	Stream reqStream = webReq.GetRequestStream ();  	reqStream.Write (postHeaderBytes' 0' postHeaderBytes.Length);  	reqStream.Write (fileBytes' 0' fileBytes.Length);  	reqStream.Write (boundaryBytes' 0' boundaryBytes.Length);  	try {  		webResp = (HttpWebResponse)webReq.GetResponse ();  		break;  	} catch (WebException e) {  		if (webResp == null)  			throw;  		if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			Bot.SwitchUnsafeHttpHeaderParsing (true);  			UploadImage (filePathName' description' license' copyStatus' source);  			return;  		}  		if (webResp.Headers ["Retry-After"] != null) {  			// Server is very busy  			if (errorCounter > site.retryTimes)  				throw;  			int seconds;  			Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  			if (seconds > 0)  				retryDelaySeconds = seconds;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else if (e.Status == WebExceptionStatus.ProtocolError) {  			int code = (int)((HttpWebResponse)webResp).StatusCode;  			if (code == 500 || code == 502 || code == 503 || code == 504) {  				// Remote server problem  				if (errorCounter > site.retryTimes)  					throw;  				Console.Error.WriteLine (e.Message);  				Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  				Bot.Wait (retryDelaySeconds);  			} else  				throw;  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		UploadImage (filePathName' description' license' copyStatus' source);  		return;  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > site.retryTimes)  			throw;  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)((HttpWebResponse)webResp).StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem  			if (errorCounter > site.retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		UploadImage (filePathName' description' license' copyStatus' source);  		return;  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > site.retryTimes)  			throw;  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)((HttpWebResponse)webResp).StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem  			if (errorCounter > site.retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		UploadImage (filePathName' description' license' copyStatus' source);  		return;  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > site.retryTimes)  			throw;  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)((HttpWebResponse)webResp).StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem  			if (errorCounter > site.retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: try {  	webResp = (HttpWebResponse)webReq.GetResponse ();  	break;  } catch (WebException e) {  	if (webResp == null)  		throw;  	if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		Bot.SwitchUnsafeHttpHeaderParsing (true);  		UploadImage (filePathName' description' license' copyStatus' source);  		return;  	}  	if (webResp.Headers ["Retry-After"] != null) {  		// Server is very busy  		if (errorCounter > site.retryTimes)  			throw;  		int seconds;  		Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  		if (seconds > 0)  			retryDelaySeconds = seconds;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else if (e.Status == WebExceptionStatus.ProtocolError) {  		int code = (int)((HttpWebResponse)webResp).StatusCode;  		if (code == 500 || code == 502 || code == 503 || code == 504) {  			// Remote server problem  			if (errorCounter > site.retryTimes)  				throw;  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  			Bot.Wait (retryDelaySeconds);  		} else  			throw;  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > site.retryTimes)  		throw;  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > site.retryTimes)  		throw;  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > site.retryTimes)  		throw;  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (webResp.Headers ["Retry-After"] != null) {  	// Server is very busy  	if (errorCounter > site.retryTimes)  		throw;  	int seconds;  	Int32.TryParse (webResp.Headers ["Retry-After"]' out seconds);  	if (seconds > 0)  		retryDelaySeconds = seconds;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (e.Status == WebExceptionStatus.ProtocolError) {  	int code = (int)((HttpWebResponse)webResp).StatusCode;  	if (code == 500 || code == 502 || code == 503 || code == 504) {  		// Remote server problem  		if (errorCounter > site.retryTimes)  			throw;  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  		Bot.Wait (retryDelaySeconds);  	} else  		throw;  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem  	if (errorCounter > site.retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem  	if (errorCounter > site.retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem  	if (errorCounter > site.retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (code == 500 || code == 502 || code == 503 || code == 504) {  	// Remote server problem  	if (errorCounter > site.retryTimes)  		throw;  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' retryDelaySeconds));  	Bot.Wait (retryDelaySeconds);  } else  	throw;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: title = site.GetNsPrefix (6) + targetName;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The following statement contains a magic number: site.disambig = site.RemoveNsPrefix (disambigTemplate' 10);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The following statement contains a magic number: try {  	var disambigRedirects = (from link in xdoc2.Descendants ("bl")  	select link.Attribute ("title").Value).ToList ();  	foreach (var disambigRedirect in disambigRedirects)  		site.disambig += '|' + site.RemoveNsPrefix (disambigRedirect' 10);  } catch {  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The following statement contains a magic number: foreach (var disambigRedirect in disambigRedirects)  	site.disambig += '|' + site.RemoveNsPrefix (disambigRedirect' 10);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The following statement contains a magic number: site.disambig += '|' + site.RemoveNsPrefix (disambigRedirect' 10);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for (int i = 0; i < matches.Count; i++) {  	string str = matches [i].Groups ["title"].Value;  	if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  	str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  	str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  		continue;  	str = str.TrimStart (':');  	if (exclLinks.Contains (str))  		continue;  	int fragmentPosition = str.IndexOf ("#");  	if (fragmentPosition == 0)  		// in-page section link  		continue;  	else if (fragmentPosition != -1)  		str = str.Substring (0' fragmentPosition);  	pl.Add (new Page (site' str));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for (int i = 0; i < matches.Count; i++) {  	string str = matches [i].Groups ["title"].Value;  	if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  	str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  	str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  		continue;  	str = str.TrimStart (':');  	if (exclLinks.Contains (str))  		continue;  	int fragmentPosition = str.IndexOf ("#");  	if (fragmentPosition == 0)  		// in-page section link  		continue;  	else if (fragmentPosition != -1)  		str = str.Substring (0' fragmentPosition);  	pl.Add (new Page (site' str));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for (int i = 0; i < matches.Count; i++) {  	string str = matches [i].Groups ["title"].Value;  	if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  	str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  	str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  		continue;  	str = str.TrimStart (':');  	if (exclLinks.Contains (str))  		continue;  	int fragmentPosition = str.IndexOf ("#");  	if (fragmentPosition == 0)  		// in-page section link  		continue;  	else if (fragmentPosition != -1)  		str = str.Substring (0' fragmentPosition);  	pl.Add (new Page (site' str));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for (int i = 0; i < matches.Count; i++) {  	string str = matches [i].Groups ["title"].Value;  	if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  	str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  	str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  		continue;  	str = str.TrimStart (':');  	if (exclLinks.Contains (str))  		continue;  	int fragmentPosition = str.IndexOf ("#");  	if (fragmentPosition == 0)  		// in-page section link  		continue;  	else if (fragmentPosition != -1)  		str = str.Substring (0' fragmentPosition);  	pl.Add (new Page (site' str));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  	continue;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  	continue;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  	continue;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: if (str.StartsWith (site.GetNsPrefix (6)' true' site.langCulture) || // image  str.StartsWith (site.GetEnglishNsPrefix (6)' true' site.langCulture) || str.StartsWith (site.GetNsPrefix (14)' true' site.langCulture) || // category  str.StartsWith (site.GetEnglishNsPrefix (14)' true' site.langCulture))  	continue;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: foreach (Match m in matches) {  	string str = m.Groups [4].Value.Trim ();  	if (withSortKey)  		str += m.Groups [5].Value.Trim ();  	if (withNameSpacePrefix)  		str = site.GetNsPrefix (14) + str;  	matchStrings.Add (str);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: foreach (Match m in matches) {  	string str = m.Groups [4].Value.Trim ();  	if (withSortKey)  		str += m.Groups [5].Value.Trim ();  	if (withNameSpacePrefix)  		str = site.GetNsPrefix (14) + str;  	matchStrings.Add (str);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: foreach (Match m in matches) {  	string str = m.Groups [4].Value.Trim ();  	if (withSortKey)  		str += m.Groups [5].Value.Trim ();  	if (withNameSpacePrefix)  		str = site.GetNsPrefix (14) + str;  	matchStrings.Add (str);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: if (withSortKey)  	str += m.Groups [5].Value.Trim ();  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: str += m.Groups [5].Value.Trim ();  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: if (withNameSpacePrefix)  	str = site.GetNsPrefix (14) + str;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: str = site.GetNsPrefix (14) + str;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetAllCategories,The following statement contains a magic number: for (int i = 0; i < iterator.Count; i++) {  	matchStrings.Add (site.GetNsPrefix (14) + site.RemoveNsPrefix (HttpUtility.HtmlDecode (iterator.Current.Value)' 14));  	iterator.MoveNext ();  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetAllCategories,The following statement contains a magic number: for (int i = 0; i < iterator.Count; i++) {  	matchStrings.Add (site.GetNsPrefix (14) + site.RemoveNsPrefix (HttpUtility.HtmlDecode (iterator.Current.Value)' 14));  	iterator.MoveNext ();  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetAllCategories,The following statement contains a magic number: matchStrings.Add (site.GetNsPrefix (14) + site.RemoveNsPrefix (HttpUtility.HtmlDecode (iterator.Current.Value)' 14));  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetAllCategories,The following statement contains a magic number: matchStrings.Add (site.GetNsPrefix (14) + site.RemoveNsPrefix (HttpUtility.HtmlDecode (iterator.Current.Value)' 14));  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddToCategory,The following statement contains a magic number: categoryName = site.RemoveNsPrefix (categoryName' 14);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddToCategory,The following statement contains a magic number: text += (categories.Count == 0 ? "\n" : "") + "\n[[" + site.GetNsPrefix (14) + categoryName + "]]\n";  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveFromCategory,The following statement contains a magic number: categoryName = site.RemoveNsPrefix (categoryName' 14).Trim ();  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveFromCategory,The following statement contains a magic number: text = Regex.Replace (text' @"\[\[((?i)" + site.GetNsPrefixes (14) + "): ?" + regexCategoryName + @"(\|.*?)?]]\r?\n?"' "");  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: if (GetNamespace () == 10)  	// template  	str = Regex.Replace (str' @"\{\{\{.*?}}}"' // remove template parameters  	match => new string ('_'' match.Value.Length));  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: while ((startPos = str.LastIndexOf ("{{")) != -1) {  	endPos = str.IndexOf ("}}"' startPos);  	len = (endPos != -1) ? endPos - startPos + 2 : 2;  	if (len != 2)  		templPos.Add (startPos' len);  	str = str.Remove (startPos' len);  	str = str.Insert (startPos' new String ('_'' len));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: while ((startPos = str.LastIndexOf ("{{")) != -1) {  	endPos = str.IndexOf ("}}"' startPos);  	len = (endPos != -1) ? endPos - startPos + 2 : 2;  	if (len != 2)  		templPos.Add (startPos' len);  	str = str.Remove (startPos' len);  	str = str.Insert (startPos' new String ('_'' len));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: while ((startPos = str.LastIndexOf ("{{")) != -1) {  	endPos = str.IndexOf ("}}"' startPos);  	len = (endPos != -1) ? endPos - startPos + 2 : 2;  	if (len != 2)  		templPos.Add (startPos' len);  	str = str.Remove (startPos' len);  	str = str.Insert (startPos' new String ('_'' len));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: len = (endPos != -1) ? endPos - startPos + 2 : 2;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: len = (endPos != -1) ? endPos - startPos + 2 : 2;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: if (len != 2)  	templPos.Add (startPos' len);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: foreach (KeyValuePair<int' int> pos in templPos) {  	str = text.Substring (pos.Key + 2' pos.Value - 4).Trim ();  	if (str == "" || str [0] == '#')  		continue;  	if (site.regexes ["magicWordsAndVars"].IsMatch (str))  		continue;  	if (!withParameters) {  		endPos = str.IndexOf ('|');  		if (endPos != -1)  			str = str.Substring (0' endPos);  		if (str == "")  			continue;  	}  	if (!includePages) {  		if (str [0] == ':' || site.regexes ["allNsPrefixes"].IsMatch (str) || str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  			continue;  	} else {  		if (str [0] == ':')  			str = str.Remove (0' 1);  		else if (str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  			str = str.Remove (0' 6);  	}  	templates.Add (str);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: foreach (KeyValuePair<int' int> pos in templPos) {  	str = text.Substring (pos.Key + 2' pos.Value - 4).Trim ();  	if (str == "" || str [0] == '#')  		continue;  	if (site.regexes ["magicWordsAndVars"].IsMatch (str))  		continue;  	if (!withParameters) {  		endPos = str.IndexOf ('|');  		if (endPos != -1)  			str = str.Substring (0' endPos);  		if (str == "")  			continue;  	}  	if (!includePages) {  		if (str [0] == ':' || site.regexes ["allNsPrefixes"].IsMatch (str) || str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  			continue;  	} else {  		if (str [0] == ':')  			str = str.Remove (0' 1);  		else if (str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  			str = str.Remove (0' 6);  	}  	templates.Add (str);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: foreach (KeyValuePair<int' int> pos in templPos) {  	str = text.Substring (pos.Key + 2' pos.Value - 4).Trim ();  	if (str == "" || str [0] == '#')  		continue;  	if (site.regexes ["magicWordsAndVars"].IsMatch (str))  		continue;  	if (!withParameters) {  		endPos = str.IndexOf ('|');  		if (endPos != -1)  			str = str.Substring (0' endPos);  		if (str == "")  			continue;  	}  	if (!includePages) {  		if (str [0] == ':' || site.regexes ["allNsPrefixes"].IsMatch (str) || str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  			continue;  	} else {  		if (str [0] == ':')  			str = str.Remove (0' 1);  		else if (str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  			str = str.Remove (0' 6);  	}  	templates.Add (str);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: str = text.Substring (pos.Key + 2' pos.Value - 4).Trim ();  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: str = text.Substring (pos.Key + 2' pos.Value - 4).Trim ();  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: if (!includePages) {  	if (str [0] == ':' || site.regexes ["allNsPrefixes"].IsMatch (str) || str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  		continue;  } else {  	if (str [0] == ':')  		str = str.Remove (0' 1);  	else if (str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  		str = str.Remove (0' 6);  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: if (str [0] == ':')  	str = str.Remove (0' 1);  else if (str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  	str = str.Remove (0' 6);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: if (str.StartsWith ("msgnw:") || str.StartsWith ("MSGNW:"))  	str = str.Remove (0' 6);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: str = str.Remove (0' 6);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddTemplate,The following statement contains a magic number: if (templateInsertion.IsMatch (text))  	text = templateInsertion.Replace (text' "$1\n" + templateText + "\n\n[[" + site.GetNsPrefix (14)' 1);  else {  	text += "\n\n" + templateText;  	text = text.TrimEnd ("\r\n".ToCharArray ());  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddTemplate,The following statement contains a magic number: text = templateInsertion.Replace (text' "$1\n" + templateText + "\n\n[[" + site.GetNsPrefix (14)' 1);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: foreach (string template in GetTemplates (true' false)) {  	if (templateTitleRegex.IsMatch (template)) {  		parameters = Page.ParseTemplate (template);  		string newTemplate;  		if (newParameterValue != null)  			parameters [templateParameter] = newParameterValue;  		else  			parameters.Remove (templateParameter);  		newTemplate = Page.FormatTemplate (templateTitle' parameters' template);  		Regex oldTemplate = new Regex (Regex.Escape (template));  		newTemplate = newTemplate.Substring (2' newTemplate.Length - 4);  		newTemplate = newTemplate.TrimEnd ("\n".ToCharArray ());  		text = oldTemplate.Replace (text' newTemplate' 1);  		i++;  		if (firstTemplateOnly == true)  			break;  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: foreach (string template in GetTemplates (true' false)) {  	if (templateTitleRegex.IsMatch (template)) {  		parameters = Page.ParseTemplate (template);  		string newTemplate;  		if (newParameterValue != null)  			parameters [templateParameter] = newParameterValue;  		else  			parameters.Remove (templateParameter);  		newTemplate = Page.FormatTemplate (templateTitle' parameters' template);  		Regex oldTemplate = new Regex (Regex.Escape (template));  		newTemplate = newTemplate.Substring (2' newTemplate.Length - 4);  		newTemplate = newTemplate.TrimEnd ("\n".ToCharArray ());  		text = oldTemplate.Replace (text' newTemplate' 1);  		i++;  		if (firstTemplateOnly == true)  			break;  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: if (templateTitleRegex.IsMatch (template)) {  	parameters = Page.ParseTemplate (template);  	string newTemplate;  	if (newParameterValue != null)  		parameters [templateParameter] = newParameterValue;  	else  		parameters.Remove (templateParameter);  	newTemplate = Page.FormatTemplate (templateTitle' parameters' template);  	Regex oldTemplate = new Regex (Regex.Escape (template));  	newTemplate = newTemplate.Substring (2' newTemplate.Length - 4);  	newTemplate = newTemplate.TrimEnd ("\n".ToCharArray ());  	text = oldTemplate.Replace (text' newTemplate' 1);  	i++;  	if (firstTemplateOnly == true)  		break;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: if (templateTitleRegex.IsMatch (template)) {  	parameters = Page.ParseTemplate (template);  	string newTemplate;  	if (newParameterValue != null)  		parameters [templateParameter] = newParameterValue;  	else  		parameters.Remove (templateParameter);  	newTemplate = Page.FormatTemplate (templateTitle' parameters' template);  	Regex oldTemplate = new Regex (Regex.Escape (template));  	newTemplate = newTemplate.Substring (2' newTemplate.Length - 4);  	newTemplate = newTemplate.TrimEnd ("\n".ToCharArray ());  	text = oldTemplate.Replace (text' newTemplate' 1);  	i++;  	if (firstTemplateOnly == true)  		break;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: newTemplate = newTemplate.Substring (2' newTemplate.Length - 4);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: newTemplate = newTemplate.Substring (2' newTemplate.Length - 4);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: if (template.StartsWith ("{{"))  	template = template.Substring (2' template.Length - 4);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: if (template.StartsWith ("{{"))  	template = template.Substring (2' template.Length - 4);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: template = template.Substring (2' template.Length - 4);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: template = template.Substring (2' template.Length - 4);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf ("{{")) != -1) {  	endPos = str.IndexOf ("}}"' startPos);  	len = (endPos != -1) ? endPos - startPos + 2 : 2;  	str = str.Remove (startPos' len);  	str = str.Insert (startPos' new String ('_'' len));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf ("{{")) != -1) {  	endPos = str.IndexOf ("}}"' startPos);  	len = (endPos != -1) ? endPos - startPos + 2 : 2;  	str = str.Remove (startPos' len);  	str = str.Insert (startPos' new String ('_'' len));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: len = (endPos != -1) ? endPos - startPos + 2 : 2;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: len = (endPos != -1) ? endPos - startPos + 2 : 2;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf ("[[")) != -1) {  	endPos = str.IndexOf ("]]"' startPos);  	len = (endPos != -1) ? endPos - startPos + 2 : 2;  	str = str.Remove (startPos' len);  	str = str.Insert (startPos' new String ('_'' len));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf ("[[")) != -1) {  	endPos = str.IndexOf ("]]"' startPos);  	len = (endPos != -1) ? endPos - startPos + 2 : 2;  	str = str.Remove (startPos' len);  	str = str.Insert (startPos' new String ('_'' len));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: len = (endPos != -1) ? endPos - startPos + 2 : 2;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: len = (endPos != -1) ? endPos - startPos + 2 : 2;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,The following statement contains a magic number: foreach (KeyValuePair<string' string> kvp in templateParams) {  	template += paramBreak;  	if (padding <= 0) {  		if (kvp.Key == i.ToString ())  			template += kvp.Value;  		else  			template += kvp.Key + equalsSign + kvp.Value;  	} else {  		if (kvp.Key == i.ToString ())  			template += kvp.Value.PadRight (padding + 3);  		else  			template += kvp.Key.PadRight (padding) + equalsSign + kvp.Value;  	}  	i++;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,The following statement contains a magic number: if (padding <= 0) {  	if (kvp.Key == i.ToString ())  		template += kvp.Value;  	else  		template += kvp.Key + equalsSign + kvp.Value;  } else {  	if (kvp.Key == i.ToString ())  		template += kvp.Value.PadRight (padding + 3);  	else  		template += kvp.Key.PadRight (padding) + equalsSign + kvp.Value;  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,The following statement contains a magic number: if (kvp.Key == i.ToString ())  	template += kvp.Value.PadRight (padding + 3);  else  	template += kvp.Key.PadRight (padding) + equalsSign + kvp.Value;  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,The following statement contains a magic number: template += kvp.Value.PadRight (padding + 3);  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: foreach (Match m in matches) {  	matchStrings.Add (site.GetNsPrefix (6) + m.Groups ["filename"].Value.Trim ());  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: matchStrings.Add (site.GetNsPrefix (6) + m.Groups ["filename"].Value.Trim ());  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: if (Regex.IsMatch (text' "(?i)<gallery>")) {  	matches = Regex.Matches (text' @"^\s*((?i)" + nsPrefixes + "):(?<filename>[^|\\]\r?\n]+)");  	foreach (Match m in matches) {  		matchStrings.Add (site.GetNsPrefix (6) + m.Groups ["filename"].Value.Trim ());  	}  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: foreach (Match m in matches) {  	matchStrings.Add (site.GetNsPrefix (6) + m.Groups ["filename"].Value.Trim ());  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: matchStrings.Add (site.GetNsPrefix (6) + m.Groups ["filename"].Value.Trim ());  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RenameTo,The following statement contains a magic number: if (site.useApi) {  	string token = "";  	if (site.tokens != null && site.tokens.ContainsKey ("csrftoken"))  		token = site.tokens ["csrftoken"];  	else {  		var tokens = GetSecurityTokens ("move");  		if (tokens.ContainsKey ("missing"))  			throw new WikiBotException (string.Format (Bot.Msg ("Page \"{0}\" doesn't exist.")' title));  		if (!tokens.ContainsKey ("movetoken") || tokens ["movetoken"] == "")  			throw new WikiBotException (string.Format (Bot.Msg ("Unable to rename page \"{0}\" to \"{1}\".")' title' newTitle));  		token = tokens ["movetoken"];  	}  	string postData = string.Format ("from={0}&to={1}&reason={2}{3}{4}&token={5}"' Bot.UrlEncode (title)' Bot.UrlEncode (newTitle)' Bot.UrlEncode (reason)' renameTalkPage ? "&movetalk=1" : ""' renameSubPages ? "&movesubpages=1" : ""' Bot.UrlEncode (token));  	string respStr = site.PostDataAndGetResult (site.apiPath + "?action=move" + "&format=xml"' postData);  	if (respStr.Contains ("<error"))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to rename page \"{0}\" to \"{1}\".")' title' newTitle));  } else {  	string respStr = site.GetWebPage (site.indexPath + "?title=Special:Movepage/" + Bot.UrlEncode (title));  	Match m = site.regexes ["editToken"].Match (respStr);  	string securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	if (string.IsNullOrEmpty (securityToken)) {  		Console.Error.WriteLine (Bot.Msg ("Unable to rename page \"{0}\" to \"{1}\".")' title' newTitle);  		return;  	}  	if (site.watchList == null) {  		site.watchList = new PageList (site);  		site.watchList.FillFromWatchList ();  	}  	watched = site.watchList.Contains (this);  	string postData = string.Format ("wpNewTitle={0}&wpOldTitle={1}&wpEditToken={2}" + "&wpReason={3}{4}{5}{6}"' Bot.UrlEncode (newTitle)' Bot.UrlEncode (title)' Bot.UrlEncode (securityToken)' Bot.UrlEncode (reason)' renameTalkPage ? "&wpMovetalk=1" : ""' renameSubPages ? "&wpMovesubpages=1" : ""' watched ? "&wpWatch=1" : "");  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=Special:Movepage&action=submit"' postData);  	if (site.messages == null)  		site.LoadMediawikiMessages (true);  	Regex successMsg = new Regex ("<h1[^>]*>(<span[^>]*>)?\\s*" + site.messages ["pagemovedsub"] + "\\s*<");  	if (!successMsg.IsMatch (respStr))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to rename page \"{0}\" to \"{1}\".")' title' newTitle));  }  
Magic Number,DotNetWikiBot,Page,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Delete,The following statement contains a magic number: if (site.useApi) {  	string token = "";  	if (site.tokens != null && site.tokens.ContainsKey ("csrftoken"))  		token = site.tokens ["csrftoken"];  	else {  		var tokens = GetSecurityTokens ("delete");  		if (tokens.ContainsKey ("missing"))  			throw new WikiBotException (string.Format (Bot.Msg ("Page \"{0}\" doesn't exist.")' title));  		if (!tokens.ContainsKey ("deletetoken") || tokens ["deletetoken"] == "")  			throw new WikiBotException (string.Format (Bot.Msg ("Unable to delete page \"{0}\".")' title));  		token = tokens ["deletetoken"];  	}  	string postData = string.Format ("reason={0}&token={1}"' Bot.UrlEncode (reason)' Bot.UrlEncode (token));  	string respStr = site.PostDataAndGetResult (site.apiPath + "?action=delete" + "&title=" + Bot.UrlEncode (title) + "&format=xml"' postData);  	if (respStr.Contains ("<error"))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to delete page \"{0}\".")' title));  } else {  	string respStr = site.GetWebPage (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=delete");  	Match m = site.regexes ["editToken"].Match (respStr);  	string securityToken = string.IsNullOrEmpty (m.Groups [1].Value) ? m.Groups [2].Value : m.Groups [1].Value;  	if (string.IsNullOrEmpty (securityToken)) {  		Console.Error.WriteLine (Bot.Msg ("Unable to delete page \"{0}\".")' title);  		return;  	}  	string postData = string.Format ("wpReason={0}&wpEditToken={1}"' Bot.UrlEncode (reason)' Bot.UrlEncode (securityToken));  	respStr = site.PostDataAndGetResult (site.indexPath + "?title=" + Bot.UrlEncode (title) + "&action=delete"' postData);  	if (site.messages == null)  		site.LoadMediawikiMessages (true);  	Regex successMsg = new Regex ("<h1[^>]*>(<span[^>]*>)?\\s*" + site.messages ["actioncomplete"] + "\\s*<");  	if (!successMsg.IsMatch (respStr))  		throw new WikiBotException (string.Format (Bot.Msg ("Failed to delete page \"{0}\".")' title));  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The following statement contains a magic number: if (site.useApi) {  	FillFromCustomApiQuery ("list=allpages"' "apnamespace=" + neededNSpace + (acceptRedirects ? "" : "&apfilterredir=nonredirects") + (string.IsNullOrEmpty (firstPageTitle) ? "" : "&apfrom=" + Bot.UrlEncode (firstPageTitle)) + (string.IsNullOrEmpty (lastPageTitle) ? "" : "&apto=" + Bot.UrlEncode (lastPageTitle))' limit);  } else {  	Console.WriteLine (Bot.Msg ("Getting {0} page titles from \"Special:Allpages\" MediaWiki page...")' limit);  	int count = pages.Count;  	limit += pages.Count;  	Regex linkToPageRegex;  	if (acceptRedirects)  		linkToPageRegex = new Regex ("<td[^>]*>(?:<div class=\"allpagesredirect\">)?" + "<a href=\"[^\"]*?\" (?:class=\"mw-redirect\" )?title=\"([^\"]*?)\">");  	else  		linkToPageRegex = new Regex ("<td[^>]*><a href=\"[^\"]*?\" title=\"([^\"]*?)\">");  	MatchCollection matches;  	do {  		string res = site.indexPath + "?title=Special:Allpages" + "&from=" + Bot.UrlEncode (string.IsNullOrEmpty (firstPageTitle) ? "!" : firstPageTitle) + Bot.UrlEncode (string.IsNullOrEmpty (lastPageTitle) ? "" : ("&to=" + lastPageTitle)) + "&namespace=" + neededNSpace.ToString ();  		matches = linkToPageRegex.Matches (site.GetWebPage (res));  		if (matches.Count < 2)  			break;  		for (int i = 1; i < matches.Count; i++)  			pages.Add (new Page (site' HttpUtility.HtmlDecode (matches [i].Groups [1].Value)));  		firstPageTitle = site.RemoveNsPrefix (pages [pages.Count - 1].title' neededNSpace) + "!";  	} while (pages.Count < limit);  	if (pages.Count > limit)  		pages.RemoveRange (limit' pages.Count - limit);  	Console.WriteLine (Bot.Msg ("PageList has been filled with {0} page titles from " + "\"Special:Allpages\" MediaWiki page.")' (pages.Count - count).ToString ());  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The following statement contains a magic number: do {  	string res = site.indexPath + "?title=Special:Allpages" + "&from=" + Bot.UrlEncode (string.IsNullOrEmpty (firstPageTitle) ? "!" : firstPageTitle) + Bot.UrlEncode (string.IsNullOrEmpty (lastPageTitle) ? "" : ("&to=" + lastPageTitle)) + "&namespace=" + neededNSpace.ToString ();  	matches = linkToPageRegex.Matches (site.GetWebPage (res));  	if (matches.Count < 2)  		break;  	for (int i = 1; i < matches.Count; i++)  		pages.Add (new Page (site' HttpUtility.HtmlDecode (matches [i].Groups [1].Value)));  	firstPageTitle = site.RemoveNsPrefix (pages [pages.Count - 1].title' neededNSpace) + "!";  } while (pages.Count < limit);  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The following statement contains a magic number: if (matches.Count < 2)  	break;  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCategory,The following statement contains a magic number: pl.RemoveNamespaces (new int[] {  	14  });  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The following statement contains a magic number: categoryName = site.RemoveNsPrefix (categoryName' 14);  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The following statement contains a magic number: categoryName = site.GetNsPrefix (14) + categoryName;  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The following statement contains a magic number: if (site.useApi) {  	FillFromCustomApiQuery ("list=categorymembers"' "cmtitle=" + Bot.UrlEncode (categoryName)' int.MaxValue);  } else {  	// TO DO: paging  	string src = "";  	MatchCollection matches;  	Regex nextPortionRegex = new Regex ("&(?:amp;)?from=([^\"=]+)\" title=\"");  	do {  		string res = site.indexPath + "?title=" + Bot.UrlEncode (categoryName) + "&from=" + nextPortionRegex.Match (src).Groups [1].Value;  		src = site.GetWebPage (res);  		src = Bot.GetSubstring (src' " id=\"mw-subcategories\""' " id=\"mw-normal-catlinks\"");  		string relativeIndexPath = site.indexPath.Substring (site.indexPath.IndexOf ('/'' 10));  		Regex linkRegex = new Regex (" href=\"(?:" + (!string.IsNullOrEmpty (site.shortPath) ? Regex.Escape (site.shortPath) + "|" : "") + Regex.Escape (relativeIndexPath) + "\\?title=)" + "(?<title>[^\"]+)");  		matches = linkRegex.Matches (src);  		foreach (Match match in matches)  			pages.Add (new Page (site' HttpUtility.UrlDecode (match.Groups ["title"].Value)));  	} while (nextPortionRegex.IsMatch (src));  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The following statement contains a magic number: do {  	string res = site.indexPath + "?title=" + Bot.UrlEncode (categoryName) + "&from=" + nextPortionRegex.Match (src).Groups [1].Value;  	src = site.GetWebPage (res);  	src = Bot.GetSubstring (src' " id=\"mw-subcategories\""' " id=\"mw-normal-catlinks\"");  	string relativeIndexPath = site.indexPath.Substring (site.indexPath.IndexOf ('/'' 10));  	Regex linkRegex = new Regex (" href=\"(?:" + (!string.IsNullOrEmpty (site.shortPath) ? Regex.Escape (site.shortPath) + "|" : "") + Regex.Escape (relativeIndexPath) + "\\?title=)" + "(?<title>[^\"]+)");  	matches = linkRegex.Matches (src);  	foreach (Match match in matches)  		pages.Add (new Page (site' HttpUtility.UrlDecode (match.Groups ["title"].Value)));  } while (nextPortionRegex.IsMatch (src));  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCategoryTree,The following statement contains a magic number: RemoveNamespaces (new int[] {  	14  });  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategoryTree,The following statement contains a magic number: for (int i = 0; i < Count (); i++)  	if (pages [i].GetNamespace () == 14 && !doneCats.Contains (pages [i].title)) {  		FillAllFromCategory (pages [i].title);  		doneCats.Add (pages [i].title);  	}  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategoryTree,The following statement contains a magic number: if (pages [i].GetNamespace () == 14 && !doneCats.Contains (pages [i].title)) {  	FillAllFromCategory (pages [i].title);  	doneCats.Add (pages [i].title);  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (site.useApi) {  	string queryUri = site.apiPath + "?action=query&prop=revisions&titles=" + Bot.UrlEncode (pageTitle) + "&rvprop=ids|user|comment|timestamp" + "&format=xml&rvlimit=" + limit.ToString ();  	string src = site.GetWebPage (queryUri);  	Page p;  	using (XmlReader reader = XmlReader.Create (new StringReader (src))) {  		reader.ReadToFollowing ("api");  		reader.Read ();  		if (reader.Name == "error")  			Console.Error.WriteLine (Bot.Msg ("Error: {0}")' reader.GetAttribute ("info"));  		while (reader.ReadToFollowing ("rev")) {  			p = new Page (site' pageTitle);  			p.revision = reader.GetAttribute ("revid");  			p.lastUser = reader.GetAttribute ("user");  			p.comment = reader.GetAttribute ("comment");  			p.timestamp = DateTime.Parse (reader.GetAttribute ("timestamp")).ToUniversalTime ();  			pages.Add (p);  		}  	}  } else {  	// TO DO: paging  	string res = site.indexPath + "?title=" + Bot.UrlEncode (pageTitle) + "&limit=" + limit.ToString () + "&action=history";  	string src = site.GetWebPage (res);  	src = src.Substring (src.IndexOf ("<ul id=\"pagehistory\">"));  	src = src.Substring (0' src.IndexOf ("</ul>") + 5);  	Page p = null;  	using (XmlReader reader = Bot.GetXMLReader (src)) {  		while (reader.Read ()) {  			if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  				p = new Page (site' pageTitle);  				p.lastMinorEdit = false;  				p.comment = "";  			} else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  				reader.ReadToFollowing ("a");  				p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  				DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  			} else if (reader.Name == "span" && reader ["class"] == "history-user") {  				reader.ReadToFollowing ("a");  				p.lastUser = reader.ReadString ();  			} else if (reader.Name == "abbr")  				p.lastMinorEdit = true;  			else if (reader.Name == "span" && reader ["class"] == "history-size")  				int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  			else if (reader.Name == "span" && reader ["class"] == "comment") {  				p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  				p.comment = p.comment.Substring (1' p.comment.Length - 2);  				// brackets  			}  			if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  				pages.Add (p);  		}  	}  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (site.useApi) {  	string queryUri = site.apiPath + "?action=query&prop=revisions&titles=" + Bot.UrlEncode (pageTitle) + "&rvprop=ids|user|comment|timestamp" + "&format=xml&rvlimit=" + limit.ToString ();  	string src = site.GetWebPage (queryUri);  	Page p;  	using (XmlReader reader = XmlReader.Create (new StringReader (src))) {  		reader.ReadToFollowing ("api");  		reader.Read ();  		if (reader.Name == "error")  			Console.Error.WriteLine (Bot.Msg ("Error: {0}")' reader.GetAttribute ("info"));  		while (reader.ReadToFollowing ("rev")) {  			p = new Page (site' pageTitle);  			p.revision = reader.GetAttribute ("revid");  			p.lastUser = reader.GetAttribute ("user");  			p.comment = reader.GetAttribute ("comment");  			p.timestamp = DateTime.Parse (reader.GetAttribute ("timestamp")).ToUniversalTime ();  			pages.Add (p);  		}  	}  } else {  	// TO DO: paging  	string res = site.indexPath + "?title=" + Bot.UrlEncode (pageTitle) + "&limit=" + limit.ToString () + "&action=history";  	string src = site.GetWebPage (res);  	src = src.Substring (src.IndexOf ("<ul id=\"pagehistory\">"));  	src = src.Substring (0' src.IndexOf ("</ul>") + 5);  	Page p = null;  	using (XmlReader reader = Bot.GetXMLReader (src)) {  		while (reader.Read ()) {  			if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  				p = new Page (site' pageTitle);  				p.lastMinorEdit = false;  				p.comment = "";  			} else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  				reader.ReadToFollowing ("a");  				p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  				DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  			} else if (reader.Name == "span" && reader ["class"] == "history-user") {  				reader.ReadToFollowing ("a");  				p.lastUser = reader.ReadString ();  			} else if (reader.Name == "abbr")  				p.lastMinorEdit = true;  			else if (reader.Name == "span" && reader ["class"] == "history-size")  				int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  			else if (reader.Name == "span" && reader ["class"] == "comment") {  				p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  				p.comment = p.comment.Substring (1' p.comment.Length - 2);  				// brackets  			}  			if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  				pages.Add (p);  		}  	}  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (site.useApi) {  	string queryUri = site.apiPath + "?action=query&prop=revisions&titles=" + Bot.UrlEncode (pageTitle) + "&rvprop=ids|user|comment|timestamp" + "&format=xml&rvlimit=" + limit.ToString ();  	string src = site.GetWebPage (queryUri);  	Page p;  	using (XmlReader reader = XmlReader.Create (new StringReader (src))) {  		reader.ReadToFollowing ("api");  		reader.Read ();  		if (reader.Name == "error")  			Console.Error.WriteLine (Bot.Msg ("Error: {0}")' reader.GetAttribute ("info"));  		while (reader.ReadToFollowing ("rev")) {  			p = new Page (site' pageTitle);  			p.revision = reader.GetAttribute ("revid");  			p.lastUser = reader.GetAttribute ("user");  			p.comment = reader.GetAttribute ("comment");  			p.timestamp = DateTime.Parse (reader.GetAttribute ("timestamp")).ToUniversalTime ();  			pages.Add (p);  		}  	}  } else {  	// TO DO: paging  	string res = site.indexPath + "?title=" + Bot.UrlEncode (pageTitle) + "&limit=" + limit.ToString () + "&action=history";  	string src = site.GetWebPage (res);  	src = src.Substring (src.IndexOf ("<ul id=\"pagehistory\">"));  	src = src.Substring (0' src.IndexOf ("</ul>") + 5);  	Page p = null;  	using (XmlReader reader = Bot.GetXMLReader (src)) {  		while (reader.Read ()) {  			if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  				p = new Page (site' pageTitle);  				p.lastMinorEdit = false;  				p.comment = "";  			} else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  				reader.ReadToFollowing ("a");  				p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  				DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  			} else if (reader.Name == "span" && reader ["class"] == "history-user") {  				reader.ReadToFollowing ("a");  				p.lastUser = reader.ReadString ();  			} else if (reader.Name == "abbr")  				p.lastMinorEdit = true;  			else if (reader.Name == "span" && reader ["class"] == "history-size")  				int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  			else if (reader.Name == "span" && reader ["class"] == "comment") {  				p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  				p.comment = p.comment.Substring (1' p.comment.Length - 2);  				// brackets  			}  			if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  				pages.Add (p);  		}  	}  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: src = src.Substring (0' src.IndexOf ("</ul>") + 5);  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: using (XmlReader reader = Bot.GetXMLReader (src)) {  	while (reader.Read ()) {  		if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  			p = new Page (site' pageTitle);  			p.lastMinorEdit = false;  			p.comment = "";  		} else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  			reader.ReadToFollowing ("a");  			p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  			DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  		} else if (reader.Name == "span" && reader ["class"] == "history-user") {  			reader.ReadToFollowing ("a");  			p.lastUser = reader.ReadString ();  		} else if (reader.Name == "abbr")  			p.lastMinorEdit = true;  		else if (reader.Name == "span" && reader ["class"] == "history-size")  			int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  		else if (reader.Name == "span" && reader ["class"] == "comment") {  			p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  			p.comment = p.comment.Substring (1' p.comment.Length - 2);  			// brackets  		}  		if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  			pages.Add (p);  	}  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: using (XmlReader reader = Bot.GetXMLReader (src)) {  	while (reader.Read ()) {  		if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  			p = new Page (site' pageTitle);  			p.lastMinorEdit = false;  			p.comment = "";  		} else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  			reader.ReadToFollowing ("a");  			p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  			DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  		} else if (reader.Name == "span" && reader ["class"] == "history-user") {  			reader.ReadToFollowing ("a");  			p.lastUser = reader.ReadString ();  		} else if (reader.Name == "abbr")  			p.lastMinorEdit = true;  		else if (reader.Name == "span" && reader ["class"] == "history-size")  			int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  		else if (reader.Name == "span" && reader ["class"] == "comment") {  			p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  			p.comment = p.comment.Substring (1' p.comment.Length - 2);  			// brackets  		}  		if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  			pages.Add (p);  	}  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  		p = new Page (site' pageTitle);  		p.lastMinorEdit = false;  		p.comment = "";  	} else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  		reader.ReadToFollowing ("a");  		p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  		DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  	} else if (reader.Name == "span" && reader ["class"] == "history-user") {  		reader.ReadToFollowing ("a");  		p.lastUser = reader.ReadString ();  	} else if (reader.Name == "abbr")  		p.lastMinorEdit = true;  	else if (reader.Name == "span" && reader ["class"] == "history-size")  		int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  	else if (reader.Name == "span" && reader ["class"] == "comment") {  		p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  		p.comment = p.comment.Substring (1' p.comment.Length - 2);  		// brackets  	}  	if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  		pages.Add (p);  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  		p = new Page (site' pageTitle);  		p.lastMinorEdit = false;  		p.comment = "";  	} else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  		reader.ReadToFollowing ("a");  		p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  		DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  	} else if (reader.Name == "span" && reader ["class"] == "history-user") {  		reader.ReadToFollowing ("a");  		p.lastUser = reader.ReadString ();  	} else if (reader.Name == "abbr")  		p.lastMinorEdit = true;  	else if (reader.Name == "span" && reader ["class"] == "history-size")  		int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  	else if (reader.Name == "span" && reader ["class"] == "comment") {  		p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  		p.comment = p.comment.Substring (1' p.comment.Length - 2);  		// brackets  	}  	if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  		pages.Add (p);  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  	p = new Page (site' pageTitle);  	p.lastMinorEdit = false;  	p.comment = "";  } else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  	reader.ReadToFollowing ("a");  	p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  	DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  } else if (reader.Name == "span" && reader ["class"] == "history-user") {  	reader.ReadToFollowing ("a");  	p.lastUser = reader.ReadString ();  } else if (reader.Name == "abbr")  	p.lastMinorEdit = true;  else if (reader.Name == "span" && reader ["class"] == "history-size")  	int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  else if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  	p = new Page (site' pageTitle);  	p.lastMinorEdit = false;  	p.comment = "";  } else if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  	reader.ReadToFollowing ("a");  	p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  	DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  } else if (reader.Name == "span" && reader ["class"] == "history-user") {  	reader.ReadToFollowing ("a");  	p.lastUser = reader.ReadString ();  } else if (reader.Name == "abbr")  	p.lastMinorEdit = true;  else if (reader.Name == "span" && reader ["class"] == "history-size")  	int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  else if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  	reader.ReadToFollowing ("a");  	p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  	DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  } else if (reader.Name == "span" && reader ["class"] == "history-user") {  	reader.ReadToFollowing ("a");  	p.lastUser = reader.ReadString ();  } else if (reader.Name == "abbr")  	p.lastMinorEdit = true;  else if (reader.Name == "span" && reader ["class"] == "history-size")  	int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  else if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "span" && reader ["class"] == "mw-history-histlinks") {  	reader.ReadToFollowing ("a");  	p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  	DateTime.TryParse (reader.ReadString ()' site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  } else if (reader.Name == "span" && reader ["class"] == "history-user") {  	reader.ReadToFollowing ("a");  	p.lastUser = reader.ReadString ();  } else if (reader.Name == "abbr")  	p.lastMinorEdit = true;  else if (reader.Name == "span" && reader ["class"] == "history-size")  	int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  else if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: p.revision = reader ["href"].Substring (reader ["href"].IndexOf ("oldid=") + 6);  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "span" && reader ["class"] == "history-user") {  	reader.ReadToFollowing ("a");  	p.lastUser = reader.ReadString ();  } else if (reader.Name == "abbr")  	p.lastMinorEdit = true;  else if (reader.Name == "span" && reader ["class"] == "history-size")  	int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  else if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "abbr")  	p.lastMinorEdit = true;  else if (reader.Name == "span" && reader ["class"] == "history-size")  	int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  else if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "span" && reader ["class"] == "history-size")  	int.TryParse (Regex.Replace (reader.ReadString ()' @"[^-+\d]"' "")' out p.lastBytesModified);  else if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (reader.Name == "span" && reader ["class"] == "comment") {  	p.comment = Regex.Replace (reader.ReadInnerXml ().Trim ()' "<.+?>"' "");  	p.comment = p.comment.Substring (1' p.comment.Length - 2);  	// brackets  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: p.comment = p.comment.Substring (1' p.comment.Length - 2);  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The following statement contains a magic number: imageFileTitle = site.RemoveNsPrefix (imageFileTitle' 6);  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The following statement contains a magic number: if (site.useApi) {  	FillFromCustomApiQuery ("list=imageusage"' "iutitle=" + Bot.UrlEncode (site.GetNsPrefix (6)) + Bot.UrlEncode (imageFileTitle)' int.MaxValue);  } else {  	// TO DO: paging  	string res = site.indexPath + "?title=" + Bot.UrlEncode (site.GetNsPrefix (6)) + Bot.UrlEncode (imageFileTitle);  	string src = site.GetWebPage (res);  	try {  		src = Bot.GetSubstring (src' "<h2 id=\"filelinks\""' "<h2 id=\"globalusage\"");  	} catch (ArgumentOutOfRangeException) {  		Console.Error.WriteLine (Bot.Msg ("No page contains the image \"{0}\".")' imageFileTitle);  		return;  	}  	MatchCollection matches = site.regexes ["titleLink"].Matches (src);  	foreach (Match match in matches)  		pages.Add (new Page (site' HttpUtility.HtmlDecode (match.Groups ["title"].Value)));  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The following statement contains a magic number: if (site.useApi) {  	FillFromCustomApiQuery ("list=imageusage"' "iutitle=" + Bot.UrlEncode (site.GetNsPrefix (6)) + Bot.UrlEncode (imageFileTitle)' int.MaxValue);  } else {  	// TO DO: paging  	string res = site.indexPath + "?title=" + Bot.UrlEncode (site.GetNsPrefix (6)) + Bot.UrlEncode (imageFileTitle);  	string src = site.GetWebPage (res);  	try {  		src = Bot.GetSubstring (src' "<h2 id=\"filelinks\""' "<h2 id=\"globalusage\"");  	} catch (ArgumentOutOfRangeException) {  		Console.Error.WriteLine (Bot.Msg ("No page contains the image \"{0}\".")' imageFileTitle);  		return;  	}  	MatchCollection matches = site.regexes ["titleLink"].Matches (src);  	foreach (Match match in matches)  		pages.Add (new Page (site' HttpUtility.HtmlDecode (match.Groups ["title"].Value)));  }  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The following statement contains a magic number: FillFromCustomApiQuery ("list=imageusage"' "iutitle=" + Bot.UrlEncode (site.GetNsPrefix (6)) + Bot.UrlEncode (imageFileTitle)' int.MaxValue);  
Magic Number,DotNetWikiBot,PageList,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SaveSmoothly,The following statement contains a magic number: SaveSmoothly (site.forceSaveDelay > 0 ? site.forceSaveDelay : 5' site.defaultEditComment' site.minorEditByDefault);  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The following statement contains a magic number: try {  	string verInfo = GetWebResource (new Uri ("http://dotnetwikibot.sourceforge.net/info.php")' "");  	Match currentVer = Regex.Match (verInfo' "(?i)stable version: (([^ ]+)[^<]+)");  	if (new Version (currentVer.Groups [2].Value) > version)  		Console.WriteLine ("*** " + Msg ("New version is available") + ": " + currentVer.Groups [1].Value + " ***\n");  } catch (Exception) {  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The following statement contains a magic number: if (new Version (currentVer.Groups [2].Value) > version)  	Console.WriteLine ("*** " + Msg ("New version is available") + ": " + currentVer.Groups [1].Value + " ***\n");  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The following statement contains a magic number: if (text.StartsWith ("<?xml ")) {  	cursor += text.IndexOf ("?>"' cursor) + 2;  	while (cursor < text.Length && (text [cursor] == ' ' || text [cursor] == '\n' || text [cursor] == '\r' || text [cursor] == '\t'))  		cursor++;  	// skip whitespaces  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The following statement contains a magic number: cursor += text.IndexOf ("?>"' cursor) + 2;  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The following statement contains a magic number: if (text.StartsWith ("<!--"))  	// comment  	cursor += text.IndexOf ("-->"' cursor) + 3;  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The following statement contains a magic number: cursor += text.IndexOf ("-->"' cursor) + 3;  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Wait,The following statement contains a magic number: Thread.Sleep (seconds * 1000);  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SwitchUnsafeHttpHeaderParsing,The following statement contains a magic number: if (unsafeHttpHeaderParsingUsed == 2)  	unsafeHttpHeaderParsingUsed = section.HttpWebRequest.UseUnsafeHeaderParsing ? 1 : 0;  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	try {  		Bot.InitWebClient ();  		if (string.IsNullOrEmpty (postData))  			webResourceText = Bot.webClient.DownloadString (address);  		else  			webResourceText = Bot.webClient.UploadString (address' postData);  		break;  	} catch (WebException e) {  		if (errorCounter > 3)  			// retry 3 times by default  			throw;  		if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  			// Remote server problem' retry  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  			Bot.Wait (60);  		} else if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			SwitchUnsafeHttpHeaderParsing (true);  			return GetWebResource (address' postData);  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	try {  		Bot.InitWebClient ();  		if (string.IsNullOrEmpty (postData))  			webResourceText = Bot.webClient.DownloadString (address);  		else  			webResourceText = Bot.webClient.UploadString (address' postData);  		break;  	} catch (WebException e) {  		if (errorCounter > 3)  			// retry 3 times by default  			throw;  		if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  			// Remote server problem' retry  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  			Bot.Wait (60);  		} else if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			SwitchUnsafeHttpHeaderParsing (true);  			return GetWebResource (address' postData);  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  	try {  		Bot.InitWebClient ();  		if (string.IsNullOrEmpty (postData))  			webResourceText = Bot.webClient.DownloadString (address);  		else  			webResourceText = Bot.webClient.UploadString (address' postData);  		break;  	} catch (WebException e) {  		if (errorCounter > 3)  			// retry 3 times by default  			throw;  		if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  			// Remote server problem' retry  			Console.Error.WriteLine (e.Message);  			Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  			Bot.Wait (60);  		} else if (e.Message.Contains ("Section=ResponseStatusLine")) {  			// Known Squid problem  			SwitchUnsafeHttpHeaderParsing (true);  			return GetWebResource (address' postData);  		} else  			throw;  	}  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: try {  	Bot.InitWebClient ();  	if (string.IsNullOrEmpty (postData))  		webResourceText = Bot.webClient.DownloadString (address);  	else  		webResourceText = Bot.webClient.UploadString (address' postData);  	break;  } catch (WebException e) {  	if (errorCounter > 3)  		// retry 3 times by default  		throw;  	if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  		// Remote server problem' retry  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  		Bot.Wait (60);  	} else if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		SwitchUnsafeHttpHeaderParsing (true);  		return GetWebResource (address' postData);  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: try {  	Bot.InitWebClient ();  	if (string.IsNullOrEmpty (postData))  		webResourceText = Bot.webClient.DownloadString (address);  	else  		webResourceText = Bot.webClient.UploadString (address' postData);  	break;  } catch (WebException e) {  	if (errorCounter > 3)  		// retry 3 times by default  		throw;  	if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  		// Remote server problem' retry  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  		Bot.Wait (60);  	} else if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		SwitchUnsafeHttpHeaderParsing (true);  		return GetWebResource (address' postData);  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: try {  	Bot.InitWebClient ();  	if (string.IsNullOrEmpty (postData))  		webResourceText = Bot.webClient.DownloadString (address);  	else  		webResourceText = Bot.webClient.UploadString (address' postData);  	break;  } catch (WebException e) {  	if (errorCounter > 3)  		// retry 3 times by default  		throw;  	if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  		// Remote server problem' retry  		Console.Error.WriteLine (e.Message);  		Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  		Bot.Wait (60);  	} else if (e.Message.Contains ("Section=ResponseStatusLine")) {  		// Known Squid problem  		SwitchUnsafeHttpHeaderParsing (true);  		return GetWebResource (address' postData);  	} else  		throw;  }  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: if (errorCounter > 3)  	// retry 3 times by default  	throw;  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  	// Remote server problem' retry  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  	Bot.Wait (60);  } else if (e.Message.Contains ("Section=ResponseStatusLine")) {  	// Known Squid problem  	SwitchUnsafeHttpHeaderParsing (true);  	return GetWebResource (address' postData);  } else  	throw;  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: if (Regex.IsMatch (e.Message' ": \\(50[0234]\\) ")) {  	// Remote server problem' retry  	Console.Error.WriteLine (e.Message);  	Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  	Bot.Wait (60);  } else if (e.Message.Contains ("Section=ResponseStatusLine")) {  	// Known Squid problem  	SwitchUnsafeHttpHeaderParsing (true);  	return GetWebResource (address' postData);  } else  	throw;  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: Console.Error.WriteLine (string.Format (Bot.Msg ("Retrying in {0} seconds...")' 60));  
Magic Number,DotNetWikiBot,Bot,D:\newReposJune17\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: Bot.Wait (60);  
