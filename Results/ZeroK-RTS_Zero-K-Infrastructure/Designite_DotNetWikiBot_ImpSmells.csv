Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The method has 108 lines of code.
Long Method,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The method has 134 lines of code.
Long Method,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The method has 111 lines of code.
Long Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,The method has 138 lines of code.
Long Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The method has 127 lines of code.
Complex Method,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,Cyclomatic complexity of the method is 14
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Save,Cyclomatic complexity of the method is 12
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,Cyclomatic complexity of the method is 10
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,Cyclomatic complexity of the method is 12
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,Cyclomatic complexity of the method is 9
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,Cyclomatic complexity of the method is 13
Complex Method,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RenameTo,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,Cyclomatic complexity of the method is 12
Complex Method,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetSubstring,Cyclomatic complexity of the method is 8
Complex Method,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,Cyclomatic complexity of the method is 11
Long Parameter List,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The method has 5 parameters. Parameters: editMode' renameMode' cascadeMode' expiryDate' reason
Long Parameter List,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The method has 5 parameters. Parameters: filePathName' description' license' copyStatus' source
Long Parameter List,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,The method has 5 parameters. Parameters: templateTitle' templateParams' inline' withoutSpaces' padding
Long Parameter List,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The method has 5 parameters. Parameters: firstPageTitle' neededNSpace' acceptRedirects' limit' lastPageTitle
Long Parameter List,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromRecentChanges,The method has 8 parameters. Parameters: hideMinor' hideBots' hideAnons' hideLogged' hideSelf' hideReviewed' limit' days
Long Parameter List,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The method has 5 parameters. Parameters: editMode' renameMode' cascadeMode' expiryDate' reason
Long Parameter List,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetSubstring,The method has 6 parameters. Parameters: src' startTag' endTag' removeStartTag' removeEndTag' raiseExceptionIfTagNotFound
Complex Conditional,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadMediawikiMessages,The conditional expression  "modified  								&& reader.Name == "td"  								&& reader.NodeType == XmlNodeType.Element  								&& reader["class"] == "am_actual""  is complex.
Complex Conditional,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The conditional expression  "code == 500 || code == 502 || code == 503 || code == 504"  is complex.
Complex Conditional,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The conditional expression  "code == 500 || code == 502 || code == 503 || code == 504"  is complex.
Complex Conditional,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The conditional expression  "str.StartsWith(site.GetNsPrefix(6)' true' site.langCulture) ||    // image  					str.StartsWith(site.GetEnglishNsPrefix(6)' true' site.langCulture) ||  					str.StartsWith(site.GetNsPrefix(14)' true' site.langCulture) ||    // category  					str.StartsWith(site.GetEnglishNsPrefix(14)' true' site.langCulture)"  is complex.
Complex Conditional,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The conditional expression  "str[0] == ':'  						|| site.regexes["allNsPrefixes"].IsMatch(str)  						|| str.StartsWith("msgnw:")  						|| str.StartsWith("MSGNW:")"  is complex.
Complex Conditional,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Contains,The conditional expression  "p.title == page.title  					&& (p.revision == null || page.revision == null || p.revision == page.revision)"  is complex.
Complex Conditional,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCustomSpecialPage,The conditional expression  "pageTitle == "Unusedimages" || pageTitle == "Uncategorizedimages" ||  					pageTitle == "UnusedFiles" || pageTitle == "UncategorizedFiles""  is complex.
Complex Conditional,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The conditional expression  "cursor < text.Length && (text[cursor] == ' ' || text[cursor] == '\n'  				|| text[cursor] == '\r' || text[cursor] == '\t')"  is complex.
Complex Conditional,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The conditional expression  "cursor < text.Length && (text[cursor] == ' ' || text[cursor] == '\n'  					|| text[cursor] == '\r' || text[cursor] == '\t')"  is complex.
Complex Conditional,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The conditional expression  "cursor < text.Length && (text[cursor] == ' ' || text[cursor] == '\n'  					|| text[cursor] == '\r' || text[cursor] == '\t')"  is complex.
Empty Catch Block,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The method has an empty catch block.
Empty Catch Block,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The method has an empty catch block.
Empty Catch Block,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The method has an empty catch block.
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists(defaultsFile) == true)  			{  				string[] lines = File.ReadAllLines(defaultsFile' Encoding.UTF8);  				foreach (string line in lines) {  					if (line.StartsWith(address + '|')) {  						string[] tokens = line.Split('|');  						if (tokens.GetUpperBound(0) < 2) {  							throw new WikiBotException(  								Bot.Msg("\"\\Cache\\Defaults.dat\" file is invalid."));  						}  						this.address = tokens[0];  						this.userName = tokens[1];  						this.userPass = tokens[2];  						if (tokens.GetUpperBound(0) >= 3)  							this.userDomain = tokens[3];  					}  				}  				if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(userPass))  					throw new WikiBotException(string.Format(  						Bot.Msg("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")'  						address));  			}  			else  				throw new WikiBotException(Bot.Msg("\"\\Cache\\Defaults.dat\" file not found."));
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists(defaultsFile) == true)  			{  				string[] lines = File.ReadAllLines(defaultsFile' Encoding.UTF8);  				foreach (string line in lines) {  					if (line.StartsWith(address + '|')) {  						string[] tokens = line.Split('|');  						if (tokens.GetUpperBound(0) < 2) {  							throw new WikiBotException(  								Bot.Msg("\"\\Cache\\Defaults.dat\" file is invalid."));  						}  						this.address = tokens[0];  						this.userName = tokens[1];  						this.userPass = tokens[2];  						if (tokens.GetUpperBound(0) >= 3)  							this.userDomain = tokens[3];  					}  				}  				if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(userPass))  					throw new WikiBotException(string.Format(  						Bot.Msg("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")'  						address));  			}  			else  				throw new WikiBotException(Bot.Msg("\"\\Cache\\Defaults.dat\" file not found."));
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists(defaultsFile) == true)  			{  				string[] lines = File.ReadAllLines(defaultsFile' Encoding.UTF8);  				foreach (string line in lines) {  					if (line.StartsWith(address + '|')) {  						string[] tokens = line.Split('|');  						if (tokens.GetUpperBound(0) < 2) {  							throw new WikiBotException(  								Bot.Msg("\"\\Cache\\Defaults.dat\" file is invalid."));  						}  						this.address = tokens[0];  						this.userName = tokens[1];  						this.userPass = tokens[2];  						if (tokens.GetUpperBound(0) >= 3)  							this.userDomain = tokens[3];  					}  				}  				if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(userPass))  					throw new WikiBotException(string.Format(  						Bot.Msg("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")'  						address));  			}  			else  				throw new WikiBotException(Bot.Msg("\"\\Cache\\Defaults.dat\" file not found."));
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Site,The following statement contains a magic number: if (File.Exists(defaultsFile) == true)  			{  				string[] lines = File.ReadAllLines(defaultsFile' Encoding.UTF8);  				foreach (string line in lines) {  					if (line.StartsWith(address + '|')) {  						string[] tokens = line.Split('|');  						if (tokens.GetUpperBound(0) < 2) {  							throw new WikiBotException(  								Bot.Msg("\"\\Cache\\Defaults.dat\" file is invalid."));  						}  						this.address = tokens[0];  						this.userName = tokens[1];  						this.userPass = tokens[2];  						if (tokens.GetUpperBound(0) >= 3)  							this.userDomain = tokens[3];  					}  				}  				if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(userPass))  					throw new WikiBotException(string.Format(  						Bot.Msg("Site \"{0}\" was not found in \"\\Cache\\Defaults.dat\" file.")'  						address));  			}  			else  				throw new WikiBotException(Bot.Msg("\"\\Cache\\Defaults.dat\" file not found."));
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (Bot.CountMatches(address' "/"' false) == 3 && address.EndsWith("/"))  				address = address.Remove(address.Length - 1);
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists(cacheFile) == true) {  				cache = XElement.Load(cacheFile);  				indexPath = cache.Descendants("indexPath").FirstOrDefault().Value;  			}  			else {  				string src = GetWebPage(address + "/mediawiki");    // FIXME: ZK hax  				Uri addressUri = new Uri(address);  				Regex hrefRegex = new Regex("(?i) href=\"(([^\"]*)(index|api)\\.php)");  				try {  					foreach (Match m in hrefRegex.Matches(src)) {  						if (m.Groups[1].Value.StartsWith(address)) {  							indexPath = m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value.StartsWith("//" + addressUri.Authority)) {  							if (address.StartsWith("https:"))  								indexPath = "https:" + m.Groups[2].Value + "index.php";  							else  								indexPath = "http:" + m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value[0] == '/' && m.Groups[1].Value[1] != '/') {  							indexPath = address + m.Groups[2].Value + "index.php";  							break;  						}  						else if (string.IsNullOrEmpty(m.Groups[2].Value)) {  							indexPath = address + "/index.php";  							break;  						}  					}  				}  				catch {  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				}  				if (indexPath == null)  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				if (indexPath.Contains("api.php"))  					indexPath = indexPath.Replace("api.php"' "index.php");    				cache = new XElement("siteInfo"' new XElement("indexPath"' indexPath));  				cache.Save(cacheFile);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists(cacheFile) == true) {  				cache = XElement.Load(cacheFile);  				indexPath = cache.Descendants("indexPath").FirstOrDefault().Value;  			}  			else {  				string src = GetWebPage(address + "/mediawiki");    // FIXME: ZK hax  				Uri addressUri = new Uri(address);  				Regex hrefRegex = new Regex("(?i) href=\"(([^\"]*)(index|api)\\.php)");  				try {  					foreach (Match m in hrefRegex.Matches(src)) {  						if (m.Groups[1].Value.StartsWith(address)) {  							indexPath = m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value.StartsWith("//" + addressUri.Authority)) {  							if (address.StartsWith("https:"))  								indexPath = "https:" + m.Groups[2].Value + "index.php";  							else  								indexPath = "http:" + m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value[0] == '/' && m.Groups[1].Value[1] != '/') {  							indexPath = address + m.Groups[2].Value + "index.php";  							break;  						}  						else if (string.IsNullOrEmpty(m.Groups[2].Value)) {  							indexPath = address + "/index.php";  							break;  						}  					}  				}  				catch {  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				}  				if (indexPath == null)  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				if (indexPath.Contains("api.php"))  					indexPath = indexPath.Replace("api.php"' "index.php");    				cache = new XElement("siteInfo"' new XElement("indexPath"' indexPath));  				cache.Save(cacheFile);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists(cacheFile) == true) {  				cache = XElement.Load(cacheFile);  				indexPath = cache.Descendants("indexPath").FirstOrDefault().Value;  			}  			else {  				string src = GetWebPage(address + "/mediawiki");    // FIXME: ZK hax  				Uri addressUri = new Uri(address);  				Regex hrefRegex = new Regex("(?i) href=\"(([^\"]*)(index|api)\\.php)");  				try {  					foreach (Match m in hrefRegex.Matches(src)) {  						if (m.Groups[1].Value.StartsWith(address)) {  							indexPath = m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value.StartsWith("//" + addressUri.Authority)) {  							if (address.StartsWith("https:"))  								indexPath = "https:" + m.Groups[2].Value + "index.php";  							else  								indexPath = "http:" + m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value[0] == '/' && m.Groups[1].Value[1] != '/') {  							indexPath = address + m.Groups[2].Value + "index.php";  							break;  						}  						else if (string.IsNullOrEmpty(m.Groups[2].Value)) {  							indexPath = address + "/index.php";  							break;  						}  					}  				}  				catch {  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				}  				if (indexPath == null)  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				if (indexPath.Contains("api.php"))  					indexPath = indexPath.Replace("api.php"' "index.php");    				cache = new XElement("siteInfo"' new XElement("indexPath"' indexPath));  				cache.Save(cacheFile);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists(cacheFile) == true) {  				cache = XElement.Load(cacheFile);  				indexPath = cache.Descendants("indexPath").FirstOrDefault().Value;  			}  			else {  				string src = GetWebPage(address + "/mediawiki");    // FIXME: ZK hax  				Uri addressUri = new Uri(address);  				Regex hrefRegex = new Regex("(?i) href=\"(([^\"]*)(index|api)\\.php)");  				try {  					foreach (Match m in hrefRegex.Matches(src)) {  						if (m.Groups[1].Value.StartsWith(address)) {  							indexPath = m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value.StartsWith("//" + addressUri.Authority)) {  							if (address.StartsWith("https:"))  								indexPath = "https:" + m.Groups[2].Value + "index.php";  							else  								indexPath = "http:" + m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value[0] == '/' && m.Groups[1].Value[1] != '/') {  							indexPath = address + m.Groups[2].Value + "index.php";  							break;  						}  						else if (string.IsNullOrEmpty(m.Groups[2].Value)) {  							indexPath = address + "/index.php";  							break;  						}  					}  				}  				catch {  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				}  				if (indexPath == null)  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				if (indexPath.Contains("api.php"))  					indexPath = indexPath.Replace("api.php"' "index.php");    				cache = new XElement("siteInfo"' new XElement("indexPath"' indexPath));  				cache.Save(cacheFile);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Initialize,The following statement contains a magic number: if (File.Exists(cacheFile) == true) {  				cache = XElement.Load(cacheFile);  				indexPath = cache.Descendants("indexPath").FirstOrDefault().Value;  			}  			else {  				string src = GetWebPage(address + "/mediawiki");    // FIXME: ZK hax  				Uri addressUri = new Uri(address);  				Regex hrefRegex = new Regex("(?i) href=\"(([^\"]*)(index|api)\\.php)");  				try {  					foreach (Match m in hrefRegex.Matches(src)) {  						if (m.Groups[1].Value.StartsWith(address)) {  							indexPath = m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value.StartsWith("//" + addressUri.Authority)) {  							if (address.StartsWith("https:"))  								indexPath = "https:" + m.Groups[2].Value + "index.php";  							else  								indexPath = "http:" + m.Groups[2].Value + "index.php";  							break;  						}  						else if (m.Groups[1].Value[0] == '/' && m.Groups[1].Value[1] != '/') {  							indexPath = address + m.Groups[2].Value + "index.php";  							break;  						}  						else if (string.IsNullOrEmpty(m.Groups[2].Value)) {  							indexPath = address + "/index.php";  							break;  						}  					}  				}  				catch {  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				}  				if (indexPath == null)  					throw new WikiBotException(Bot.Msg("Can't find path to index.php."));  				if (indexPath.Contains("api.php"))  					indexPath = indexPath.Replace("api.php"' "index.php");    				cache = new XElement("siteInfo"' new XElement("indexPath"' indexPath));  				cache.Save(cacheFile);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: timeOffsetSeconds = (int)(wikiServerTime - DateTime.UtcNow).TotalSeconds - 2;
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: string allNsPrefixes = string.Join("|"'  				namespaces.Select(x => x.Value.Substring(1' x.Value.Length-2)).ToArray());
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: regexes["wikiCategory"] = new Regex(  				@"(?i)\[\[\s*(((" + GetNsPrefixes(14) + @"):(.+?))(\|.+?)?)]]");
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: regexes["wikiImage"] = new Regex(@"\[\[(?i)((" + GetNsPrefixes(6) +  				@"):(.+?))(\|(.+?))*?]]");
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LoadGeneralInfo,The following statement contains a magic number: regexes["linkToImage2"] = new Regex("<a href=\"[^\"]*?\" title=\"(" +  				Regex.Escape(GetNsPrefix(6)) + "[^\"]+?)\">");
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  				string loginPageSrc = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin"' ""' true' true);  				string loginToken = "";  				int loginTokenPos = loginPageSrc.IndexOf(  					"<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  				if (loginTokenPos != -1)  					loginToken = loginPageSrc.Substring(loginTokenPos + 48' 32);    				string postData = string.Format("wpName={0}&wpPassword={1}&wpDomain={2}" +  					"&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"'  					Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  					Bot.UrlEncode(userDomain)' Bot.UrlEncode(loginToken));  				string respStr = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin&action=submitlogin&type=login"'  					postData' true' false);  				if (respStr.Contains("<div class=\"errorbox\">"))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}  			else {  				string postData = string.Format("lgname={0}&lgpassword={1}&lgdomain={2}"'  						Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  						Bot.UrlEncode(userDomain));    				// At first load login security token  				string tokenXmlSrc = PostDataAndGetResult(apiPath +  					"?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  				XElement tokenXml = XElement.Parse(tokenXmlSrc);  				string respStr = ""' loginToken = "";  				try {  					loginToken = tokenXml.Element("query").Element("tokens")  						.Attribute("logintoken").Value;  				}  				catch {  					// old fallback method  					respStr = PostDataAndGetResult(apiPath +  						"?action=login&format=xml"' postData' true' false);  					if (respStr.Contains("result=\"Success\"")) {  						Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  						return;  					}  					int tokenPos = respStr.IndexOf("token=\"");  					if (tokenPos < 1)  						throw new WikiBotException(  							"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  					loginToken = respStr.Substring(tokenPos + 7' 32);  				}    				postData += "&lgtoken=" + Bot.UrlEncode(loginToken);  				respStr = PostDataAndGetResult(apiPath +  					"?action=login&format=xml"' postData' true' false);  				if (!respStr.Contains("result=\"Success\""))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  				string loginPageSrc = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin"' ""' true' true);  				string loginToken = "";  				int loginTokenPos = loginPageSrc.IndexOf(  					"<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  				if (loginTokenPos != -1)  					loginToken = loginPageSrc.Substring(loginTokenPos + 48' 32);    				string postData = string.Format("wpName={0}&wpPassword={1}&wpDomain={2}" +  					"&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"'  					Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  					Bot.UrlEncode(userDomain)' Bot.UrlEncode(loginToken));  				string respStr = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin&action=submitlogin&type=login"'  					postData' true' false);  				if (respStr.Contains("<div class=\"errorbox\">"))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}  			else {  				string postData = string.Format("lgname={0}&lgpassword={1}&lgdomain={2}"'  						Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  						Bot.UrlEncode(userDomain));    				// At first load login security token  				string tokenXmlSrc = PostDataAndGetResult(apiPath +  					"?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  				XElement tokenXml = XElement.Parse(tokenXmlSrc);  				string respStr = ""' loginToken = "";  				try {  					loginToken = tokenXml.Element("query").Element("tokens")  						.Attribute("logintoken").Value;  				}  				catch {  					// old fallback method  					respStr = PostDataAndGetResult(apiPath +  						"?action=login&format=xml"' postData' true' false);  					if (respStr.Contains("result=\"Success\"")) {  						Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  						return;  					}  					int tokenPos = respStr.IndexOf("token=\"");  					if (tokenPos < 1)  						throw new WikiBotException(  							"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  					loginToken = respStr.Substring(tokenPos + 7' 32);  				}    				postData += "&lgtoken=" + Bot.UrlEncode(loginToken);  				respStr = PostDataAndGetResult(apiPath +  					"?action=login&format=xml"' postData' true' false);  				if (!respStr.Contains("result=\"Success\""))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  				string loginPageSrc = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin"' ""' true' true);  				string loginToken = "";  				int loginTokenPos = loginPageSrc.IndexOf(  					"<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  				if (loginTokenPos != -1)  					loginToken = loginPageSrc.Substring(loginTokenPos + 48' 32);    				string postData = string.Format("wpName={0}&wpPassword={1}&wpDomain={2}" +  					"&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"'  					Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  					Bot.UrlEncode(userDomain)' Bot.UrlEncode(loginToken));  				string respStr = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin&action=submitlogin&type=login"'  					postData' true' false);  				if (respStr.Contains("<div class=\"errorbox\">"))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}  			else {  				string postData = string.Format("lgname={0}&lgpassword={1}&lgdomain={2}"'  						Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  						Bot.UrlEncode(userDomain));    				// At first load login security token  				string tokenXmlSrc = PostDataAndGetResult(apiPath +  					"?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  				XElement tokenXml = XElement.Parse(tokenXmlSrc);  				string respStr = ""' loginToken = "";  				try {  					loginToken = tokenXml.Element("query").Element("tokens")  						.Attribute("logintoken").Value;  				}  				catch {  					// old fallback method  					respStr = PostDataAndGetResult(apiPath +  						"?action=login&format=xml"' postData' true' false);  					if (respStr.Contains("result=\"Success\"")) {  						Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  						return;  					}  					int tokenPos = respStr.IndexOf("token=\"");  					if (tokenPos < 1)  						throw new WikiBotException(  							"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  					loginToken = respStr.Substring(tokenPos + 7' 32);  				}    				postData += "&lgtoken=" + Bot.UrlEncode(loginToken);  				respStr = PostDataAndGetResult(apiPath +  					"?action=login&format=xml"' postData' true' false);  				if (!respStr.Contains("result=\"Success\""))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,LogIn,The following statement contains a magic number: if (!useApi) {  				string loginPageSrc = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin"' ""' true' true);  				string loginToken = "";  				int loginTokenPos = loginPageSrc.IndexOf(  					"<input type=\"hidden\" name=\"wpLoginToken\" value=\"");  				if (loginTokenPos != -1)  					loginToken = loginPageSrc.Substring(loginTokenPos + 48' 32);    				string postData = string.Format("wpName={0}&wpPassword={1}&wpDomain={2}" +  					"&wpLoginToken={3}&wpRemember=1&wpLoginattempt=Log+in"'  					Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  					Bot.UrlEncode(userDomain)' Bot.UrlEncode(loginToken));  				string respStr = PostDataAndGetResult(indexPath +  					"?title=Special:Userlogin&action=submitlogin&type=login"'  					postData' true' false);  				if (respStr.Contains("<div class=\"errorbox\">"))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}  			else {  				string postData = string.Format("lgname={0}&lgpassword={1}&lgdomain={2}"'  						Bot.UrlEncode(userName)' Bot.UrlEncode(userPass)'  						Bot.UrlEncode(userDomain));    				// At first load login security token  				string tokenXmlSrc = PostDataAndGetResult(apiPath +  					"?action=query&meta=tokens&type=login&format=xml"' ""' true' false);  				XElement tokenXml = XElement.Parse(tokenXmlSrc);  				string respStr = ""' loginToken = "";  				try {  					loginToken = tokenXml.Element("query").Element("tokens")  						.Attribute("logintoken").Value;  				}  				catch {  					// old fallback method  					respStr = PostDataAndGetResult(apiPath +  						"?action=login&format=xml"' postData' true' false);  					if (respStr.Contains("result=\"Success\"")) {  						Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  						return;  					}  					int tokenPos = respStr.IndexOf("token=\"");  					if (tokenPos < 1)  						throw new WikiBotException(  							"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  					loginToken = respStr.Substring(tokenPos + 7' 32);  				}    				postData += "&lgtoken=" + Bot.UrlEncode(loginToken);  				respStr = PostDataAndGetResult(apiPath +  					"?action=login&format=xml"' postData' true' false);  				if (!respStr.Contains("result=\"Success\""))  					throw new WikiBotException(  						"\n\n" + Bot.Msg("Login failed. Check your username and password.") + "\n");  				Console.WriteLine(Bot.Msg("Logged in as {0}.")' userName);  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: int retryDelaySeconds = 60;
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(pageURL);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.ContentType = "application/x-www-form-urlencoded";  				webReq.Headers.Add("Cache-Control"' "no-cache' must-revalidate");  				webReq.UserAgent = Bot.botVer;  				webReq.AllowAutoRedirect = allowRedirect;  				if (cookies.Count == 0)  					webReq.CookieContainer = new CookieContainer();  				else  					webReq.CookieContainer = cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				if (!Bot.isRunningOnMono) {    // Mono bug evasion  					// last checked in January 2015 on Mono 3.12 for Windows  					// http://mono.1490590.n4.nabble.com/...  					// ...EntryPointNotFoundException-CreateZStream-td4661364.html  					webReq.Headers.Add(HttpRequestHeader.AcceptEncoding' "gzip'deflate");  				}  				if (!string.IsNullOrEmpty(postData)) {  					if (Bot.isRunningOnMono)    // Mono bug 636219 evasion  						webReq.AllowAutoRedirect = false;  							// https://bugzilla.novell.com/show_bug.cgi?id=636219  					webReq.Method = "POST";  					//webReq.Timeout = 180000;  					postData += "&maxlag=" + maxLag;  					byte[] postBytes = Encoding.UTF8.GetBytes(postData);  					webReq.ContentLength = postBytes.Length;  					Stream reqStrm = webReq.GetRequestStream();  					reqStrm.Write(postBytes' 0' postBytes.Length);  					reqStrm.Close();  				}		  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					if (webResp.Headers["Retry-After"] != null)  						throw new WebException("Service is unavailable due to high load.");  							// API can return HTTP code 200 (OK) along with "Retry-After"  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (webReq.AllowAutoRedirect == false &&  						webResp.StatusCode == HttpStatusCode.Redirect)    // Mono bug 636219 evasion  							return "";    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						return PostDataAndGetResult(pageURL' postData' getCookies' allowRedirect);  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > retryTimes)  							throw;  						// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) webResp.StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem' retry  							if (errorCounter > retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(pageURL);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.ContentType = "application/x-www-form-urlencoded";  				webReq.Headers.Add("Cache-Control"' "no-cache' must-revalidate");  				webReq.UserAgent = Bot.botVer;  				webReq.AllowAutoRedirect = allowRedirect;  				if (cookies.Count == 0)  					webReq.CookieContainer = new CookieContainer();  				else  					webReq.CookieContainer = cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				if (!Bot.isRunningOnMono) {    // Mono bug evasion  					// last checked in January 2015 on Mono 3.12 for Windows  					// http://mono.1490590.n4.nabble.com/...  					// ...EntryPointNotFoundException-CreateZStream-td4661364.html  					webReq.Headers.Add(HttpRequestHeader.AcceptEncoding' "gzip'deflate");  				}  				if (!string.IsNullOrEmpty(postData)) {  					if (Bot.isRunningOnMono)    // Mono bug 636219 evasion  						webReq.AllowAutoRedirect = false;  							// https://bugzilla.novell.com/show_bug.cgi?id=636219  					webReq.Method = "POST";  					//webReq.Timeout = 180000;  					postData += "&maxlag=" + maxLag;  					byte[] postBytes = Encoding.UTF8.GetBytes(postData);  					webReq.ContentLength = postBytes.Length;  					Stream reqStrm = webReq.GetRequestStream();  					reqStrm.Write(postBytes' 0' postBytes.Length);  					reqStrm.Close();  				}		  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					if (webResp.Headers["Retry-After"] != null)  						throw new WebException("Service is unavailable due to high load.");  							// API can return HTTP code 200 (OK) along with "Retry-After"  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (webReq.AllowAutoRedirect == false &&  						webResp.StatusCode == HttpStatusCode.Redirect)    // Mono bug 636219 evasion  							return "";    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						return PostDataAndGetResult(pageURL' postData' getCookies' allowRedirect);  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > retryTimes)  							throw;  						// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) webResp.StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem' retry  							if (errorCounter > retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(pageURL);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.ContentType = "application/x-www-form-urlencoded";  				webReq.Headers.Add("Cache-Control"' "no-cache' must-revalidate");  				webReq.UserAgent = Bot.botVer;  				webReq.AllowAutoRedirect = allowRedirect;  				if (cookies.Count == 0)  					webReq.CookieContainer = new CookieContainer();  				else  					webReq.CookieContainer = cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				if (!Bot.isRunningOnMono) {    // Mono bug evasion  					// last checked in January 2015 on Mono 3.12 for Windows  					// http://mono.1490590.n4.nabble.com/...  					// ...EntryPointNotFoundException-CreateZStream-td4661364.html  					webReq.Headers.Add(HttpRequestHeader.AcceptEncoding' "gzip'deflate");  				}  				if (!string.IsNullOrEmpty(postData)) {  					if (Bot.isRunningOnMono)    // Mono bug 636219 evasion  						webReq.AllowAutoRedirect = false;  							// https://bugzilla.novell.com/show_bug.cgi?id=636219  					webReq.Method = "POST";  					//webReq.Timeout = 180000;  					postData += "&maxlag=" + maxLag;  					byte[] postBytes = Encoding.UTF8.GetBytes(postData);  					webReq.ContentLength = postBytes.Length;  					Stream reqStrm = webReq.GetRequestStream();  					reqStrm.Write(postBytes' 0' postBytes.Length);  					reqStrm.Close();  				}		  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					if (webResp.Headers["Retry-After"] != null)  						throw new WebException("Service is unavailable due to high load.");  							// API can return HTTP code 200 (OK) along with "Retry-After"  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (webReq.AllowAutoRedirect == false &&  						webResp.StatusCode == HttpStatusCode.Redirect)    // Mono bug 636219 evasion  							return "";    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						return PostDataAndGetResult(pageURL' postData' getCookies' allowRedirect);  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > retryTimes)  							throw;  						// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) webResp.StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem' retry  							if (errorCounter > retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,PostDataAndGetResult,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(pageURL);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.ContentType = "application/x-www-form-urlencoded";  				webReq.Headers.Add("Cache-Control"' "no-cache' must-revalidate");  				webReq.UserAgent = Bot.botVer;  				webReq.AllowAutoRedirect = allowRedirect;  				if (cookies.Count == 0)  					webReq.CookieContainer = new CookieContainer();  				else  					webReq.CookieContainer = cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				if (!Bot.isRunningOnMono) {    // Mono bug evasion  					// last checked in January 2015 on Mono 3.12 for Windows  					// http://mono.1490590.n4.nabble.com/...  					// ...EntryPointNotFoundException-CreateZStream-td4661364.html  					webReq.Headers.Add(HttpRequestHeader.AcceptEncoding' "gzip'deflate");  				}  				if (!string.IsNullOrEmpty(postData)) {  					if (Bot.isRunningOnMono)    // Mono bug 636219 evasion  						webReq.AllowAutoRedirect = false;  							// https://bugzilla.novell.com/show_bug.cgi?id=636219  					webReq.Method = "POST";  					//webReq.Timeout = 180000;  					postData += "&maxlag=" + maxLag;  					byte[] postBytes = Encoding.UTF8.GetBytes(postData);  					webReq.ContentLength = postBytes.Length;  					Stream reqStrm = webReq.GetRequestStream();  					reqStrm.Write(postBytes' 0' postBytes.Length);  					reqStrm.Close();  				}		  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					if (webResp.Headers["Retry-After"] != null)  						throw new WebException("Service is unavailable due to high load.");  							// API can return HTTP code 200 (OK) along with "Retry-After"  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (webReq.AllowAutoRedirect == false &&  						webResp.StatusCode == HttpStatusCode.Redirect)    // Mono bug 636219 evasion  							return "";    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						return PostDataAndGetResult(pageURL' postData' getCookies' allowRedirect);  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > retryTimes)  							throw;  						// See https://www.mediawiki.org/wiki/Manual:Maxlag_parameter  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) webResp.StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem' retry  							if (errorCounter > retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Site,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetNsPrefixes,The following statement contains a magic number: string str = namespaces[nsIndex].Substring(1' namespaces[nsIndex].Length - 2);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParsePageXml,The following statement contains a magic number: if (doc.GetElementsByTagName("username").Count != 0) {  				lastUser = doc.GetElementsByTagName("username")[0].InnerText;  				lastUserId = doc.GetElementsByTagName("id")[2].InnerText;  			}  			else if(doc.GetElementsByTagName("ip").Count != 0)  				lastUser = doc.GetElementsByTagName("ip")[0].InnerText;  			else  				lastUser = "(n/a)";
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Revert,The following statement contains a magic number: pl.FillFromPageHistory(title' 2);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Revert,The following statement contains a magic number: if (pl.Count() != 2) {  				Console.Error.WriteLine(Bot.Msg("Can't revert page \"{0}\".")' title);  				return;  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,The following statement contains a magic number: for (int i = 50; i <= 5000; i *= 10) {  				pl.FillFromPageHistory(title' i);  				lastEditor = pl[0].lastUser;  				foreach (Page p in pl)  					if (p.lastUser != lastEditor) {  						p.Load();  						Save(p.text' comment' isMinorEdit);  						Console.WriteLine(  							Bot.Msg("Last edits of page \"{0}\" by user {1} have been undone.")'  							title' lastEditor);  						return true;  					}  				if (pl.pages.Count < i)  					break;  				pl.Clear();  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,The following statement contains a magic number: for (int i = 50; i <= 5000; i *= 10) {  				pl.FillFromPageHistory(title' i);  				lastEditor = pl[0].lastUser;  				foreach (Page p in pl)  					if (p.lastUser != lastEditor) {  						p.Load();  						Save(p.text' comment' isMinorEdit);  						Console.WriteLine(  							Bot.Msg("Last edits of page \"{0}\" by user {1} have been undone.")'  							title' lastEditor);  						return true;  					}  				if (pl.pages.Count < i)  					break;  				pl.Clear();  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UndoLastEdits,The following statement contains a magic number: for (int i = 50; i <= 5000; i *= 10) {  				pl.FillFromPageHistory(title' i);  				lastEditor = pl[0].lastUser;  				foreach (Page p in pl)  					if (p.lastUser != lastEditor) {  						p.Load();  						Save(p.text' comment' isMinorEdit);  						Console.WriteLine(  							Bot.Msg("Last edits of page \"{0}\" by user {1} have been undone.")'  							title' lastEditor);  						return true;  					}  				if (pl.pages.Count < i)  					break;  				pl.Clear();  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (editMode > 2 || editMode < 0)  				throw new ArgumentOutOfRangeException("editMode"' errorMsg);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (renameMode > 2 || renameMode < 0)  				throw new ArgumentOutOfRangeException("renameMode"' errorMsg);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {    				string token = "";  				if (site.tokens != null && site.tokens.ContainsKey("csrftoken"))  					token = site.tokens["csrftoken"];  				else {  					var tokens = GetSecurityTokens("protect");  					if (tokens.ContainsKey("missing"))  						throw new WikiBotException(  							string.Format(Bot.Msg("Page \"{0}\" doesn't exist.")' title));  					if (!tokens.ContainsKey("protecttoken") || tokens["protecttoken"] == "") {  						Console.Error.WriteLine(  							Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  						return;  					}  					token = tokens["protecttoken"];  				}    				string date = Regex.Replace(expiryDate.ToString("u")' "\\D"' "");  				string postData = string.Format("token={0}&protections=edit={1}|move={2}" +  					"&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"'  					Bot.UrlEncode(token)'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					(cascadeMode == true ? "1" : "")'  					(expiryDate == DateTime.MinValue ? "" : date)'  					(expiryDate == DateTime.MinValue ? "" : date)'  					Bot.UrlEncode(reason)  				);    				string respStr = site.PostDataAndGetResult(site.apiPath + "?action=protect" +  					"&title=" + Bot.UrlEncode(title) + "&format=xml"' postData);  				if (respStr.Contains("<error"))  					throw new WikiBotException(  						string.Format(Bot.Msg("Failed to delete page \"{0}\".")' title));  			}  			else {  				string respStr = site.GetWebPage(site.indexPath + "?title=" +  					Bot.UrlEncode(title) + "&action=protect");  				Match m = site.regexes["editToken"].Match(respStr);  				string securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  					? m.Groups[2].Value : m.Groups[1].Value;  				if (string.IsNullOrEmpty(securityToken)) {  					Console.Error.WriteLine(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  					return;  				}    				if (site.watchList == null) {  					site.watchList = new PageList(site);  					site.watchList.FillFromWatchList();  				}  				watched = site.watchList.Contains(this);    				string postData = string.Format(  					"mwProtect-level-edit={0}&mwProtect-level-move={1}" +  					"&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					Bot.UrlEncode(reason)'  					Bot.UrlEncode(securityToken)'  					expiryDate == DateTime.MinValue ? "" : expiryDate.ToString("u")'  						// ToString("u") is like "2010-06-15 20:45:30Z"  					cascadeMode == true ? "&mwProtect-cascade=1" : ""'  					watched ? "&mwProtectWatch=1" : "");  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=" + Bot.UrlEncode(title) + "&action=protect"' postData);    				Regex successMsg = new Regex(  					"<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode(title) + "\\s*<");  				if (!successMsg.IsMatch(respStr)) {  					throw new WikiBotException(string.Format(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title));  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {    				string token = "";  				if (site.tokens != null && site.tokens.ContainsKey("csrftoken"))  					token = site.tokens["csrftoken"];  				else {  					var tokens = GetSecurityTokens("protect");  					if (tokens.ContainsKey("missing"))  						throw new WikiBotException(  							string.Format(Bot.Msg("Page \"{0}\" doesn't exist.")' title));  					if (!tokens.ContainsKey("protecttoken") || tokens["protecttoken"] == "") {  						Console.Error.WriteLine(  							Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  						return;  					}  					token = tokens["protecttoken"];  				}    				string date = Regex.Replace(expiryDate.ToString("u")' "\\D"' "");  				string postData = string.Format("token={0}&protections=edit={1}|move={2}" +  					"&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"'  					Bot.UrlEncode(token)'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					(cascadeMode == true ? "1" : "")'  					(expiryDate == DateTime.MinValue ? "" : date)'  					(expiryDate == DateTime.MinValue ? "" : date)'  					Bot.UrlEncode(reason)  				);    				string respStr = site.PostDataAndGetResult(site.apiPath + "?action=protect" +  					"&title=" + Bot.UrlEncode(title) + "&format=xml"' postData);  				if (respStr.Contains("<error"))  					throw new WikiBotException(  						string.Format(Bot.Msg("Failed to delete page \"{0}\".")' title));  			}  			else {  				string respStr = site.GetWebPage(site.indexPath + "?title=" +  					Bot.UrlEncode(title) + "&action=protect");  				Match m = site.regexes["editToken"].Match(respStr);  				string securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  					? m.Groups[2].Value : m.Groups[1].Value;  				if (string.IsNullOrEmpty(securityToken)) {  					Console.Error.WriteLine(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  					return;  				}    				if (site.watchList == null) {  					site.watchList = new PageList(site);  					site.watchList.FillFromWatchList();  				}  				watched = site.watchList.Contains(this);    				string postData = string.Format(  					"mwProtect-level-edit={0}&mwProtect-level-move={1}" +  					"&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					Bot.UrlEncode(reason)'  					Bot.UrlEncode(securityToken)'  					expiryDate == DateTime.MinValue ? "" : expiryDate.ToString("u")'  						// ToString("u") is like "2010-06-15 20:45:30Z"  					cascadeMode == true ? "&mwProtect-cascade=1" : ""'  					watched ? "&mwProtectWatch=1" : "");  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=" + Bot.UrlEncode(title) + "&action=protect"' postData);    				Regex successMsg = new Regex(  					"<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode(title) + "\\s*<");  				if (!successMsg.IsMatch(respStr)) {  					throw new WikiBotException(string.Format(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title));  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {    				string token = "";  				if (site.tokens != null && site.tokens.ContainsKey("csrftoken"))  					token = site.tokens["csrftoken"];  				else {  					var tokens = GetSecurityTokens("protect");  					if (tokens.ContainsKey("missing"))  						throw new WikiBotException(  							string.Format(Bot.Msg("Page \"{0}\" doesn't exist.")' title));  					if (!tokens.ContainsKey("protecttoken") || tokens["protecttoken"] == "") {  						Console.Error.WriteLine(  							Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  						return;  					}  					token = tokens["protecttoken"];  				}    				string date = Regex.Replace(expiryDate.ToString("u")' "\\D"' "");  				string postData = string.Format("token={0}&protections=edit={1}|move={2}" +  					"&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"'  					Bot.UrlEncode(token)'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					(cascadeMode == true ? "1" : "")'  					(expiryDate == DateTime.MinValue ? "" : date)'  					(expiryDate == DateTime.MinValue ? "" : date)'  					Bot.UrlEncode(reason)  				);    				string respStr = site.PostDataAndGetResult(site.apiPath + "?action=protect" +  					"&title=" + Bot.UrlEncode(title) + "&format=xml"' postData);  				if (respStr.Contains("<error"))  					throw new WikiBotException(  						string.Format(Bot.Msg("Failed to delete page \"{0}\".")' title));  			}  			else {  				string respStr = site.GetWebPage(site.indexPath + "?title=" +  					Bot.UrlEncode(title) + "&action=protect");  				Match m = site.regexes["editToken"].Match(respStr);  				string securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  					? m.Groups[2].Value : m.Groups[1].Value;  				if (string.IsNullOrEmpty(securityToken)) {  					Console.Error.WriteLine(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  					return;  				}    				if (site.watchList == null) {  					site.watchList = new PageList(site);  					site.watchList.FillFromWatchList();  				}  				watched = site.watchList.Contains(this);    				string postData = string.Format(  					"mwProtect-level-edit={0}&mwProtect-level-move={1}" +  					"&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					Bot.UrlEncode(reason)'  					Bot.UrlEncode(securityToken)'  					expiryDate == DateTime.MinValue ? "" : expiryDate.ToString("u")'  						// ToString("u") is like "2010-06-15 20:45:30Z"  					cascadeMode == true ? "&mwProtect-cascade=1" : ""'  					watched ? "&mwProtectWatch=1" : "");  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=" + Bot.UrlEncode(title) + "&action=protect"' postData);    				Regex successMsg = new Regex(  					"<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode(title) + "\\s*<");  				if (!successMsg.IsMatch(respStr)) {  					throw new WikiBotException(string.Format(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title));  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {    				string token = "";  				if (site.tokens != null && site.tokens.ContainsKey("csrftoken"))  					token = site.tokens["csrftoken"];  				else {  					var tokens = GetSecurityTokens("protect");  					if (tokens.ContainsKey("missing"))  						throw new WikiBotException(  							string.Format(Bot.Msg("Page \"{0}\" doesn't exist.")' title));  					if (!tokens.ContainsKey("protecttoken") || tokens["protecttoken"] == "") {  						Console.Error.WriteLine(  							Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  						return;  					}  					token = tokens["protecttoken"];  				}    				string date = Regex.Replace(expiryDate.ToString("u")' "\\D"' "");  				string postData = string.Format("token={0}&protections=edit={1}|move={2}" +  					"&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"'  					Bot.UrlEncode(token)'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					(cascadeMode == true ? "1" : "")'  					(expiryDate == DateTime.MinValue ? "" : date)'  					(expiryDate == DateTime.MinValue ? "" : date)'  					Bot.UrlEncode(reason)  				);    				string respStr = site.PostDataAndGetResult(site.apiPath + "?action=protect" +  					"&title=" + Bot.UrlEncode(title) + "&format=xml"' postData);  				if (respStr.Contains("<error"))  					throw new WikiBotException(  						string.Format(Bot.Msg("Failed to delete page \"{0}\".")' title));  			}  			else {  				string respStr = site.GetWebPage(site.indexPath + "?title=" +  					Bot.UrlEncode(title) + "&action=protect");  				Match m = site.regexes["editToken"].Match(respStr);  				string securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  					? m.Groups[2].Value : m.Groups[1].Value;  				if (string.IsNullOrEmpty(securityToken)) {  					Console.Error.WriteLine(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  					return;  				}    				if (site.watchList == null) {  					site.watchList = new PageList(site);  					site.watchList.FillFromWatchList();  				}  				watched = site.watchList.Contains(this);    				string postData = string.Format(  					"mwProtect-level-edit={0}&mwProtect-level-move={1}" +  					"&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					Bot.UrlEncode(reason)'  					Bot.UrlEncode(securityToken)'  					expiryDate == DateTime.MinValue ? "" : expiryDate.ToString("u")'  						// ToString("u") is like "2010-06-15 20:45:30Z"  					cascadeMode == true ? "&mwProtect-cascade=1" : ""'  					watched ? "&mwProtectWatch=1" : "");  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=" + Bot.UrlEncode(title) + "&action=protect"' postData);    				Regex successMsg = new Regex(  					"<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode(title) + "\\s*<");  				if (!successMsg.IsMatch(respStr)) {  					throw new WikiBotException(string.Format(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title));  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Protect,The following statement contains a magic number: if (site.useApi) {    				string token = "";  				if (site.tokens != null && site.tokens.ContainsKey("csrftoken"))  					token = site.tokens["csrftoken"];  				else {  					var tokens = GetSecurityTokens("protect");  					if (tokens.ContainsKey("missing"))  						throw new WikiBotException(  							string.Format(Bot.Msg("Page \"{0}\" doesn't exist.")' title));  					if (!tokens.ContainsKey("protecttoken") || tokens["protecttoken"] == "") {  						Console.Error.WriteLine(  							Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  						return;  					}  					token = tokens["protecttoken"];  				}    				string date = Regex.Replace(expiryDate.ToString("u")' "\\D"' "");  				string postData = string.Format("token={0}&protections=edit={1}|move={2}" +  					"&cascade={3}&expiry={4}|{5}&reason={6}&watchlist=nochange"'  					Bot.UrlEncode(token)'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					(cascadeMode == true ? "1" : "")'  					(expiryDate == DateTime.MinValue ? "" : date)'  					(expiryDate == DateTime.MinValue ? "" : date)'  					Bot.UrlEncode(reason)  				);    				string respStr = site.PostDataAndGetResult(site.apiPath + "?action=protect" +  					"&title=" + Bot.UrlEncode(title) + "&format=xml"' postData);  				if (respStr.Contains("<error"))  					throw new WikiBotException(  						string.Format(Bot.Msg("Failed to delete page \"{0}\".")' title));  			}  			else {  				string respStr = site.GetWebPage(site.indexPath + "?title=" +  					Bot.UrlEncode(title) + "&action=protect");  				Match m = site.regexes["editToken"].Match(respStr);  				string securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  					? m.Groups[2].Value : m.Groups[1].Value;  				if (string.IsNullOrEmpty(securityToken)) {  					Console.Error.WriteLine(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title);  					return;  				}    				if (site.watchList == null) {  					site.watchList = new PageList(site);  					site.watchList.FillFromWatchList();  				}  				watched = site.watchList.Contains(this);    				string postData = string.Format(  					"mwProtect-level-edit={0}&mwProtect-level-move={1}" +  					"&mwProtect-reason={2}&wpEditToken={3}&mwProtect-expiry={4}{5}{6}"'  					(editMode == 2 ? "sysop" : editMode == 1 ? "autoconfirmed" : "")'  					(renameMode == 2 ? "sysop" : renameMode == 1 ? "autoconfirmed" : "")'  					Bot.UrlEncode(reason)'  					Bot.UrlEncode(securityToken)'  					expiryDate == DateTime.MinValue ? "" : expiryDate.ToString("u")'  						// ToString("u") is like "2010-06-15 20:45:30Z"  					cascadeMode == true ? "&mwProtect-cascade=1" : ""'  					watched ? "&mwProtectWatch=1" : "");  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=" + Bot.UrlEncode(title) + "&action=protect"' postData);    				Regex successMsg = new Regex(  					"<h1[^>]*>(<span[^>]*>)?\\s*" + HttpUtility.HtmlEncode(title) + "\\s*<");  				if (!successMsg.IsMatch(respStr)) {  					throw new WikiBotException(string.Format(  						Bot.Msg("Unable to change protection mode for page \"{0}\".")' title));  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Watch,The following statement contains a magic number: if (site.useApi) {  				string res = site.apiPath + "?format=xml&action=query&meta=tokens&type=watch" +  					"&titles=" + Bot.UrlEncode(title);  				string respStr = site.GetWebPage(res);  				string securityToken = "";  				string titleFallback = "";  				try {  					securityToken = XElement.Parse(respStr).Element("query")  						.Element("tokens").Attribute("watchtoken").Value.ToString();  				}  				catch {    // FALLBACK for older version  					res = site.apiPath + "?format=xml&action=query&prop=info&intoken=watch" +  						"&titles=" + Bot.UrlEncode(title);  					respStr = site.GetWebPage(res);  					securityToken = XElement.Parse(respStr).Element("query").Element("pages")  						.Element("page").Attribute("watchtoken").Value.ToString();  					titleFallback = "&title=" + Bot.UrlEncode(title);  				}  				string postData = string.Format("titles={0}{1}&action=watch&token={2}&format=xml"'  					Bot.UrlEncode(title)' titleFallback'  					Bot.UrlEncode(securityToken));  				respStr = site.PostDataAndGetResult(site.apiPath' postData);  			}  			else {  				string res = site.indexPath + "?action=watch&title=" +  					Bot.UrlEncode(title);  				string respStr = site.GetWebPage(res);  				string securityToken = "";  				Match m = site.regexes["editToken"].Match(respStr);  				if (m.Success)  				{  					securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  						? m.Groups[2].Value : m.Groups[1].Value;  				}  				else  				{  					Console.Error.WriteLine(Bot.Msg("Can't add page \"{0}\" to watchlist.")'  						title);  					return;  				}  				string postData = string.Format("title={0}&action=watch&wpEditToken={1}"'  					Bot.UrlEncode(title)' Bot.UrlEncode(securityToken));  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=" + Bot.UrlEncode(title)' postData);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Unwatch,The following statement contains a magic number: if (site.useApi) {  				string res = site.apiPath + "?format=xml&action=query&meta=tokens&type=watch" +  					"&titles=" + Bot.UrlEncode(title);  				string respStr = site.GetWebPage(res);  				string securityToken = "";  				string titleFallback = "";  				try {  					securityToken = XElement.Parse(respStr).Element("query")  						.Element("tokens").Attribute("watchtoken").Value.ToString();  				}  				catch {    // FALLBACK for older version  					res = site.apiPath + "?format=xml&action=query&prop=info&intoken=watch" +  						"&titles=" + Bot.UrlEncode(title);  					respStr = site.GetWebPage(res);  					securityToken = XElement.Parse(respStr).Element("query").Element("pages")  						.Element("page").Attribute("watchtoken").Value.ToString();  					titleFallback = "&title=" + Bot.UrlEncode(title);  				}  				string postData = string.Format("titles={0}{1}&token={2}" +  					"&format=xml&action=watch&unwatch=1"' Bot.UrlEncode(title)'  					titleFallback' Bot.UrlEncode(securityToken));  				respStr = site.PostDataAndGetResult(site.apiPath' postData);  			}  			else {  				string res = site.indexPath + "?action=unwatch&title=" +  					Bot.UrlEncode(title);  				string respStr = site.GetWebPage(res);  				string securityToken = "";  				Match m = site.regexes["editToken"].Match(respStr);  				if (m.Success) {  					securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  						? m.Groups[2].Value : m.Groups[1].Value;  				}  				else {  					Console.Error.WriteLine(Bot.Msg("Can't remove page \"{0}\" from watchlist.")'  						title);  					return;  				}  				string postData = string.Format("title={0}&action=unwatch&wpEditToken={1}"'  					Bot.UrlEncode(title)' Bot.UrlEncode(securityToken));  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=" + Bot.UrlEncode(title)' postData);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: if (Path.GetFileNameWithoutExtension(filePathName).Length < 3)  				throw new WikiBotException(string.Format(Bot.Msg("Name of file \"{0}\" must " +  					"contain at least 3 characters (excluding extension) for successful upload.")'  					filePathName));
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: string targetName = site.RemoveNsPrefix(title' 6);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: int retryDelaySeconds = 60;
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(res);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.Method = "POST";  				string boundary = DateTime.Now.Ticks.ToString("x");  				webReq.ContentType = "multipart/form-data; boundary=" + boundary;  				webReq.UserAgent = Bot.botVer;  				webReq.CookieContainer = site.cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy(  					System.Net.Cache.HttpRequestCacheLevel.Refresh);  				StringBuilder sb = new StringBuilder();  				string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  				sb.Append(paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  				sb.Append(paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  				sb.Append(paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  				sb.Append(paramHead + "wpEditToken\"\r\n\r\n" + tokens["edittoken"] + "\r\n");  				sb.Append(paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  				sb.Append(paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  				sb.Append(paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  				sb.Append(paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  				sb.Append(paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  				sb.Append(paramHead + "wpUploadFile\"; filename=\"" +  					Bot.UrlEncode(Path.GetFileName(filePathName)) + "\"\r\n" +  					"Content-Type: application/octet-stream\r\n\r\n");  				byte[] postHeaderBytes = Encoding.UTF8.GetBytes(sb.ToString());  				byte[] fileBytes = File.ReadAllBytes(filePathName);  				byte[] boundaryBytes = Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");  				webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length +  					boundaryBytes.Length;  				Stream reqStream = webReq.GetRequestStream();  				reqStream.Write(postHeaderBytes' 0' postHeaderBytes.Length);  				reqStream.Write(fileBytes' 0' fileBytes.Length);  				reqStream.Write(boundaryBytes' 0' boundaryBytes.Length);  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						UploadImage(filePathName' description' license' copyStatus' source);  						return;  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > site.retryTimes)  							throw;  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) ((HttpWebResponse)webResp).StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem  							if (errorCounter > site.retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(res);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.Method = "POST";  				string boundary = DateTime.Now.Ticks.ToString("x");  				webReq.ContentType = "multipart/form-data; boundary=" + boundary;  				webReq.UserAgent = Bot.botVer;  				webReq.CookieContainer = site.cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy(  					System.Net.Cache.HttpRequestCacheLevel.Refresh);  				StringBuilder sb = new StringBuilder();  				string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  				sb.Append(paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  				sb.Append(paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  				sb.Append(paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  				sb.Append(paramHead + "wpEditToken\"\r\n\r\n" + tokens["edittoken"] + "\r\n");  				sb.Append(paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  				sb.Append(paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  				sb.Append(paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  				sb.Append(paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  				sb.Append(paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  				sb.Append(paramHead + "wpUploadFile\"; filename=\"" +  					Bot.UrlEncode(Path.GetFileName(filePathName)) + "\"\r\n" +  					"Content-Type: application/octet-stream\r\n\r\n");  				byte[] postHeaderBytes = Encoding.UTF8.GetBytes(sb.ToString());  				byte[] fileBytes = File.ReadAllBytes(filePathName);  				byte[] boundaryBytes = Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");  				webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length +  					boundaryBytes.Length;  				Stream reqStream = webReq.GetRequestStream();  				reqStream.Write(postHeaderBytes' 0' postHeaderBytes.Length);  				reqStream.Write(fileBytes' 0' fileBytes.Length);  				reqStream.Write(boundaryBytes' 0' boundaryBytes.Length);  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						UploadImage(filePathName' description' license' copyStatus' source);  						return;  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > site.retryTimes)  							throw;  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) ((HttpWebResponse)webResp).StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem  							if (errorCounter > site.retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(res);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.Method = "POST";  				string boundary = DateTime.Now.Ticks.ToString("x");  				webReq.ContentType = "multipart/form-data; boundary=" + boundary;  				webReq.UserAgent = Bot.botVer;  				webReq.CookieContainer = site.cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy(  					System.Net.Cache.HttpRequestCacheLevel.Refresh);  				StringBuilder sb = new StringBuilder();  				string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  				sb.Append(paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  				sb.Append(paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  				sb.Append(paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  				sb.Append(paramHead + "wpEditToken\"\r\n\r\n" + tokens["edittoken"] + "\r\n");  				sb.Append(paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  				sb.Append(paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  				sb.Append(paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  				sb.Append(paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  				sb.Append(paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  				sb.Append(paramHead + "wpUploadFile\"; filename=\"" +  					Bot.UrlEncode(Path.GetFileName(filePathName)) + "\"\r\n" +  					"Content-Type: application/octet-stream\r\n\r\n");  				byte[] postHeaderBytes = Encoding.UTF8.GetBytes(sb.ToString());  				byte[] fileBytes = File.ReadAllBytes(filePathName);  				byte[] boundaryBytes = Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");  				webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length +  					boundaryBytes.Length;  				Stream reqStream = webReq.GetRequestStream();  				reqStream.Write(postHeaderBytes' 0' postHeaderBytes.Length);  				reqStream.Write(fileBytes' 0' fileBytes.Length);  				reqStream.Write(boundaryBytes' 0' boundaryBytes.Length);  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						UploadImage(filePathName' description' license' copyStatus' source);  						return;  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > site.retryTimes)  							throw;  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) ((HttpWebResponse)webResp).StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem  							if (errorCounter > site.retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create(res);  				webReq.Proxy.Credentials = CredentialCache.DefaultCredentials;  				webReq.UseDefaultCredentials = true;  				webReq.Method = "POST";  				string boundary = DateTime.Now.Ticks.ToString("x");  				webReq.ContentType = "multipart/form-data; boundary=" + boundary;  				webReq.UserAgent = Bot.botVer;  				webReq.CookieContainer = site.cookies;  				if (Bot.unsafeHttpHeaderParsingUsed == 0) {  					webReq.ProtocolVersion = HttpVersion.Version10;  					webReq.KeepAlive = false;  				}  				webReq.CachePolicy = new System.Net.Cache.HttpRequestCachePolicy(  					System.Net.Cache.HttpRequestCacheLevel.Refresh);  				StringBuilder sb = new StringBuilder();  				string paramHead = "--" + boundary + "\r\nContent-Disposition: form-data; name=\"";  				sb.Append(paramHead + "maxlag\"\r\n\r\n" + site.maxLag + "\r\n");  				sb.Append(paramHead + "wpIgnoreWarning\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpDestFile\"\r\n\r\n" + targetName + "\r\n");  				sb.Append(paramHead + "wpUploadAffirm\"\r\n\r\n1\r\n");  				sb.Append(paramHead + "wpWatchthis\"\r\n\r\n0\r\n");  				sb.Append(paramHead + "wpEditToken\"\r\n\r\n" + tokens["edittoken"] + "\r\n");  				sb.Append(paramHead + "wpUploadCopyStatus\"\r\n\r\n" + copyStatus + "\r\n");  				sb.Append(paramHead + "wpUploadSource\"\r\n\r\n" + source + "\r\n");  				sb.Append(paramHead + "wpUpload\"\r\n\r\n" + "upload bestand" + "\r\n");  				sb.Append(paramHead + "wpLicense\"\r\n\r\n" + license + "\r\n");  				sb.Append(paramHead + "wpUploadDescription\"\r\n\r\n" + description + "\r\n");  				sb.Append(paramHead + "wpUploadFile\"; filename=\"" +  					Bot.UrlEncode(Path.GetFileName(filePathName)) + "\"\r\n" +  					"Content-Type: application/octet-stream\r\n\r\n");  				byte[] postHeaderBytes = Encoding.UTF8.GetBytes(sb.ToString());  				byte[] fileBytes = File.ReadAllBytes(filePathName);  				byte[] boundaryBytes = Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");  				webReq.ContentLength = postHeaderBytes.Length + fileBytes.Length +  					boundaryBytes.Length;  				Stream reqStream = webReq.GetRequestStream();  				reqStream.Write(postHeaderBytes' 0' postHeaderBytes.Length);  				reqStream.Write(fileBytes' 0' fileBytes.Length);  				reqStream.Write(boundaryBytes' 0' boundaryBytes.Length);  				try {  					webResp = (HttpWebResponse)webReq.GetResponse();  					break;  				}  				catch (WebException e) {    					if (webResp == null)  						throw;    					if (e.Message.Contains("Section=ResponseStatusLine")) {   // Known Squid problem  						Bot.SwitchUnsafeHttpHeaderParsing(true);  						UploadImage(filePathName' description' license' copyStatus' source);  						return;  					}    					if (webResp.Headers["Retry-After"] != null) {    // Server is very busy  						if (errorCounter > site.retryTimes)  							throw;  						int seconds;  						Int32.TryParse(webResp.Headers["Retry-After"]' out seconds);  						if (seconds > 0)  							retryDelaySeconds = seconds;  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' retryDelaySeconds));  						Bot.Wait(retryDelaySeconds);  					}  					else if (e.Status == WebExceptionStatus.ProtocolError) {  						int code = (int) ((HttpWebResponse)webResp).StatusCode;  						if (code == 500 || code == 502 || code == 503 || code == 504)  						{  							// Remote server problem  							if (errorCounter > site.retryTimes)  								throw;  							Console.Error.WriteLine(e.Message);  							Console.Error.WriteLine(string.Format(Bot.Msg(  								"Retrying in {0} seconds...")' retryDelaySeconds));  							Bot.Wait(retryDelaySeconds);    						}  						else  							throw;  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UploadImage,The following statement contains a magic number: title = site.GetNsPrefix(6) + targetName;
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The following statement contains a magic number: site.disambig = site.RemoveNsPrefix(disambigTemplate' 10);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,IsDisambig,The following statement contains a magic number: try {  				var disambigRedirects = (  					from link in xdoc2.Descendants("bl")  					select link.Attribute("title").Value  				).ToList();  				foreach (var disambigRedirect in disambigRedirects)  					site.disambig += '|' + site.RemoveNsPrefix(disambigRedirect' 10);  			}  			catch {}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for(int i = 0; i < matches.Count; i++) {  				string str = matches[i].Groups["title"].Value;  				if (str.StartsWith(site.GetNsPrefix(6)' true' site.langCulture) ||    // image  					str.StartsWith(site.GetEnglishNsPrefix(6)' true' site.langCulture) ||  					str.StartsWith(site.GetNsPrefix(14)' true' site.langCulture) ||    // category  					str.StartsWith(site.GetEnglishNsPrefix(14)' true' site.langCulture))  						continue;  				str = str.TrimStart(':');  				if (exclLinks.Contains(str))  					continue;  				int fragmentPosition = str.IndexOf("#");  				if (fragmentPosition == 0)    // in-page section link  					continue;  				else if (fragmentPosition != -1)  					str = str.Substring(0' fragmentPosition);  				pl.Add(new Page(site' str));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for(int i = 0; i < matches.Count; i++) {  				string str = matches[i].Groups["title"].Value;  				if (str.StartsWith(site.GetNsPrefix(6)' true' site.langCulture) ||    // image  					str.StartsWith(site.GetEnglishNsPrefix(6)' true' site.langCulture) ||  					str.StartsWith(site.GetNsPrefix(14)' true' site.langCulture) ||    // category  					str.StartsWith(site.GetEnglishNsPrefix(14)' true' site.langCulture))  						continue;  				str = str.TrimStart(':');  				if (exclLinks.Contains(str))  					continue;  				int fragmentPosition = str.IndexOf("#");  				if (fragmentPosition == 0)    // in-page section link  					continue;  				else if (fragmentPosition != -1)  					str = str.Substring(0' fragmentPosition);  				pl.Add(new Page(site' str));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for(int i = 0; i < matches.Count; i++) {  				string str = matches[i].Groups["title"].Value;  				if (str.StartsWith(site.GetNsPrefix(6)' true' site.langCulture) ||    // image  					str.StartsWith(site.GetEnglishNsPrefix(6)' true' site.langCulture) ||  					str.StartsWith(site.GetNsPrefix(14)' true' site.langCulture) ||    // category  					str.StartsWith(site.GetEnglishNsPrefix(14)' true' site.langCulture))  						continue;  				str = str.TrimStart(':');  				if (exclLinks.Contains(str))  					continue;  				int fragmentPosition = str.IndexOf("#");  				if (fragmentPosition == 0)    // in-page section link  					continue;  				else if (fragmentPosition != -1)  					str = str.Substring(0' fragmentPosition);  				pl.Add(new Page(site' str));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetLinks,The following statement contains a magic number: for(int i = 0; i < matches.Count; i++) {  				string str = matches[i].Groups["title"].Value;  				if (str.StartsWith(site.GetNsPrefix(6)' true' site.langCulture) ||    // image  					str.StartsWith(site.GetEnglishNsPrefix(6)' true' site.langCulture) ||  					str.StartsWith(site.GetNsPrefix(14)' true' site.langCulture) ||    // category  					str.StartsWith(site.GetEnglishNsPrefix(14)' true' site.langCulture))  						continue;  				str = str.TrimStart(':');  				if (exclLinks.Contains(str))  					continue;  				int fragmentPosition = str.IndexOf("#");  				if (fragmentPosition == 0)    // in-page section link  					continue;  				else if (fragmentPosition != -1)  					str = str.Substring(0' fragmentPosition);  				pl.Add(new Page(site' str));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: foreach (Match m in matches) {  				string str = m.Groups[4].Value.Trim();  				if (withSortKey)  					str += m.Groups[5].Value.Trim();  				if (withNameSpacePrefix)  					str = site.GetNsPrefix(14) + str;  				matchStrings.Add(str);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: foreach (Match m in matches) {  				string str = m.Groups[4].Value.Trim();  				if (withSortKey)  					str += m.Groups[5].Value.Trim();  				if (withNameSpacePrefix)  					str = site.GetNsPrefix(14) + str;  				matchStrings.Add(str);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetCategories,The following statement contains a magic number: foreach (Match m in matches) {  				string str = m.Groups[4].Value.Trim();  				if (withSortKey)  					str += m.Groups[5].Value.Trim();  				if (withNameSpacePrefix)  					str = site.GetNsPrefix(14) + str;  				matchStrings.Add(str);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetAllCategories,The following statement contains a magic number: for (int i = 0; i < iterator.Count; i++) {  				matchStrings.Add(site.GetNsPrefix(14) +  					site.RemoveNsPrefix(HttpUtility.HtmlDecode(iterator.Current.Value)' 14));  				iterator.MoveNext();  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetAllCategories,The following statement contains a magic number: for (int i = 0; i < iterator.Count; i++) {  				matchStrings.Add(site.GetNsPrefix(14) +  					site.RemoveNsPrefix(HttpUtility.HtmlDecode(iterator.Current.Value)' 14));  				iterator.MoveNext();  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddToCategory,The following statement contains a magic number: categoryName = site.RemoveNsPrefix(categoryName' 14);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddToCategory,The following statement contains a magic number: text += (categories.Count == 0 ? "\n" : "") +  				"\n[[" + site.GetNsPrefix(14) + categoryName + "]]\n";
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveFromCategory,The following statement contains a magic number: categoryName = site.RemoveNsPrefix(categoryName' 14).Trim();
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RemoveFromCategory,The following statement contains a magic number: text = Regex.Replace(text' @"\[\[((?i)" + site.GetNsPrefixes(14) + "): ?" +  				regexCategoryName + @"(\|.*?)?]]\r?\n?"' "");
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: if (GetNamespace() == 10)    // template  				str = Regex.Replace(str' @"\{\{\{.*?}}}"'    // remove template parameters  					match => new string('_'' match.Value.Length));
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: while ((startPos = str.LastIndexOf("{{")) != -1) {  				endPos = str.IndexOf("}}"' startPos);  				len = (endPos != -1) ? endPos - startPos + 2 : 2;  				if (len != 2)  					templPos.Add(startPos' len);  				str = str.Remove(startPos' len);  				str = str.Insert(startPos' new String('_'' len));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: while ((startPos = str.LastIndexOf("{{")) != -1) {  				endPos = str.IndexOf("}}"' startPos);  				len = (endPos != -1) ? endPos - startPos + 2 : 2;  				if (len != 2)  					templPos.Add(startPos' len);  				str = str.Remove(startPos' len);  				str = str.Insert(startPos' new String('_'' len));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: while ((startPos = str.LastIndexOf("{{")) != -1) {  				endPos = str.IndexOf("}}"' startPos);  				len = (endPos != -1) ? endPos - startPos + 2 : 2;  				if (len != 2)  					templPos.Add(startPos' len);  				str = str.Remove(startPos' len);  				str = str.Insert(startPos' new String('_'' len));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: foreach (KeyValuePair<int' int> pos in templPos) {  				str = text.Substring(pos.Key + 2' pos.Value - 4).Trim();  				if (str == "" || str[0] == '#')  					continue;  				if (site.regexes["magicWordsAndVars"].IsMatch(str))  					continue;  				if (!withParameters) {  					endPos = str.IndexOf('|');  					if (endPos != -1)  						str = str.Substring(0' endPos);  					if (str == "")  						continue;  				}  				if (!includePages) {  					if (str[0] == ':'  						|| site.regexes["allNsPrefixes"].IsMatch(str)  						|| str.StartsWith("msgnw:")  						|| str.StartsWith("MSGNW:"))  							continue;  				} else {  					if (str[0] == ':')  						str = str.Remove(0' 1);  					else if(str.StartsWith("msgnw:") || str.StartsWith("MSGNW:"))  						str = str.Remove(0' 6);  				}  				templates.Add(str);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: foreach (KeyValuePair<int' int> pos in templPos) {  				str = text.Substring(pos.Key + 2' pos.Value - 4).Trim();  				if (str == "" || str[0] == '#')  					continue;  				if (site.regexes["magicWordsAndVars"].IsMatch(str))  					continue;  				if (!withParameters) {  					endPos = str.IndexOf('|');  					if (endPos != -1)  						str = str.Substring(0' endPos);  					if (str == "")  						continue;  				}  				if (!includePages) {  					if (str[0] == ':'  						|| site.regexes["allNsPrefixes"].IsMatch(str)  						|| str.StartsWith("msgnw:")  						|| str.StartsWith("MSGNW:"))  							continue;  				} else {  					if (str[0] == ':')  						str = str.Remove(0' 1);  					else if(str.StartsWith("msgnw:") || str.StartsWith("MSGNW:"))  						str = str.Remove(0' 6);  				}  				templates.Add(str);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetTemplates,The following statement contains a magic number: foreach (KeyValuePair<int' int> pos in templPos) {  				str = text.Substring(pos.Key + 2' pos.Value - 4).Trim();  				if (str == "" || str[0] == '#')  					continue;  				if (site.regexes["magicWordsAndVars"].IsMatch(str))  					continue;  				if (!withParameters) {  					endPos = str.IndexOf('|');  					if (endPos != -1)  						str = str.Substring(0' endPos);  					if (str == "")  						continue;  				}  				if (!includePages) {  					if (str[0] == ':'  						|| site.regexes["allNsPrefixes"].IsMatch(str)  						|| str.StartsWith("msgnw:")  						|| str.StartsWith("MSGNW:"))  							continue;  				} else {  					if (str[0] == ':')  						str = str.Remove(0' 1);  					else if(str.StartsWith("msgnw:") || str.StartsWith("MSGNW:"))  						str = str.Remove(0' 6);  				}  				templates.Add(str);  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddTemplate,The following statement contains a magic number: Regex templateInsertion = new Regex("([^}]\n|}})\n*\\[\\[((?i)" +  				site.GetNsPrefixes(14) + "):");
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,AddTemplate,The following statement contains a magic number: if (templateInsertion.IsMatch(text))  				text = templateInsertion.Replace(text' "$1\n" + templateText + "\n\n[[" +  					site.GetNsPrefix(14)' 1);  			else {  				text += "\n\n" + templateText;  				text = text.TrimEnd("\r\n".ToCharArray());  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: foreach (string template in GetTemplates(true' false)) {  				if (templateTitleRegex.IsMatch(template)) {  					parameters = Page.ParseTemplate(template);  					string newTemplate;  					if (newParameterValue != null)  						parameters[templateParameter] = newParameterValue;  					else  						parameters.Remove(templateParameter);  					newTemplate = Page.FormatTemplate(templateTitle' parameters' template);  					Regex oldTemplate = new Regex(Regex.Escape(template));  					newTemplate = newTemplate.Substring(2' newTemplate.Length - 4);  					newTemplate = newTemplate.TrimEnd("\n".ToCharArray());  					text = oldTemplate.Replace(text' newTemplate' 1);  					i++;  					if (firstTemplateOnly == true)  						break;  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SetTemplateParameter,The following statement contains a magic number: foreach (string template in GetTemplates(true' false)) {  				if (templateTitleRegex.IsMatch(template)) {  					parameters = Page.ParseTemplate(template);  					string newTemplate;  					if (newParameterValue != null)  						parameters[templateParameter] = newParameterValue;  					else  						parameters.Remove(templateParameter);  					newTemplate = Page.FormatTemplate(templateTitle' parameters' template);  					Regex oldTemplate = new Regex(Regex.Escape(template));  					newTemplate = newTemplate.Substring(2' newTemplate.Length - 4);  					newTemplate = newTemplate.TrimEnd("\n".ToCharArray());  					text = oldTemplate.Replace(text' newTemplate' 1);  					i++;  					if (firstTemplateOnly == true)  						break;  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: if (template.StartsWith("{{"))  				template = template.Substring(2' template.Length - 4);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: if (template.StartsWith("{{"))  				template = template.Substring(2' template.Length - 4);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf("{{")) != -1)  			{  				endPos = str.IndexOf("}}"' startPos);  				len = (endPos != -1) ? endPos - startPos + 2 : 2;  				str = str.Remove(startPos' len);  				str = str.Insert(startPos' new String('_'' len));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf("{{")) != -1)  			{  				endPos = str.IndexOf("}}"' startPos);  				len = (endPos != -1) ? endPos - startPos + 2 : 2;  				str = str.Remove(startPos' len);  				str = str.Insert(startPos' new String('_'' len));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf("[[")) != -1)  			{  				endPos = str.IndexOf("]]"' startPos);  				len = (endPos != -1) ? endPos - startPos + 2 : 2;  				str = str.Remove(startPos' len);  				str = str.Insert(startPos' new String('_'' len));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,ParseTemplate,The following statement contains a magic number: while ((startPos = str.LastIndexOf("[[")) != -1)  			{  				endPos = str.IndexOf("]]"' startPos);  				len = (endPos != -1) ? endPos - startPos + 2 : 2;  				str = str.Remove(startPos' len);  				str = str.Insert(startPos' new String('_'' len));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FormatTemplate,The following statement contains a magic number: foreach (KeyValuePair<string' string> kvp in templateParams)  			{  				template += paramBreak;  				if (padding <= 0)  				{  					if (kvp.Key == i.ToString())  						template += kvp.Value;  					else  						template += kvp.Key + equalsSign + kvp.Value;  				}  				else  				{  					if (kvp.Key == i.ToString())  						template += kvp.Value.PadRight(padding + 3);  					else  						template += kvp.Key.PadRight(padding) + equalsSign + kvp.Value;  				}  				i++;  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: string nsPrefixes = site.GetNsPrefixes(6);
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: foreach (Match m in matches) {  				matchStrings.Add(site.GetNsPrefix(6) + m.Groups["filename"].Value.Trim());  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetImages,The following statement contains a magic number: if (Regex.IsMatch(text' "(?i)<gallery>")) {  				matches = Regex.Matches(text'  					@"^\s*((?i)" + nsPrefixes + "):(?<filename>[^|\\]\r?\n]+)");  				foreach (Match m in matches) {  					matchStrings.Add(site.GetNsPrefix(6) + m.Groups["filename"].Value.Trim());  				}  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,RenameTo,The following statement contains a magic number: if (site.useApi) {    				string token = "";  				if (site.tokens != null && site.tokens.ContainsKey("csrftoken"))  					token = site.tokens["csrftoken"];  				else {  					var tokens = GetSecurityTokens("move");  					if (tokens.ContainsKey("missing"))  						throw new WikiBotException(  							string.Format(Bot.Msg("Page \"{0}\" doesn't exist.")' title));  					if (!tokens.ContainsKey("movetoken") || tokens["movetoken"] == "")  						throw new WikiBotException(string.Format(  							Bot.Msg("Unable to rename page \"{0}\" to \"{1}\".")' title' newTitle));  					token = tokens["movetoken"];  				}    				string postData = string.Format("from={0}&to={1}&reason={2}{3}{4}&token={5}"'  					Bot.UrlEncode(title)'  					Bot.UrlEncode(newTitle)'  					Bot.UrlEncode(reason)'  					renameTalkPage ? "&movetalk=1" : ""'  					renameSubPages ? "&movesubpages=1" : ""'  					Bot.UrlEncode(token));  				string respStr = site.PostDataAndGetResult(site.apiPath + "?action=move" +  					"&format=xml"' postData);  				if (respStr.Contains("<error"))  					throw new WikiBotException(string.Format(  						Bot.Msg("Failed to rename page \"{0}\" to \"{1}\".")' title' newTitle));  			}  			else {  				string respStr = site.GetWebPage(site.indexPath + "?title=Special:Movepage/" +  					Bot.UrlEncode(title));  				Match m = site.regexes["editToken"].Match(respStr);  				string securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  					? m.Groups[2].Value : m.Groups[1].Value;  				if (string.IsNullOrEmpty(securityToken)) {  					Console.Error.WriteLine(  						Bot.Msg("Unable to rename page \"{0}\" to \"{1}\".")' title' newTitle);  					return;  				}    				if (site.watchList == null) {  					site.watchList = new PageList(site);  					site.watchList.FillFromWatchList();  				}  				watched = site.watchList.Contains(this);    				string postData = string.Format("wpNewTitle={0}&wpOldTitle={1}&wpEditToken={2}" +  					"&wpReason={3}{4}{5}{6}"'  					Bot.UrlEncode(newTitle)'  					Bot.UrlEncode(title)'  					Bot.UrlEncode(securityToken)'  					Bot.UrlEncode(reason)'  					renameTalkPage ? "&wpMovetalk=1" : ""'  					renameSubPages ? "&wpMovesubpages=1" : ""'  					watched ? "&wpWatch=1" : "");  				respStr = site.PostDataAndGetResult(site.indexPath +  					"?title=Special:Movepage&action=submit"' postData);    				if (site.messages == null)  					site.LoadMediawikiMessages(true);  				Regex successMsg = new Regex(  					"<h1[^>]*>(<span[^>]*>)?\\s*" + site.messages["pagemovedsub"] + "\\s*<");  				if (!successMsg.IsMatch(respStr))  					throw new WikiBotException(string.Format(  						Bot.Msg("Failed to rename page \"{0}\" to \"{1}\".")' title' newTitle));  			}
Magic Number,DotNetWikiBot,Page,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Delete,The following statement contains a magic number: if (site.useApi) {    				string token = "";  				if (site.tokens != null && site.tokens.ContainsKey("csrftoken"))  					token = site.tokens["csrftoken"];  				else {  					var tokens = GetSecurityTokens("delete");  					if (tokens.ContainsKey("missing"))  						throw new WikiBotException(  							string.Format(Bot.Msg("Page \"{0}\" doesn't exist.")' title));  					if (!tokens.ContainsKey("deletetoken") || tokens["deletetoken"] == "")  						throw new WikiBotException(  							string.Format(Bot.Msg("Unable to delete page \"{0}\".")' title));  					token = tokens["deletetoken"];  				}    				string postData = string.Format("reason={0}&token={1}"'  					Bot.UrlEncode(reason)' Bot.UrlEncode(token));  				string respStr = site.PostDataAndGetResult(site.apiPath + "?action=delete" +  					"&title=" + Bot.UrlEncode(title) + "&format=xml"' postData);  				if (respStr.Contains("<error"))  					throw new WikiBotException(  						string.Format(Bot.Msg("Failed to delete page \"{0}\".")' title));  			}  			else {  				string respStr = site.GetWebPage(site.indexPath + "?title=" +  					Bot.UrlEncode(title) + "&action=delete");  				Match m = site.regexes["editToken"].Match(respStr);  				string securityToken = string.IsNullOrEmpty(m.Groups[1].Value)  					? m.Groups[2].Value : m.Groups[1].Value;  				if (string.IsNullOrEmpty(securityToken)) {  					Console.Error.WriteLine(  						Bot.Msg("Unable to delete page \"{0}\".")' title);  					return;  				}    				string postData = string.Format("wpReason={0}&wpEditToken={1}"'  					Bot.UrlEncode(reason)' Bot.UrlEncode(securityToken));  				respStr = site.PostDataAndGetResult(site.indexPath + "?title=" +  					Bot.UrlEncode(title) + "&action=delete"' postData);    				if (site.messages == null)  					site.LoadMediawikiMessages(true);  				Regex successMsg = new Regex(  					"<h1[^>]*>(<span[^>]*>)?\\s*" + site.messages["actioncomplete"] + "\\s*<");  				if (!successMsg.IsMatch(respStr))  					throw new WikiBotException(  						string.Format(Bot.Msg("Failed to delete page \"{0}\".")' title));  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromAllPages,The following statement contains a magic number: if (site.useApi) {  				FillFromCustomApiQuery("list=allpages"' "apnamespace=" + neededNSpace +  					(acceptRedirects ? "" : "&apfilterredir=nonredirects") +  					(string.IsNullOrEmpty(firstPageTitle) ? "" : "&apfrom=" +  					Bot.UrlEncode(firstPageTitle)) +  					(string.IsNullOrEmpty(lastPageTitle) ? "" : "&apto=" +  					Bot.UrlEncode(lastPageTitle))' limit);  			}  			else {  				Console.WriteLine(  					Bot.Msg("Getting {0} page titles from \"Special:Allpages\" MediaWiki page...")'  					limit);  				int count = pages.Count;  				limit += pages.Count;  				Regex linkToPageRegex;  				if (acceptRedirects)  					linkToPageRegex = new Regex("<td[^>]*>(?:<div class=\"allpagesredirect\">)?" +  						"<a href=\"[^\"]*?\" (?:class=\"mw-redirect\" )?title=\"([^\"]*?)\">");  				else  					linkToPageRegex =  						new Regex("<td[^>]*><a href=\"[^\"]*?\" title=\"([^\"]*?)\">");  				MatchCollection matches;  				do {  					string res = site.indexPath + "?title=Special:Allpages" +  						"&from=" + Bot.UrlEncode(  							string.IsNullOrEmpty(firstPageTitle) ? "!" : firstPageTitle) +  						Bot.UrlEncode(  							string.IsNullOrEmpty(lastPageTitle) ? "" : ("&to=" + lastPageTitle)) +  						"&namespace=" + neededNSpace.ToString();  					matches = linkToPageRegex.Matches(site.GetWebPage(res));  					if (matches.Count < 2)  						break;  					for (int i = 1; i < matches.Count; i++)  						pages.Add(new Page(site'  							HttpUtility.HtmlDecode(matches[i].Groups[1].Value)));  					firstPageTitle = site.RemoveNsPrefix(pages[pages.Count - 1].title'  						neededNSpace) + "!";  				}  				while (pages.Count < limit);  				if (pages.Count > limit)  					pages.RemoveRange(limit' pages.Count - limit);  				Console.WriteLine(Bot.Msg("PageList has been filled with {0} page titles from " +  					"\"Special:Allpages\" MediaWiki page.")' (pages.Count - count).ToString());  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCategory,The following statement contains a magic number: pl.RemoveNamespaces(new int[] {14});
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The following statement contains a magic number: categoryName = site.RemoveNsPrefix(categoryName' 14);
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The following statement contains a magic number: categoryName = site.GetNsPrefix(14) + categoryName;
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategory,The following statement contains a magic number: if (site.useApi) {  				FillFromCustomApiQuery("list=categorymembers"' "cmtitle=" +  					Bot.UrlEncode(categoryName)' int.MaxValue);  			}  			else {    // TO DO: paging  				string src = "";  				MatchCollection matches;  				Regex nextPortionRegex = new Regex("&(?:amp;)?from=([^\"=]+)\" title=\"");  				do {  					string res = site.indexPath + "?title=" +  						Bot.UrlEncode(categoryName) +  						"&from=" + nextPortionRegex.Match(src).Groups[1].Value;  					src = site.GetWebPage(res);  					src = Bot.GetSubstring(src'  						" id=\"mw-subcategories\""' " id=\"mw-normal-catlinks\"");  					string relativeIndexPath =  						site.indexPath.Substring(site.indexPath.IndexOf('/'' 10));  					Regex linkRegex = new Regex(" href=\"(?:" +  						(!string.IsNullOrEmpty(site.shortPath) ?  							Regex.Escape(site.shortPath) + "|" : "") +  						Regex.Escape(relativeIndexPath) + "\\?title=)" +  						"(?<title>[^\"]+)");  					matches = linkRegex.Matches(src);  					foreach (Match match in matches)  						pages.Add(new Page(site'  							HttpUtility.UrlDecode(match.Groups["title"].Value)));  				}  				while (nextPortionRegex.IsMatch(src));  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromCategoryTree,The following statement contains a magic number: RemoveNamespaces(new int[] {14});
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillAllFromCategoryTree,The following statement contains a magic number: for (int i = 0; i < Count(); i++)  				if (pages[i].GetNamespace() == 14 && !doneCats.Contains(pages[i].title)) {  					FillAllFromCategory(pages[i].title);  					doneCats.Add(pages[i].title);  				}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (site.useApi) {  				string queryUri = site.apiPath + "?action=query&prop=revisions&titles=" +  					Bot.UrlEncode(pageTitle) + "&rvprop=ids|user|comment|timestamp" +  					"&format=xml&rvlimit=" + limit.ToString();  				string src = site.GetWebPage(queryUri);  				Page p;  				using (XmlReader reader = XmlReader.Create(new StringReader(src))) {  					reader.ReadToFollowing("api");  					reader.Read();  					if (reader.Name == "error")  						Console.Error.WriteLine(Bot.Msg("Error: {0}")' reader.GetAttribute("info"));  					while (reader.ReadToFollowing("rev")) {  						p = new Page(site' pageTitle);  						p.revision = reader.GetAttribute("revid");  						p.lastUser = reader.GetAttribute("user");  						p.comment = reader.GetAttribute("comment");  						p.timestamp =  							DateTime.Parse(reader.GetAttribute("timestamp")).ToUniversalTime();  						pages.Add(p);  					}  				}  			}  			else {  				// TO DO: paging  				string res = site.indexPath + "?title=" +  					Bot.UrlEncode(pageTitle) + "&limit=" + limit.ToString() +  						"&action=history";  				string src = site.GetWebPage(res);  				src = src.Substring(src.IndexOf("<ul id=\"pagehistory\">"));  				src = src.Substring(0' src.IndexOf("</ul>") + 5);  				Page p = null;  				using (XmlReader reader = Bot.GetXMLReader(src)) {  					while (reader.Read()) {  						if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  							p = new Page(site' pageTitle);  							p.lastMinorEdit = false;  							p.comment = "";  						}  						else if (reader.Name == "span"  							&& reader["class"] == "mw-history-histlinks") {  								reader.ReadToFollowing("a");  								p.revision = reader["href"].Substring(  									reader["href"].IndexOf("oldid=") + 6);  								DateTime.TryParse(reader.ReadString()'  									site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  						}  						else if (reader.Name == "span" && reader["class"] == "history-user") {  							reader.ReadToFollowing("a");  							p.lastUser = reader.ReadString();  						}  						else if (reader.Name == "abbr")  							p.lastMinorEdit = true;  						else if (reader.Name == "span" && reader["class"] == "history-size")  							int.TryParse(Regex.Replace(reader.ReadString()' @"[^-+\d]"' "")'  								out p.lastBytesModified);  						else if (reader.Name == "span" && reader["class"] == "comment") {  							p.comment = Regex.Replace(reader.ReadInnerXml().Trim()' "<.+?>"' "");  							p.comment = p.comment.Substring(1' p.comment.Length - 2);    // brackets  						}  						if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  							pages.Add(p);  					}  				}  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (site.useApi) {  				string queryUri = site.apiPath + "?action=query&prop=revisions&titles=" +  					Bot.UrlEncode(pageTitle) + "&rvprop=ids|user|comment|timestamp" +  					"&format=xml&rvlimit=" + limit.ToString();  				string src = site.GetWebPage(queryUri);  				Page p;  				using (XmlReader reader = XmlReader.Create(new StringReader(src))) {  					reader.ReadToFollowing("api");  					reader.Read();  					if (reader.Name == "error")  						Console.Error.WriteLine(Bot.Msg("Error: {0}")' reader.GetAttribute("info"));  					while (reader.ReadToFollowing("rev")) {  						p = new Page(site' pageTitle);  						p.revision = reader.GetAttribute("revid");  						p.lastUser = reader.GetAttribute("user");  						p.comment = reader.GetAttribute("comment");  						p.timestamp =  							DateTime.Parse(reader.GetAttribute("timestamp")).ToUniversalTime();  						pages.Add(p);  					}  				}  			}  			else {  				// TO DO: paging  				string res = site.indexPath + "?title=" +  					Bot.UrlEncode(pageTitle) + "&limit=" + limit.ToString() +  						"&action=history";  				string src = site.GetWebPage(res);  				src = src.Substring(src.IndexOf("<ul id=\"pagehistory\">"));  				src = src.Substring(0' src.IndexOf("</ul>") + 5);  				Page p = null;  				using (XmlReader reader = Bot.GetXMLReader(src)) {  					while (reader.Read()) {  						if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  							p = new Page(site' pageTitle);  							p.lastMinorEdit = false;  							p.comment = "";  						}  						else if (reader.Name == "span"  							&& reader["class"] == "mw-history-histlinks") {  								reader.ReadToFollowing("a");  								p.revision = reader["href"].Substring(  									reader["href"].IndexOf("oldid=") + 6);  								DateTime.TryParse(reader.ReadString()'  									site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  						}  						else if (reader.Name == "span" && reader["class"] == "history-user") {  							reader.ReadToFollowing("a");  							p.lastUser = reader.ReadString();  						}  						else if (reader.Name == "abbr")  							p.lastMinorEdit = true;  						else if (reader.Name == "span" && reader["class"] == "history-size")  							int.TryParse(Regex.Replace(reader.ReadString()' @"[^-+\d]"' "")'  								out p.lastBytesModified);  						else if (reader.Name == "span" && reader["class"] == "comment") {  							p.comment = Regex.Replace(reader.ReadInnerXml().Trim()' "<.+?>"' "");  							p.comment = p.comment.Substring(1' p.comment.Length - 2);    // brackets  						}  						if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  							pages.Add(p);  					}  				}  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPageHistory,The following statement contains a magic number: if (site.useApi) {  				string queryUri = site.apiPath + "?action=query&prop=revisions&titles=" +  					Bot.UrlEncode(pageTitle) + "&rvprop=ids|user|comment|timestamp" +  					"&format=xml&rvlimit=" + limit.ToString();  				string src = site.GetWebPage(queryUri);  				Page p;  				using (XmlReader reader = XmlReader.Create(new StringReader(src))) {  					reader.ReadToFollowing("api");  					reader.Read();  					if (reader.Name == "error")  						Console.Error.WriteLine(Bot.Msg("Error: {0}")' reader.GetAttribute("info"));  					while (reader.ReadToFollowing("rev")) {  						p = new Page(site' pageTitle);  						p.revision = reader.GetAttribute("revid");  						p.lastUser = reader.GetAttribute("user");  						p.comment = reader.GetAttribute("comment");  						p.timestamp =  							DateTime.Parse(reader.GetAttribute("timestamp")).ToUniversalTime();  						pages.Add(p);  					}  				}  			}  			else {  				// TO DO: paging  				string res = site.indexPath + "?title=" +  					Bot.UrlEncode(pageTitle) + "&limit=" + limit.ToString() +  						"&action=history";  				string src = site.GetWebPage(res);  				src = src.Substring(src.IndexOf("<ul id=\"pagehistory\">"));  				src = src.Substring(0' src.IndexOf("</ul>") + 5);  				Page p = null;  				using (XmlReader reader = Bot.GetXMLReader(src)) {  					while (reader.Read()) {  						if (reader.Name == "li" && reader.NodeType == XmlNodeType.Element) {  							p = new Page(site' pageTitle);  							p.lastMinorEdit = false;  							p.comment = "";  						}  						else if (reader.Name == "span"  							&& reader["class"] == "mw-history-histlinks") {  								reader.ReadToFollowing("a");  								p.revision = reader["href"].Substring(  									reader["href"].IndexOf("oldid=") + 6);  								DateTime.TryParse(reader.ReadString()'  									site.regCulture' DateTimeStyles.AssumeLocal' out p.timestamp);  						}  						else if (reader.Name == "span" && reader["class"] == "history-user") {  							reader.ReadToFollowing("a");  							p.lastUser = reader.ReadString();  						}  						else if (reader.Name == "abbr")  							p.lastMinorEdit = true;  						else if (reader.Name == "span" && reader["class"] == "history-size")  							int.TryParse(Regex.Replace(reader.ReadString()' @"[^-+\d]"' "")'  								out p.lastBytesModified);  						else if (reader.Name == "span" && reader["class"] == "comment") {  							p.comment = Regex.Replace(reader.ReadInnerXml().Trim()' "<.+?>"' "");  							p.comment = p.comment.Substring(1' p.comment.Length - 2);    // brackets  						}  						if (reader.Name == "li" && reader.NodeType == XmlNodeType.EndElement)  							pages.Add(p);  					}  				}  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The following statement contains a magic number: imageFileTitle = site.RemoveNsPrefix(imageFileTitle' 6);
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The following statement contains a magic number: if (site.useApi) {  				FillFromCustomApiQuery("list=imageusage"' "iutitle=" +  					Bot.UrlEncode(site.GetNsPrefix(6)) +  					Bot.UrlEncode(imageFileTitle)' int.MaxValue);  			}  			else {    // TO DO: paging  				string res = site.indexPath + "?title=" +  					Bot.UrlEncode(site.GetNsPrefix(6)) +  					Bot.UrlEncode(imageFileTitle);  				string src = site.GetWebPage(res);  				try {  					src = Bot.GetSubstring(src' "<h2 id=\"filelinks\""' "<h2 id=\"globalusage\"");  				}  				catch (ArgumentOutOfRangeException) {  					Console.Error.WriteLine(  						Bot.Msg("No page contains the image \"{0}\".")' imageFileTitle);  					return;  				}  				MatchCollection matches = site.regexes["titleLink"].Matches(src);  				foreach (Match match in matches)  					pages.Add(new Page(site' HttpUtility.HtmlDecode(match.Groups["title"].Value)));  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromPagesUsingImage,The following statement contains a magic number: if (site.useApi) {  				FillFromCustomApiQuery("list=imageusage"' "iutitle=" +  					Bot.UrlEncode(site.GetNsPrefix(6)) +  					Bot.UrlEncode(imageFileTitle)' int.MaxValue);  			}  			else {    // TO DO: paging  				string res = site.indexPath + "?title=" +  					Bot.UrlEncode(site.GetNsPrefix(6)) +  					Bot.UrlEncode(imageFileTitle);  				string src = site.GetWebPage(res);  				try {  					src = Bot.GetSubstring(src' "<h2 id=\"filelinks\""' "<h2 id=\"globalusage\"");  				}  				catch (ArgumentOutOfRangeException) {  					Console.Error.WriteLine(  						Bot.Msg("No page contains the image \"{0}\".")' imageFileTitle);  					return;  				}  				MatchCollection matches = site.regexes["titleLink"].Matches(src);  				foreach (Match match in matches)  					pages.Add(new Page(site' HttpUtility.HtmlDecode(match.Groups["title"].Value)));  			}
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromGoogleSearchResults,The following statement contains a magic number: Uri res = new Uri("http://www.google.com/search?q=" + Bot.UrlEncode(searchStr) +  				"+site:" + site.address.Substring(site.address.IndexOf("://") + 3) +  				"&num=" + limit.ToString());
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,FillFromGoogleSearchResults,The following statement contains a magic number: string relativeIndexPath = site.indexPath.Substring(site.indexPath.IndexOf('/'' 10));
Magic Number,DotNetWikiBot,PageList,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SaveSmoothly,The following statement contains a magic number: SaveSmoothly(site.forceSaveDelay > 0 ? site.forceSaveDelay : 5'  				site.defaultEditComment' site.minorEditByDefault);
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Bot,The following statement contains a magic number: try {  				string verInfo = GetWebResource(  					new Uri("http://dotnetwikibot.sourceforge.net/info.php")' "");  				Match currentVer = Regex.Match(verInfo' "(?i)stable version: (([^ ]+)[^<]+)");  				if (new Version(currentVer.Groups[2].Value) > version)  					Console.WriteLine("*** " + Msg("New version is available") + ": " +  						currentVer.Groups[1].Value + " ***\n");  			}  			catch (Exception) {}
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The following statement contains a magic number: if (text.StartsWith("<?xml ")) {  				cursor += text.IndexOf("?>"' cursor) + 2;  				while (cursor < text.Length && (text[cursor] == ' ' || text[cursor] == '\n'  					|| text[cursor] == '\r' || text[cursor] == '\t'))  						cursor++;    // skip whitespaces  			}
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetXMLSubstring,The following statement contains a magic number: if (text.StartsWith("<!--"))    // comment  				cursor += text.IndexOf("-->"' cursor) + 3;
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,UrlEncode,The following statement contains a magic number: int limit = 32766;
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,Wait,The following statement contains a magic number: Thread.Sleep(seconds * 1000);
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,SwitchUnsafeHttpHeaderParsing,The following statement contains a magic number: if (unsafeHttpHeaderParsingUsed == 2)  				unsafeHttpHeaderParsingUsed = section.HttpWebRequest.UseUnsafeHeaderParsing ? 1 : 0;
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				try {  					Bot.InitWebClient();  					if (string.IsNullOrEmpty(postData))  						webResourceText = Bot.webClient.DownloadString(address);  					else  						webResourceText = Bot.webClient.UploadString(address' postData);  					break;  				}  				catch (WebException e) {  					if (errorCounter > 3)    // retry 3 times by default  						throw;  					if (Regex.IsMatch(e.Message' ": \\(50[0234]\\) ")) {  						// Remote server problem' retry  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' 60));  						Bot.Wait(60);  					}  					else if (e.Message.Contains("Section=ResponseStatusLine")) {  						// Known Squid problem  						SwitchUnsafeHttpHeaderParsing(true);  						return GetWebResource(address' postData);  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				try {  					Bot.InitWebClient();  					if (string.IsNullOrEmpty(postData))  						webResourceText = Bot.webClient.DownloadString(address);  					else  						webResourceText = Bot.webClient.UploadString(address' postData);  					break;  				}  				catch (WebException e) {  					if (errorCounter > 3)    // retry 3 times by default  						throw;  					if (Regex.IsMatch(e.Message' ": \\(50[0234]\\) ")) {  						// Remote server problem' retry  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' 60));  						Bot.Wait(60);  					}  					else if (e.Message.Contains("Section=ResponseStatusLine")) {  						// Known Squid problem  						SwitchUnsafeHttpHeaderParsing(true);  						return GetWebResource(address' postData);  					}  					else  						throw;  				}  			}
Magic Number,DotNetWikiBot,Bot,C:\repos\ZeroK-RTS_Zero-K-Infrastructure\DotNetWikiBot\DotNetWikiBot.cs,GetWebResource,The following statement contains a magic number: for (int errorCounter = 0; true; errorCounter++) {  				try {  					Bot.InitWebClient();  					if (string.IsNullOrEmpty(postData))  						webResourceText = Bot.webClient.DownloadString(address);  					else  						webResourceText = Bot.webClient.UploadString(address' postData);  					break;  				}  				catch (WebException e) {  					if (errorCounter > 3)    // retry 3 times by default  						throw;  					if (Regex.IsMatch(e.Message' ": \\(50[0234]\\) ")) {  						// Remote server problem' retry  						Console.Error.WriteLine(e.Message);  						Console.Error.WriteLine(string.Format(Bot.Msg(  							"Retrying in {0} seconds...")' 60));  						Bot.Wait(60);  					}  					else if (e.Message.Contains("Section=ResponseStatusLine")) {  						// Known Squid problem  						SwitchUnsafeHttpHeaderParsing(true);  						return GetWebResource(address' postData);  					}  					else  						throw;  				}  			}
