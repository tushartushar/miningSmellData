Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,SearchPrincipals,The method has 114 lines of code.
Long Method,Nauplius.SP.UserSync,ThumbnailHandler,C:\repos\Nauplius_FoundationSync\ThumbnailHandler.cs,GetThumbnail,The method has 124 lines of code.
Long Method,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The method has 175 lines of code.
Complex Method,Nauplius.SP.UserSync,SyncJob,C:\repos\Nauplius_FoundationSync\SyncJob.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,Cyclomatic complexity of the method is 9
Long Parameter List,Nauplius.SP.UserSync,FoudationSync,C:\repos\Nauplius_FoundationSync\Logging.cs,LogMessage,The method has 5 parameters. Parameters: id' LogCategory' traceSeverity' message' data
Long Parameter List,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,SearchPrincipals,The method has 6 parameters. Parameters: objPrincipals' webApplication' site' isGroup' j' u
Long Parameter List,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The method has 5 parameters. Parameters: group' directoryEntry' listItems' itemCount' u
Long Parameter List,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The method has 5 parameters. Parameters: user' directoryEntry' listItems' itemCount' u
Long Statement,Nauplius.SP.UserSync,FoudationSync,C:\repos\Nauplius_FoundationSync\Logging.cs,ProvideAreas,The length of the statement  "                        new SPDiagnosticsCategory(LogCategories.FoundationSync' null' TraceSeverity.Medium' EventSeverity.Information' 0' 0' false' true)' " is 130.
Long Statement,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,SearchPrincipals,The length of the statement  "                    List<string> userProperties = new List<string> { "displayName"' "mail"' "title"' "mobile"' "proxyAddresses"' "department"' " is 122.
Long Statement,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,IsActive,The length of the statement  "                    string.Format("Unexpected exception attempting to determine if user is active: User: {0}. Status value: {1}. {2}"' de.Username 'status' e.StackTrace)' null); " is 157.
Long Statement,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,RemoveUsers,The length of the statement  "                            string.Format("Unexpected exception attempting to remove user: User: {0} (ID: {1}). Url: {2}. {3}"' objPrincipal.LoginName' objPrincipal.ID' siteUrl' e.StackTrace)' null); " is 171.
Long Statement,Nauplius.SP.UserSync,ThumbnailHandler,C:\repos\Nauplius_FoundationSync\ThumbnailHandler.cs,GetThumbnail,The length of the statement  "                var uri = new UriBuilder(string.Format("{0}/s/GetUserPhoto?email={1}&size=HR{2}"' FoundationSyncSettings.Local.EwsUrl' user.Email' ewsPictureSize)); " is 148.
Long Statement,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The length of the statement  "                            string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 147.
Long Statement,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The length of the statement  "                                        string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 152.
Long Statement,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The length of the statement  "                                    string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 151.
Long Statement,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The length of the statement  "                            string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 122.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                            string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                         " is 146.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                            string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 146.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                           string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                        " is 149.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                           string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);      " is 152.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                                string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                               " is 148.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                                        string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                     " is 151.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                                    string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 151.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                                    string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 151.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                            string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 151.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                            string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 166.
Long Statement,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The length of the statement  "                            string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null); " is 121.
Empty Catch Block,Nauplius.SP.UserSync.Features.UserSync,UserSyncEventReceiver,C:\repos\Nauplius_FoundationSync\Features\FoundationSync\FoundationSync.EventReceiver.cs,FeatureInstalled,The method has an empty catch block.
Empty Catch Block,Nauplius.SP.UserSync.Features.UserSync,UserSyncEventReceiver,C:\repos\Nauplius_FoundationSync\Features\FoundationSync\FoundationSync.EventReceiver.cs,FeatureUninstalling,The method has an empty catch block.
Empty Catch Block,Nauplius.SP.UserSync.Features.UserSync,UserSyncEventReceiver,C:\repos\Nauplius_FoundationSync\Features\FoundationSync\FoundationSync.EventReceiver.cs,RegisterLogging,The method has an empty catch block.
Empty Catch Block,Nauplius.SP.UserSync,FoudationSync,C:\repos\Nauplius_FoundationSync\Logging.cs,LogMessage,The method has an empty catch block.
Empty Catch Block,Nauplius.SP.UserSync,LoggingEx,C:\repos\Nauplius_FoundationSync\LoggingEx.cs,SaveReport,The method has an empty catch block.
Empty Catch Block,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,SearchPrincipals,The method has an empty catch block.
Magic Number,Nauplius.SP.UserSync.Features.UserSync,UserSyncEventReceiver,C:\repos\Nauplius_FoundationSync\Features\FoundationSync\FoundationSync.EventReceiver.cs,FeatureActivated,The following statement contains a magic number: var schedule = new SPDailySchedule { BeginHour = 0' EndHour = 4 };
Magic Number,Nauplius.SP.UserSync.ADMIN.FoundationSync,ProfileSettings,C:\repos\Nauplius_FoundationSync\ADMIN\FoundationSync\ProfileSettings.aspx.cs,ValidateExchangeConnection,The following statement contains a magic number: if (!Uri.IsWellFormedUriString(tBox2.Text' UriKind.Absolute))              {                  FoundationSyncSettings.Local.UseExchange = false;                  FoundationSyncSettings.Local.EwsUrl = null;                  FoundationSyncSettings.Local.Update();                }              else              {                  try                  {                      FoundationSyncSettings.Local.UseExchange = true;                        var tbox2Uri = new Uri(tBox2.Text);                      FoundationSyncSettings.Local.EwsUrl = tbox2Uri;                      FoundationSyncSettings.Local.Update();                  }                  catch (Exception ex)                  {                      FoudationSync.LogMessage(1002' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                          string.Format("Unable to set UseExchange or EwsUrl values with error {0}."' ex.InnerException)' null);                  }                              }
Magic Number,Nauplius.SP.UserSync.ADMIN.FoundationSync,ProfileSettings,C:\repos\Nauplius_FoundationSync\ADMIN\FoundationSync\ProfileSettings.aspx.cs,LoadSettings,The following statement contains a magic number: try              {                  if (FoundationSyncSettings.Local.UseExchange)                  {                      tBox2.Text = FoundationSyncSettings.Local.EwsUrl.AbsoluteUri;                  }              }              catch (Exception)              {                  FoudationSync.LogMessage(1002' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      string.Format("Unable to retrieve EwsUrl when loading settings.")' null);                              }
Magic Number,Nauplius.SP.UserSync.ADMIN.FoundationSync,ProfileSettings,C:\repos\Nauplius_FoundationSync\ADMIN\FoundationSync\ProfileSettings.aspx.cs,LoadSettings,The following statement contains a magic number: try              {                  if (FoundationSyncSettings.Local.PictureStorageUrl != null)                  {                      var uri = FoundationSyncSettings.Local.PictureStorageUrl.AbsoluteUri;                        if(uri.EndsWith("/UserPhotos"))                      {                          tBox1.Text = uri.Replace("/UserPhotos"' string.Empty);                      }                  }              }              catch (Exception)              {                  FoudationSync.LogMessage(1002' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      string.Format("Unable to retrieve PictureStorageUrl when loading settings.")' null);                   }
Magic Number,Nauplius.SP.UserSync.Features.UserPhotosFeature,UserPhotosFeatureEventReceiver,C:\repos\Nauplius_FoundationSync\Features\UserPhotosFeature\UserPhotosFeature.EventReceiver.cs,CreateList,The following statement contains a magic number: try              {                  web.AllowUnsafeUpdates = true;                  web.Lists.Add("UserPhotos"'                      "This library holds User Photos pulled from Active Directory and/or Exchange"'                      SPListTemplateType.PictureLibrary);                  web.AllowUnsafeUpdates = false;                  web.Update();                    var list = web.GetList("UserPhotos");                  list.OnQuickLaunch = false;                  list.EnableThrottling = false;                  list.EnableFolderCreation = false;                  list.Hidden = true;                  list.Update();              }              catch (Exception ex)              {                  FoudationSync.LogMessage(1003' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected'                      string.Format("Unable to create UserPhotos library. " +                                    "Please create the UserPhotos library manually. {0}"'                      ex.InnerException)' null);              }
Magic Number,Nauplius.SP.UserSync.Features.UserPhotosFeature,UserPhotosFeatureEventReceiver,C:\repos\Nauplius_FoundationSync\Features\UserPhotosFeature\UserPhotosFeature.EventReceiver.cs,SetPermissions,The following statement contains a magic number: try              {                  var list = web.GetList("UserPhotos");                  var allUsers = web.EnsureUser("NT AUTHORITY\\authenticated users");                  var roleAssignment = new SPRoleAssignment(allUsers);                  var readerRole = web.RoleDefinitions.GetByType(SPRoleType.Reader);                    roleAssignment.RoleDefinitionBindings.Add(readerRole);                    if (!list.HasUniqueRoleAssignments)                  {                      list.BreakRoleInheritance(true);                  }                    list.RoleAssignments.Add(roleAssignment);                  list.Update();              }              catch (Exception ex)              {                  FoudationSync.LogMessage(1003' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected'                      string.Format("Unable to set permissions on UserPhotos list. " +                                    "Add Authenticated Users with Read rights manually. {0}"'                      ex.InnerException)' null);              }
Magic Number,Nauplius.SP.UserSync,FoundationSyncStorage,C:\repos\Nauplius_FoundationSync\FoundationSyncStorage.cs,SyncSettings,The following statement contains a magic number: try              {                  var foundationSyncSettings = FoundationSyncSettings.Local;                    if (foundationSyncSettings != null) return foundationSyncSettings;              }              catch (Exception e)              {                  FoudationSync.LogMessage(504' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      "Unable to read FoundationSyncSetting object. " + e.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,LoggingEx,C:\repos\Nauplius_FoundationSync\LoggingEx.cs,CreateReportStorage,The following statement contains a magic number: try              {                  var adminWebApplication = SPAdministrationWebApplication.Local;                    using (SPSite site = adminWebApplication.Sites[0])                  {                      var web = site.OpenWeb(site.RootWeb.ID);                        var library = (from SPList list in web.Lists                                     where list.RootFolder.Name.Equals(reportLibrary)                                     select list).FirstOrDefault();                        if (library == null)                      {                          var listTemplates = web.ListTemplates["Document Library"];                          var documentTemplate = (from SPDocTemplate dt in web.DocTemplates                              where dt.Type == 100                              select dt).FirstOrDefault();                          var listGuid = web.Lists.Add(reportLibrary'                              "Reporting on FoundationSync activity."' listTemplates'                              documentTemplate);                            library = (SPDocumentLibrary) web.Lists[listGuid];                          library.OnQuickLaunch = true;                          library.EnableFolderCreation = false;                          library.Update();                          settingsStorage.SyncSettings().LoggingExLibrary = (SPDocumentLibrary) library;                      }                      else                      {                          settingsStorage.SyncSettings().LoggingExLibrary = (SPDocumentLibrary) library;                      }                  }              }              catch (Exception e)              {                  FoudationSync.LogMessage(402' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      "Unable to create Report Storage in Central Administration for" +                      " FoundationSyncSetting object. " + e.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,LoggingEx,C:\repos\Nauplius_FoundationSync\LoggingEx.cs,CreateReportStorage,The following statement contains a magic number: try              {                  var adminWebApplication = SPAdministrationWebApplication.Local;                    using (SPSite site = adminWebApplication.Sites[0])                  {                      var web = site.OpenWeb(site.RootWeb.ID);                        var library = (from SPList list in web.Lists                                     where list.RootFolder.Name.Equals(reportLibrary)                                     select list).FirstOrDefault();                        if (library == null)                      {                          var listTemplates = web.ListTemplates["Document Library"];                          var documentTemplate = (from SPDocTemplate dt in web.DocTemplates                              where dt.Type == 100                              select dt).FirstOrDefault();                          var listGuid = web.Lists.Add(reportLibrary'                              "Reporting on FoundationSync activity."' listTemplates'                              documentTemplate);                            library = (SPDocumentLibrary) web.Lists[listGuid];                          library.OnQuickLaunch = true;                          library.EnableFolderCreation = false;                          library.Update();                          settingsStorage.SyncSettings().LoggingExLibrary = (SPDocumentLibrary) library;                      }                      else                      {                          settingsStorage.SyncSettings().LoggingExLibrary = (SPDocumentLibrary) library;                      }                  }              }              catch (Exception e)              {                  FoudationSync.LogMessage(402' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      "Unable to create Report Storage in Central Administration for" +                      " FoundationSyncSetting object. " + e.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,SearchPrincipals,The following statement contains a magic number: {                  var listItems = site.RootWeb.SiteUserInfoList.Items;                  var itemCount = listItems.Count;                    foreach (SPUser objPrincipal in objPrincipals)                  {                      var claimProvider = SPClaimProviderManager.Local;                      string loginName' filter;                      List<string> userProperties = new List<string> { "displayName"' "mail"' "title"' "mobile"' "proxyAddresses"' "department"'                              "sn"' "givenName"' "telephoneNumber"' "wWWHomePage"' "physicalDeliveryOfficeName"' "thumbnailPhoto" };                      List<string> groupProperties = new List<string> { "sAMAccountName"' "mail"' "proxyAddresses" };                        if (isGroup)                      {                          if (claimProvider != null && objPrincipal.LoginName.Contains(@"c:0+.w"))                          {                              var sid = claimProvider.DecodeClaim(objPrincipal.LoginName).Value;                                try                              {                                  loginName = new SecurityIdentifier(sid).Translate(typeof(NTAccount)).ToString();                                }                              catch (Exception exception)                              {                                  FoudationSync.LogMessage(503' FoudationSync.LogCategories.FoundationSync'                                      TraceSeverity.High'                                      exception.Message + exception.StackTrace' null);                                  continue;                              }                          }                          else                          {                              loginName = objPrincipal.LoginName;                          }                            var ldapPath = GetDomain(loginName.Split('\\')[0]);                            var entry = new DirectoryEntry(@"LDAP://" + ldapPath);                          var i = loginName.LastIndexOf('\\');                          var objName = loginName.Remove(0' i + 1);                          filter = string.Format("(&(objectClass=group)(sAMAccountName={0}))"' objName);                            var searcher = new DirectorySearcher(entry' filter' groupProperties.ToArray())                          {                              ReferralChasing = chasing                          };                            try                          {                              var result = searcher.FindOne();                              var directoryEntry = result.GetDirectoryEntry();                              UpdateGroup.Group(objPrincipal' directoryEntry' listItems' itemCount' u);                          }                          catch (DirectoryServicesCOMException exception)                          {                              FoudationSync.LogMessage(403' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  exception.Message + exception.StackTrace' null);                          }                      }                      else                      {                          if (claimProvider != null && objPrincipal.LoginName.Contains(@"i:0#.w"))                          {                              loginName = claimProvider.DecodeClaim(objPrincipal.LoginName).Value;                          }                          else                          {                              loginName = objPrincipal.LoginName;                          }                            try                          {                              foreach (var attribute in FoundationSyncSettings.Local.AdditionalUserAttributes)                              {                                  userProperties.Add(attribute.Value);                              }                          }                          catch(Exception)                          { }                            var ldapPath = GetDomain(loginName.Split('\\')[0]);                            if (string.IsNullOrEmpty(ldapPath))                              continue;                            var entry = new DirectoryEntry("LDAP://" + ldapPath);                            filter = string.Format("(&(objectClass=user)(sAMAccountName={0}))"' loginName.Split('\\')[1]);                          var searcher = new DirectorySearcher(entry' filter' userProperties.ToArray())                          {                              ReferralChasing = chasing                          };                            try                          {                              var result = searcher.FindOne();                                if (result == null)                              {                                  if (FoundationSyncSettings.Local.DeleteUsers)                                  {                                      RemoveUsers(objPrincipal' site.Url' j);                                      }                                  continue;                              }                                   if (!IsActive(result.GetDirectoryEntry()))                              {                                  if (FoundationSyncSettings.Local.DeleteDisabledUsers)                                  {                                      RemoveUsers(objPrincipal' site.Url' j);                                  }                                  continue;                              }                                var directoryEntry = result.GetDirectoryEntry();                              UpdateUser.User(objPrincipal' directoryEntry' listItems' itemCount' u);                          }                          catch (DirectoryServicesCOMException exception)                          {                              FoudationSync.LogMessage(404' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  exception.Message + exception.StackTrace' null);                          }                      }                  }              }
Magic Number,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,SearchPrincipals,The following statement contains a magic number: {                  var listItems = site.RootWeb.SiteUserInfoList.Items;                  var itemCount = listItems.Count;                    foreach (SPUser objPrincipal in objPrincipals)                  {                      var claimProvider = SPClaimProviderManager.Local;                      string loginName' filter;                      List<string> userProperties = new List<string> { "displayName"' "mail"' "title"' "mobile"' "proxyAddresses"' "department"'                              "sn"' "givenName"' "telephoneNumber"' "wWWHomePage"' "physicalDeliveryOfficeName"' "thumbnailPhoto" };                      List<string> groupProperties = new List<string> { "sAMAccountName"' "mail"' "proxyAddresses" };                        if (isGroup)                      {                          if (claimProvider != null && objPrincipal.LoginName.Contains(@"c:0+.w"))                          {                              var sid = claimProvider.DecodeClaim(objPrincipal.LoginName).Value;                                try                              {                                  loginName = new SecurityIdentifier(sid).Translate(typeof(NTAccount)).ToString();                                }                              catch (Exception exception)                              {                                  FoudationSync.LogMessage(503' FoudationSync.LogCategories.FoundationSync'                                      TraceSeverity.High'                                      exception.Message + exception.StackTrace' null);                                  continue;                              }                          }                          else                          {                              loginName = objPrincipal.LoginName;                          }                            var ldapPath = GetDomain(loginName.Split('\\')[0]);                            var entry = new DirectoryEntry(@"LDAP://" + ldapPath);                          var i = loginName.LastIndexOf('\\');                          var objName = loginName.Remove(0' i + 1);                          filter = string.Format("(&(objectClass=group)(sAMAccountName={0}))"' objName);                            var searcher = new DirectorySearcher(entry' filter' groupProperties.ToArray())                          {                              ReferralChasing = chasing                          };                            try                          {                              var result = searcher.FindOne();                              var directoryEntry = result.GetDirectoryEntry();                              UpdateGroup.Group(objPrincipal' directoryEntry' listItems' itemCount' u);                          }                          catch (DirectoryServicesCOMException exception)                          {                              FoudationSync.LogMessage(403' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  exception.Message + exception.StackTrace' null);                          }                      }                      else                      {                          if (claimProvider != null && objPrincipal.LoginName.Contains(@"i:0#.w"))                          {                              loginName = claimProvider.DecodeClaim(objPrincipal.LoginName).Value;                          }                          else                          {                              loginName = objPrincipal.LoginName;                          }                            try                          {                              foreach (var attribute in FoundationSyncSettings.Local.AdditionalUserAttributes)                              {                                  userProperties.Add(attribute.Value);                              }                          }                          catch(Exception)                          { }                            var ldapPath = GetDomain(loginName.Split('\\')[0]);                            if (string.IsNullOrEmpty(ldapPath))                              continue;                            var entry = new DirectoryEntry("LDAP://" + ldapPath);                            filter = string.Format("(&(objectClass=user)(sAMAccountName={0}))"' loginName.Split('\\')[1]);                          var searcher = new DirectorySearcher(entry' filter' userProperties.ToArray())                          {                              ReferralChasing = chasing                          };                            try                          {                              var result = searcher.FindOne();                                if (result == null)                              {                                  if (FoundationSyncSettings.Local.DeleteUsers)                                  {                                      RemoveUsers(objPrincipal' site.Url' j);                                      }                                  continue;                              }                                   if (!IsActive(result.GetDirectoryEntry()))                              {                                  if (FoundationSyncSettings.Local.DeleteDisabledUsers)                                  {                                      RemoveUsers(objPrincipal' site.Url' j);                                  }                                  continue;                              }                                var directoryEntry = result.GetDirectoryEntry();                              UpdateUser.User(objPrincipal' directoryEntry' listItems' itemCount' u);                          }                          catch (DirectoryServicesCOMException exception)                          {                              FoudationSync.LogMessage(404' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  exception.Message + exception.StackTrace' null);                          }                      }                  }              }
Magic Number,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,SearchPrincipals,The following statement contains a magic number: {                  var listItems = site.RootWeb.SiteUserInfoList.Items;                  var itemCount = listItems.Count;                    foreach (SPUser objPrincipal in objPrincipals)                  {                      var claimProvider = SPClaimProviderManager.Local;                      string loginName' filter;                      List<string> userProperties = new List<string> { "displayName"' "mail"' "title"' "mobile"' "proxyAddresses"' "department"'                              "sn"' "givenName"' "telephoneNumber"' "wWWHomePage"' "physicalDeliveryOfficeName"' "thumbnailPhoto" };                      List<string> groupProperties = new List<string> { "sAMAccountName"' "mail"' "proxyAddresses" };                        if (isGroup)                      {                          if (claimProvider != null && objPrincipal.LoginName.Contains(@"c:0+.w"))                          {                              var sid = claimProvider.DecodeClaim(objPrincipal.LoginName).Value;                                try                              {                                  loginName = new SecurityIdentifier(sid).Translate(typeof(NTAccount)).ToString();                                }                              catch (Exception exception)                              {                                  FoudationSync.LogMessage(503' FoudationSync.LogCategories.FoundationSync'                                      TraceSeverity.High'                                      exception.Message + exception.StackTrace' null);                                  continue;                              }                          }                          else                          {                              loginName = objPrincipal.LoginName;                          }                            var ldapPath = GetDomain(loginName.Split('\\')[0]);                            var entry = new DirectoryEntry(@"LDAP://" + ldapPath);                          var i = loginName.LastIndexOf('\\');                          var objName = loginName.Remove(0' i + 1);                          filter = string.Format("(&(objectClass=group)(sAMAccountName={0}))"' objName);                            var searcher = new DirectorySearcher(entry' filter' groupProperties.ToArray())                          {                              ReferralChasing = chasing                          };                            try                          {                              var result = searcher.FindOne();                              var directoryEntry = result.GetDirectoryEntry();                              UpdateGroup.Group(objPrincipal' directoryEntry' listItems' itemCount' u);                          }                          catch (DirectoryServicesCOMException exception)                          {                              FoudationSync.LogMessage(403' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  exception.Message + exception.StackTrace' null);                          }                      }                      else                      {                          if (claimProvider != null && objPrincipal.LoginName.Contains(@"i:0#.w"))                          {                              loginName = claimProvider.DecodeClaim(objPrincipal.LoginName).Value;                          }                          else                          {                              loginName = objPrincipal.LoginName;                          }                            try                          {                              foreach (var attribute in FoundationSyncSettings.Local.AdditionalUserAttributes)                              {                                  userProperties.Add(attribute.Value);                              }                          }                          catch(Exception)                          { }                            var ldapPath = GetDomain(loginName.Split('\\')[0]);                            if (string.IsNullOrEmpty(ldapPath))                              continue;                            var entry = new DirectoryEntry("LDAP://" + ldapPath);                            filter = string.Format("(&(objectClass=user)(sAMAccountName={0}))"' loginName.Split('\\')[1]);                          var searcher = new DirectorySearcher(entry' filter' userProperties.ToArray())                          {                              ReferralChasing = chasing                          };                            try                          {                              var result = searcher.FindOne();                                if (result == null)                              {                                  if (FoundationSyncSettings.Local.DeleteUsers)                                  {                                      RemoveUsers(objPrincipal' site.Url' j);                                      }                                  continue;                              }                                   if (!IsActive(result.GetDirectoryEntry()))                              {                                  if (FoundationSyncSettings.Local.DeleteDisabledUsers)                                  {                                      RemoveUsers(objPrincipal' site.Url' j);                                  }                                  continue;                              }                                var directoryEntry = result.GetDirectoryEntry();                              UpdateUser.User(objPrincipal' directoryEntry' listItems' itemCount' u);                          }                          catch (DirectoryServicesCOMException exception)                          {                              FoudationSync.LogMessage(404' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  exception.Message + exception.StackTrace' null);                          }                      }                  }              }
Magic Number,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,GetDomain,The following statement contains a magic number: try              {                  var objContext = new DirectoryContext(                      DirectoryContextType.Domain' domainName);                  var objDomain = Domain.GetDomain(objContext);                  ldapPath = objDomain.Name;              }              catch (Exception e)              {                  FoudationSync.LogMessage(410' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      string.Format("Unexpected exception attempting to retrieve domain name: {0}. {1}"' domainName' e.StackTrace)' null);                  return null;              }
Magic Number,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,IsActive,The following statement contains a magic number: try              {                  var flags = (int)de.Properties["userAccountControl"].Value;                  status = !Convert.ToBoolean(flags & 0x0002);              }              catch (Exception e)              {                  FoudationSync.LogMessage(505' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      string.Format("Unexpected exception attempting to determine if user is active: User: {0}. Status value: {1}. {2}"' de.Username 'status' e.StackTrace)' null);              }
Magic Number,Nauplius.SP.UserSync,PrincipalHandler,C:\repos\Nauplius_FoundationSync\PrincipalHandler.cs,RemoveUsers,The following statement contains a magic number: using (SPSite site = new SPSite(siteUrl))              {                  using (SPWeb web = site.OpenWeb())                  {                      try                      {                          var user = web.SiteUsers[objPrincipal.LoginName];                          if (user.IsSiteAdmin) return;                            web.SiteUsers.Remove(user.LoginName);                          ++j;                      }                      catch (Exception e)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unexpected exception attempting to remove user: User: {0} (ID: {1}). Url: {2}. {3}"' objPrincipal.LoginName' objPrincipal.ID' siteUrl' e.StackTrace)' null);                      }                  }              }
Magic Number,Nauplius.SP.UserSync,SyncJob,C:\repos\Nauplius_FoundationSync\SyncJob.cs,Execute,The following statement contains a magic number: try              {                  var farm = SPFarm.Local;                  var ignoredUsers = FoundationSyncSettings.Local.IgnoredUsers;                  var service = farm.Services.GetValue<SPWebService>();                  var userAccounts = new HashSet<SPUser>();                  var groupAccounts = new HashSet<SPUser>();                  var webApplications = FoundationSyncSettings.Local.WebApplicationCollection.Count < 1                      ? (IEnumerable<SPWebApplication>)service.WebApplications                      : FoundationSyncSettings.Local.WebApplicationCollection;                    foreach (SPWebApplication webApplication in webApplications)                  {                      var siteCollections = FoundationSyncSettings.Local.SPSiteCollection.Count < 1                          ? (IEnumerable<SPSite>)webApplication.Sites                          : FoundationSyncSettings.Local.SPSiteCollection;                        foreach (SPSite site in siteCollections)                      {                          foreach (SPUser userPrincipal in from SPUser userPrincipal in site.RootWeb.SiteUsers                                                           let invalidUser = ignoredUsers.Any(word => userPrincipal.LoginName.Contains(word))                                                           where !invalidUser                                                           where !userPrincipal.IsDomainGroup                                                           where userPrincipal.LoginName.Contains(@"\")                                                           select userPrincipal)                          {                              userAccounts.Add(userPrincipal);                          }                            if (_loggingEx)                              LoggingExData(string.Format("{0} user principals in site {1}"'                                  userAccounts.Count' site.Url)' LoggingEx.LoggingExType.UsersFoundCount);                            FoudationSync.LogMessage(100' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("{0} user principals in site {1}"' userAccounts.Count' site.Url)' null);                            PrincipalHandler.SearchPrincipals(userAccounts' webApplication' site' false' j' u);                            userAccounts.Clear();                            foreach (SPUser groupPrincipal in from SPUser groupPrincipal in site.RootWeb.SiteUsers                                                            let invalidGroup = ignoredUsers.Any(word => groupPrincipal.LoginName.Contains(word))                                                            where !invalidGroup                                                            where groupPrincipal.IsDomainGroup                                                            select groupPrincipal)                          {                              groupAccounts.Add(groupPrincipal);                          }                            if (_loggingEx)                              LoggingExData(string.Format("{0} group principals in site {1}"'                                  groupAccounts.Count' site.Url)' LoggingEx.LoggingExType.UsersFoundCount);                            FoudationSync.LogMessage(101' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("{0} group principals in site {1}"' groupAccounts.Count' site.Url)' null);                            PrincipalHandler.SearchPrincipals(groupAccounts' webApplication' site' true' j' u);                          groupAccounts.Clear();                            site.Dispose();                      }                  }                    if (_loggingEx)                      LoggingExData(string.Format("{0} user principals deleted"'                          j)' LoggingEx.LoggingExType.UsersDeletedCount);                    if (_loggingEx)                      LoggingExData(string.Format("{0} users and groups updated"'                          u)' LoggingEx.LoggingExType.UsersUpdatedCount);                    LoggingEx.SaveReport();              }              catch (IndexOutOfRangeException)              {                  FoudationSync.LogMessage(102' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Medium'                     string.Format("Index was out of range.")' null);              }
Magic Number,Nauplius.SP.UserSync,SyncJob,C:\repos\Nauplius_FoundationSync\SyncJob.cs,Execute,The following statement contains a magic number: try              {                  var farm = SPFarm.Local;                  var ignoredUsers = FoundationSyncSettings.Local.IgnoredUsers;                  var service = farm.Services.GetValue<SPWebService>();                  var userAccounts = new HashSet<SPUser>();                  var groupAccounts = new HashSet<SPUser>();                  var webApplications = FoundationSyncSettings.Local.WebApplicationCollection.Count < 1                      ? (IEnumerable<SPWebApplication>)service.WebApplications                      : FoundationSyncSettings.Local.WebApplicationCollection;                    foreach (SPWebApplication webApplication in webApplications)                  {                      var siteCollections = FoundationSyncSettings.Local.SPSiteCollection.Count < 1                          ? (IEnumerable<SPSite>)webApplication.Sites                          : FoundationSyncSettings.Local.SPSiteCollection;                        foreach (SPSite site in siteCollections)                      {                          foreach (SPUser userPrincipal in from SPUser userPrincipal in site.RootWeb.SiteUsers                                                           let invalidUser = ignoredUsers.Any(word => userPrincipal.LoginName.Contains(word))                                                           where !invalidUser                                                           where !userPrincipal.IsDomainGroup                                                           where userPrincipal.LoginName.Contains(@"\")                                                           select userPrincipal)                          {                              userAccounts.Add(userPrincipal);                          }                            if (_loggingEx)                              LoggingExData(string.Format("{0} user principals in site {1}"'                                  userAccounts.Count' site.Url)' LoggingEx.LoggingExType.UsersFoundCount);                            FoudationSync.LogMessage(100' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("{0} user principals in site {1}"' userAccounts.Count' site.Url)' null);                            PrincipalHandler.SearchPrincipals(userAccounts' webApplication' site' false' j' u);                            userAccounts.Clear();                            foreach (SPUser groupPrincipal in from SPUser groupPrincipal in site.RootWeb.SiteUsers                                                            let invalidGroup = ignoredUsers.Any(word => groupPrincipal.LoginName.Contains(word))                                                            where !invalidGroup                                                            where groupPrincipal.IsDomainGroup                                                            select groupPrincipal)                          {                              groupAccounts.Add(groupPrincipal);                          }                            if (_loggingEx)                              LoggingExData(string.Format("{0} group principals in site {1}"'                                  groupAccounts.Count' site.Url)' LoggingEx.LoggingExType.UsersFoundCount);                            FoudationSync.LogMessage(101' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("{0} group principals in site {1}"' groupAccounts.Count' site.Url)' null);                            PrincipalHandler.SearchPrincipals(groupAccounts' webApplication' site' true' j' u);                          groupAccounts.Clear();                            site.Dispose();                      }                  }                    if (_loggingEx)                      LoggingExData(string.Format("{0} user principals deleted"'                          j)' LoggingEx.LoggingExType.UsersDeletedCount);                    if (_loggingEx)                      LoggingExData(string.Format("{0} users and groups updated"'                          u)' LoggingEx.LoggingExType.UsersUpdatedCount);                    LoggingEx.SaveReport();              }              catch (IndexOutOfRangeException)              {                  FoudationSync.LogMessage(102' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Medium'                     string.Format("Index was out of range.")' null);              }
Magic Number,Nauplius.SP.UserSync,SyncJob,C:\repos\Nauplius_FoundationSync\SyncJob.cs,Execute,The following statement contains a magic number: try              {                  var farm = SPFarm.Local;                  var ignoredUsers = FoundationSyncSettings.Local.IgnoredUsers;                  var service = farm.Services.GetValue<SPWebService>();                  var userAccounts = new HashSet<SPUser>();                  var groupAccounts = new HashSet<SPUser>();                  var webApplications = FoundationSyncSettings.Local.WebApplicationCollection.Count < 1                      ? (IEnumerable<SPWebApplication>)service.WebApplications                      : FoundationSyncSettings.Local.WebApplicationCollection;                    foreach (SPWebApplication webApplication in webApplications)                  {                      var siteCollections = FoundationSyncSettings.Local.SPSiteCollection.Count < 1                          ? (IEnumerable<SPSite>)webApplication.Sites                          : FoundationSyncSettings.Local.SPSiteCollection;                        foreach (SPSite site in siteCollections)                      {                          foreach (SPUser userPrincipal in from SPUser userPrincipal in site.RootWeb.SiteUsers                                                           let invalidUser = ignoredUsers.Any(word => userPrincipal.LoginName.Contains(word))                                                           where !invalidUser                                                           where !userPrincipal.IsDomainGroup                                                           where userPrincipal.LoginName.Contains(@"\")                                                           select userPrincipal)                          {                              userAccounts.Add(userPrincipal);                          }                            if (_loggingEx)                              LoggingExData(string.Format("{0} user principals in site {1}"'                                  userAccounts.Count' site.Url)' LoggingEx.LoggingExType.UsersFoundCount);                            FoudationSync.LogMessage(100' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("{0} user principals in site {1}"' userAccounts.Count' site.Url)' null);                            PrincipalHandler.SearchPrincipals(userAccounts' webApplication' site' false' j' u);                            userAccounts.Clear();                            foreach (SPUser groupPrincipal in from SPUser groupPrincipal in site.RootWeb.SiteUsers                                                            let invalidGroup = ignoredUsers.Any(word => groupPrincipal.LoginName.Contains(word))                                                            where !invalidGroup                                                            where groupPrincipal.IsDomainGroup                                                            select groupPrincipal)                          {                              groupAccounts.Add(groupPrincipal);                          }                            if (_loggingEx)                              LoggingExData(string.Format("{0} group principals in site {1}"'                                  groupAccounts.Count' site.Url)' LoggingEx.LoggingExType.UsersFoundCount);                            FoudationSync.LogMessage(101' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("{0} group principals in site {1}"' groupAccounts.Count' site.Url)' null);                            PrincipalHandler.SearchPrincipals(groupAccounts' webApplication' site' true' j' u);                          groupAccounts.Clear();                            site.Dispose();                      }                  }                    if (_loggingEx)                      LoggingExData(string.Format("{0} user principals deleted"'                          j)' LoggingEx.LoggingExType.UsersDeletedCount);                    if (_loggingEx)                      LoggingExData(string.Format("{0} users and groups updated"'                          u)' LoggingEx.LoggingExType.UsersUpdatedCount);                    LoggingEx.SaveReport();              }              catch (IndexOutOfRangeException)              {                  FoudationSync.LogMessage(102' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Medium'                     string.Format("Index was out of range.")' null);              }
Magic Number,Nauplius.SP.UserSync,ThumbnailHandler,C:\repos\Nauplius_FoundationSync\ThumbnailHandler.cs,GetThumbnail,The following statement contains a magic number: try              {                  using (SPSite site = new SPSite(siteUri.AbsoluteUri))                  {                      var web = site.RootWeb;                      var list = web.GetList("UserPhotos");                      var folder = list.RootFolder;                      var file = folder.Files[fileName];                        if (file.Length > 1)                      {                          var pictureExpiryDays = 1;                            try                          {                              pictureExpiryDays = FoundationSyncSettings.Local.PictureExpiryDays;                          }                          catch (InvalidCastException)                          {                              FoundationSyncSettings.Local.PictureExpiryDays = 1;                              pictureExpiryDays = 1;                          }                          catch (OverflowException)                          {                              FoundationSyncSettings.Local.PictureExpiryDays = 1;                              pictureExpiryDays = 1;                          }                            if ((file.TimeLastModified - DateTime.Now).TotalDays < pictureExpiryDays)                          {                              return (string)file.Item[SPBuiltInFieldId.EncodedAbsUrl];                          }                      }                  }              }              catch (ArgumentNullException)              {                  return null;              }              catch (FileNotFoundException)              {                  FoudationSync.LogMessage(1004' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      string.Format("Invalid Site URL specified for Picture Site Collection URL.")' null);                  return null;              }              catch (Exception)              {                  FoudationSync.LogMessage(2001' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                      string.Format("Error retrieving picture file from UserPhotos library' continuing to pull new picture.")' null);              }
Magic Number,Nauplius.SP.UserSync,ThumbnailHandler,C:\repos\Nauplius_FoundationSync\ThumbnailHandler.cs,GetThumbnail,The following statement contains a magic number: try              {                  using (SPSite site = new SPSite(siteUri.AbsoluteUri))                  {                      var web = site.RootWeb;                      var list = web.GetList("UserPhotos");                      var folder = list.RootFolder;                      var file = folder.Files[fileName];                        if (file.Length > 1)                      {                          var pictureExpiryDays = 1;                            try                          {                              pictureExpiryDays = FoundationSyncSettings.Local.PictureExpiryDays;                          }                          catch (InvalidCastException)                          {                              FoundationSyncSettings.Local.PictureExpiryDays = 1;                              pictureExpiryDays = 1;                          }                          catch (OverflowException)                          {                              FoundationSyncSettings.Local.PictureExpiryDays = 1;                              pictureExpiryDays = 1;                          }                            if ((file.TimeLastModified - DateTime.Now).TotalDays < pictureExpiryDays)                          {                              return (string)file.Item[SPBuiltInFieldId.EncodedAbsUrl];                          }                      }                  }              }              catch (ArgumentNullException)              {                  return null;              }              catch (FileNotFoundException)              {                  FoudationSync.LogMessage(1004' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      string.Format("Invalid Site URL specified for Picture Site Collection URL.")' null);                  return null;              }              catch (Exception)              {                  FoudationSync.LogMessage(2001' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                      string.Format("Error retrieving picture file from UserPhotos library' continuing to pull new picture.")' null);              }
Magic Number,Nauplius.SP.UserSync,ThumbnailHandler,C:\repos\Nauplius_FoundationSync\ThumbnailHandler.cs,GetThumbnail,The following statement contains a magic number: if (FoundationSyncSettings.Local.UseExchange)              {                  var ewsPictureSize = "648x648";                    if (FoundationSyncSettings.Local.EwsPictureSize != null)                  {                      ewsPictureSize = FoundationSyncSettings.Local.EwsPictureSize;                  }                    var uri = new UriBuilder(string.Format("{0}/s/GetUserPhoto?email={1}&size=HR{2}"' FoundationSyncSettings.Local.EwsUrl' user.Email' ewsPictureSize));                    SPSecurity.RunWithElevatedPrivileges(delegate                  {                      var request = (HttpWebRequest)WebRequest.Create(uri.Uri);                      request.UseDefaultCredentials = true;                        try                      {                          using (var response = (HttpWebResponse)request.GetResponse())                          {                              if (response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.NotModified)                              {                                  if (response.GetResponseStream() != null)                                  {                                      var image = new Bitmap(response.GetResponseStream());                                      fileUri = SaveImage(image' siteUri.AbsoluteUri' fileName);                                  }                              }                              else if (response.StatusCode == HttpStatusCode.NotFound ||                                          response.StatusCode == HttpStatusCode.InternalServerError ||                                          response.StatusCode == HttpStatusCode.ServiceUnavailable)                              {                                  fileUri = string.Empty;                              }                              //else Exchange is not online' incorrect URL' etc.                          }                      }                      catch (Exception exception)                      {                          FoudationSync.LogMessage(601' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Medium'                              exception.Message + exception.StackTrace' null);                      }                    });              }              else              {                  try                  {                      var byteArray = (byte[])directoryEntry.Properties["thumbnailPhoto"].Value;                        if (byteArray.Length > 0)                      {                          using (var ms = new MemoryStream(byteArray))                          {                              var image = new Bitmap(ms);                              fileUri = SaveImage(image' siteUri.AbsoluteUri' fileName);                          }                      }                  }                  catch (Exception)                  {                      return string.Empty;                  }              }
Magic Number,Nauplius.SP.UserSync,ThumbnailHandler,C:\repos\Nauplius_FoundationSync\ThumbnailHandler.cs,SaveImage,The following statement contains a magic number: try              {                  using (SPSite site = new SPSite(siteUri))                  {                      using (SPWeb web = site.RootWeb)                      {                          var library = (from SPList list in web.Lists                                         where list.RootFolder.Name.Equals("UserPhotos")                                         select list).FirstOrDefault();                            if (library == null) return null;                            var ms = new MemoryStream();                            image.Save(ms' ImageFormat.Jpeg);                          ms.Close();                            var byteArray = ms.ToArray();                            if (byteArray.Length > 0)                          {                              var file = library.RootFolder.Files.Add(fileName' byteArray' true);                                return (string)file.Item[SPBuiltInFieldId.EncodedAbsUrl];                          }                      }                  }              }              catch (Exception exception)              {                  FoudationSync.LogMessage(405' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                      exception.Message + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (item["Name"].ToString().ToLower() != group.LoginName.ToLower()) continue;                        var eMail = (directoryEntry.Properties["mail"].Value == null)                          ? string.Empty                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                  }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                              }                          else                          {                              item["SipAddress"] = string.Empty;                          }                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(200' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(400' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (item["Name"].ToString().ToLower() != group.LoginName.ToLower()) continue;                        var eMail = (directoryEntry.Properties["mail"].Value == null)                          ? string.Empty                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                  }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                              }                          else                          {                              item["SipAddress"] = string.Empty;                          }                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(200' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(400' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (item["Name"].ToString().ToLower() != group.LoginName.ToLower()) continue;                        var eMail = (directoryEntry.Properties["mail"].Value == null)                          ? string.Empty                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                  }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                              }                          else                          {                              item["SipAddress"] = string.Empty;                          }                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(200' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(400' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (item["Name"].ToString().ToLower() != group.LoginName.ToLower()) continue;                        var eMail = (directoryEntry.Properties["mail"].Value == null)                          ? string.Empty                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                  }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                              }                          else                          {                              item["SipAddress"] = string.Empty;                          }                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(200' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(400' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (item["Name"].ToString().ToLower() != group.LoginName.ToLower()) continue;                        var eMail = (directoryEntry.Properties["mail"].Value == null)                          ? string.Empty                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                  }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                              }                          else                          {                              item["SipAddress"] = string.Empty;                          }                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(200' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(400' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (item["Name"].ToString().ToLower() != group.LoginName.ToLower()) continue;                        var eMail = (directoryEntry.Properties["mail"].Value == null)                          ? string.Empty                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                  }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                              }                          else                          {                              item["SipAddress"] = string.Empty;                          }                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(200' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(400' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateGroup,C:\repos\Nauplius_FoundationSync\UpdateGroup.cs,Group,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (item["Name"].ToString().ToLower() != group.LoginName.ToLower()) continue;                        var eMail = (directoryEntry.Properties["mail"].Value == null)                          ? string.Empty                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for group {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                  }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                              }                          else                          {                              item["SipAddress"] = string.Empty;                          }                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(200' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating group {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(400' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Magic Number,Nauplius.SP.UserSync,UpdateUser,C:\repos\Nauplius_FoundationSync\UpdateUser.cs,User,The following statement contains a magic number: try              {                  var j = 0;                  for (; j < itemCount; j++)                  {                      shouldUpdate = false;                        var item = listItems[j];                        if (!string.Equals(item["Name"].ToString()' user.LoginName' StringComparison.CurrentCultureIgnoreCase)) continue;                        var title = (directoryEntry.Properties["displayName"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["displayName"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Title"' (string)item["Title"]' title);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Title"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                              }                        var eMail = (directoryEntry.Properties["mail"].Value == null)                                          ? string.Empty                                          : directoryEntry.Properties["mail"].Value.ToString();                        try                      {                          TryUpdateValue(item' "EMail"' (string)item["EMail"]' eMail);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "EMail"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                          var jobTitle = (directoryEntry.Properties["title"].Value == null)                                             ? string.Empty                                             : directoryEntry.Properties["title"].Value.ToString();                        try                      {                          TryUpdateValue(item' "JobTitle"' (string)item["JobTitle"]' jobTitle);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "JobTitle"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                             }                          var mobilePhone = (directoryEntry.Properties["mobile"].Value == null)                                                ? string.Empty                                                : directoryEntry.Properties["mobile"].Value.ToString();                      try                      {                          TryUpdateValue(item' "MobilePhone"' (string) item["MobilePhone"]' mobilePhone);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                             string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "MobilePhone"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                           }                        if (user.SystemUserKey != null)                      {                          var uri = ThumbnailHandler.GetThumbnail(user' directoryEntry);                            try                          {                              if (!string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = uri;                              }                              else if (string.IsNullOrEmpty(uri))                              {                                  item["Picture"] = string.Empty;                              }                                                 }                          catch (Exception)                          {                              FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                  string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Picture"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                        }                      }                        try                      {                          if (directoryEntry.Properties["proxyAddresses"].Value != null)                          {                              var array = (Array)directoryEntry.Properties["proxyAddresses"].Value;                                foreach (var o in from string o in array                                                where o.Contains(("sip:"))                                                select o)                              {                                  var sipAddress = o.Remove(0' 4);                                    try                                  {                                      TryUpdateValue(item' "SipAddress"' (string) item["SipAddress"]'                                          sipAddress);                                  }                                  catch (Exception)                                  {                                      FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                          string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                                                                      }                              }                          }                      }                      catch (InvalidCastException)                      {                          if (directoryEntry.Properties["proxyAddresses"].Value.ToString().Contains("sip:"))                          {                              var sipAddress = directoryEntry.Properties["proxyAddresses"].Value.ToString().Remove(0' 4);                                try                              {                                  TryUpdateValue(item' "SipAddress"' (string)item["SipAddress"]'                                      sipAddress);                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                            }                          else                          {                              try                              {                                  item["SipAddress"] = string.Empty;                              }                              catch (Exception)                              {                                  FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                                      string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "SipAddress"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                              }                          }                      }                        var department = (directoryEntry.Properties["department"].Value == null)                                               ? string.Empty                                               : directoryEntry.Properties["department"].Value.ToString();                        try                      {                          TryUpdateValue(item' "Department"' (string)item["Department"]' department);                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "Department"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        try                      {                          var additionalAttributes = FoundationSyncSettings.Local.AdditionalUserAttributes;                            foreach (var ldapAttribute in additionalAttributes)                          {                              var value = (directoryEntry.Properties[ldapAttribute.Value].Value == null)                                                     ? string.Empty                                                     : directoryEntry.Properties[ldapAttribute.Value].Value.ToString();                                TryUpdateValue(item' ldapAttribute.Key' (string)item[ldapAttribute.Key]' value);                          }                      }                      catch (Exception)                      {                          FoudationSync.LogMessage(506' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Unexpected'                              string.Format("Unable to update {0} for user {1} (ID {2}) on Site Collection {3}."' "AdditionalAttribues Value"' item.DisplayName' item.ID' item.Web.Site.Url)' null);                      }                        if (shouldUpdate)                      {                          FoudationSync.LogMessage(201' FoudationSync.LogCategories.FoundationSync' TraceSeverity.Verbose'                              string.Format("Updating user {0} (ID {1}) on Site Collection {2}."' item.DisplayName' item.ID' item.Web.Site.Url)' null);                          item.Update();                          ++u;                      }                        return;                  }              }              catch (SPException exception)              {                  FoudationSync.LogMessage(401' FoudationSync.LogCategories.FoundationSync'                      TraceSeverity.Unexpected' exception.Message + " " + exception.StackTrace' null);              }
Missing Default,Nauplius.SP.UserSync,LoggingEx,C:\repos\Nauplius_FoundationSync\LoggingEx.cs,BuildReport,The following switch statement is missing a default case: switch (logType)              {                  case LoggingExType.UsersFoundCount:                      _usersFoundMemoryStream.WriteAsync(bytes' 0' bytes.Length);                      _usersFoundMemoryStream.FlushAsync();                      break;                  case LoggingExType.UsersUpdatedCount:                      _usersUpdatedMemoryStream.WriteAsync(bytes' 0' bytes.Length);                      _usersUpdatedMemoryStream.FlushAsync();                      break;                  case LoggingExType.UsersDeletedCount:                      _usersDeletedMemoryStream.WriteAsync(bytes' 0' bytes.Length);                      _usersDeletedMemoryStream.FlushAsync();                      break;                  case LoggingExType.UserProperties:                      _userPropertiesMemoryStream.WriteAsync(bytes' 0' bytes.Length);                      _userPropertiesMemoryStream.FlushAsync();                      break;              }
