Implementation smell,Namespace,Class,File,Method,Description
Missing Default,System.Web.Http.OData.NHibernate,NHibernateFilterBinder,C:\repos\OData_ODataSamples\WebApi\v3\NHibernateQueryableSample\System.Web.Http.OData.NHibernate\NHibernateFilterBinder.cs,Bind,The following switch statement is missing a default case: switch (node.Kind)                  {                      case QueryNodeKind.CollectionNavigationNode:                          CollectionNavigationNode navigationNode = node as CollectionNavigationNode;                          return BindNavigationPropertyNode(navigationNode.Source' navigationNode.NavigationProperty);                        case QueryNodeKind.CollectionPropertyAccess:                          return BindCollectionPropertyAccessNode(node as CollectionPropertyAccessNode);                  }
Missing Default,System.Web.Http.OData.NHibernate,NHibernateFilterBinder,C:\repos\OData_ODataSamples\WebApi\v3\NHibernateQueryableSample\System.Web.Http.OData.NHibernate\NHibernateFilterBinder.cs,Bind,The following switch statement is missing a default case: switch (node.Kind)                  {                      case QueryNodeKind.BinaryOperator:                          return BindBinaryOperatorNode(node as BinaryOperatorNode);                        case QueryNodeKind.Constant:                          return BindConstantNode(node as ConstantNode);                        case QueryNodeKind.Convert:                          return BindConvertNode(node as ConvertNode);                        case QueryNodeKind.EntityRangeVariableReference:                          return BindRangeVariable((node as EntityRangeVariableReferenceNode).RangeVariable);                        case QueryNodeKind.NonentityRangeVariableReference:                          return BindRangeVariable((node as NonentityRangeVariableReferenceNode).RangeVariable);                        case QueryNodeKind.SingleValuePropertyAccess:                          return BindPropertyAccessQueryNode(node as SingleValuePropertyAccessNode);                        case QueryNodeKind.UnaryOperator:                          return BindUnaryOperatorNode(node as UnaryOperatorNode);                        case QueryNodeKind.SingleValueFunctionCall:                          return BindSingleValueFunctionCallNode(node as SingleValueFunctionCallNode);                        case QueryNodeKind.SingleNavigationNode:                          SingleNavigationNode navigationNode = node as SingleNavigationNode;                          return BindNavigationPropertyNode(navigationNode.Source' navigationNode.NavigationProperty);                        case QueryNodeKind.Any:                          return BindAnyNode(node as AnyNode);                        case QueryNodeKind.All:                          return BindAllNode(node as AllNode);                  }
