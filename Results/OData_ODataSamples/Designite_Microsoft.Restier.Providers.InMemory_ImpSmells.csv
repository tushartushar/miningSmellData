Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Restier.Providers.InMemory.Submit,ChangeSetInitializer<TDataStoreType>,C:\repos\OData_ODataSamples\RESTier\TripPinInMemory\Microsoft.Restier.Providers.InMemory\Submit\ChangeSetInitializer.cs,FindResource,Cyclomatic complexity of the method is 9
Long Statement,Microsoft.Restier.Providers.InMemory.DataStoreManager,DefaultDataStoreManager<TKey;TDataStoreType>,C:\repos\OData_ODataSamples\RESTier\TripPinInMemory\Microsoft.Restier.Providers.InMemory\DataStoreManager\DefaultDataStoreManager.cs,ResetDataStoreInstance,The length of the statement  "                _dataStoreDict[key] = new DataStoreInstanceWrapper(key' MaxDataStoreInstanceLifeTime.TotalMilliseconds' ResouceTimeoutHandler); " is 127.
Long Statement,Microsoft.Restier.Providers.InMemory.DataStoreManager,DefaultDataStoreManager<TKey;TDataStoreType>,C:\repos\OData_ODataSamples\RESTier\TripPinInMemory\Microsoft.Restier.Providers.InMemory\DataStoreManager\DefaultDataStoreManager.cs,AddDataStoreInstance,The length of the statement  "            _dataStoreDict.Add(key' new DataStoreInstanceWrapper(key' MaxDataStoreInstanceLifeTime.TotalMilliseconds' ResouceTimeoutHandler)); " is 130.
Magic Number,Microsoft.Restier.Providers.InMemory.DataStoreManager,DefaultDataStoreManager<TKey;TDataStoreType>,C:\repos\OData_ODataSamples\RESTier\TripPinInMemory\Microsoft.Restier.Providers.InMemory\DataStoreManager\DefaultDataStoreManager.cs,DefaultDataStoreManager,The following statement contains a magic number: MaxDataStoreInstanceCapacity = 1000;
Magic Number,Microsoft.Restier.Providers.InMemory.DataStoreManager,DefaultDataStoreManager<TKey;TDataStoreType>,C:\repos\OData_ODataSamples\RESTier\TripPinInMemory\Microsoft.Restier.Providers.InMemory\DataStoreManager\DefaultDataStoreManager.cs,DefaultDataStoreManager,The following statement contains a magic number: MaxDataStoreInstanceLifeTime = new TimeSpan(0' 15' 0);
Missing Default,Microsoft.Restier.Providers.InMemory.Submit,ChangeSetInitializer<TDataStoreType>,C:\repos\OData_ODataSamples\RESTier\TripPinInMemory\Microsoft.Restier.Providers.InMemory\Submit\ChangeSetInitializer.cs,InitializeAsync,The following switch statement is missing a default case: switch (operation)                  {                      case DataModificationItemAction.Insert:                          // Here we create a instance of entity' parameters are from the request.                          // Known issues: not support odata.id                          resource = Activator.CreateInstance(resourceType);                          SetValues(resource' resourceType' dataModificationItem.LocalValues);                          dataModificationItem.Resource = resource;                            // insert new entity into entity set                          var entitySetPropForInsert = GetEntitySetPropertyInfoFromDataModificationItem(dataSource'                              dataModificationItem);                            if (entitySetPropForInsert != null && entitySetPropForInsert.CanWrite)                          {                              var originSet = entitySetPropForInsert.GetValue(dataSource);                              entitySetPropForInsert.PropertyType.GetMethod("Add").Invoke(originSet' new[] {resource});                          }                          break;                      case DataModificationItemAction.Update:                          resource = FindResource(dataSource' context' dataModificationItem' cancellationToken);                          dataModificationItem.Resource = resource;                            // update the entity                          if (resource != null)                          {                              SetValues(resource' resourceType' dataModificationItem.LocalValues);                          }                          break;                      case DataModificationItemAction.Remove:                          resource = FindResource(dataSource' context' dataModificationItem' cancellationToken);                          dataModificationItem.Resource = resource;                            // remove the entity                          if (resource != null)                          {                              var entitySetPropForRemove = GetEntitySetPropertyInfoFromDataModificationItem(dataSource'                                  dataModificationItem);                                if (entitySetPropForRemove != null && entitySetPropForRemove.CanWrite)                              {                                  var originSet = entitySetPropForRemove.GetValue(dataSource);                                  entitySetPropForRemove.PropertyType.GetMethod("Remove").Invoke(originSet' new[] {resource});                              }                          }                          break;                      case DataModificationItemAction.Undefined:                          throw new NotImplementedException();                  }
