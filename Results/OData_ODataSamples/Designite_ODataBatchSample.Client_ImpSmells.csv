Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ODataBatchSample.Client.ODataBatchSample.Models,ExtensionMethods,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Client.cs,ByKey,The length of the statement  "            return new global::ODataBatchSample.Client.ODataBatchSample.Models.CustomerSingle(source.Context' source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context' keys))); " is 195.
Long Statement,ODataBatchSample.Client.ODataBatchSample.Models,ExtensionMethods,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Client.cs,ByKey,The length of the statement  "            global::System.Collections.Generic.Dictionary<string' object> keys = new global::System.Collections.Generic.Dictionary<string' object> " is 134.
Long Statement,ODataBatchSample.Client.ODataBatchSample.Models,ExtensionMethods,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Client.cs,ByKey,The length of the statement  "            return new global::ODataBatchSample.Client.ODataBatchSample.Models.CustomerSingle(source.Context' source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context' keys))); " is 195.
Long Statement,ODataBatchSample.Client.Default,CustomersContext,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Client.cs,ResolveTypeFromName,The length of the statement  "            global::System.Type resolvedType = this.DefaultResolveType(typeName' "ODataBatchSample.Models"' "ODataBatchSample.Client.ODataBatchSample.Models"); " is 147.
Long Statement,ODataBatchSample.Client.Default,CustomersContext,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Client.cs,ResolveNameFromType,The length of the statement  "            global::Microsoft.OData.Client.OriginalNameAttribute originalNameAttribute = (global::Microsoft.OData.Client.OriginalNameAttribute)global::System.Linq.Enumerable.SingleOrDefault(global::Microsoft.OData.Client.Utility.GetCustomAttributes(clientType' typeof(global::Microsoft.OData.Client.OriginalNameAttribute)' true)); " is 318.
Long Statement,ODataBatchSample.Client.Default,CustomersContext,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Client.cs,ResolveNameFromType,The length of the statement  "            if (clientType.Namespace.Equals("ODataBatchSample.Client.ODataBatchSample.Models"' global::System.StringComparison.Ordinal)) " is 124.
Magic Number,ODataBatchSample.Client,Program,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,ODataBatchSample.Client,Program,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Program.cs,ExecuteBatchRequest,The following statement contains a magic number: return Task.Run(() =>              {                  CustomersContext context = new CustomersContext(new Uri(serviceUrl));                  context.Format.UseJson();                  IList<Customer> customers = context.Customers.ToList();                  Customer customerToAdd = new Customer                  {                      Id = 100'                      Name = "New Customer"                  };                  Customer customerToUpdate = customers.Skip(1).First();                  Customer customerToDelete = customers.Skip(2).First();                    context.AddToCustomers(customerToAdd);                  customerToUpdate.Name = "Peter";                  context.UpdateObject(customerToUpdate);                  context.DeleteObject(customerToDelete);                    DataServiceResponse response =                      context.SaveChanges(SaveChangesOptions.BatchWithSingleChangeset | SaveChangesOptions.ReplaceOnUpdate);                  if (!response.IsBatchResponse)                  {                      Console.WriteLine("There was an error with the batch request");                  }                  int i = 0;                  foreach (OperationResponse individualResponse in response)                  {                      Console.WriteLine("Operation {0} status code = {1}"' i++' individualResponse.StatusCode);                  }              });
Magic Number,ODataBatchSample.Client,Program,C:\research\architectureSmells\repos\OData_ODataSamples\WebApiCore\ODataBatchSample\ODataBatchSample.Client\Program.cs,ExecuteBatchRequest,The following statement contains a magic number: return Task.Run(() =>              {                  CustomersContext context = new CustomersContext(new Uri(serviceUrl));                  context.Format.UseJson();                  IList<Customer> customers = context.Customers.ToList();                  Customer customerToAdd = new Customer                  {                      Id = 100'                      Name = "New Customer"                  };                  Customer customerToUpdate = customers.Skip(1).First();                  Customer customerToDelete = customers.Skip(2).First();                    context.AddToCustomers(customerToAdd);                  customerToUpdate.Name = "Peter";                  context.UpdateObject(customerToUpdate);                  context.DeleteObject(customerToDelete);                    DataServiceResponse response =                      context.SaveChanges(SaveChangesOptions.BatchWithSingleChangeset | SaveChangesOptions.ReplaceOnUpdate);                  if (!response.IsBatchResponse)                  {                      Console.WriteLine("There was an error with the batch request");                  }                  int i = 0;                  foreach (OperationResponse individualResponse in response)                  {                      Console.WriteLine("Operation {0} status code = {1}"' i++' individualResponse.StatusCode);                  }              });
