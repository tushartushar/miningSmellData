Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,TranslateFunctionCall,The method has 140 lines of code.
Long Method,Microsoft.Test.OData.Services.ODataWCFService.DataSource,ODataReflectionUpdateProvider,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\ODataReflectionUpdateProvider.cs,UpdateCore,The method has 128 lines of code.
Long Method,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The method has 319 lines of code.
Long Method,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The method has 122 lines of code.
Complex Method,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertToODataEntry,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertPropertyValue,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteNavigationLinks,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Test.OData.Services.ODataWCFService.DataSource,ODataReflectionUpdateProvider,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\ODataReflectionUpdateProvider.cs,UpdateCore,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Test.OData.Services.ODataWCFService.Handlers,ErrorHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\ErrorHandler.cs,BuildODataError,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,DispatchHandler,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,DeltaContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DeltaContext.cs,SnapResults,The method has 6 parameters. Parameters: results' entries' entitySource' selectExpandClause' parentId' relationShip
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,DeltaContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DeltaContext.cs,SnapResult,The method has 6 parameters. Parameters: results' entry' entitySource' selectExpandClause' parentId' relationShip
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,DeltaContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DeltaContext.cs,SnapExpandedEntry,The method has 5 parameters. Parameters: results' element' edmParent' expandedNavigationItems' parentId
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteEntry,The method has 6 parameters. Parameters: writer' element' entitySource' targetVersion' selectExpandClause' incomingHeaders
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteFeed,The method has 10 parameters. Parameters: writer' entityType' entries' entitySet' targetVersion' selectExpandClause' count' deltaLink' nextPageLink' incomingHeaders
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteNavigationLinks,The method has 6 parameters. Parameters: writer' element' parentEntryUri' edmParent' targetVersion' expandedItems
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteReferenceLink,The method has 5 parameters. Parameters: writer' element' entitySource' targetVersion' navigationLink
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteReferenceLinks,The method has 5 parameters. Parameters: writer' element' entitySource' targetVersion' navigationLink
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemFromEntry,The method has 6 parameters. Parameters: entry' entitySet' targetVersion' selectExpandClause' parentId' relationShip
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemsFromExpand,The method has 5 parameters. Parameters: entry' edmParent' targetVersion' expandedNavigationItems' parentId
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetCapabilitiesAnnotation,The method has 7 parameters. Parameters: model' target' term' value' navigationProperties' name1' name2
Long Parameter List,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,GetBooleanAndPathCollection,The method has 7 parameters. Parameters: model' entitySet' term' booleanPropertyName' pathsPropertyName' boolean' paths
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,,The length of the parameter ImplicitVariableParameterExpression is 35.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService,ServiceConstants,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ServiceConstants.cs,,The length of the parameter PreferenceValue_Return_Minimal is 30.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService,MimeTypes,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ServiceConstants.cs,,The length of the parameter ApplicationJsonMetadataMinimal is 30.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.DataSource,DataSourceManager,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\DataSourceManager.cs,,The length of the parameter CurrentDataSourceTypeRequestKey is 31.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.DataSource,DataSourceManager,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\DataSourceManager.cs,,The length of the parameter CurrentDataSourceInstanceSessionKeyFormat is 41.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter AsynchronousRequestsSupportedTerm is 33.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter BatchContinueOnErrorSupportedTerm is 33.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesAsynchronousRequestsSupported is 41.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesBatchContinueOnErrorSupported is 41.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesNavigationRestrictions is 34.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesSearchRestrictions is 30.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesInsertRestrictions is 30.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesUpdateRestrictions is 30.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesDeleteRestrictions is 30.
Long Identifier,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,,The length of the parameter CapabilitiesConformanceLevelType is 32.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,DeltaContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DeltaContext.cs,SnapResult,The length of the statement  "            var expandedNavigationItems = selectExpandClause == null ? null : selectExpandClause.SelectedItems.OfType<ExpandedNavigationSelectItem>(); " is 138.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,DeltaContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DeltaContext.cs,SnapExpandedEntry,The length of the statement  "            foreach (var navigationProperty in ((IEdmEntityType)EdmClrTypeUtils.GetEdmType(DataSourceManager.GetCurrentDataSource().Model' element)).NavigationProperties()) " is 160.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,DeltaContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DeltaContext.cs,SnapExpandedEntry,The length of the statement  "                            SnapResults(results' propertyValue as IEnumerable' targetSource as IEdmEntitySetBase' expandedNavigationItem.SelectAndExpand' parentId' navigationProperty.Name); " is 161.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,DeltaContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DeltaContext.cs,SnapExpandedEntry,The length of the statement  "                            SnapResult(results' propertyValue' targetSource' expandedNavigationItem.SelectAndExpand' parentId' navigationProperty.Name); " is 124.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,EdmClrTypeUtils,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\EdmClrTypeUtils.cs,GetInstanceType,The length of the statement  "                throw new InvalidOperationException(string.Format("Cannot find instance type for EdmType {0}."' type.Definition.FullTypeName())); " is 129.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,EdmClrTypeUtils,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\EdmClrTypeUtils.cs,GetInstanceType,The length of the statement  "                    throw new InvalidOperationException(string.Format("GetInstanceType for TypeKind {0} is not supported."' type.TypeKind)); " is 120.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ExpandSelectItemHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ExpandSelectItemHandler.cs,Handle,The length of the statement  "                List<ODataProperty> properties = this.ProjectedEntry.Properties == null ? new List<ODataProperty>() : this.ProjectedEntry.Properties.ToList(); " is 142.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ExpandSelectItemHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ExpandSelectItemHandler.cs,Handle,The length of the statement  "            this.ExpandedChildElement = this.ParentElement.GetType().GetProperty(navigationProperty.Name).GetValue(this.ParentElement' null); " is 129.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ExpandSelectItemHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ExpandSelectItemHandler.cs,Handle,The length of the statement  "            this.ExpandedChildElement = this.ParentElement.GetType().GetProperty(navigationProperty.Name).GetValue(this.ParentElement' null); " is 129.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,InstanceAnnotationType,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Models\InstanceAnnotationType.cs,ConvertValueToODataValue,The length of the statement  "            ODataValue value = ODataObjectModelConverter.CreateODataValue(this.Value) as ODataValue ?? new ODataPrimitiveValue(this.Value); " is 127.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,Visit,The length of the statement  "                //Open property's target type is null' so return the source expression directly' supposely the caller should be ready to handle data of Object type. " is 148.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,TranslateFunctionCall,The length of the statement  "                    var methodInfoOfCast = typeof(TypeFunctionHelper).GetMethod("TypeCastFunction"' BindingFlags.Public | BindingFlags.Static); " is 123.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertToODataEntry,The length of the statement  "            IEdmStructuredType entityType = EdmClrTypeUtils.GetEdmType(DataSourceManager.GetCurrentDataSource().Model' element) as IEdmStructuredType; " is 138.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertToODataEntry,The length of the statement  "            if (!string.IsNullOrEmpty(((ClrObject)element).EntitySetName) && entitySource is IEdmEntitySet && entityType is IEdmEntityType) " is 127.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertToODataEntry,The length of the statement  "                entitySource = new EdmEntitySet(((IEdmEntitySet)entitySource).Container' ((ClrObject)element).EntitySetName' (IEdmEntityType)entityType); " is 137.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertToODataEntityReferenceLink,The length of the statement  "            IEdmStructuredType entityType = EdmClrTypeUtils.GetEdmType(DataSourceManager.GetCurrentDataSource().Model' element) as IEdmStructuredType; " is 138.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertToODataEntityReferenceLink,The length of the statement  "            if (!string.IsNullOrEmpty(((ClrObject)element).EntitySetName) && entitySource is IEdmEntitySet && entityType is IEdmEntityType) " is 127.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,ConvertToODataEntityReferenceLink,The length of the statement  "                entitySource = new EdmEntitySet(((IEdmEntitySet)entitySource).Container' ((ClrObject)element).EntitySetName' (IEdmEntityType)entityType); " is 137.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,CreateODataValue,The length of the statement  "                else if (t.Namespace != "System" && !t.Namespace.StartsWith("Microsoft.Data.Spatial") && !t.Namespace.StartsWith("Microsoft.OData.Edm.Library")) " is 144.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,CreateODataValue,The length of the statement  "                        // Build a complex type property. We consider type t to be primitive if t.Namespace is  "System" or if t is spatial type. " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,CreateODataValue,The length of the statement  "                        IEdmStructuredType structuredType = (IEdmStructuredType)EdmClrTypeUtils.GetEdmType(DataSourceManager.GetCurrentDataSource().Model' value); " is 138.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,CreateODataValue,The length of the statement  "                                    complexValue.InstanceAnnotations.Add(new ODataInstanceAnnotation(annotation.Name' annotation.ConvertValueToODataValue())); " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,BuildKeyString,The length of the statement  "                return ODataUriUtils.ConvertToUriLiteral(property.GetValue(entityInstance' null)' targetVersion' DataSourceManager.GetCurrentDataSource().Model); " is 145.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataObjectModelConverter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataObjectModelConverter.cs,BuildKeyString,The length of the statement  "                    keyStringFragments.Add(String.Format("{0}={1}"' keyMember.Name' ODataUriUtils.ConvertToUriLiteral(property.GetValue(entityInstance' null)' targetVersion' DataSourceManager.GetCurrentDataSource().Model))); " is 204.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                this.ResultExpression = Expression.Call(typeof(Queryable)' AsQueryableMethod' new Type[] { baseType }' this.ResultExpression); " is 126.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                this.ResultExpression = Expression.Call(typeof(Queryable)' WhereMethodName' new Type[] { baseType }' this.ResultExpression' Expression.Quote(Expression.Lambda(body' parameter))); " is 178.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                this.ResultExpression = Expression.Call(typeof(Queryable)' CastMethodName' new[] { instanceType }' this.ResultExpression); " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                        string.Format("PropertySegment with TypeKind '{0}' following by TypeSegment is invalid"' this.LastQueryTarget.TypeKind)); " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "            if (!(this.LastProcessedSegment is EntitySetSegment || this.LastProcessedSegment is NavigationPropertySegment || this.LastProcessedSegment is NavigationPropertyLinkSegment)) " is 173.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                    keyPredicate = Expression.Equal(Expression.Convert(propertyAccessExpression' underlyingType)' Expression.Constant(key.Value)); " is 126.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                || this.LastProcessedSegment is OperationSegment))// Context Uri Contains Bugs When Query Property Segment after Opertaion Segment " is 130.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                this.ResultExpression = Expression.Call(Expression.Constant(operationProvider)' operation.Name' new Type[] { }' arguments.ToArray()); " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                this.ResultExpression = Expression.Call(Expression.Constant(operationProvider)' operation.Name' new Type[] { }' arguments.ToArray()); " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                this.ResultExpression = Expression.Call(Expression.Constant(operationProvider)' operation.Name' new Type[] { }' arguments.ToArray()); " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "                this.ResultExpression = Expression.Call(Expression.Constant(operationProvider)' operation.Name' new Type[] { }' arguments.ToArray()); " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "            this.ResultExpression = Expression.Condition(containsExpression' queryOpenPropertyExpression' Expression.Constant(null)); " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "            Type instanceType = EdmClrTypeUtils.GetInstanceType((this.LastProcessedSegment.EdmType as EdmCollectionType).ElementType); " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "            this.ResultExpression = Expression.Call(typeof(Queryable)' AsQueryableMethod' new Type[] { instanceType }' this.ResultExpression); " is 130.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "            this.ResultExpression = Expression.Call(typeof(Queryable)' CountMethodName' new Type[] { instanceType }' this.ResultExpression); " is 128.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The length of the statement  "            if (this.LastProcessedSegment is PropertySegment || this.LastProcessedSegment is KeySegment || this.LastProcessedSegment is NavigationPropertySegment) " is 150.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,The length of the statement  "            var testExpressionVisitor = new PathSegmentToExpressionTranslator(dataSource' this' this.Model) { ActionInvokeParameters = this.ActionInvokeParameters }; " is 153.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,The length of the statement  "                ODataUriParser uriParser = new ODataUriParser(this.Model' ServiceConstants.ServiceBaseUri' this.QueryEntityIdSegment.Id); " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,The length of the statement  "                boundExpression = boundExpression.ApplyFilter(GetElementTypeForOption(ServiceConstants.QueryOption_Filter)' this.UriParser' this.QueryFilterClause); " is 148.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,The length of the statement  "                boundExpression = boundExpression.ApplySearch(GetElementTypeForOption(ServiceConstants.QueryOption_Search)' this.UriParser' this.QuerySearchClause); " is 148.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,The length of the statement  "                boundExpression = boundExpression.ApplyOrderBy(GetElementTypeForOption(ServiceConstants.QueryOption_OrderBy)' this.UriParser' this.QueryOrderByClause); " is 151.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,The length of the statement  "                boundExpression = boundExpression.ApplySkip(GetElementTypeForOption(ServiceConstants.QueryOption_Skip)' this.SkipOption.Value); " is 127.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ResolveQuery,The length of the statement  "                boundExpression = boundExpression.ApplyTop(GetElementTypeForOption(ServiceConstants.QueryOption_Top)' this.TopOption.Value); " is 124.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,CreateNextPageLink,The length of the statement  "            // The OData protocol says that the client specifies odata.track-changes on the initial request to the delta link but is not required to repeat it for subsequent pages' " is 168.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,CreateNextPageLink,The length of the statement  "            // If the current response has a delta link' the format of $skiptoken is 'DLxxx'' otherwise 'xxx'. The xxx is the skip row count of the next request. " is 149.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,CreateDeltaLink,The length of the statement  "            var deltaToken = DeltaContext.GenerateDeltaToken(this.QueryUri' results' this.Target.NavigationSource' this.QuerySelectExpandClause); " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,CreateDeltaLink,The length of the statement  "            return new Uri(string.Format("{0}?{1}={2}"' ServiceConstants.ServiceBaseUri' ServiceConstants.QueryOption_Delta' deltaToken)); " is 126.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ParseSkipToken,The length of the statement  "            // If the original request needs to track changes' the format of $skiptoken is 'DLxxx'' otherwise 'xxx'. The xxx is the skip row count of the next request. " is 155.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteEntry,The length of the statement  "            var expandedItems = selectExpandClause == null ? null : selectExpandClause.SelectedItems.OfType<ExpandedReferenceSelectItem>(); " is 127.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteNavigationLinks,The length of the statement  "            foreach (var navigationProperty in ((IEdmEntityType)EdmClrTypeUtils.GetEdmType(DataSourceManager.GetCurrentDataSource().Model' element)).NavigationProperties()) " is 160.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteNavigationLinks,The length of the statement  "                // Or if the navigation is expanded' we manually write out the links for the navigation properties along with the expanded entries " is 130.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteNavigationLinks,The length of the statement  "                        navigationLink.Url = (parentEntryUri == null) ? new Uri("potato"' UriKind.Relative) : new Uri(new Uri(parentEntryUri.AbsoluteUri + "/")' navigationProperty.Name); " is 162.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteNavigationLinks,The length of the statement  "                                    WriteFeed(writer' null' collectionValue' targetSource as IEdmEntitySetBase' targetVersion' ((ExpandedNavigationSelectItem)expandedItem).SelectAndExpand' count' null' null); " is 172.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteNavigationLinks,The length of the statement  "                                    WriteEntry(writer' propertyValue' targetSource' targetVersion' ((ExpandedNavigationSelectItem)expandedItem).SelectAndExpand); " is 125.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteReferenceLinks,The length of the statement  "            IEnumerable<ODataEntry> links = ODataObjectModelConverter.ConvertToODataEntityReferenceLinks(element' entitySource' targetVersion); " is 131.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,GetExpandedReferenceItem,The length of the statement  "                foreach (ExpandedReferenceSelectItem item in expandedItems.Where(I => I.GetType() == typeof(ExpandedReferenceSelectItem))) " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,GetExpandedNavigationItem,The length of the statement  "                foreach (ExpandedNavigationSelectItem item in expandedItems.Where(I => I.GetType() == typeof(ExpandedNavigationSelectItem))) " is 124.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ResponseWriter,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ResponseWriter.cs,WriteAsyncPendingResponse,The length of the statement  "            Uri location = new Uri(ServiceConstants.ServiceBaseUri' string.Format("{0}?{1}={2}"' ServiceConstants.ServicePath_Async' ServiceConstants.QueryOption_AsyncToken' asyncToken)); " is 175.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,SearchHelper,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\SearchHelper.cs,GetSearchProperties,The length of the statement  "            return type.GetProperties(BindingFlags.FlattenHierarchy | BindingFlags.GetProperty | BindingFlags.Instance | BindingFlags.Public) " is 129.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,ODataService<TDataSource>,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Services\ODataService.cs,ExecutePostRequest,The length of the statement  "            // For Portable platform' UsePostTunneling is set to true' Then Update/Delete request will use "POST"' the real operation is stored in X-HTTP-Method " is 148.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryOptionExtensions,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\UriHandlers\QueryOptionExtensions.cs,ApplyTop,The length of the statement  "            return Expression.Call(typeof(Enumerable)' "Take"' new Type[] { entityInstanceType }' rootExpression' Expression.Constant(topOption.ToInt32())); " is 144.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,QueryOptionExtensions,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\UriHandlers\QueryOptionExtensions.cs,ApplySkip,The length of the statement  "            return Expression.Call(typeof(Enumerable)' "Skip"' new Type[] { entityInstanceType }' rootExpression' Expression.Constant(skipOption.ToInt32())); " is 145.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,Utility,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Utility.cs,RebuildUri,The length of the statement  "                    var builder = new UriBuilder(original.Scheme' original.Host' original.Port' HttpContext.Current.Request.ApplicationPath); " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,Utility,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Utility.cs,GetServiceBaseAddress,The length of the statement  "                // TODO: when using Azure API' change the following code with Azure API. if the code is deployed on the Azure' read web.config " is 126.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,Utility,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Utility.cs,GetServiceBaseAddress,The length of the statement  "                result = ODataSessionIdManager.IsSharedRequest ? WebConfigurationManager.AppSettings["TripPinServiceBaseAddress"] : WebConfigurationManager.AppSettings["TripPinServiceRWBaseAddress"]; " is 183.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,Utility,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Utility.cs,BuildLocationUri,The length of the statement  "                var keySegment = BuildKeySegment(context.Target.ElementType as IEdmEntityType' context.Target.NavigationSource as IEdmEntitySetBase' target); " is 141.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,Utility,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Utility.cs,GetETagPropertyName,The length of the statement  "            const BindingFlags flags = BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.Public | BindingFlags.GetProperty | BindingFlags.SetProperty; " is 157.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService,Utility,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Utility.cs,GetETagPropertyName,The length of the statement  "            var property = clrObject.GetType().GetProperties(flags).SingleOrDefault(p => p.GetCustomAttributes(typeof(ETagFieldAttribute)' true).Any()); " is 140.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.BuiltInFunctionHelper,TypeFunctionHelper,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\BuiltInFunctionHelper\TypeFunctionHelper.cs,TypeCastFunction,The length of the statement  "                throw new InvalidCastException(string.Format("Can't convert type {0} to type {1}"' instance.GetType()' typeof(TOut))' ex); " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.DataSource,DataSourceManager,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\DataSourceManager.cs,EnsureCurrentDataSource,The length of the statement  "                    OperationContext.Current.OperationCompleted += delegate { Thread.SetData(Thread.GetNamedDataSlot(CurrentDataSourceTypeRequestKey)' null); }; " is 140.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.DataSource,DataSourceManager,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\DataSourceManager.cs,GetCurrentDataSource,The length of the statement  "            var dataSourceSessionKey = string.Format(CurrentDataSourceInstanceSessionKeyFormat' dataSourceType.AssemblyQualifiedName); " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.DataSource,ODataReflectionUpdateProvider,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\ODataReflectionUpdateProvider.cs,UpdateCore,The length of the statement  "                var structuredType = (IEdmStructuredType)EdmClrTypeUtils.GetEdmType(DataSourceManager.GetCurrentDataSource().Model' openClrObject); " is 131.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,BatchHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\BatchHandler.cs,Process,The length of the statement  "                                        new QueryHandler(this' operationRequestMessage.Url' operationRequestMessage.Headers).Process(operationRequestMessage' operationResponseMessage); " is 144.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,BatchHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\BatchHandler.cs,Process,The length of the statement  "                                        new CreateHandler(this' operationRequestMessage.Url' operationRequestMessage.Headers).Process(operationRequestMessage' operationResponseMessage); " is 145.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,BatchHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\BatchHandler.cs,Process,The length of the statement  "                                        new DeleteHandler(this' operationRequestMessage.Url' operationRequestMessage.Headers).Process(operationRequestMessage' operationResponseMessage); " is 145.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,BatchHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\BatchHandler.cs,Process,The length of the statement  "                                        new UpdateHandler(this' method' operationRequestMessage.Url' operationRequestMessage.Headers).Process(operationRequestMessage' operationResponseMessage); " is 153.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,BatchHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\BatchHandler.cs,Process,The length of the statement  "                                        new ErrorHandler(this' Utility.BuildException(HttpStatusCode.MethodNotAllowed)).Process(operationRequestMessage' operationResponseMessage); " is 139.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,DispatchHandler,The length of the statement  "            if (this.QueryContext.QueryPath.LastSegment is OperationSegment || this.QueryContext.QueryPath.LastSegment is OperationImportSegment) " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,DispatchHandler,The length of the statement  "            if (!this.QueryContext.Target.IsReference && Utility.IsMediaEntity(EdmClrTypeUtils.GetInstanceType(this.QueryContext.Target.ElementType.FullTypeName()))) " is 153.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,Process,The length of the statement  "                throw Utility.BuildException(HttpStatusCode.BadRequest' "The new resource can only be created under collection resource."' null); " is 129.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,Process,The length of the statement  "                    // Upon successful completion the service MUST respond with either 201 Created' or 204 No Content if the request included a return Prefer header with a value of return=minimal. " is 176.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,Process,The length of the statement  "                    responseMessage.SetHeader(ServiceConstants.HttpHeaders.Location' Utility.BuildLocationUri(this.QueryContext' bodyObject).OriginalString); " is 137.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,Process,The length of the statement  "                    ResponseWriter.WriteEntry(messageWriter.CreateODataEntryWriter(targetEntitySet)' bodyObject' targetEntitySet' ODataVersion.V4' null); " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,ProcessPostBody,The length of the statement  "                                currentTargetEntitySet = this.DataSource.Model.EntityContainer.EntitySets().Single(s => s.EntityType() == navigationProperty.Type.Definition); " is 142.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,AddBoundNavigationPropertyAnnotation,The length of the statement  "                annotation = new BoundNavigationPropertyAnnotation { BoundProperties = new List<Tuple<ODataNavigationLink' object>>() }; " is 120.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,Process,The length of the statement  "                        var newDeltaToken = DeltaContext.GenerateDeltaToken(this.QueryContext.QueryUri' iEnumerableResults' entitySet' this.QueryContext.QuerySelectExpandClause); " is 154.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,Process,The length of the statement  "                        newDeltaLink = new Uri(string.Format("{0}?{1}={2}"' this.ServiceRootUri' ServiceConstants.QueryOption_Delta' newDeltaToken)); " is 125.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemFromEntry,The length of the statement  "                var lastSegmentOfDeltaEntry = new ODataUriParser(this.DataSource.Model' ServiceConstants.ServiceBaseUri' deltaEntry.Id).ParsePath().LastSegment as KeySegment; " is 158.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemFromEntry,The length of the statement  "            bool ifDeleted = DeltaSnapshot.Entries.Remove(DeltaSnapshot.Entries.FirstOrDefault(p => p.Id == deltaEntry.Id.AbsoluteUri && p.ParentId == parentId && p.RelationShip == relationShip)); " is 184.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemFromEntry,The length of the statement  "                var lastSegmentOfDeltaEntry = new ODataUriParser(this.DataSource.Model' ServiceConstants.ServiceBaseUri' deltaEntry.Id).ParsePath().LastSegment as KeySegment; " is 158.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemFromEntry,The length of the statement  "            var expandedNavigationItems = selectExpandClause == null ? null : selectExpandClause.SelectedItems.OfType<ExpandedNavigationSelectItem>(); " is 138.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemsFromExpand,The length of the statement  "            foreach (var navigationProperty in ((IEdmEntityType)EdmClrTypeUtils.GetEdmType(this.DataSource.Model' entry)).NavigationProperties()) " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemsFromExpand,The length of the statement  "                                GenerateDeltaItemFromEntry(expandedEntity' targetSource' targetVersion' expandedNavigationItem.SelectAndExpand' parentId' navigationProperty.Name); " is 147.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaHandler.cs,GenerateDeltaItemsFromExpand,The length of the statement  "                            GenerateDeltaItemFromEntry(propertyValue' targetSource' targetVersion' expandedNavigationItem.SelectAndExpand' parentId' navigationProperty.Name); " is 146.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                        new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders"); " is 131.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                        new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders"); " is 131.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                        new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'  " is 128.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                        Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")' " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders"); " is 135.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                        new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders"); " is 120.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)"); " is 146.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                        new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders"); " is 131.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The length of the statement  "                        new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders"); " is 131.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,GetWriterSettings,The length of the statement  "            settings.SetContentType(string.IsNullOrEmpty(this.QueryContext.FormatOption) ? this.RequestAcceptHeader : this.QueryContext.FormatOption' Encoding.UTF8.WebName); " is 161.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,Process,The length of the statement  "                    responseMessage.AddPreferenceApplied(string.Format("{0}={1}"' ServiceConstants.Preference_MaxPageSize' this.QueryContext.appliedPageSize.Value)); " is 145.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,Process,The length of the statement  "                else if (this.QueryContext.Target.TypeKind == EdmTypeKind.Entity || this.QueryContext.Target.ElementTypeKind == EdmTypeKind.Entity) " is 131.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,Process,The length of the statement  "                    IEdmNavigationSource entitySource = this.QueryContext.OperationResultSource ?? this.QueryContext.Target.NavigationSource; " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,Process,The length of the statement  "                        ResponseWriter.WriteFeed(resultWriter' (IEdmEntityType)this.QueryContext.Target.ElementType' result as IEnumerable' entitySet' ODataVersion.V4' this.QueryContext.QuerySelectExpandClause' this.QueryContext.TotalCount' null' this.QueryContext.NextLink' this.RequestHeaders); " is 272.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,Process,The length of the statement  "                                if (Utility.TryGetIfNoneMatch(this.RequestHeaders' out requestETag) && (requestETag == ServiceConstants.ETagValueAsterisk || requestETag == currentETag)) " is 153.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,Process,The length of the statement  "                        ResponseWriter.WriteEntry(resultWriter' result' entitySource' ODataVersion.V4' this.QueryContext.QuerySelectExpandClause' this.RequestHeaders); " is 143.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,Process,The length of the statement  "                    ODataProperty property = new ODataProperty() { Name = "value"' Value = ODataObjectModelConverter.CreateODataValue(result) }; " is 124.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,ProcessActionInvokePostBody,The length of the statement  "                                object clrValue = ODataObjectModelConverter.ConvertPropertyValue(ODataObjectModelConverter.ReadCollectionParameterValue(collectionReader)); " is 139.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,ProcessActionInvokePostBody,The length of the statement  "                                object clrValue = ODataObjectModelConverter.ConvertPropertyValue(ODataObjectModelConverter.ReadEntryParameterValue(entryReader)); " is 129.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,DispatchHandler,The length of the statement  "            if (this.QueryContext.QueryPath.LastSegment is OperationSegment || this.QueryContext.QueryPath.LastSegment is OperationImportSegment) " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,DispatchHandler,The length of the statement  "            if (this.QueryContext.QueryPath.LastSegment is ValueSegment && this.QueryContext.Target.TypeKind == EdmTypeKind.Primitive) " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                // For individual property or $value includes navigation properties or $ref if the relationship terminates on a single entity " is 125.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                // If the relationship terminates on a collection' TypeKind will be Collection and an empty collection will be returned. " is 120.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                responseMessage.AddPreferenceApplied(string.Format("{0}={1}"' ServiceConstants.Preference_MaxPageSize' this.QueryContext.appliedPageSize.Value)); " is 145.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                    ODataEntityReferenceLinks linksCollection = new ODataEntityReferenceLinks() { Links = links' NextPageLink = this.QueryContext.NextLink }; " is 137.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                    linksCollection.InstanceAnnotations.Add(new ODataInstanceAnnotation("Links.Annotation"' new ODataPrimitiveValue(true))); " is 120.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                else if (this.QueryContext.Target.NavigationSource != null && this.QueryContext.Target.TypeKind == EdmTypeKind.Collection) " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                    ResponseWriter.WriteFeed(resultWriter' entityType' iEnumerableResults' entitySet' ODataVersion.V4' this.QueryContext.QuerySelectExpandClause' this.QueryContext.TotalCount' this.QueryContext.DeltaLink' this.QueryContext.NextLink' this.RequestHeaders); " is 250.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                        if (Utility.TryGetIfNoneMatch(this.RequestHeaders' out requestETag) && (requestETag == ServiceConstants.ETagValueAsterisk || requestETag == currentETag)) " is 153.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                    ResponseWriter.WriteEntry(resultWriter' queryResults' navigationSource' ODataVersion.V4' this.QueryContext.QuerySelectExpandClause' this.RequestHeaders); " is 153.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,QueryHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\QueryHandler.cs,Process,The length of the statement  "                    ODataProperty property = ODataObjectModelConverter.CreateODataProperty(queryResults' this.QueryContext.Target.Property.Name); " is 125.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,RequestHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\RequestHandler.cs,GetWriterSettings,The length of the statement  "                    ODataUriParser uriParser = new ODataUriParser(this.DataSource.Model' ServiceConstants.ServiceBaseUri' this.QueryContext.CanonicalUri); " is 134.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,RequestHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\RequestHandler.cs,GetWriterSettings,The length of the statement  "            settings.SetContentType(string.IsNullOrEmpty(this.QueryContext.FormatOption) ? this.RequestAcceptHeader : this.QueryContext.FormatOption' Encoding.UTF8.WebName); " is 161.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,RootRequestHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\RootRequestHandler.cs,Process,The length of the statement  "            throw new InvalidOperationException("The RootRequestHandler cannot be invoked by Process(IODataRequestMessage' IODataResponseMessage)."); " is 137.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,StatusMonitorRequestHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\StatusMonitorRequestHandler.cs,Process,The length of the statement  "                    responseMessage.SetHeader(ServiceConstants.HttpHeaders.ContentTransferEncoding' ServiceConstants.HttpHeaderValues.Binary); " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,MediaStreamHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\MediaStreamHandler.cs,Process,The length of the statement  "            throw Utility.BuildException(HttpStatusCode.MethodNotAllowed' string.Format("The HTTP method '{0}' is not supported"' this.HttpMethod)' null); " is 142.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,MediaStreamHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\MediaStreamHandler.cs,ProcessCreate,The length of the statement  "                    responseMessage.SetHeader(ServiceConstants.HttpHeaders.Location' Utility.BuildLocationUri(this.QueryContext' entity).OriginalString); " is 133.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,MediaStreamHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\MediaStreamHandler.cs,ProcessCreate,The length of the statement  "                        ResponseWriter.WriteEntry(messageWriter.CreateODataEntryWriter(edmEntitySet)' entity' edmEntitySet' ODataVersion.V4' null); " is 123.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,MediaStreamHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\MediaStreamHandler.cs,ProcessUpdate,The length of the statement  "                ResponseWriter.WriteEntry(messageWriter.CreateODataEntryWriter(edmEntitySet)' entity' edmEntitySet' ODataVersion.V4' null); " is 123.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,UpdateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\UpdateHandler.cs,DispatchHandler,The length of the statement  "            if (this.QueryContext.QueryPath.LastSegment is ValueSegment && this.QueryContext.Target.TypeKind == EdmTypeKind.Primitive) " is 122.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Handlers,UpdateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\UpdateHandler.cs,ProcessUpdateRequestBody,The length of the statement  "                    var entryReader = messageReader.CreateODataEntryReader(this.QueryContext.Target.NavigationSource' (IEdmEntityType)this.QueryContext.Target.Type); " is 145.
Long Statement,Microsoft.OData.Core.Evaluation,ODataAnnotationUriBuilder,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\ODataAnnotationUriBuilder.cs,ComputeNavigationSource,The length of the statement  "            while (!(lastSegment is NavigationPropertySegment || lastSegment is EntitySetSegment || lastSegment is SingletonSegment)) " is 121.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.UriHandlers,PathSegmentToResourcePathTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\UriHandlers\PathSegmentToResourcePathTranslator.cs,Translate,The length of the statement  "                    builder.Append(ODataUriUtils.ConvertToUriLiteral(keys[i].Value' ODataVersion.V4' DataSourceManager.GetCurrentDataSource().Model)); " is 130.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.UriHandlers,PathSegmentToResourcePathTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\UriHandlers\PathSegmentToResourcePathTranslator.cs,Translate,The length of the statement  "                    builder.Append(string.Format("{0}={1}"' keys[i].Key' ODataUriUtils.ConvertToUriLiteral(keys[i].Value' ODataVersion.V4' DataSourceManager.GetCurrentDataSource().Model))); " is 169.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetNavigationRestrictionsCapabilitiesAnnotation,The length of the statement  "                    new EdmPropertyConstructor("Navigability"' new EdmEnumMemberReferenceExpression(NavigationTypeType.Members.Single(m => m.Name == name)))' " is 137.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetNavigationRestrictionsCapabilitiesAnnotation,The length of the statement  "                new EdmPropertyConstructor("Navigability"' new EdmEnumMemberReferenceExpression(NavigationTypeType.Members.Single(m => m.Name == typeLiteral)))' " is 144.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetSearchRestrictionsCapabilitiesAnnotation,The length of the statement  "                new EdmPropertyConstructor("UnsupportedExpressions"' new EdmEnumMemberReferenceExpression(SearchExpressionsType.Members.Single(m => m.Name == name)))' " is 150.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetInsertRestrictionsCapabilitiesAnnotation,The length of the statement  "            model.SetCapabilitiesAnnotation(entitySet' InsertRestrictionsTerm' insertable' nonInsertableProperties' "Insertable"' "NonInsertableNavigationProperties"); " is 155.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,GetInsertRestrictions,The length of the statement  "            model.GetBooleanAndPathCollection(entitySet' InsertRestrictionsTerm' "Insertable"' "NonInsertableNavigationProperties"' out insertable' out nonInsertableProperties); " is 165.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetUpdateRestrictionsCapabilitiesAnnotation,The length of the statement  "            model.SetCapabilitiesAnnotation(entitySet' UpdateRestrictionsTerm' updatable' nonUpdatableProperties' "Updatable"' "NonUpdatableNavigationProperties"); " is 151.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetDeleteRestrictionsCapabilitiesAnnotation,The length of the statement  "            model.SetCapabilitiesAnnotation(entitySet' DeleteRestrictionsTerm' deletable' nonDeletableProperties' "Deletable"' "NonDeletableNavigationProperties"); " is 151.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,GetDeleteRestrictions,The length of the statement  "            model.GetBooleanAndPathCollection(entitySet' DeleteRestrictionsTerm' "Deletable"' "NonDeletableNavigationProperties"' out deletable' out nonDeletableProperties); " is 161.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,SetCapabilitiesAnnotation,The length of the statement  "                new EdmPropertyConstructor(name2' new EdmCollectionExpression(navigationProperties.Select(p => new EdmNavigationPropertyPathExpression(p.Name))))' " is 146.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,GetBooleanAndPathCollection,The length of the statement  "            var booleanExpression = (IEdmBooleanConstantExpression)recordExpression.Properties.Single(p => p.Name == booleanPropertyName).Value; " is 132.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,GetBooleanAndPathCollection,The length of the statement  "            var collectionExpression = (IEdmCollectionExpression)recordExpression.Properties.Single(p => p.Name == pathsPropertyName).Value; " is 128.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CapabilitiesHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CapabilitiesHelpers.cs,ToSerializationLocation,The length of the statement  "            return target is IEdmEntityContainer ? EdmVocabularyAnnotationSerializationLocation.OutOfLine : EdmVocabularyAnnotationSerializationLocation.Inline; " is 148.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,CoreHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\CoreHelpers.cs,ToSerializationLocation,The length of the statement  "            return target is IEdmEntityContainer ? EdmVocabularyAnnotationSerializationLocation.OutOfLine : EdmVocabularyAnnotationSerializationLocation.Inline; " is 148.
Long Statement,Microsoft.Test.OData.Services.ODataWCFService.Vocabularies,MeasuresHelpers,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Vocabularies\MeasuresHelpers.cs,ToSerializationLocation,The length of the statement  "            return target is IEdmEntityContainer ? EdmVocabularyAnnotationSerializationLocation.OutOfLine : EdmVocabularyAnnotationSerializationLocation.Inline; " is 148.
Complex Conditional,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The conditional expression  "!(this.LastProcessedSegment is KeySegment                  || this.LastProcessedSegment is SingletonSegment                  || this.LastProcessedSegment is TypeSegment                  || this.LastProcessedSegment is NavigationPropertySegment)"  is complex.
Complex Conditional,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The conditional expression  "!(this.LastProcessedSegment is KeySegment                  || this.LastProcessedSegment is SingletonSegment                  || this.LastProcessedSegment is NavigationPropertySegment                  || this.LastProcessedSegment is PropertySegment   // For addressing primitive property under complex property                  || this.LastProcessedSegment is TypeSegment       // For derived type cast                  || this.LastProcessedSegment is OperationSegment)"  is complex.
Complex Conditional,Microsoft.Test.OData.Services.ODataWCFService,PathSegmentToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\PathSegmentToExpressionTranslator.cs,Translate,The conditional expression  "!(this.LastProcessedSegment is KeySegment                 || this.LastProcessedSegment is SingletonSegment                 || this.LastProcessedSegment is NavigationPropertySegment                 || this.LastProcessedSegment is PropertySegment                 || this.LastProcessedSegment is TypeSegment)"  is complex.
Magic Number,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,TranslateFunctionCall,The following statement contains a magic number: switch (functionName)              {                  #region string functions                  case "contains":                      var methodInfoOfContains = typeof(string).GetMethod("Contains"' BindingFlags.Public | BindingFlags.Instance);                      var instanceOfContains = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfContains = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfContains' methodInfoOfContains' argumentOfContains);                    case "endswith":                      var methodInfoOfEndsWith = typeof(string).GetMethod("EndsWith"' new Type[] { typeof(string) });                      var instanceOfEndsWith = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfEndsWith = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfEndsWith' methodInfoOfEndsWith' argumentOfEndsWith);                    case "startswith":                      var methodInfoOfStartsWith = typeof(string).GetMethod("StartsWith"' new Type[] { typeof(string) });                      var instanceOfStartsWith = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfStartsWith = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfStartsWith' methodInfoOfStartsWith' argumentOfStartsWith);                    case "length":                      var propertyInfoOfLength = typeof(string).GetProperty("Length"' typeof(int));                      var instanceOfLength = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Property(instanceOfLength' propertyInfoOfLength);                    case "indexof":                      var methodInfoOfIndexOf = typeof(string).GetMethod("IndexOf"' new Type[] { typeof(string) });                      var instanceOfIndexOf = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfIndexOf = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfIndexOf' methodInfoOfIndexOf' argumentOfIndexOf);                    case "substring":                      var argumentCount = argumentNodes.Count();                      if (argumentNodes.Count() == 2)                      {                          var methodInfoOfSubString = typeof(string).GetMethod("Substring"' new Type[] { typeof(int) });                          var instanceOfSubString = argumentNodes.ElementAt(0).Accept(this);                          var argumentOfSubString = argumentNodes.ElementAt(1).Accept(this);                          return Expression.Call(instanceOfSubString' methodInfoOfSubString' argumentOfSubString);                      }                      else if (argumentNodes.Count() == 3)                      {                          var methodInfoOfSubString = typeof(string).GetMethod("Substring"' new Type[] { typeof(int)' typeof(int) });                          var instanceOfSubString = argumentNodes.ElementAt(0).Accept(this);                          var argumentOfSubString = argumentNodes.ElementAt(1).Accept(this);                          var argumentOfSubString2 = argumentNodes.ElementAt(2).Accept(this);                          return Expression.Call(instanceOfSubString' methodInfoOfSubString' argumentOfSubString' argumentOfSubString2);                      }                      else                      {                          throw new ArgumentException("argumentNodes");                      }                    case "tolower":                      var methodInfoOfToLower = typeof(string).GetMethod("ToLower"' new Type[] { });                      var instanceOfToLower = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfToLower' methodInfoOfToLower);                    case "toupper":                      var methodInfoOfToUpper = typeof(string).GetMethod("ToUpper"' new Type[] { });                      var instanceOfToUpper = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfToUpper' methodInfoOfToUpper);                    case "trim":                      var methodInfoOfTrim = typeof(string).GetMethod("Trim"' new Type[] { });                      var instanceOfTrim = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfTrim' methodInfoOfTrim);                    case "concat":                      var methodInfoOfConcat = typeof(string).GetMethod("Concat"' new Type[] { typeof(string)' typeof(string) });                      var argumentOfConcat1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfConcat2 = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(methodInfoOfConcat' argumentOfConcat1' argumentOfConcat2);                  #endregion                    #region DateTime Method                  case "year":                      return TranslateDateTimeInstanceProperty("Year"' argumentNodes);                  case "month":                      return TranslateDateTimeInstanceProperty("Month"' argumentNodes);                  case "day":                      return TranslateDateTimeInstanceProperty("Day"' argumentNodes);                  case "hour":                      return TranslateDateTimeInstanceProperty("Hour"' argumentNodes);                  case "minute":                      return TranslateDateTimeInstanceProperty("Minute"' argumentNodes);                  case "second":                      return TranslateDateTimeInstanceProperty("Second"' argumentNodes);                    // Don't support those type by now.                  //case "fractionalseconds":                  //    return TranslateDateTimeInstanceProperty("Millisecond"' argumentNodes);                  //case "date":                  //    return TranslateDateTimeInstanceProperty("Date"' argumentNodes);                  //case "time":                  //    return TranslateDateTimeProperty("Year");                  //case "totaloffsetminutes":                  //    return TranslateDateTimeProperty("Date"' argumentNodes);                  //case "now":                  //    return TranslateDateTimeProperty("Now"' argumentNodes);                  //case "mindatetime":                  //    return TranslateDateTimeProperty("MinValue"' argumentNodes);                  //case "maxdatetime":                  //    return TranslateDateTimeProperty("MaxValue"' argumentNodes);                  #endregion                    #region Math Methods                  case "round":                      return TranslateMathFunction("Round"' argumentNodes);                  case "floor":                      return TranslateMathFunction("Floor"' argumentNodes);                  case "ceiling":                      return TranslateMathFunction("Ceiling"' argumentNodes);                  #endregion                    #region Type Functions                  case "cast":                      var instanceOfCast = argumentNodes.ElementAt(0).Accept(this);                      var typeInfoOfCast = (ConstantNode)argumentNodes.ElementAt(1);                      var targetTypeOfCast = EdmClrTypeUtils.GetInstanceType(typeInfoOfCast.Value.ToString());                      var methodInfoOfCast = typeof(TypeFunctionHelper).GetMethod("TypeCastFunction"' BindingFlags.Public | BindingFlags.Static);                      methodInfoOfCast = methodInfoOfCast.MakeGenericMethod(new Type[] { targetTypeOfCast' instanceOfCast.Type });                      return Expression.Call(methodInfoOfCast' instanceOfCast);                    case "isof":                      var instanceOfIsOf = argumentNodes.ElementAt(0).Accept(this);                      var typeInfoOfIsOf = (ConstantNode)argumentNodes.ElementAt(1);                      return Expression.TypeIs(instanceOfIsOf' EdmClrTypeUtils.GetInstanceType(typeInfoOfIsOf.Value.ToString()));                    #endregion                    #region Geo Functions                  case "geo.distance":                      var argumentOfGeoDistance1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfGeoDistance2 = argumentNodes.ElementAt(1).Accept(this);                      var methodInfoOfGeoDistance = typeof(GeoFunctionHelper)                          .GetMethod("GetDistance"' new Type[] { argumentOfGeoDistance1.Type' argumentOfGeoDistance2.Type });                      return Expression.Call(methodInfoOfGeoDistance' argumentOfGeoDistance1' argumentOfGeoDistance2);                    case "geo.length":                      var argumentOfGeoLength = argumentNodes.ElementAt(0).Accept(this);                      var methodInfoOfGeoLength = typeof(GeoFunctionHelper)                          .GetMethod("GetLength"' new Type[] { argumentOfGeoLength.Type });                      return Expression.Call(methodInfoOfGeoLength' argumentOfGeoLength);                    case "geo.intersects":                      var argumentOfGeoIntersects1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfGeoIntersects2 = argumentNodes.ElementAt(1).Accept(this);                      var methodInfoOfGeoIntersectse = typeof(GeoFunctionHelper)                          .GetMethod("GetIsIntersects"' new Type[] { argumentOfGeoIntersects1.Type' argumentOfGeoIntersects2.Type });                      return Expression.Call(methodInfoOfGeoIntersectse' argumentOfGeoIntersects1' argumentOfGeoIntersects2);                  #endregion                  default:                      throw new ArgumentException(functionName);              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,TranslateFunctionCall,The following statement contains a magic number: switch (functionName)              {                  #region string functions                  case "contains":                      var methodInfoOfContains = typeof(string).GetMethod("Contains"' BindingFlags.Public | BindingFlags.Instance);                      var instanceOfContains = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfContains = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfContains' methodInfoOfContains' argumentOfContains);                    case "endswith":                      var methodInfoOfEndsWith = typeof(string).GetMethod("EndsWith"' new Type[] { typeof(string) });                      var instanceOfEndsWith = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfEndsWith = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfEndsWith' methodInfoOfEndsWith' argumentOfEndsWith);                    case "startswith":                      var methodInfoOfStartsWith = typeof(string).GetMethod("StartsWith"' new Type[] { typeof(string) });                      var instanceOfStartsWith = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfStartsWith = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfStartsWith' methodInfoOfStartsWith' argumentOfStartsWith);                    case "length":                      var propertyInfoOfLength = typeof(string).GetProperty("Length"' typeof(int));                      var instanceOfLength = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Property(instanceOfLength' propertyInfoOfLength);                    case "indexof":                      var methodInfoOfIndexOf = typeof(string).GetMethod("IndexOf"' new Type[] { typeof(string) });                      var instanceOfIndexOf = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfIndexOf = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfIndexOf' methodInfoOfIndexOf' argumentOfIndexOf);                    case "substring":                      var argumentCount = argumentNodes.Count();                      if (argumentNodes.Count() == 2)                      {                          var methodInfoOfSubString = typeof(string).GetMethod("Substring"' new Type[] { typeof(int) });                          var instanceOfSubString = argumentNodes.ElementAt(0).Accept(this);                          var argumentOfSubString = argumentNodes.ElementAt(1).Accept(this);                          return Expression.Call(instanceOfSubString' methodInfoOfSubString' argumentOfSubString);                      }                      else if (argumentNodes.Count() == 3)                      {                          var methodInfoOfSubString = typeof(string).GetMethod("Substring"' new Type[] { typeof(int)' typeof(int) });                          var instanceOfSubString = argumentNodes.ElementAt(0).Accept(this);                          var argumentOfSubString = argumentNodes.ElementAt(1).Accept(this);                          var argumentOfSubString2 = argumentNodes.ElementAt(2).Accept(this);                          return Expression.Call(instanceOfSubString' methodInfoOfSubString' argumentOfSubString' argumentOfSubString2);                      }                      else                      {                          throw new ArgumentException("argumentNodes");                      }                    case "tolower":                      var methodInfoOfToLower = typeof(string).GetMethod("ToLower"' new Type[] { });                      var instanceOfToLower = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfToLower' methodInfoOfToLower);                    case "toupper":                      var methodInfoOfToUpper = typeof(string).GetMethod("ToUpper"' new Type[] { });                      var instanceOfToUpper = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfToUpper' methodInfoOfToUpper);                    case "trim":                      var methodInfoOfTrim = typeof(string).GetMethod("Trim"' new Type[] { });                      var instanceOfTrim = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfTrim' methodInfoOfTrim);                    case "concat":                      var methodInfoOfConcat = typeof(string).GetMethod("Concat"' new Type[] { typeof(string)' typeof(string) });                      var argumentOfConcat1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfConcat2 = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(methodInfoOfConcat' argumentOfConcat1' argumentOfConcat2);                  #endregion                    #region DateTime Method                  case "year":                      return TranslateDateTimeInstanceProperty("Year"' argumentNodes);                  case "month":                      return TranslateDateTimeInstanceProperty("Month"' argumentNodes);                  case "day":                      return TranslateDateTimeInstanceProperty("Day"' argumentNodes);                  case "hour":                      return TranslateDateTimeInstanceProperty("Hour"' argumentNodes);                  case "minute":                      return TranslateDateTimeInstanceProperty("Minute"' argumentNodes);                  case "second":                      return TranslateDateTimeInstanceProperty("Second"' argumentNodes);                    // Don't support those type by now.                  //case "fractionalseconds":                  //    return TranslateDateTimeInstanceProperty("Millisecond"' argumentNodes);                  //case "date":                  //    return TranslateDateTimeInstanceProperty("Date"' argumentNodes);                  //case "time":                  //    return TranslateDateTimeProperty("Year");                  //case "totaloffsetminutes":                  //    return TranslateDateTimeProperty("Date"' argumentNodes);                  //case "now":                  //    return TranslateDateTimeProperty("Now"' argumentNodes);                  //case "mindatetime":                  //    return TranslateDateTimeProperty("MinValue"' argumentNodes);                  //case "maxdatetime":                  //    return TranslateDateTimeProperty("MaxValue"' argumentNodes);                  #endregion                    #region Math Methods                  case "round":                      return TranslateMathFunction("Round"' argumentNodes);                  case "floor":                      return TranslateMathFunction("Floor"' argumentNodes);                  case "ceiling":                      return TranslateMathFunction("Ceiling"' argumentNodes);                  #endregion                    #region Type Functions                  case "cast":                      var instanceOfCast = argumentNodes.ElementAt(0).Accept(this);                      var typeInfoOfCast = (ConstantNode)argumentNodes.ElementAt(1);                      var targetTypeOfCast = EdmClrTypeUtils.GetInstanceType(typeInfoOfCast.Value.ToString());                      var methodInfoOfCast = typeof(TypeFunctionHelper).GetMethod("TypeCastFunction"' BindingFlags.Public | BindingFlags.Static);                      methodInfoOfCast = methodInfoOfCast.MakeGenericMethod(new Type[] { targetTypeOfCast' instanceOfCast.Type });                      return Expression.Call(methodInfoOfCast' instanceOfCast);                    case "isof":                      var instanceOfIsOf = argumentNodes.ElementAt(0).Accept(this);                      var typeInfoOfIsOf = (ConstantNode)argumentNodes.ElementAt(1);                      return Expression.TypeIs(instanceOfIsOf' EdmClrTypeUtils.GetInstanceType(typeInfoOfIsOf.Value.ToString()));                    #endregion                    #region Geo Functions                  case "geo.distance":                      var argumentOfGeoDistance1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfGeoDistance2 = argumentNodes.ElementAt(1).Accept(this);                      var methodInfoOfGeoDistance = typeof(GeoFunctionHelper)                          .GetMethod("GetDistance"' new Type[] { argumentOfGeoDistance1.Type' argumentOfGeoDistance2.Type });                      return Expression.Call(methodInfoOfGeoDistance' argumentOfGeoDistance1' argumentOfGeoDistance2);                    case "geo.length":                      var argumentOfGeoLength = argumentNodes.ElementAt(0).Accept(this);                      var methodInfoOfGeoLength = typeof(GeoFunctionHelper)                          .GetMethod("GetLength"' new Type[] { argumentOfGeoLength.Type });                      return Expression.Call(methodInfoOfGeoLength' argumentOfGeoLength);                    case "geo.intersects":                      var argumentOfGeoIntersects1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfGeoIntersects2 = argumentNodes.ElementAt(1).Accept(this);                      var methodInfoOfGeoIntersectse = typeof(GeoFunctionHelper)                          .GetMethod("GetIsIntersects"' new Type[] { argumentOfGeoIntersects1.Type' argumentOfGeoIntersects2.Type });                      return Expression.Call(methodInfoOfGeoIntersectse' argumentOfGeoIntersects1' argumentOfGeoIntersects2);                  #endregion                  default:                      throw new ArgumentException(functionName);              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,TranslateFunctionCall,The following statement contains a magic number: switch (functionName)              {                  #region string functions                  case "contains":                      var methodInfoOfContains = typeof(string).GetMethod("Contains"' BindingFlags.Public | BindingFlags.Instance);                      var instanceOfContains = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfContains = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfContains' methodInfoOfContains' argumentOfContains);                    case "endswith":                      var methodInfoOfEndsWith = typeof(string).GetMethod("EndsWith"' new Type[] { typeof(string) });                      var instanceOfEndsWith = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfEndsWith = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfEndsWith' methodInfoOfEndsWith' argumentOfEndsWith);                    case "startswith":                      var methodInfoOfStartsWith = typeof(string).GetMethod("StartsWith"' new Type[] { typeof(string) });                      var instanceOfStartsWith = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfStartsWith = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfStartsWith' methodInfoOfStartsWith' argumentOfStartsWith);                    case "length":                      var propertyInfoOfLength = typeof(string).GetProperty("Length"' typeof(int));                      var instanceOfLength = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Property(instanceOfLength' propertyInfoOfLength);                    case "indexof":                      var methodInfoOfIndexOf = typeof(string).GetMethod("IndexOf"' new Type[] { typeof(string) });                      var instanceOfIndexOf = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfIndexOf = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(instanceOfIndexOf' methodInfoOfIndexOf' argumentOfIndexOf);                    case "substring":                      var argumentCount = argumentNodes.Count();                      if (argumentNodes.Count() == 2)                      {                          var methodInfoOfSubString = typeof(string).GetMethod("Substring"' new Type[] { typeof(int) });                          var instanceOfSubString = argumentNodes.ElementAt(0).Accept(this);                          var argumentOfSubString = argumentNodes.ElementAt(1).Accept(this);                          return Expression.Call(instanceOfSubString' methodInfoOfSubString' argumentOfSubString);                      }                      else if (argumentNodes.Count() == 3)                      {                          var methodInfoOfSubString = typeof(string).GetMethod("Substring"' new Type[] { typeof(int)' typeof(int) });                          var instanceOfSubString = argumentNodes.ElementAt(0).Accept(this);                          var argumentOfSubString = argumentNodes.ElementAt(1).Accept(this);                          var argumentOfSubString2 = argumentNodes.ElementAt(2).Accept(this);                          return Expression.Call(instanceOfSubString' methodInfoOfSubString' argumentOfSubString' argumentOfSubString2);                      }                      else                      {                          throw new ArgumentException("argumentNodes");                      }                    case "tolower":                      var methodInfoOfToLower = typeof(string).GetMethod("ToLower"' new Type[] { });                      var instanceOfToLower = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfToLower' methodInfoOfToLower);                    case "toupper":                      var methodInfoOfToUpper = typeof(string).GetMethod("ToUpper"' new Type[] { });                      var instanceOfToUpper = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfToUpper' methodInfoOfToUpper);                    case "trim":                      var methodInfoOfTrim = typeof(string).GetMethod("Trim"' new Type[] { });                      var instanceOfTrim = argumentNodes.ElementAt(0).Accept(this);                      return Expression.Call(instanceOfTrim' methodInfoOfTrim);                    case "concat":                      var methodInfoOfConcat = typeof(string).GetMethod("Concat"' new Type[] { typeof(string)' typeof(string) });                      var argumentOfConcat1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfConcat2 = argumentNodes.ElementAt(1).Accept(this);                      return Expression.Call(methodInfoOfConcat' argumentOfConcat1' argumentOfConcat2);                  #endregion                    #region DateTime Method                  case "year":                      return TranslateDateTimeInstanceProperty("Year"' argumentNodes);                  case "month":                      return TranslateDateTimeInstanceProperty("Month"' argumentNodes);                  case "day":                      return TranslateDateTimeInstanceProperty("Day"' argumentNodes);                  case "hour":                      return TranslateDateTimeInstanceProperty("Hour"' argumentNodes);                  case "minute":                      return TranslateDateTimeInstanceProperty("Minute"' argumentNodes);                  case "second":                      return TranslateDateTimeInstanceProperty("Second"' argumentNodes);                    // Don't support those type by now.                  //case "fractionalseconds":                  //    return TranslateDateTimeInstanceProperty("Millisecond"' argumentNodes);                  //case "date":                  //    return TranslateDateTimeInstanceProperty("Date"' argumentNodes);                  //case "time":                  //    return TranslateDateTimeProperty("Year");                  //case "totaloffsetminutes":                  //    return TranslateDateTimeProperty("Date"' argumentNodes);                  //case "now":                  //    return TranslateDateTimeProperty("Now"' argumentNodes);                  //case "mindatetime":                  //    return TranslateDateTimeProperty("MinValue"' argumentNodes);                  //case "maxdatetime":                  //    return TranslateDateTimeProperty("MaxValue"' argumentNodes);                  #endregion                    #region Math Methods                  case "round":                      return TranslateMathFunction("Round"' argumentNodes);                  case "floor":                      return TranslateMathFunction("Floor"' argumentNodes);                  case "ceiling":                      return TranslateMathFunction("Ceiling"' argumentNodes);                  #endregion                    #region Type Functions                  case "cast":                      var instanceOfCast = argumentNodes.ElementAt(0).Accept(this);                      var typeInfoOfCast = (ConstantNode)argumentNodes.ElementAt(1);                      var targetTypeOfCast = EdmClrTypeUtils.GetInstanceType(typeInfoOfCast.Value.ToString());                      var methodInfoOfCast = typeof(TypeFunctionHelper).GetMethod("TypeCastFunction"' BindingFlags.Public | BindingFlags.Static);                      methodInfoOfCast = methodInfoOfCast.MakeGenericMethod(new Type[] { targetTypeOfCast' instanceOfCast.Type });                      return Expression.Call(methodInfoOfCast' instanceOfCast);                    case "isof":                      var instanceOfIsOf = argumentNodes.ElementAt(0).Accept(this);                      var typeInfoOfIsOf = (ConstantNode)argumentNodes.ElementAt(1);                      return Expression.TypeIs(instanceOfIsOf' EdmClrTypeUtils.GetInstanceType(typeInfoOfIsOf.Value.ToString()));                    #endregion                    #region Geo Functions                  case "geo.distance":                      var argumentOfGeoDistance1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfGeoDistance2 = argumentNodes.ElementAt(1).Accept(this);                      var methodInfoOfGeoDistance = typeof(GeoFunctionHelper)                          .GetMethod("GetDistance"' new Type[] { argumentOfGeoDistance1.Type' argumentOfGeoDistance2.Type });                      return Expression.Call(methodInfoOfGeoDistance' argumentOfGeoDistance1' argumentOfGeoDistance2);                    case "geo.length":                      var argumentOfGeoLength = argumentNodes.ElementAt(0).Accept(this);                      var methodInfoOfGeoLength = typeof(GeoFunctionHelper)                          .GetMethod("GetLength"' new Type[] { argumentOfGeoLength.Type });                      return Expression.Call(methodInfoOfGeoLength' argumentOfGeoLength);                    case "geo.intersects":                      var argumentOfGeoIntersects1 = argumentNodes.ElementAt(0).Accept(this);                      var argumentOfGeoIntersects2 = argumentNodes.ElementAt(1).Accept(this);                      var methodInfoOfGeoIntersectse = typeof(GeoFunctionHelper)                          .GetMethod("GetIsIntersects"' new Type[] { argumentOfGeoIntersects1.Type' argumentOfGeoIntersects2.Type });                      return Expression.Call(methodInfoOfGeoIntersectse' argumentOfGeoIntersects1' argumentOfGeoIntersects2);                  #endregion                  default:                      throw new ArgumentException(functionName);              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService,QueryContext,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\QueryContext.cs,ParseSkipToken,The following statement contains a magic number: if (skipToken != null)              {                  if (skipToken.StartsWith("DL"' StringComparison.InvariantCultureIgnoreCase))                  {                      result.TrackingChanges = true;                      skipToken = skipToken.Substring(2);                  }                    result.SkipCount = int.Parse(skipToken' NumberStyles.Integer' CultureInfo.InvariantCulture);              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService,PipeReadStream,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\StreamPipe.cs,Read,The following statement contains a magic number: while ((!this.pipe.IsWriteStreamClosed || !this.pipe.Queue.IsEmpty) && index < count)                  {                      byte result;                      if (this.pipe.Queue.TryDequeue(out result))                      {                          buffer[index++] = result;                      }                      else                      {                          Thread.Sleep(10);                      }                  }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.DataSource,ODataReflectionStreamProvider,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\ODataReflectionStreamProvider.cs,CreateStream,The following statement contains a magic number: mediaEntity.Id = DateTime.UtcNow.Ticks % 1000 + 1000;
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.DataSource,ODataReflectionStreamProvider,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\DataSource\ODataReflectionStreamProvider.cs,CreateStream,The following statement contains a magic number: mediaEntity.Id = DateTime.UtcNow.Ticks % 1000 + 1000;
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,ProcessCreateLink,The following statement contains a magic number: var level = this.QueryContext.QueryPath.Count - 2;
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeleteHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeleteHandler.cs,ProcessDeleteLink,The following statement contains a magic number: if (this.QueryContext.QueryEntityIdSegment == null)              {                  // single-valued navigation property                  parent = this.QueryContext.ResolveQuery(this.DataSource' this.QueryContext.QueryPath.Count - 2);              }              else              {                  // collection-valued navigation property                  var queryUri = this.QueryContext.QueryUri;                  var parentUri = queryUri.AbsoluteUri.Substring(0' queryUri.AbsoluteUri.Length - queryUri.Query.Length);                  var parentContext = new QueryContext(this.ServiceRootUri' new Uri(parentUri' UriKind.Absolute)' this.DataSource.Model);                  parent = parentContext.ResolveQuery(this.DataSource' parentContext.QueryPath.Count - 2);                  target = this.QueryContext.ResolveQuery(this.DataSource);              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeleteHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeleteHandler.cs,ProcessDeleteLink,The following statement contains a magic number: if (this.QueryContext.QueryEntityIdSegment == null)              {                  // single-valued navigation property                  parent = this.QueryContext.ResolveQuery(this.DataSource' this.QueryContext.QueryPath.Count - 2);              }              else              {                  // collection-valued navigation property                  var queryUri = this.QueryContext.QueryUri;                  var parentUri = queryUri.AbsoluteUri.Substring(0' queryUri.AbsoluteUri.Length - queryUri.Query.Length);                  var parentContext = new QueryContext(this.ServiceRootUri' new Uri(parentUri' UriKind.Absolute)' this.DataSource.Model);                  parent = parentContext.ResolveQuery(this.DataSource' parentContext.QueryPath.Count - 2);                  target = this.QueryContext.ResolveQuery(this.DataSource);              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeleteHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeleteHandler.cs,ProcessPreconditionRequired,The following statement contains a magic number: ResponseWriter.WriteEmptyResponse(responseMessage' (HttpStatusCode)428);
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The following statement contains a magic number: if (deltaToken == "common")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")'                           Properties = new[] {new ODataProperty {Name = "FirstName"' Value = "GGGG"}}                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(2)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                        deltaFeed.DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=common");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "containment")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments?$expand=BillingStatements");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var accountsSet = this.DataSource.Model.FindDeclaredEntitySet("Accounts");                      var accountType = accountsSet.EntityType();                      var myPisNav = accountType.FindProperty("MyPaymentInstruments") as IEdmNavigationProperty;                      var piSet = accountsSet.FindNavigationTarget(myPisNav);                      var piType = piSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(piSet as IEdmContainedEntitySet' piType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                           Properties = new[] { new ODataProperty { Name = "FriendlyName"' Value = "GGGG" } }                      };                                            var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)").AbsoluteUri'                           DeltaDeletedEntryReason.Deleted);                      deletedEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901001)")'                           "BillingStatements");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          Properties = new[]                          {                              new ODataProperty { Name = "TransactionType"' Value = "OnlinePurchase" }'                               new ODataProperty { Name = "TransactionDescription"' Value = "unknown purchase" }'                              new ODataProperty { Name = "Amount"' Value = 32.1 }                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Statement"'                          NavigationSourceKind = EdmNavigationSourceKind.ContainedEntitySet'                          NavigationSourceName = "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements"                      });                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Accounts(103)/MyPaymentInstruments(103901)/BillingStatements(103901005)")'                          "BillingStatements");                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "derived")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "People?$expand=Microsoft.Test.OData.Services.ODataWCFService.Customer/Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var personType = peopleSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(peopleSet' personType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Customer"'                          Properties = new[]                          {                              new ODataProperty { Name = "City"' Value = "GGGG" }                          }                      };                        var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                        var deletedEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "People(2)").AbsoluteUri'                          DeltaDeletedEntryReason.Changed);                        var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' "People(1)")'                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")'                          "Orders");                        var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedEntry);                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "expanded")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$expand=Orders");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var customerSet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var orderSet = this.DataSource.Model.FindDeclaredEntitySet("Orders");                      var peopleSet = this.DataSource.Model.FindDeclaredEntitySet("People");                      var customerType = customerSet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(customerSet' customerType);                        // Delta feed and entry                      var deltaFeed = new ODataDeltaFeed                      {                          DeltaLink = new Uri(ServiceConstants.ServiceBaseUri' "$delta?$token=expanded")                      };                      var deltaEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' customerSet.Name + "(1)")'                          Properties = new[] { new ODataProperty { Name = "FirstName"' Value = "GGGG" } }                      };                        // Expanded feed                      var navigationLink = new ODataNavigationLink()                      {                          Name = "Orders"'                          IsCollection = true'                      };                      var expandedFeed = new ODataFeed();                      var expandedEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' orderSet.Name + "(8)")'                          Properties = new[]                          {                              new ODataProperty { Name = "OrderDate"' Value = new DateTimeOffset(2011' 3' 4' 16' 03' 57' TimeSpan.FromHours(-8)) }'                              new ODataProperty { Name = "OrderID"' Value = 8 }'                              new ODataProperty { Name = "OrderShelfLifes"' Value = new ODataCollectionValue { Items = new[] { new TimeSpan(1) } } }'                              new ODataProperty { Name = "ShelfLife"' Value = new TimeSpan(1) }'                              new ODataProperty { Name = "ShipDate"' Value = new Date(2014' 8' 12) }'                              new ODataProperty { Name = "ShipTime"' Value = new TimeOfDay(6' 5' 30' 0) }'                          }                      };                        // Expanded entry                      var navigationLinkSingle = new ODataNavigationLink()                      {                          Name = "Parent"'                          IsCollection = false'                      };                      var expandedEntrySingle = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' peopleSet.Name + "(2)")'                          Properties = new[]                          {                              new ODataProperty { Name = "FirstName"' Value = "Jill" }'                              new ODataProperty { Name = "LastName"' Value = "Jones" }'                              new ODataProperty { Name = "Numbers"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "Emails"' Value = new ODataCollectionValue() }'                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "Home"' Value = GeographyPoint.Create(15.0' 161.8) }'                          }                      };                        // Delta feed and entry                      deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry);                        // Expanded feed                      deltaWriter.WriteStart(navigationLink);                      deltaWriter.WriteStart(expandedFeed);                      deltaWriter.WriteStart(expandedEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Expanded entry                      deltaWriter.WriteStart(navigationLinkSingle);                      deltaWriter.WriteStart(expandedEntrySingle);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                        // Delta feed and entry                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }              else if (deltaToken == "projection")              {                  originalUri = new Uri(ServiceConstants.ServiceBaseUri' "Customers?$select=PersonID'FirstName'LastName&$expand=Orders($select=OrderID'OrderDate)");                  using (var messageWriter = this.CreateMessageWriter(responseMessage))                  {                      var entitySet = this.DataSource.Model.FindDeclaredEntitySet("Customers");                      var entityType = entitySet.EntityType();                      ODataDeltaWriter deltaWriter = messageWriter.CreateODataDeltaWriter(entitySet' entityType);                        var deltaFeed = new ODataDeltaFeed();                      var deltaEntry1 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 1 }'                              new ODataProperty { Name = "FirstName"' Value = "FFFF" }'                              new ODataProperty { Name = "LastName"' Value = "LLLL" }'                              new ODataProperty { Name = "City"' Value = "Beijing" }                          }                      };                      var deletedLink = new ODataDeltaDeletedLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(8)")' "Orders");                      var addedLink = new ODataDeltaLink(                          new Uri(ServiceConstants.ServiceBaseUri' entitySet.Name + "(1)")' new Uri(ServiceConstants.ServiceBaseUri' "Orders(7)")' "Orders");                      var navigationEntry = new ODataEntry                      {                          Id = new Uri(ServiceConstants.ServiceBaseUri' "Orders(100)")'                          TypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          Properties = new[]                          {                              new ODataProperty {Name = "OrderID"' Value = 100}'                               new ODataProperty {Name = "OrderDate"' Value = new DateTimeOffset(DateTime.Now)}                          }                      };                      navigationEntry.SetSerializationInfo(new ODataFeedAndEntrySerializationInfo                      {                          NavigationSourceEntityTypeName = "Microsoft.Test.OData.Services.ODataWCFService.Order"'                          NavigationSourceKind = EdmNavigationSourceKind.EntitySet'                          NavigationSourceName = "Orders"                      });                        var deletedOrderEntry = new ODataDeltaDeletedEntry(                          new Uri(ServiceConstants.ServiceBaseUri' "Orders(20)").AbsoluteUri' DeltaDeletedEntryReason.Deleted);                      deletedOrderEntry.SetSerializationInfo(new ODataDeltaSerializationInfo()                      {                          NavigationSourceName = "Orders"                      });                        var deltaEntry2 = new ODataEntry                      {                          Properties = new[]                          {                              new ODataProperty { Name = "PersonID"' Value = 2 }'                              new ODataProperty { Name = "FirstName"' Value = "AAAA" }'                          }                      };                        deltaWriter.WriteStart(deltaFeed);                      deltaWriter.WriteStart(deltaEntry1);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedLink(deletedLink);                      deltaWriter.WriteDeltaLink(addedLink);                      deltaWriter.WriteStart(navigationEntry);                      deltaWriter.WriteEnd();                      deltaWriter.WriteDeltaDeletedEntry(deletedOrderEntry);                      deltaWriter.WriteStart(deltaEntry2);                      deltaWriter.WriteEnd();                      deltaWriter.WriteEnd();                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,RequestHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\RequestHandler.cs,ProcessAsynchronously,The following statement contains a magic number: var responseMessage = new ODataResponseMessage(responsePipe.WriteStream' 202);
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,RequestHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\RequestHandler.cs,CreateResponseMessage,The following statement contains a magic number: return new ODataResponseMessage(stream' 200);
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,MediaStreamHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\MediaStreamHandler.cs,HandleETag,The following statement contains a magic number: if (entityETag != null)              {                  var ifMatch = WebOperationContext.Current.IncomingRequest.IfMatch;                  if (ifMatch != null && ifMatch.Any())                  {                      var requestETag = ifMatch.ElementAt(0);                      if (requestETag != ServiceConstants.ETagValueAsterisk && requestETag != entityETag)                      {                          throw Utility.BuildException(HttpStatusCode.PreconditionFailed);                      }                  }                  else                  {                      throw Utility.BuildException((HttpStatusCode)428);                  }              }
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,UpdateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\UpdateHandler.cs,ProcessUpdateEntityReference,The following statement contains a magic number: var level = this.QueryContext.QueryPath.Count - 2;
Magic Number,Microsoft.Test.OData.Services.ODataWCFService.Handlers,UpdateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\UpdateHandler.cs,ProcessUpdateOrUpsertEntity,The following statement contains a magic number: switch (requestETagKind)              {                  case RequestETagKind.None:                      {                          if (targetETag == null)                          {                              if (targetObject == null)                              {                                  ProcessUpsertEntity(requestMessage' responseMessage' odataPath);                              }                              else                              {                                  ProcessUpdateRequestBody(requestMessage' responseMessage' targetObject' false);                              }                          }                          else                          {                              ResponseWriter.WriteEmptyResponse(responseMessage' (HttpStatusCode)428);                          }                            break;                      }                  case RequestETagKind.IfMatch:                      {                          if (requestETag == ServiceConstants.ETagValueAsterisk || requestETag == targetETag)                          {                              if (targetObject == null)                              {                                  throw Utility.BuildException(HttpStatusCode.NotFound);                              }                                ProcessUpdateRequestBody(requestMessage' responseMessage' targetObject' false);                          }                          else                          {                              ResponseWriter.WriteEmptyResponse(responseMessage' HttpStatusCode.PreconditionFailed);                          }                            break;                      }                  case RequestETagKind.IfNoneMatch:                      {                          if (requestETag == ServiceConstants.ETagValueAsterisk)                          {                              ProcessUpsertEntity(requestMessage' responseMessage' odataPath);                          }                          else if (requestETag != targetETag)                          {                              if (targetObject == null)                              {                                  throw Utility.BuildException(HttpStatusCode.NotFound);                              }                                ProcessUpdateRequestBody(requestMessage' responseMessage' targetObject' false);                          }                          else                          {                              ResponseWriter.WriteEmptyResponse(responseMessage' HttpStatusCode.PreconditionFailed);                          }                            break;                      }              }
Duplicate Code,Microsoft.Test.OData.Services.ODataWCFService.Handlers,DeltaLinkHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\DeltaLinkHandler.cs,Process,The method contains a code clone-set at the following line numbers (starting from the method definition): ((26' 47)' (295' 316))
Missing Default,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,Visit,The following switch statement is missing a default case: switch (nodeIn.OperatorKind)              {                  case BinaryOperatorKind.Equal:                  case BinaryOperatorKind.NotEqual:                  case BinaryOperatorKind.GreaterThan:                  case BinaryOperatorKind.GreaterThanOrEqual:                  case BinaryOperatorKind.LessThan:                  case BinaryOperatorKind.LessThanOrEqual:                  case BinaryOperatorKind.Has:                      return this.TranslateComparison(nodeIn.OperatorKind' left' right);              }
Missing Default,Microsoft.Test.OData.Services.ODataWCFService,NodeToExpressionTranslator,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\NodeToExpressionTranslator.cs,TranslateComparison,The following switch statement is missing a default case: switch (operatorKind)              {                  case BinaryOperatorKind.Equal:                      left = Expression.Equal(left' right);                      break;                  case BinaryOperatorKind.NotEqual:                      left = Expression.NotEqual(left' right);                      break;                  case BinaryOperatorKind.GreaterThan:                      left = Expression.GreaterThan(left' right);                      break;                  case BinaryOperatorKind.GreaterThanOrEqual:                      left = Expression.GreaterThanOrEqual(left' right);                      break;                  case BinaryOperatorKind.LessThan:                      left = Expression.LessThan(left' right);                      break;                  case BinaryOperatorKind.LessThanOrEqual:                      left = Expression.LessThanOrEqual(left' right);                      break;                  case BinaryOperatorKind.Has:                      left = Expression.Equal(Expression.And(left' right)' right);                      break;              }
Missing Default,Microsoft.Test.OData.Services.ODataWCFService.Handlers,CreateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\CreateHandler.cs,ProcessPostBody,The following switch statement is missing a default case: switch (entryReader.State)                      {                          case ODataReaderState.EntryStart:                              odataItemStack.Push(entryReader.Item);                              break;                            case ODataReaderState.EntryEnd:                              {                                  var entry = (ODataEntry)entryReader.Item;                                    // TODO: the code here will be changed to handle following scenarios                                  //       1: non-contained navigation' e.g. People(1)/Friends                                  //       2. general entity set' e.g. People                                  //       3. contained navigation' e.g. People(1)/Trips                                  //       4. upsert' e.g. People(1)/Friends(2)                                  var newInstance = this.DataSource.UpdateProvider.Create(entry.TypeName' queryResults);                                    foreach (var property in entry.Properties)                                  {                                      if (Utility.IsETagProperty(newInstance' property.Name)) continue;                                      this.DataSource.UpdateProvider.Update(newInstance' property.Name' property.Value);                                  }                                    var boundNavPropAnnotation = odataItemStack.Pop().GetAnnotation<BoundNavigationPropertyAnnotation>();                                  if (boundNavPropAnnotation != null)                                  {                                      foreach (var boundProperty in boundNavPropAnnotation.BoundProperties)                                      {                                          var isCollection = boundProperty.Item1.IsCollection == true;                                          var propertyValue = isCollection ? boundProperty.Item2 : ((IEnumerable<object>)boundProperty.Item2).Single();                                          this.DataSource.UpdateProvider.Update(newInstance' boundProperty.Item1.Name' propertyValue);                                      }                                  }                                    var parentItem = odataItemStack.Count > 0 ? odataItemStack.Peek() : null;                                  if (parentItem != null)                                  {                                      // This new entry belongs to a navigation property and/or feed -                                      // propagate it up the tree for further processing.                                      AddChildInstanceAnnotation(parentItem' newInstance);                                  }                                    lastNewInstance = newInstance;                              }                                break;                            case ODataReaderState.FeedStart:                              odataItemStack.Push(entryReader.Item);                              break;                            case ODataReaderState.FeedEnd:                              {                                  var childAnnotation = odataItemStack.Pop().GetAnnotation<ChildInstanceAnnotation>();                                    var parentNavLink = odataItemStack.Count > 0 ? odataItemStack.Peek() as ODataNavigationLink : null;                                  if (parentNavLink != null)                                  {                                      // This feed belongs to a navigation property -                                      // propagate it up the tree for further processing.                                      AddChildInstanceAnnotation(parentNavLink' childAnnotation.ChildInstances ?? new object[0]);                                  }                              }                                break;                            case ODataReaderState.NavigationLinkStart:                              {                                  odataItemStack.Push(entryReader.Item);                                  var navigationLink = (ODataNavigationLink)entryReader.Item;                                  var navigationProperty = (IEdmNavigationProperty)currentTargetEntitySet.EntityType().FindProperty(navigationLink.Name);                                    // Current model implementation doesn't expose associations otherwise this would be much cleaner.                                  currentTargetEntitySet = this.DataSource.Model.EntityContainer.EntitySets().Single(s => s.EntityType() == navigationProperty.Type.Definition);                              }                                break;                            case ODataReaderState.NavigationLinkEnd:                              {                                  var navigationLink = (ODataNavigationLink)entryReader.Item;                                  var childAnnotation = odataItemStack.Pop().GetAnnotation<ChildInstanceAnnotation>();                                  if (childAnnotation != null)                                  {                                      // Propagate the bound entries to the parent entry.                                      AddBoundNavigationPropertyAnnotation(odataItemStack.Peek()' navigationLink' childAnnotation.ChildInstances);                                  }                              }                                break;                      }
Missing Default,Microsoft.Test.OData.Services.ODataWCFService.Handlers,OperationHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\OperationHandler.cs,ProcessActionInvokePostBody,The following switch statement is missing a default case: switch (parameterReader.State)                      {                          case ODataParameterReaderState.Value:                              {                                  object clrValue = ODataObjectModelConverter.ConvertPropertyValue(parameterReader.Value);                                  parameterValues.Add(Expression.Constant(clrValue));                                  break;                              }                          case ODataParameterReaderState.Collection:                              {                                  ODataCollectionReader collectionReader = parameterReader.CreateCollectionReader();                                  object clrValue = ODataObjectModelConverter.ConvertPropertyValue(ODataObjectModelConverter.ReadCollectionParameterValue(collectionReader));                                  parameterValues.Add(Expression.Constant(clrValue' clrValue.GetType()));                                  break;                              }                          case ODataParameterReaderState.Entry:                              {                                  var entryReader = parameterReader.CreateEntryReader();                                  object clrValue = ODataObjectModelConverter.ConvertPropertyValue(ODataObjectModelConverter.ReadEntryParameterValue(entryReader));                                  parameterValues.Add(Expression.Constant(clrValue' clrValue.GetType()));                                  break;                              }                          case ODataParameterReaderState.Feed:                              {                                  IList collectionList = null;                                  var feedReader = parameterReader.CreateFeedReader();                                  while (feedReader.Read())                                  {                                      if (feedReader.State == ODataReaderState.EntryEnd)                                      {                                          object clrItem = ODataObjectModelConverter.ConvertPropertyValue(feedReader.Item);                                          if (collectionList == null)                                          {                                              Type itemType = clrItem.GetType();                                              Type listType = typeof(List<>).MakeGenericType(new[] { itemType });                                              collectionList = (IList)Utility.QuickCreateInstance(listType);                                          }                                            collectionList.Add(clrItem);                                      }                                  }                                    parameterValues.Add(Expression.Constant(collectionList' collectionList.GetType()));                                  break;                              }                      }
Missing Default,Microsoft.Test.OData.Services.ODataWCFService.Handlers,MediaStreamHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\MediaStreamHandler.cs,Process,The following switch statement is missing a default case: switch (this.HttpMethod)              {                  case HttpMethod.GET:                      return this.ProcessQuery();                  case HttpMethod.POST:                      return base.Process(requestStream);                  case HttpMethod.PUT:                      return base.Process(requestStream);                  case HttpMethod.DELETE:                      return this.ProcessDelete();              }
Missing Default,Microsoft.Test.OData.Services.ODataWCFService.Handlers,MediaStreamHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\MediaStreamHandler.cs,Process,The following switch statement is missing a default case: switch (this.HttpMethod)              {                  case HttpMethod.POST:                      this.ProcessCreate(requestMessage.GetStream()' responseMessage);                      break;                  case HttpMethod.PUT:                      this.ProcessUpdate(requestMessage.GetStream()' responseMessage);                      break;              }
Missing Default,Microsoft.Test.OData.Services.ODataWCFService.Handlers,UpdateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\UpdateHandler.cs,ProcessUpdateOrUpsertEntity,The following switch statement is missing a default case: switch (requestETagKind)              {                  case RequestETagKind.None:                      {                          if (targetETag == null)                          {                              if (targetObject == null)                              {                                  ProcessUpsertEntity(requestMessage' responseMessage' odataPath);                              }                              else                              {                                  ProcessUpdateRequestBody(requestMessage' responseMessage' targetObject' false);                              }                          }                          else                          {                              ResponseWriter.WriteEmptyResponse(responseMessage' (HttpStatusCode)428);                          }                            break;                      }                  case RequestETagKind.IfMatch:                      {                          if (requestETag == ServiceConstants.ETagValueAsterisk || requestETag == targetETag)                          {                              if (targetObject == null)                              {                                  throw Utility.BuildException(HttpStatusCode.NotFound);                              }                                ProcessUpdateRequestBody(requestMessage' responseMessage' targetObject' false);                          }                          else                          {                              ResponseWriter.WriteEmptyResponse(responseMessage' HttpStatusCode.PreconditionFailed);                          }                            break;                      }                  case RequestETagKind.IfNoneMatch:                      {                          if (requestETag == ServiceConstants.ETagValueAsterisk)                          {                              ProcessUpsertEntity(requestMessage' responseMessage' odataPath);                          }                          else if (requestETag != targetETag)                          {                              if (targetObject == null)                              {                                  throw Utility.BuildException(HttpStatusCode.NotFound);                              }                                ProcessUpdateRequestBody(requestMessage' responseMessage' targetObject' false);                          }                          else                          {                              ResponseWriter.WriteEmptyResponse(responseMessage' HttpStatusCode.PreconditionFailed);                          }                            break;                      }              }
Missing Default,Microsoft.Test.OData.Services.ODataWCFService.Handlers,UpdateHandler,C:\repos\OData_ODataSamples\Scenarios\TripPin\src\odatalib\ODataWCFLibrary\Handlers\UpdateHandler.cs,ProcessUpdateRequestBody,The following switch statement is missing a default case: switch (entryReader.State)                          {                              case ODataReaderState.EntryEnd:                                  var entry = (ODataEntry)entryReader.Item;                                  foreach (var property in entry.Properties)                                  {                                      if (Utility.IsETagProperty(targetObject' property.Name)) continue;                                      // the property might be an open property' so test null first                                      var propertyInfo = targetObject.GetType().GetProperty(property.Name);                                      if (propertyInfo != null)                                      {                                          if (!isUpsert && Utility.IsReadOnly(propertyInfo)) continue;                                      }                                        this.DataSource.UpdateProvider.Update(targetObject' property.Name' property.Value);                                  }                                    break;                          }
