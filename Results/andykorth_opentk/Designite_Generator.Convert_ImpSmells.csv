Implementation smell,Namespace,Class,File,Method,Description
Long Method,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,Parse,The method has 196 lines of code.
Complex Method,CHeaderToXML,GLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\GLParser.cs,Parse,Cyclomatic complexity of the method is 18
Complex Method,Mono.Options,Option,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,Option,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,AddSeparators,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,GetDescription,Cyclomatic complexity of the method is 12
Long Parameter List,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,Parse,The length of the statement  "            var function_string = ""; // Used to concatenate functions that are split in different lines. (e.g. "void\nclFoo(int /* a */'\nint b);") " is 136.
Long Statement,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,Parse,The length of the statement  "                //var words = line.Replace("/*"' "").Replace("*/"' "").Split(" ()".ToCharArray()' StringSplitOptions.RemoveEmptyEntries); " is 121.
Long Statement,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,GetParameters,The length of the statement  "                        (tokens.Contains("unsigned") && !param_type.StartsWith("byte") ? "u" : "") +    // Make sure we don't ignore the unsigned part of unsigned parameters (e.g. unsigned int -> uint) " is 177.
Long Statement,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,GetParameters,The length of the statement  "                        param_type.Replace("*"' "") + String.Join(""' pointers' 0' indirection_level);  // Normalize pointer indirection level (place as many asterisks as in indirection_level variable) " is 177.
Long Statement,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,GetParameters,The length of the statement  "                            !(funcname.EndsWith("Info") || funcname.EndsWith("IDs") || funcname.EndsWith("ImageFormats"))) ? // OpenCL contains Get*[Info|IDs|ImageFormats] methods with 'in' pointer parameters " is 180.
Complex Conditional,Mono.Options,Option,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Magic Number,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,Parse,The following statement contains a magic number: Func<string' List<XElement>' List<XElement>> enum_token = (line' acc) =>              {                  if (EnumToken.IsMatch(line))                  {                      if (acc.Count == 0 || acc.Last().Name.LocalName != "enum")                          acc.Add(new XElement("enum"' new XAttribute("name"' "Unknown")));                        var tokens = split(line);                      // Some constants are defined bitshifts' e.g. (1 << 2). If a constant contains parentheses                      // we assume it is a bitshift. Otherwise' we assume it is single value' separated by space                      // (e.g. 0xdeadbeef).                      if (line.Contains("("))                          tokens[2] = "(" + line.Split('(')[1];                        // Check whether this is an include guard (e.g. #define __OPENCL_CL_H)                      if (tokens[1].StartsWith("__"))                          return acc;                        // Check whether this is a known header define like WIN32_LEAN_AND_MEAN                      switch (tokens[1])                      {                          case "WIN32_LEAN_AND_MEAN":                          case "APIENTRY":                          case "GLAPI":                              return acc;                      }                        acc[acc.Count - 1].Add(new XElement("token"'                          new XAttribute("name"' tokens[1].Substring(Prefix.Length + 1))'   // remove prefix                          new XAttribute("value"' tokens[2])));                  }                  return acc;              };
Magic Number,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,Parse,The following statement contains a magic number: Func<string' List<XElement>' List<XElement>> enum_token = (line' acc) =>              {                  if (EnumToken.IsMatch(line))                  {                      if (acc.Count == 0 || acc.Last().Name.LocalName != "enum")                          acc.Add(new XElement("enum"' new XAttribute("name"' "Unknown")));                        var tokens = split(line);                      // Some constants are defined bitshifts' e.g. (1 << 2). If a constant contains parentheses                      // we assume it is a bitshift. Otherwise' we assume it is single value' separated by space                      // (e.g. 0xdeadbeef).                      if (line.Contains("("))                          tokens[2] = "(" + line.Split('(')[1];                        // Check whether this is an include guard (e.g. #define __OPENCL_CL_H)                      if (tokens[1].StartsWith("__"))                          return acc;                        // Check whether this is a known header define like WIN32_LEAN_AND_MEAN                      switch (tokens[1])                      {                          case "WIN32_LEAN_AND_MEAN":                          case "APIENTRY":                          case "GLAPI":                              return acc;                      }                        acc[acc.Count - 1].Add(new XElement("token"'                          new XAttribute("name"' tokens[1].Substring(Prefix.Length + 1))'   // remove prefix                          new XAttribute("value"' tokens[2])));                  }                  return acc;              };
Magic Number,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,GetParameters,The following statement contains a magic number: var param_name =                      is_function_pointer ? tokens[1].TrimStart('('' '*').Split(')')[0] :                      (tokens.Last().Trim() != "*/" ? tokens.Last() : tokens[tokens.Length - 2]).Trim();
Magic Number,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,GetParameters,The following statement contains a magic number: var indirection_level =                      is_function_pointer ? 0 :                      (from c in param_name where c == '*' select c).Count() +                      (from c in param_type where c == '*' select c).Count() +                      (from t in tokens where t == "***" select t).Count() * 3 +                      (from t in tokens where t == "**" select t).Count() * 2 +                      (from t in tokens where t == "*" select t).Count() +                      (has_array_size ? 1 : 0);
Magic Number,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,GetParameters,The following statement contains a magic number: var indirection_level =                      is_function_pointer ? 0 :                      (from c in param_name where c == '*' select c).Count() +                      (from c in param_type where c == '*' select c).Count() +                      (from t in tokens where t == "***" select t).Count() * 3 +                      (from t in tokens where t == "**" select t).Count() * 2 +                      (from t in tokens where t == "*" select t).Count() +                      (has_array_size ? 1 : 0);
Magic Number,CHeaderToXML,GLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\GLParser.cs,PointerLevel,The following statement contains a magic number: switch (pointer)              {                  case 0: return String.Empty;                  case 1: return "*";                  case 2: return "**";                  case 3: return "***";                  case 4: return "****";                  case 5: return "*****";                  default: throw new NotImplementedException();              }
Magic Number,CHeaderToXML,GLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\GLParser.cs,PointerLevel,The following statement contains a magic number: switch (pointer)              {                  case 0: return String.Empty;                  case 1: return "*";                  case 2: return "**";                  case 3: return "***";                  case 4: return "****";                  case 5: return "*****";                  default: throw new NotImplementedException();              }
Magic Number,CHeaderToXML,GLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\GLParser.cs,PointerLevel,The following statement contains a magic number: switch (pointer)              {                  case 0: return String.Empty;                  case 1: return "*";                  case 2: return "**";                  case 3: return "***";                  case 4: return "****";                  case 5: return "*****";                  default: throw new NotImplementedException();              }
Magic Number,CHeaderToXML,GLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\GLParser.cs,PointerLevel,The following statement contains a magic number: switch (pointer)              {                  case 0: return String.Empty;                  case 1: return "*";                  case 2: return "**";                  case 3: return "***";                  case 4: return "****";                  case 5: return "*****";                  default: throw new NotImplementedException();              }
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: string prefix = new string (' '' OptionWidth+2);
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 1;
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Missing Default,CHeaderToXML,ESCLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\ESCLParser.cs,Parse,The following switch statement is missing a default case: switch (tokens[1])                      {                          case "WIN32_LEAN_AND_MEAN":                          case "APIENTRY":                          case "GLAPI":                              return acc;                      }
Missing Default,CHeaderToXML,GLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\GLParser.cs,Parse,The following switch statement is missing a default case: switch (CurrentMode)                      {                          case ParserModes.Enum:                              if (words[0] == "use")                              {                                  current.Add(new XElement("use"'                                      new XAttribute("enum"' words[1])'                                      new XAttribute("token"' words[2])));                              }                              else if (words[1] == "=")                              {                                  current.Add(new XElement("token"'                                      new XAttribute("name"' words[0])'                                      new XAttribute("value"' words[2])));                              }                              else                              {                                  // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                                  throw new InvalidOperationException(String.Format(                                      "[Error] Invalid constant definition: \"{0}\""' line));                              }                              break;                            case ParserModes.Func:                              switch (words[0])                              {                                  case "return":  // Line denotes return value                                      current.Add(new XElement("returns"'                                          new XAttribute("type"' words[1])));                                      break;                                    case "param":   // Line denotes parameter                                      int pointer = words[4].Contains("array") ? 1 : 0;                                      pointer += words[4].Contains("reference") ? 1 : 0;                                        var elem = new XElement("param"'                                          new XAttribute("name"' words[1])'                                          new XAttribute("type"' words[2] + PointerLevel(pointer))'                                          new XAttribute("flow"' words[3] == "in" ? "in" : "out"));                                      if (pointer > 0 && words.Length > 5 && words[5].Contains("[1]"))                                          elem.Add(new XAttribute("count"' 1));                                        current.Add(elem);                                      break;                                    case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                      // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                                      var version = current.Attribute("version");                                      if (version == null)                                          current.Add(new XAttribute("version"' words[1]));                                      else                                          version.Value = words[1];                                      break;                                    case "category":                                      current.Add(new XAttribute("category"' words[1]));                                      break;                                    case "deprecated":                                      current.Add(new XAttribute("deprecated"' words[1]));                                      break;                              }                              break;                      }
Missing Default,CHeaderToXML,GLParser,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\GLParser.cs,Parse,The following switch statement is missing a default case: switch (words[0])                              {                                  case "return":  // Line denotes return value                                      current.Add(new XElement("returns"'                                          new XAttribute("type"' words[1])));                                      break;                                    case "param":   // Line denotes parameter                                      int pointer = words[4].Contains("array") ? 1 : 0;                                      pointer += words[4].Contains("reference") ? 1 : 0;                                        var elem = new XElement("param"'                                          new XAttribute("name"' words[1])'                                          new XAttribute("type"' words[2] + PointerLevel(pointer))'                                          new XAttribute("flow"' words[3] == "in" ? "in" : "out"));                                      if (pointer > 0 && words.Length > 5 && words[5].Contains("[1]"))                                          elem.Add(new XAttribute("count"' 1));                                        current.Add(elem);                                      break;                                    case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                      // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                                      var version = current.Attribute("version");                                      if (version == null)                                          current.Add(new XAttribute("version"' words[1]));                                      else                                          version.Value = words[1];                                      break;                                    case "category":                                      current.Add(new XAttribute("category"' words[1]));                                      break;                                    case "deprecated":                                      current.Add(new XAttribute("deprecated"' words[1]));                                      break;                              }
Missing Default,Mono.Options,OptionSet,D:\research\architectureSmells\repos\andykorth_opentk\Source\Converter\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
