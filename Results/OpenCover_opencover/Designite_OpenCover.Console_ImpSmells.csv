Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,CalculateResults,Cyclomatic complexity of the method is 8
Long Parameter List,OpenCover.Console,ServiceEnvironmentManagement,C:\repos\OpenCover_opencover\main\OpenCover.Console\ServiceEnvironmentManagement.cs,LookupAccountName,The method has 7 parameters. Parameters: machineName' accountName' sid' sidLen' domainName' domainNameLen' peUse
Long Statement,OpenCover.Console.CrashReporter,SendRequestState,C:\repos\OpenCover_opencover\main\OpenCover.Console\CrashReporter\SendRequestState.cs,GetAnonymousMachineId,The length of the statement  "            return mac != null ? BitConverter.ToInt32(System.Security.Cryptography.MD5.Create().ComputeHash(mac.GetAddressBytes())' 0) : 0; " is 127.
Long Statement,OpenCover.Console.CrashReporter,SendRequestState,C:\repos\OpenCover_opencover\main\OpenCover.Console\CrashReporter\SendRequestState.cs,GetApplication,The length of the statement  "            string appCompany = (attributes.Length > 0) ? ((System.Reflection.AssemblyCompanyAttribute)attributes[0]).Company : AnonymousData.ToEmail; " is 138.
Long Statement,OpenCover.Console.CrashReporter,SendRequestState,C:\repos\OpenCover_opencover\main\OpenCover.Console\CrashReporter\SendRequestState.cs,GetApplication,The length of the statement  "            var appTitle = (attributes2.Length > 0) ? ((System.Reflection.AssemblyTitleAttribute)attributes2[0]).Title : moduleName; " is 120.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,ReportCrash,The length of the statement  "                    uploader.SendAnonymousReport(SendRequestState.GetClientLib()' state.GetApplication()' state.GetExceptionDescription(false)); " is 124.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,GetSearchPaths,The length of the statement  "            return (new[] { Environment.CurrentDirectory' targetDir }).Concat((Environment.GetEnvironmentVariable("PATH") ?? Environment.CurrentDirectory).Split(Path.PathSeparator));             " is 170.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,ResolveTargetPathname,The length of the statement  "                    GetSearchPaths(expandedTargetDir).Select(dir => Path.Combine(dir.Trim('"')' expandedTargetName)).FirstOrDefault(File.Exists) ?? expandedTargetName; " is 147.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The length of the statement  "                                  coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2)); " is 136.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The length of the statement  "                                  coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2)); " is 136.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The length of the statement  "                                  results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2)); " is 136.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The length of the statement  "                                  results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2)); " is 136.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,GetFullOutputFile,The length of the statement  "                System.Console.WriteLine("Output folder does not exist; please create it and make sure appropriate permissions are set."); " is 122.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,BuildFilter,The length of the statement  "                    System.Console.WriteLine("FilterFile '{0}' cannot be found - have you specified your arguments correctly?"' parser.FilterFile); " is 127.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,ParseCommandLine,The length of the statement  "                    System.Console.WriteLine("TargetDir '{0}' cannot be found - have you specified your arguments correctly?"' parser.TargetDir); " is 125.
Long Statement,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,ParseCommandLine,The length of the statement  "                        System.Console.WriteLine("Service '{0}' cannot be found - have you specified your arguments correctly?"' parser.Target); " is 120.
Magic Number,OpenCover.Console.CrashReporter,SendRequestState,C:\repos\OpenCover_opencover\main\OpenCover.Console\CrashReporter\SendRequestState.cs,GetGoogleDnsAddress,The following statement contains a magic number: using (var googleDns = new System.Net.Sockets.UdpClient("8.8.8.8"' 53))              {                  return ((IPEndPoint) googleDns.Client.LocalEndPoint).Address;              }
Magic Number,OpenCover.Console,ServiceEnvironmentManagementEx,C:\repos\OpenCover_opencover\main\OpenCover.Console\ServiceEnvironmentManagement.cs,IsServiceDisabled,The following statement contains a magic number: return entry != null && (int)entry.GetValue("Start") == 4;
Magic Number,OpenCover.Console,ServiceEnvironmentManagementEx,C:\repos\OpenCover_opencover\main\OpenCover.Console\ServiceEnvironmentManagement.cs,IsServiceStartAutomatic,The following statement contains a magic number: return entry != null && (int)entry.GetValue("Start") == 2;
Magic Number,OpenCover.Console,ServiceEnvironmentManagement,C:\repos\OpenCover_opencover\main\OpenCover.Console\ServiceEnvironmentManagement.cs,GetServicesEnvironment,The following statement contains a magic number: unsafe              {                  string[] envStrings = null;                  // rather than duplicate the code that walks over the environment'                   // we have this funny loop where the first iteration just counts the strings'                  // and the second iteration fills in the strings                  for (int i = 0; i < 2; i++)                  {                      char* env = (char*)environmentPtr.ToPointer();                      int count = 0;                      while (true)                      {                          int len = wcslen(env);                          if (len == 0)                              break;                          if (envStrings != null)                              envStrings[count] = new String(env);                          count++;                          env += len + 1;                      }                      if (envStrings == null)                          envStrings = new string[count];                  }                  return envStrings;              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,TerminateCurrentW3SvcHost,The following statement contains a magic number: var secondstowait = 3;
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
Magic Number,OpenCover.Console,Program,C:\repos\OpenCover_opencover\main\OpenCover.Console\Program.cs,DisplayResults,The following statement contains a magic number: if (coverageSession.Summary.NumClasses > 0)              {                  Logger.InfoFormat("Visited Classes {0} of {1} ({2})"' coverageSession.Summary.VisitedClasses'                                    coverageSession.Summary.NumClasses' Math.Round(coverageSession.Summary.VisitedClasses * 100.0 / coverageSession.Summary.NumClasses' 2));                  Logger.InfoFormat("Visited Methods {0} of {1} ({2})"' coverageSession.Summary.VisitedMethods'                                    coverageSession.Summary.NumMethods' Math.Round(coverageSession.Summary.VisitedMethods * 100.0 / coverageSession.Summary.NumMethods' 2));                  Logger.InfoFormat("Visited Points {0} of {1} ({2})"' coverageSession.Summary.VisitedSequencePoints'                                    coverageSession.Summary.NumSequencePoints' coverageSession.Summary.SequenceCoverage);                  Logger.InfoFormat("Visited Branches {0} of {1} ({2})"' coverageSession.Summary.VisitedBranchPoints'                                    coverageSession.Summary.NumBranchPoints' coverageSession.Summary.BranchCoverage);                    Logger.InfoFormat("");                  Logger.InfoFormat(                      "==== Alternative Results (includes all methods including those without corresponding source) ====");                  Logger.InfoFormat("Alternative Visited Classes {0} of {1} ({2})"' results.altVisitedClasses'                                    results.altTotalClasses' results.altTotalClasses == 0 ? 0 : Math.Round(results.altVisitedClasses * 100.0 / results.altTotalClasses' 2));                  Logger.InfoFormat("Alternative Visited Methods {0} of {1} ({2})"' results.altVisitedMethods'                                    results.altTotalMethods' results.altTotalMethods == 0 ? 0 : Math.Round(results.altVisitedMethods * 100.0 / results.altTotalMethods' 2));                    if (parser.ShowUnvisited)                  {                      Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Classes====");                      foreach (var unvisitedClass in results.unvisitedClasses)                      {                          Logger.InfoFormat(unvisitedClass);                      }                        Logger.InfoFormat("");                      Logger.InfoFormat("====Unvisited Methods====");                      foreach (var unvisitedMethod in results.unvisitedMethods)                      {                          Logger.InfoFormat(unvisitedMethod);                      }                  }              }              else              {                  Logger.InfoFormat("No results' this could be for a number of reasons. The most common reasons are:");                  Logger.InfoFormat("    1) missing PDBs for the assemblies that match the filter please review the");                  Logger.InfoFormat("    output file and refer to the Usage guide (Usage.rtf) about filters.");                  Logger.InfoFormat("    2) the profiler may not be registered correctly' please refer to the Usage");                  Logger.InfoFormat("    guide and the -register switch.");              }
