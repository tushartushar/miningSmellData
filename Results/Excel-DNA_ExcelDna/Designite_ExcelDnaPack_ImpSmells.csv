Implementation smell,Namespace,Class,File,Method,Description
Long Method,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The method has 125 lines of code.
Long Method,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,Code,The method has 114 lines of code.
Long Method,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The method has 453 lines of code.
Long Method,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,CodeOneBlock,The method has 160 lines of code.
Long Method,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,SetCoderProperties,The method has 103 lines of code.
Long Method,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,Pack,The method has 154 lines of code.
Long Method,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,The method has 191 lines of code.
Complex Method,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,Cyclomatic complexity of the method is 22
Complex Method,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,Code,Cyclomatic complexity of the method is 15
Complex Method,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,Cyclomatic complexity of the method is 64
Complex Method,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,CodeOneBlock,Cyclomatic complexity of the method is 25
Complex Method,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,SetCoderProperties,Cyclomatic complexity of the method is 26
Complex Method,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,Pack,Cyclomatic complexity of the method is 21
Complex Method,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,Cyclomatic complexity of the method is 35
Long Parameter List,SevenZip,ICoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\ICoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Parameter List,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Parameter List,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Parameter List,SevenZip.Compression.RangeCoder,BitTreeEncoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoderBitTree.cs,ReverseEncode,The method has 5 parameters. Parameters: Models' startIndex' rangeEncoder' NumBitLevels' symbol
Long Parameter List,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,The method has 5 parameters. Parameters: dnaContent' dnaDirectory' ru' compress' multithreading
Long Identifier,SevenZip.Compression.LZMA,Base,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,,The length of the parameter kNumLitPosStatesBitsEncodingMax is 31.
Long Statement,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The length of the statement  "							UInt32 nextMatchPrice = curAndLenCharPrice + _isMatch[(state2.Index << Base.kNumPosStatesBitsMax) + posStateNext].GetPrice1(); " is 126.
Long Statement,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The length of the statement  "									UInt32 nextMatchPrice = curAndLenCharPrice + _isMatch[(state2.Index << Base.kNumPosStatesBitsMax) + posStateNext].GetPrice1(); " is 126.
Long Statement,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,FillDistancesPrices,The length of the statement  "					_posSlotPrices[st + posSlot] += ((((posSlot >> 1) - 1) - Base.kNumAlignBits) << RangeCoder.BitEncoder.kNumBitPriceShiftBits); " is 125.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,Pack,The length of the statement  "					Console.Write("Existing output .xll file " + xllOutputPath + "could not be deleted. (Perhaps loaded in Excel?)\r\n\r\nExiting ExcelDnaPack."); " is 142.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,Pack,The length of the statement  "                    Console.Write("Output directory " + outputDirectory + "could not be created. Error: " + ex.Message + "\r\n\r\nExiting ExcelDnaPack."); " is 134.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,Pack,The length of the statement  "				// pdb is not in the nuget package' so chances are we want it if it is present (ExcelDna dev)// pdb is not in the nuget package' so chances are we want it if it is present (ExcelDna dev)	                // pdb is not in the nuget package' so chances are we want it if it is present (ExcelDna dev)// pdb is not in the nuget package' so chances are we want it if it is present (ExcelDna dev) " is 389.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,Pack,The length of the statement  "				ru.AddFile(File.ReadAllBytes(configPath)' "__MAIN__"'ResourceHelper.TypeName.CONFIG' false' multithreading);  // Name here must exactly match name in ExcelDnaLoad.cpp. " is 167.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,Pack,The length of the statement  "			ru.AddFile(dnaContentForPacking' "__MAIN__"'ResourceHelper.TypeName.DNA' false' multithreading); // Name here must exactly match name in DnaLibrary.Initialize. " is 159.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,The length of the statement  "							byte[] dnaContentForPacking = PackDnaLibrary(File.ReadAllBytes(path)' Path.GetDirectoryName(path)' ru' compress' multithreading); " is 129.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,The length of the statement  "                                    resolvedTypeLibPath = DnaLibrary.ResolvePath(ext.TypeLibPath' System.IO.Path.GetDirectoryName(path) ); // null is unresolved " is 124.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,The length of the statement  "				            Console.WriteLine("  ~~> Assembly version already copied from previous ExternalLibrary; ignoring 'UseVersionAsOutputVersion' attribute."); " is 138.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,The length of the statement  "                    string name = Path.GetFileNameWithoutExtension(path).ToUpperInvariant() + "_" + lastPackIndex++ + Path.GetExtension(path).ToUpperInvariant(); " is 141.
Long Statement,ExcelDnaPack,PackProgram,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\ExcelDnaPack\PackProgram.cs,PackDnaLibrary,The length of the statement  "                        string name = Path.GetFileNameWithoutExtension(path).ToUpperInvariant() + "_" + lastPackIndex++ + Path.GetExtension(path).ToUpperInvariant(); " is 141.
Magic Number,SevenZip,CRC,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\CRC.cs,CRC,The following statement contains a magic number: Table = new uint[256];
Magic Number,SevenZip,CRC,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\CRC.cs,CRC,The following statement contains a magic number: j < 8
Magic Number,SevenZip,CRC,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\CRC.cs,CRC,The following statement contains a magic number: i < 256
Magic Number,SevenZip,CRC,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\CRC.cs,UpdateByte,The following statement contains a magic number: _value = Table[(((byte)(_value)) ^ b)] ^ (_value >> 8);
Magic Number,SevenZip,CRC,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\CRC.cs,Update,The following statement contains a magic number: _value = Table[(((byte)(_value)) ^ data[offset + i])] ^ (_value >> 8);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,SetType,The following statement contains a magic number: HASH_ARRAY = (numHashBytes > 2);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,SetType,The following statement contains a magic number: kMinMatchCheck = 4;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: historySize > kMaxValForNormalize - 256
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: _cutValue = 16 + (matchMaxLen >> 1);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: UInt32 windowReservSize = (historySize + keepAddBufferBefore +  					matchMaxLen + keepAddBufferAfter) / 2 + 256;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: UInt32 windowReservSize = (historySize + keepAddBufferBefore +  					matchMaxLen + keepAddBufferAfter) / 2 + 256;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: _son = new UInt32[(_cyclicBufferSize = cyclicBufferSize) * 2];
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: hs |= (hs >> 2);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: hs |= (hs >> 4);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: hs |= (hs >> 8);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Create,The following statement contains a magic number: hs > (1 << 24)
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: distances[offset++] = maxLen = 2;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: offset -= 2;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: distances[offset++] = maxLen = 3;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,GetMatches,The following statement contains a magic number: offset -= 2;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Skip,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Skip,The following statement contains a magic number: temp ^= ((UInt32)(_bufferBase[cur + 2]) << 8);
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Skip,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Skip,The following statement contains a magic number: hashValue = (temp ^ (CRC.Table[_bufferBase[cur + 3]] << 5)) & _hashMask;
Magic Number,SevenZip.Compression.LZ,BinTree,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzBinTree.cs,Normalize,The following statement contains a magic number: NormalizeLinks(_son' _cyclicBufferSize * 2' subValue);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateChar,The following statement contains a magic number: Index < 4
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaBase.cs,IsCharState,The following statement contains a magic number: return Index < 7;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDictionarySize,The following statement contains a magic number: uint blockSize = Math.Max(m_DictionarySizeCheck' (1 << 12));
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetLiteralProperties,The following statement contains a magic number: lp > 8
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetLiteralProperties,The following statement contains a magic number: lc > 8
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: properties.Length < 5
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int lc = properties[0] % 9;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int remainder = properties[0] / 9;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int lp = remainder % 5;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int pb = remainder / 5;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: dictionarySize += ((UInt32)(properties[1 + i])) << (i * 8);
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: i < 4
Magic Number,SevenZip.Compression.LZMA,LiteralDecoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,GetState,The following statement contains a magic number: return ((pos & m_PosMask) << m_NumPrevBits) + (uint)(prevByte >> (8 - m_NumPrevBits));
Magic Number,SevenZip.Compression.LZMA,Decoder2,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,DecodeWithMatchByte,The following statement contains a magic number: uint matchBit = (uint)(matchByte >> 7) & 1;
Magic Number,SevenZip.Compression.LZMA,Decoder2,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaDecoder.cs,DecodeWithMatchByte,The following statement contains a magic number: uint bit = m_Decoders[((1 + matchBit) << 8) + symbol].Decode(rangeDecoder);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,Encoder,The following statement contains a magic number: const Byte kFastSlots = 22;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,Encoder,The following statement contains a magic number: int c = 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: pos < (1 << 11)
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 10] + 20);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 10] + 20);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: pos < (1 << 21)
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 20] + 40);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 20] + 40);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 6] + 12);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 6] + 12);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: pos < (1 << 17)
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 16] + 32);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 16] + 32);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: pos < (1 << 27)
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 26] + 52);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPosSlot2,The following statement contains a magic number: return (UInt32)(g_FastPos[pos >> 26] + 52);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,Create,The following statement contains a magic number: int numHashBytes = 4;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,Create,The following statement contains a magic number: numHashBytes = 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,ReadMatchDistances,The following statement contains a magic number: lenRes = _matchDistances[numDistancePairs - 2];
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: numAvailableBytes < 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenMain < 2 && currentByte != matchByte && repLens[repMaxIndex] < 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenMain < 2 && currentByte != matchByte && repLens[repMaxIndex] < 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenEnd < 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[0].Backs2 = reps[2];
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[0].Backs3 = reps[3];
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: repLen < 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: UInt32 curAndLenPrice = price + _repMatchLenEncoder.GetPrice(repLen - 2' posState);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: len = ((repLens[0] >= 2) ? repLens[0] + 1 : 2);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: len = ((repLens[0] >= 2) ? repLens[0] + 1 : 2);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[cur].Backs2 = reps[2];
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: _optimum[cur].Backs3 = reps[3];
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: UInt32 curAnd1Price = curPrice +  					_isMatch[(state.Index << Base.kNumPosStatesBitsMax) + posState].GetPrice0() +  					_literalEncoder.GetSubCoder(position' _matchFinder.GetIndexByte(0 - 2)).  					GetPrice(!state.IsCharState()' matchByte' currentByte);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: numAvailableBytes < 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest2 >= 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: UInt32 startLen = 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest < 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest2 >= 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: numDistancePairs += 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: lenTest2 >= 2
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetOptimum,The following statement contains a magic number: offs += 2;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,ChangePair,The following statement contains a magic number: const int kDif = 7;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,ChangePair,The following statement contains a magic number: return (smallDist < ((UInt32)(1) << (32 - kDif)) && bigDist >= (smallDist << kDif));
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,WriteEndMarker,The following statement contains a magic number: int footerBits = 30;
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,CodeOneBlock,The following statement contains a magic number: _matchPriceCount >= (1 << 7)
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,CodeOneBlock,The following statement contains a magic number: nowPos64 - progressPosValuePrev >= (1 << 12)
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: properties[0] = (Byte)((_posStateBits * 5 + _numLiteralPosStateBits) * 9 + _numLiteralContextBits);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: properties[0] = (Byte)((_posStateBits * 5 + _numLiteralPosStateBits) * 9 + _numLiteralContextBits);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: properties[1 + i] = (Byte)((_dictionarySize >> (8 * i)) & 0xFF);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,WriteCoderProperties,The following statement contains a magic number: i < 4
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,FillDistancesPrices,The following statement contains a magic number: UInt32 baseVal = ((2 | (posSlot & 1)) << footerBits);
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,SetCoderProperties,The following statement contains a magic number: switch (propIDs[i])  				{  					case CoderPropID.NumFastBytes:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 numFastBytes = (Int32)prop;  						if (numFastBytes < 5 || numFastBytes > Base.kMatchMaxLen)  							throw new InvalidParamException();  						_numFastBytes = (UInt32)numFastBytes;  						break;  					}  					case CoderPropID.Algorithm:  					{  						/*  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 maximize = (Int32)prop;  						_fastMode = (maximize == 0);  						_maxMode = (maximize >= 2);  						*/  						break;  					}  					case CoderPropID.MatchFinder:  					{  						if (!(prop is String))  							throw new InvalidParamException();  						EMatchFinderType matchFinderIndexPrev = _matchFinderType;  						int m = FindMatchFinder(((string)prop).ToUpper());  						if (m < 0)  							throw new InvalidParamException();  						_matchFinderType = (EMatchFinderType)m;  						if (_matchFinder != null && matchFinderIndexPrev != _matchFinderType)  							{  							_dictionarySizePrev = 0xFFFFFFFF;  							_matchFinder = null;  							}  						break;  					}  					case CoderPropID.DictionarySize:  					{  						const int kDicLogSizeMaxCompress = 30;  						if (!(prop is Int32))  							throw new InvalidParamException(); ;  						Int32 dictionarySize = (Int32)prop;  						if (dictionarySize < (UInt32)(1 << Base.kDicLogSizeMin) ||  							dictionarySize > (UInt32)(1 << kDicLogSizeMaxCompress))  							throw new InvalidParamException();  						_dictionarySize = (UInt32)dictionarySize;  						int dicLogSize;  						for (dicLogSize = 0; dicLogSize < (UInt32)kDicLogSizeMaxCompress; dicLogSize++)  							if (dictionarySize <= ((UInt32)(1) << dicLogSize))  								break;  						_distTableSize = (UInt32)dicLogSize * 2;  						break;  					}  					case CoderPropID.PosStateBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumPosStatesBitsEncodingMax)  							throw new InvalidParamException();  						_posStateBits = (int)v;  						_posStateMask = (((UInt32)1) << (int)_posStateBits) - 1;  						break;  					}  					case CoderPropID.LitPosBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumLitPosStatesBitsEncodingMax)  							throw new InvalidParamException();  						_numLiteralPosStateBits = (int)v;  						break;  					}  					case CoderPropID.LitContextBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumLitContextBitsMax)  							throw new InvalidParamException(); ;  						_numLiteralContextBits = (int)v;  						break;  					}  					case CoderPropID.EndMarker:  					{  						if (!(prop is Boolean))  							throw new InvalidParamException();  						SetWriteEndMarkerMode((Boolean)prop);  						break;  					}  					default:  						throw new InvalidParamException();  				}
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,SetCoderProperties,The following statement contains a magic number: switch (propIDs[i])  				{  					case CoderPropID.NumFastBytes:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 numFastBytes = (Int32)prop;  						if (numFastBytes < 5 || numFastBytes > Base.kMatchMaxLen)  							throw new InvalidParamException();  						_numFastBytes = (UInt32)numFastBytes;  						break;  					}  					case CoderPropID.Algorithm:  					{  						/*  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 maximize = (Int32)prop;  						_fastMode = (maximize == 0);  						_maxMode = (maximize >= 2);  						*/  						break;  					}  					case CoderPropID.MatchFinder:  					{  						if (!(prop is String))  							throw new InvalidParamException();  						EMatchFinderType matchFinderIndexPrev = _matchFinderType;  						int m = FindMatchFinder(((string)prop).ToUpper());  						if (m < 0)  							throw new InvalidParamException();  						_matchFinderType = (EMatchFinderType)m;  						if (_matchFinder != null && matchFinderIndexPrev != _matchFinderType)  							{  							_dictionarySizePrev = 0xFFFFFFFF;  							_matchFinder = null;  							}  						break;  					}  					case CoderPropID.DictionarySize:  					{  						const int kDicLogSizeMaxCompress = 30;  						if (!(prop is Int32))  							throw new InvalidParamException(); ;  						Int32 dictionarySize = (Int32)prop;  						if (dictionarySize < (UInt32)(1 << Base.kDicLogSizeMin) ||  							dictionarySize > (UInt32)(1 << kDicLogSizeMaxCompress))  							throw new InvalidParamException();  						_dictionarySize = (UInt32)dictionarySize;  						int dicLogSize;  						for (dicLogSize = 0; dicLogSize < (UInt32)kDicLogSizeMaxCompress; dicLogSize++)  							if (dictionarySize <= ((UInt32)(1) << dicLogSize))  								break;  						_distTableSize = (UInt32)dicLogSize * 2;  						break;  					}  					case CoderPropID.PosStateBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumPosStatesBitsEncodingMax)  							throw new InvalidParamException();  						_posStateBits = (int)v;  						_posStateMask = (((UInt32)1) << (int)_posStateBits) - 1;  						break;  					}  					case CoderPropID.LitPosBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumLitPosStatesBitsEncodingMax)  							throw new InvalidParamException();  						_numLiteralPosStateBits = (int)v;  						break;  					}  					case CoderPropID.LitContextBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumLitContextBitsMax)  							throw new InvalidParamException(); ;  						_numLiteralContextBits = (int)v;  						break;  					}  					case CoderPropID.EndMarker:  					{  						if (!(prop is Boolean))  							throw new InvalidParamException();  						SetWriteEndMarkerMode((Boolean)prop);  						break;  					}  					default:  						throw new InvalidParamException();  				}
Magic Number,SevenZip.Compression.LZMA,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,SetCoderProperties,The following statement contains a magic number: switch (propIDs[i])  				{  					case CoderPropID.NumFastBytes:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 numFastBytes = (Int32)prop;  						if (numFastBytes < 5 || numFastBytes > Base.kMatchMaxLen)  							throw new InvalidParamException();  						_numFastBytes = (UInt32)numFastBytes;  						break;  					}  					case CoderPropID.Algorithm:  					{  						/*  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 maximize = (Int32)prop;  						_fastMode = (maximize == 0);  						_maxMode = (maximize >= 2);  						*/  						break;  					}  					case CoderPropID.MatchFinder:  					{  						if (!(prop is String))  							throw new InvalidParamException();  						EMatchFinderType matchFinderIndexPrev = _matchFinderType;  						int m = FindMatchFinder(((string)prop).ToUpper());  						if (m < 0)  							throw new InvalidParamException();  						_matchFinderType = (EMatchFinderType)m;  						if (_matchFinder != null && matchFinderIndexPrev != _matchFinderType)  							{  							_dictionarySizePrev = 0xFFFFFFFF;  							_matchFinder = null;  							}  						break;  					}  					case CoderPropID.DictionarySize:  					{  						const int kDicLogSizeMaxCompress = 30;  						if (!(prop is Int32))  							throw new InvalidParamException(); ;  						Int32 dictionarySize = (Int32)prop;  						if (dictionarySize < (UInt32)(1 << Base.kDicLogSizeMin) ||  							dictionarySize > (UInt32)(1 << kDicLogSizeMaxCompress))  							throw new InvalidParamException();  						_dictionarySize = (UInt32)dictionarySize;  						int dicLogSize;  						for (dicLogSize = 0; dicLogSize < (UInt32)kDicLogSizeMaxCompress; dicLogSize++)  							if (dictionarySize <= ((UInt32)(1) << dicLogSize))  								break;  						_distTableSize = (UInt32)dicLogSize * 2;  						break;  					}  					case CoderPropID.PosStateBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumPosStatesBitsEncodingMax)  							throw new InvalidParamException();  						_posStateBits = (int)v;  						_posStateMask = (((UInt32)1) << (int)_posStateBits) - 1;  						break;  					}  					case CoderPropID.LitPosBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumLitPosStatesBitsEncodingMax)  							throw new InvalidParamException();  						_numLiteralPosStateBits = (int)v;  						break;  					}  					case CoderPropID.LitContextBits:  					{  						if (!(prop is Int32))  							throw new InvalidParamException();  						Int32 v = (Int32)prop;  						if (v < 0 || v > (UInt32)Base.kNumLitContextBitsMax)  							throw new InvalidParamException(); ;  						_numLiteralContextBits = (int)v;  						break;  					}  					case CoderPropID.EndMarker:  					{  						if (!(prop is Boolean))  							throw new InvalidParamException();  						SetWriteEndMarkerMode((Boolean)prop);  						break;  					}  					default:  						throw new InvalidParamException();  				}
Magic Number,SevenZip.Compression.LZMA,LiteralEncoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetSubCoder,The following statement contains a magic number: return m_Coders[((pos & m_PosMask) << m_NumPrevBits) + (uint)(prevByte >> (8 - m_NumPrevBits))];
Magic Number,SevenZip.Compression.LZMA,Encoder2,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,EncodeMatched,The following statement contains a magic number: state += ((1 + matchBit) << 8);
Magic Number,SevenZip.Compression.LZMA,Encoder2,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPrice,The following statement contains a magic number: int i = 7;
Magic Number,SevenZip.Compression.LZMA,Encoder2,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\LzmaEncoder.cs,GetPrice,The following statement contains a magic number: price += m_Encoders[((1 + matchBit) << 8) + context].GetPrice(bit);
Magic Number,SevenZip.Compression.LZMA,SevenZipHelper,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\SevenZipHelper.cs,Compress,The following statement contains a magic number: outStream.WriteByte((Byte)(fileSize >> (8 * i)));
Magic Number,SevenZip.Compression.LZMA,SevenZipHelper,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\SevenZipHelper.cs,Compress,The following statement contains a magic number: i < 8
Magic Number,SevenZip.Compression.LZMA,SevenZipHelper,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\SevenZipHelper.cs,Decompress,The following statement contains a magic number: byte[] properties2 = new byte[5];
Magic Number,SevenZip.Compression.LZMA,SevenZipHelper,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\SevenZipHelper.cs,Decompress,The following statement contains a magic number: newInStream.Read(properties2' 0' 5) != 5
Magic Number,SevenZip.Compression.LZMA,SevenZipHelper,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\SevenZipHelper.cs,Decompress,The following statement contains a magic number: newInStream.Read(properties2' 0' 5) != 5
Magic Number,SevenZip.Compression.LZMA,SevenZipHelper,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\SevenZipHelper.cs,Decompress,The following statement contains a magic number: outSize |= ((long)(byte)v) << (8 * i);
Magic Number,SevenZip.Compression.LZMA,SevenZipHelper,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\SevenZipHelper.cs,Decompress,The following statement contains a magic number: i < 8
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,FlushData,The following statement contains a magic number: i < 5
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,Encode,The following statement contains a magic number: Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,ShiftLow,The following statement contains a magic number: Stream.WriteByte((byte)(temp + (Low >> 32)));
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,ShiftLow,The following statement contains a magic number: _cache = (byte)(((uint)Low) >> 24);
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,ShiftLow,The following statement contains a magic number: (uint)Low < (uint)0xFF000000 || (uint)(Low >> 32) == 1
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,ShiftLow,The following statement contains a magic number: Low = ((uint)Low) << 8;
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,EncodeDirectBits,The following statement contains a magic number: Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,EncodeBit,The following statement contains a magic number: Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,Encoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,GetProcessedSizeAdd,The following statement contains a magic number: return _cacheSize +  				Stream.Position - StartPosition + 4;
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,Init,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,Init,The following statement contains a magic number: i < 5
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,Normalize,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,Normalize,The following statement contains a magic number: Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,Normalize2,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,Normalize2,The following statement contains a magic number: Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: uint t = (code - range) >> 31;
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: code = (code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,BitEncoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoderBit.cs,Encode,The following statement contains a magic number: encoder.Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,BitDecoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoderBit.cs,Decode,The following statement contains a magic number: rangeDecoder.Code = (rangeDecoder.Code << 8) | (byte)rangeDecoder.Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,BitDecoder,D:\research\architectureSmells\repos\Excel-DNA_ExcelDna\Source\Lzma\RangeCoderBit.cs,Decode,The following statement contains a magic number: rangeDecoder.Range <<= 8;
