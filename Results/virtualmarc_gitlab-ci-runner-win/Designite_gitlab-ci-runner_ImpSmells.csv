Implementation smell,Namespace,Class,File,Method,Description
Complex Method,gitlab_ci_runner.conf,Config,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\conf\Config.cs,getDataForBuild,Cyclomatic complexity of the method is 8
Long Parameter List,gitlab_ci_runner.helper,IniFile,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\IniFile.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: section' key' def' retVal' size' filePath
Long Statement,gitlab_ci_runner.conf,Config,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\conf\Config.cs,getDataForBuild,The length of the statement  "                throw new NotImplementedException("Situation when no configuration file is provided is not supported yet. Make sure that runner.cfg exists at the file location."); " is 163.
Long Statement,gitlab_ci_runner.conf,Config,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\conf\Config.cs,getDataForBuild,The length of the statement  "                                throw new Exception(String.Format("Cannot parse the {0} while searching for the project prebuild steps commands. Section {1} cannot be recognized."' confPath' p)); " is 163.
Long Statement,gitlab_ci_runner.helper,SSHKey,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\SSHKey.cs,generateKeypair,The length of the statement  "            p.StartInfo.Arguments = "-t rsa -f \"" + Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\.ssh\\id_rsa\" -N \"\""; " is 135.
Long Statement,gitlab_ci_runner.runner,Build,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\runner\Build.cs,initProjectDir,The length of the statement  "                //string status = String.Format("Git repo exists ({0}) and fetch command is allowed (allow_git_fetch={1})"' sProjectDir + @".git"' Convert.ToString(buildInfo.allow_git_fetch)); " is 176.
Long Statement,gitlab_ci_runner.runner,Build,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\runner\Build.cs,exec,The length of the statement  "                p.StartInfo.EnvironmentVariables["HOME"] = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile); // Fix for missing SSH Key " is 135.
Long Statement,gitlab_ci_runner.setup,Setup,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\setup\Setup.cs,registerRunner,The length of the statement  "                Console.WriteLine("Failed to register this runner. Perhaps your SSH key is invalid or you are having network problems"); " is 120.
Complex Conditional,gitlab_ci_runner.conf,Config,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\conf\Config.cs,isConfigured,The conditional expression  "url != null && url != "" && token != null && token != """  is complex.
Empty Catch Block,gitlab_ci_runner.helper,Network,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\Network.cs,pushBuild,The method has an empty catch block.
Empty Catch Block,gitlab_ci_runner.helper,SSHKey,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\SSHKey.cs,generateKeypair,The method has an empty catch block.
Magic Number,gitlab_ci_runner.conf,Config,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\conf\Config.cs,getDataForBuild,The following statement contains a magic number: foreach (var sect in data.Sections)              {                  string[] projectIdentifiers = sect.SectionName.Split(new char[] {'|'} );                  foreach(var p in projectIdentifiers)                  {                      string[] components = p.Split( new char[] {'='} );                      if (components.Length == 2)                      {                          switch (components[0])                          {                              case "id":                                  if (Convert.ToInt32(components[1]) == b.project_id)                                  {                                      section = sect;                                  }                                  break;                              case "name":                                  if (components[1] == b.project_name || components[1] == Regex.Replace(b.project_name' @"\s+"' ""))                                  {                                      section = sect;                                  }                                  break;                              default:                                  throw new Exception(String.Format("Cannot parse the {0} due to unknown project filter {1}"' confPath' p));                          }                      }                      else                       {                          if (p == "*")                          {                              section = sect;                          }                          else                           {                              if (p!="main")                                  throw new Exception(String.Format("Cannot parse the {0} while searching for the project prebuild steps commands. Section {1} cannot be recognized."' confPath' p));                          }                      }                      if (section != null)                      {                          break;                      }                  }                  if (section != null)                  {                      break;                  }              }
Magic Number,gitlab_ci_runner.helper,IniFile,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\IniFile.cs,IniReadValue,The following statement contains a magic number: StringBuilder temp = new StringBuilder(255);
Magic Number,gitlab_ci_runner.helper,IniFile,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\IniFile.cs,IniReadValue,The following statement contains a magic number: int i = GetPrivateProfileString(Section' Key' ""' temp'                                              255' this.path);
Magic Number,gitlab_ci_runner.helper,Network,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\Network.cs,getBuild,The following statement contains a magic number: try  			{  				var buildInfo = client.Post (new CheckForBuild  				{  					token = Uri.EscapeDataString (Config.token)  				});    				if (buildInfo != null)  				{  					return buildInfo;                    				}			  			}  			catch (WebServiceException ex)  			{  				if(ex.StatusCode == 404)  				{  					Console.WriteLine ("* Nothing");  				}  				else  				{  					Console.WriteLine ("* Failed");  				}  			}
Magic Number,gitlab_ci_runner.helper,Network,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\Network.cs,pushBuild,The following statement contains a magic number: while (iTry <= 5)              {                  try                  {  					var client = new JsonServiceClient(apiurl);  					var resp = client.Put (new PushBuild {   						id = iId + ".json"'  						token = Uri.EscapeDataString(Config.token)'  						state = stateValue'  						trace = trace.ToString () });                        if (resp != null)                      {                          return true;                      }                  }                  catch                  { }                    iTry++;                  Thread.Sleep(1000);              }
Magic Number,gitlab_ci_runner.helper,Network,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\Network.cs,pushBuild,The following statement contains a magic number: while (iTry <= 5)              {                  try                  {  					var client = new JsonServiceClient(apiurl);  					var resp = client.Put (new PushBuild {   						id = iId + ".json"'  						token = Uri.EscapeDataString(Config.token)'  						state = stateValue'  						trace = trace.ToString () });                        if (resp != null)                      {                          return true;                      }                  }                  catch                  { }                    iTry++;                  Thread.Sleep(1000);              }
Magic Number,gitlab_ci_runner.helper,SSHKey,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\helper\SSHKey.cs,generateKeypair,The following statement contains a magic number: while (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + @"\.ssh\id_rsa.pub") &&                     !File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + @"\.ssh\id_rsa"))              {                  Thread.Sleep(1000);              }
Magic Number,gitlab_ci_runner,Program,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\Program.cs,Main,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 999;
Magic Number,gitlab_ci_runner.runner,Build,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\runner\Build.cs,exec,The following statement contains a magic number: try              {                  // Remove Whitespaces                  sCommand = sCommand.Trim();                    // Output command                  outputList.Enqueue("");                  outputList.Enqueue(sCommand);                  outputList.Enqueue("");                    // Build process                  Process p = new Process();                  p.StartInfo.UseShellExecute = false;                  if (Directory.Exists(sProjectDir))                  {                      p.StartInfo.WorkingDirectory = sProjectDir; // Set Current Working Directory to project directory                  }                  p.StartInfo.FileName = "cmd.exe"; // use cmd.exe so we dont have to split our command in file name and arguments                  p.StartInfo.Arguments = "/C \"" + sCommand + "\""; // pass full command as arguments                    // Environment variables                  p.StartInfo.EnvironmentVariables["HOME"] = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile); // Fix for missing SSH Key                    p.StartInfo.EnvironmentVariables["BUNDLE_GEMFILE"] = sProjectDir + @"\Gemfile";                  p.StartInfo.EnvironmentVariables["BUNDLE_BIN_PATH"] = "";                  p.StartInfo.EnvironmentVariables["RUBYOPT"] = "";                    p.StartInfo.EnvironmentVariables["CI_SERVER"] = "yes";                  p.StartInfo.EnvironmentVariables["CI_SERVER_NAME"] = "GitLab CI";                  p.StartInfo.EnvironmentVariables["CI_SERVER_VERSION"] = null; // GitlabCI Version                  p.StartInfo.EnvironmentVariables["CI_SERVER_REVISION"] = null; // GitlabCI Revision                    p.StartInfo.EnvironmentVariables["CI_BUILD_REF"] = buildInfo.sha;                  p.StartInfo.EnvironmentVariables["CI_BUILD_REF_NAME"] = buildInfo.@ref;                  p.StartInfo.EnvironmentVariables["CI_BUILD_ID"] = buildInfo.id.ToString();                    // Redirect Standard Output and Standard Error                  p.StartInfo.RedirectStandardOutput = true;                  p.StartInfo.RedirectStandardError = true;                  p.OutputDataReceived += new DataReceivedEventHandler(outputHandler);                  p.ErrorDataReceived += new DataReceivedEventHandler(outputHandler);                    try                  {                      // Run the command                      p.Start();                      p.BeginOutputReadLine();                      p.BeginErrorReadLine();                        if (!p.WaitForExit(iTimeout * 1000))                      {                          p.Kill();                      }                      return p.ExitCode == 0;                  }                  finally                  {                      p.OutputDataReceived -= new DataReceivedEventHandler(outputHandler);                      p.ErrorDataReceived -= new DataReceivedEventHandler(outputHandler);                  }              }              catch (Exception)              {                  return false;              }
Magic Number,gitlab_ci_runner.runner,Runner,C:\repos\virtualmarc_gitlab-ci-runner-win\gitlab-ci-runner\runner\Runner.cs,waitForBuild,The following statement contains a magic number: while (true)              {                  if (completed || running)                  {                      // Build is running or completed                      // Update build                      updateBuild();                  }                  else                  {                      // Get new build                      getBuild();                  }                  Thread.Sleep(5000);              }
