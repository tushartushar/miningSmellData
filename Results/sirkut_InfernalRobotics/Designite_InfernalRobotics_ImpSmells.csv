Implementation smell,Namespace,Class,File,Method,Description
Long Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The method has 203 lines of code.
Long Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The method has 185 lines of code.
Long Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,setupJoints,The method has 125 lines of code.
Long Method,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The method has 144 lines of code.
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,add_servo,Cyclomatic complexity of the method is 12
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onVesselChange,Cyclomatic complexity of the method is 13
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onPartAttach,Cyclomatic complexity of the method is 9
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onPartRemove,Cyclomatic complexity of the method is 9
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onEditorShipModified,Cyclomatic complexity of the method is 12
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,ControlWindow,Cyclomatic complexity of the method is 8
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,Cyclomatic complexity of the method is 30
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,Cyclomatic complexity of the method is 27
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,tweakWindow,Cyclomatic complexity of the method is 8
Complex Method,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,Cyclomatic complexity of the method is 15
Complex Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnAwake,Cyclomatic complexity of the method is 8
Complex Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,setupJoints,Cyclomatic complexity of the method is 11
Complex Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkInputs,Cyclomatic complexity of the method is 10
Complex Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,FixedUpdate,Cyclomatic complexity of the method is 11
Complex Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveRight,Cyclomatic complexity of the method is 9
Complex Method,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveLeft,Cyclomatic complexity of the method is 9
Complex Method,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,Cyclomatic complexity of the method is 16
Long Parameter List,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,createFXSound,The method has 5 parameters. Parameters: part' group' sndPath' loop' maxDistance
Long Parameter List,InfernalRobotics,ServoDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The method has 5 parameters. Parameters: Name' GroupID' ServoID' iconRect' windowWidth
Long Statement,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onAppReady,The length of the statement  "        		var stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("InfernalRobotics.IRbutton.png"); " is 122.
Long Statement,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onAppReady,The length of the statement  "        		texButton.LoadImage(new System.IO.BinaryReader(stream).ReadBytes((int)stream.Length)); // embedded resource loading is stupid " is 125.
Long Statement,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onAppReady,The length of the statement  "        		button = ApplicationLauncher.Instance.AddModApplication(delegate() { guiEnabled = true; }' delegate() { guiEnabled = false; }' null' null' null' null' " is 150.
Long Statement,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onAppReady,The length of the statement  "        		                                                        ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.VAB | ApplicationLauncher.AppScenes.SPH' texButton); " is 121.
Long Statement,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The length of the statement  "            //zTriggerTweaks.DragOn = GUILayout.Toggle(zTriggerTweaks.DragOn'new GUIContent(GameDatabase.Instance.GetTexture("MagicSmokeIndustries/Textures/icon_drag"'false))); " is 164.
Long Statement,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The length of the statement  "            //zTriggerTweaks.DragOn = GUILayout.Toggle(zTriggerTweaks.DragOn'new GUIContent(GameDatabase.Instance.GetTexture("MagicSmokeIndustries/Textures/icon_drag"'false))); " is 164.
Long Statement,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The length of the statement  "                EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y))); " is 123.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,MyResolveEventHandler,The length of the statement  "                if (strAssmbName.FullName.Substring(0' strAssmbName.FullName.IndexOf("'")) == args.Name.Substring(0' args.Name.IndexOf("'"))) " is 125.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,createFXSound,The length of the statement  "                //ScreenMessages.PostScreenMessage("Sound file : " + sndPath + " as not been found' please check your Infernal Robotics installation!"' 10' ScreenMessageStyle.UPPER_CENTER); " is 173.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,parseMinMax,The length of the statement  "            // assigning to temp so I can handle empty setting strings on GUI. Defaulting to +/-200 so items' default motion are uninhibited " is 128.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,AttachToParent,The length of the statement  "                fix.RotateAround(transform.TransformPoint(rotatePivot)' transform.TransformDirection(rotateAxis)' (invertSymmetry ? ((isSymmMaster() || (part.symmetryCounterparts.Count != 1)) ? -1 : 1) : -1) * rotation); " is 204.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,ParseCData,The length of the statement  "                var settings = (Dictionary<string' object>)KSP.IO.IOUtils.DeserializeFromBinary(Convert.FromBase64String(customPartData.Replace("*"' "=").Replace("|"' "/"))); " is 158.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,doRotation,The length of the statement  "                    joint.targetRotation = Quaternion.AngleAxis((invertSymmetry ? ((isSymmMaster() || (part.symmetryCounterparts.Count != 1)) ? 1 : -1) : 1) * (rotation - rotationDelta)' rotateAxis); " is 179.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,doRotation,The length of the statement  "                    //    //this.fixedMeshTransform.rotation = Quaternion.AngleAxis((invertSymmetry ? ((isSymmMaster() || (part.symmetryCounterparts.Count != 1)) ? 1 : -1) : 1) * (rotation - rotationDelta)' -rotateAxis); " is 200.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,doRotation,The length of the statement  "                    Quaternion curRot = Quaternion.AngleAxis((invertSymmetry ? ((isSymmMaster() || (part.symmetryCounterparts.Count != 1)) ? 1 : -1) : 1) * rotation' rotateAxis); " is 158.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,FixedUpdate,The length of the statement  "            this.ecConstraintData = new ECConstraintData(this.getAvailableElectricCharge()' ElectricChargeRequired * TimeWarp.fixedDeltaTime' GroupElectricChargeRequired * TimeWarp.fixedDeltaTime); " is 185.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,FixedUpdate,The length of the statement  "                        this.ElectricStateDisplay = string.Format("{2}{0:#0.##}/{1:#0.##} Ec/s"' displayConsume' ElectricChargeRequired' lowPower ? "low power! - " : "active - "); " is 155.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveRight,The length of the statement  "                        if ((rotationEuler > rotateMin && rotationEuler > minTweak) && (rotationEuler < rotateMax && rotationEuler < maxTweak) || (rotationEuler==0)) " is 141.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveLeft,The length of the statement  "                if ((rotationEuler != rotateMax && rotationEuler < maxTweak) || (rotationEuler != rotateMin && rotationEuler > minTweak)) " is 121.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveLeft,The length of the statement  "                        if ((rotationEuler < rotateMax && rotationEuler < maxTweak) && (rotationEuler > rotateMin && rotationEuler > minTweak) || (rotationEuler == 0)) " is 143.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translateNegative,The length of the statement  "                //this.transform.Find("model/" + findFixedMesh()).Translate((translateAxis.x * isGantry * speed * Time.deltaTime * getAxisInversion())' " is 135.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translateNegative,The length of the statement  "                //                                                    (translateAxis.y * isGantry * speed * Time.deltaTime * getAxisInversion())' " is 129.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translateNegative,The length of the statement  "                //                                                    (translateAxis.z * isGantry * speed * Time.deltaTime * getAxisInversion())' Space.Self); " is 142.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translatePositive,The length of the statement  "                //this.transform.Find("model/" + findFixedMesh()).Translate((-translateAxis.x * isGantry * speed * Time.deltaTime * getAxisInversion())' " is 136.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translatePositive,The length of the statement  "                //                                                    (-translateAxis.y * isGantry * speed * Time.deltaTime * getAxisInversion())' " is 130.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translatePositive,The length of the statement  "                //                                                    (-translateAxis.z * isGantry * speed * Time.deltaTime * getAxisInversion())' Space.Self); " is 143.
Long Statement,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The length of the statement  "                //PositionLock(positionGUIEnabled && controlWinPos2.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y))); " is 137.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The length of the statement  "                        rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height; " is 176.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The length of the statement  "                    GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2; " is 132.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The length of the statement  "                ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29))); " is 120.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The length of the statement  "                    ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2; " is 132.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The length of the statement  "                    Debug.Log(String.Format("Reordering:({0}-{1})->({2}-{3})"' ServoDragging.groupID' ServoDragging.ID' ServoOver.groupID' InsertAt)); " is 130.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,LoadImageFromFile,The length of the statement  "                        Debug.Log(String.Format("[IR GUI] Failed to load the texture:{0} ({1})"' String.Format("{0}/{1}"' PathPluginTextures' FileName)' ex.Message)); " is 142.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,LoadImageFromFile,The length of the statement  "                    Debug.Log(String.Format("[IR GUI] Cannot find texture to load:{0}"' String.Format("{0}/{1}"' PathPluginTextures' FileName))); " is 125.
Long Statement,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,LoadImageFromFile,The length of the statement  "                Debug.Log(String.Format("[IR GUI] Failed to load (are you missing a file):{0} ({1})"' String.Format("{0}/{1}"' PathPluginTextures' FileName)' ex.Message)); " is 155.
Long Statement,InfernalRobotics,GroupDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The length of the statement  "                newG.GroupRect = new Rect(iconRect) {y=iconRect.y-5' width = windowWidth - 50'height=52 }; //minimum height of a group - caters to 0 servos " is 139.
Long Statement,InfernalRobotics,Utilities,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Utilities.cs,ClampToScreenEdge,The length of the statement  "            else if (bottomSeparation <= topSeparation && bottomSeparation <= leftSeparation && bottomSeparation <= rightSeparation) " is 120.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveRight,The conditional expression  "(rotationEuler != rotateMin && rotationEuler > minTweak) || rotationEuler != rotateMax && rotationEuler < maxTweak"  is complex.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveRight,The conditional expression  "(rotationEuler > rotateMin && rotationEuler > minTweak) && (rotationEuler < rotateMax && rotationEuler < maxTweak) || (rotationEuler==0)"  is complex.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveLeft,The conditional expression  "(rotationEuler != rotateMax && rotationEuler < maxTweak) || (rotationEuler != rotateMin && rotationEuler > minTweak)"  is complex.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,moveLeft,The conditional expression  "(rotationEuler < rotateMax && rotationEuler < maxTweak) && (rotationEuler > rotateMin && rotationEuler > minTweak) || (rotationEuler == 0)"  is complex.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translateNegative,The conditional expression  "(translation < translateMax && translation < maxTweak) && (translation > translateMin && translation > minTweak)"  is complex.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translateNegative,The conditional expression  "(translation != translateMax && translation < maxTweak) || (translation != translateMin && translation > minTweak)"  is complex.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translatePositive,The conditional expression  "(translation > translateMin && translation > minTweak) && (translation < translateMax && translation < maxTweak)"  is complex.
Complex Conditional,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,translatePositive,The conditional expression  "(translation != translateMin && translation > minTweak) || translation != translateMax && translation < maxTweak"  is complex.
Complex Conditional,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The conditional expression  "draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID)"  is complex.
Empty Catch Block,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onPartAttach,The method has an empty catch block.
Empty Catch Block,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onPartRemove,The method has an empty catch block.
Empty Catch Block,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,parseMinMax,The method has an empty catch block.
Empty Catch Block,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,parseMinMax,The method has an empty catch block.
Empty Catch Block,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,EndDrawGroup,The method has an empty catch block.
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onAppReady,The following statement contains a magic number: if (button == null)          	{          		var stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("InfernalRobotics.IRbutton.png");          		var texButton = new Texture2D(38' 38);          		texButton.LoadImage(new System.IO.BinaryReader(stream).ReadBytes((int)stream.Length)); // embedded resource loading is stupid          		          		button = ApplicationLauncher.Instance.AddModApplication(delegate() { guiEnabled = true; }' delegate() { guiEnabled = false; }' null' null' null' null'          		                                                        ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.VAB | ApplicationLauncher.AppScenes.SPH' texButton);          	}
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,onAppReady,The following statement contains a magic number: if (button == null)          	{          		var stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("InfernalRobotics.IRbutton.png");          		var texButton = new Texture2D(38' 38);          		texButton.LoadImage(new System.IO.BinaryReader(stream).ReadBytes((int)stream.Length)); // embedded resource loading is stupid          		          		button = ApplicationLauncher.Instance.AddModApplication(delegate() { guiEnabled = true; }' delegate() { guiEnabled = false; }' null' null' null' null'          		                                                        ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.VAB | ApplicationLauncher.AppScenes.SPH' texButton);          	}
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,ControlWindow,The following statement contains a magic number: foreach (Group g in servo_groups)              {                  if (g.servos.Count() > 0)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label(g.name' GUILayout.ExpandWidth(true));                        if (useEC)                      {                          var totalConsumption = g.servos.Sum(servo => Mathf.Abs(servo.LastPowerDraw));                          var displayText = string.Format("({0:#0.##} Ec/s)"' totalConsumption);                          GUILayout.Label(displayText' GUILayout.ExpandWidth(true));                      }                        int forceFlags = 0;                      var width20 = GUILayout.Width(20);                      var width40 = GUILayout.Width(40);                      forceFlags |= GUILayout.RepeatButton("←"' width20) ? 1 : 0;                      forceFlags |= GUILayout.RepeatButton("○"' width20) ? 4 : 0;                      forceFlags |= GUILayout.RepeatButton("→"' width20) ? 2 : 0;                        g.speed = GUILayout.TextField(g.speed' width40);                      float speed;                      bool speed_ok = float.TryParse(g.speed' out speed);                      foreach (MuMechToggle servo in g.servos)                      {                          servo.reverseKey = g.reverseKey;                          servo.forwardKey = g.forwardKey;                          if (speed_ok)                          {                              servo.customSpeed = speed;                          }                          servo.moveFlags &= ~7;                          servo.moveFlags |= forceFlags;                      }                        GUILayout.EndHorizontal();                  }              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,ControlWindow,The following statement contains a magic number: foreach (Group g in servo_groups)              {                  if (g.servos.Count() > 0)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label(g.name' GUILayout.ExpandWidth(true));                        if (useEC)                      {                          var totalConsumption = g.servos.Sum(servo => Mathf.Abs(servo.LastPowerDraw));                          var displayText = string.Format("({0:#0.##} Ec/s)"' totalConsumption);                          GUILayout.Label(displayText' GUILayout.ExpandWidth(true));                      }                        int forceFlags = 0;                      var width20 = GUILayout.Width(20);                      var width40 = GUILayout.Width(40);                      forceFlags |= GUILayout.RepeatButton("←"' width20) ? 1 : 0;                      forceFlags |= GUILayout.RepeatButton("○"' width20) ? 4 : 0;                      forceFlags |= GUILayout.RepeatButton("→"' width20) ? 2 : 0;                        g.speed = GUILayout.TextField(g.speed' width40);                      float speed;                      bool speed_ok = float.TryParse(g.speed' out speed);                      foreach (MuMechToggle servo in g.servos)                      {                          servo.reverseKey = g.reverseKey;                          servo.forwardKey = g.forwardKey;                          if (speed_ok)                          {                              servo.customSpeed = speed;                          }                          servo.moveFlags &= ~7;                          servo.moveFlags |= forceFlags;                      }                        GUILayout.EndHorizontal();                  }              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,ControlWindow,The following statement contains a magic number: foreach (Group g in servo_groups)              {                  if (g.servos.Count() > 0)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label(g.name' GUILayout.ExpandWidth(true));                        if (useEC)                      {                          var totalConsumption = g.servos.Sum(servo => Mathf.Abs(servo.LastPowerDraw));                          var displayText = string.Format("({0:#0.##} Ec/s)"' totalConsumption);                          GUILayout.Label(displayText' GUILayout.ExpandWidth(true));                      }                        int forceFlags = 0;                      var width20 = GUILayout.Width(20);                      var width40 = GUILayout.Width(40);                      forceFlags |= GUILayout.RepeatButton("←"' width20) ? 1 : 0;                      forceFlags |= GUILayout.RepeatButton("○"' width20) ? 4 : 0;                      forceFlags |= GUILayout.RepeatButton("→"' width20) ? 2 : 0;                        g.speed = GUILayout.TextField(g.speed' width40);                      float speed;                      bool speed_ok = float.TryParse(g.speed' out speed);                      foreach (MuMechToggle servo in g.servos)                      {                          servo.reverseKey = g.reverseKey;                          servo.forwardKey = g.forwardKey;                          if (speed_ok)                          {                              servo.customSpeed = speed;                          }                          servo.moveFlags &= ~7;                          servo.moveFlags |= forceFlags;                      }                        GUILayout.EndHorizontal();                  }              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,ControlWindow,The following statement contains a magic number: foreach (Group g in servo_groups)              {                  if (g.servos.Count() > 0)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label(g.name' GUILayout.ExpandWidth(true));                        if (useEC)                      {                          var totalConsumption = g.servos.Sum(servo => Mathf.Abs(servo.LastPowerDraw));                          var displayText = string.Format("({0:#0.##} Ec/s)"' totalConsumption);                          GUILayout.Label(displayText' GUILayout.ExpandWidth(true));                      }                        int forceFlags = 0;                      var width20 = GUILayout.Width(20);                      var width40 = GUILayout.Width(40);                      forceFlags |= GUILayout.RepeatButton("←"' width20) ? 1 : 0;                      forceFlags |= GUILayout.RepeatButton("○"' width20) ? 4 : 0;                      forceFlags |= GUILayout.RepeatButton("→"' width20) ? 2 : 0;                        g.speed = GUILayout.TextField(g.speed' width40);                      float speed;                      bool speed_ok = float.TryParse(g.speed' out speed);                      foreach (MuMechToggle servo in g.servos)                      {                          servo.reverseKey = g.reverseKey;                          servo.forwardKey = g.forwardKey;                          if (speed_ok)                          {                              servo.customSpeed = speed;                          }                          servo.moveFlags &= ~7;                          servo.moveFlags |= forceFlags;                      }                        GUILayout.EndHorizontal();                  }              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,ControlWindow,The following statement contains a magic number: foreach (Group g in servo_groups)              {                  if (g.servos.Count() > 0)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Label(g.name' GUILayout.ExpandWidth(true));                        if (useEC)                      {                          var totalConsumption = g.servos.Sum(servo => Mathf.Abs(servo.LastPowerDraw));                          var displayText = string.Format("({0:#0.##} Ec/s)"' totalConsumption);                          GUILayout.Label(displayText' GUILayout.ExpandWidth(true));                      }                        int forceFlags = 0;                      var width20 = GUILayout.Width(20);                      var width40 = GUILayout.Width(40);                      forceFlags |= GUILayout.RepeatButton("←"' width20) ? 1 : 0;                      forceFlags |= GUILayout.RepeatButton("○"' width20) ? 4 : 0;                      forceFlags |= GUILayout.RepeatButton("→"' width20) ? 2 : 0;                        g.speed = GUILayout.TextField(g.speed' width40);                      float speed;                      bool speed_ok = float.TryParse(g.speed' out speed);                      foreach (MuMechToggle servo in g.servos)                      {                          servo.reverseKey = g.reverseKey;                          servo.forwardKey = g.forwardKey;                          if (speed_ok)                          {                              servo.customSpeed = speed;                          }                          servo.moveFlags &= ~7;                          servo.moveFlags |= forceFlags;                      }                        GUILayout.EndHorizontal();                  }              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: var width20 = GUILayout.Width(20);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: var width40 = GUILayout.Width(40);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: var width60 = GUILayout.Width(60);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: var maxHeight = GUILayout.MaxHeight(Screen.height / 2);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: if (servo_groups.Count > 1)              {                  GUILayout.Space(60);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name'i );                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (GUILayout.RepeatButton("←"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveLeft();                      }                  }                    if (GUILayout.RepeatButton("→"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveRight();                      }                  }                    if (i > 0)                  {                        //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                    GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      updateGroupECRequirement(grp);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                    GUILayout.Label("Rotate"' width40);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //Changed this to a for loop so it could use the index                  //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      //if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName'i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                            servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                          servo.refreshKeys();                          if (editorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͼ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' 45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                          //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͽ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' -45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  //Updates the Groups Details with a height for all servos                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name'i );                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (GUILayout.RepeatButton("←"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveLeft();                      }                  }                    if (GUILayout.RepeatButton("→"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveRight();                      }                  }                    if (i > 0)                  {                        //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                    GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      updateGroupECRequirement(grp);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                    GUILayout.Label("Rotate"' width40);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //Changed this to a for loop so it could use the index                  //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      //if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName'i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                            servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                          servo.refreshKeys();                          if (editorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͼ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' 45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                          //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͽ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' -45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  //Updates the Groups Details with a height for all servos                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name'i );                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (GUILayout.RepeatButton("←"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveLeft();                      }                  }                    if (GUILayout.RepeatButton("→"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveRight();                      }                  }                    if (i > 0)                  {                        //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                    GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      updateGroupECRequirement(grp);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                    GUILayout.Label("Rotate"' width40);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //Changed this to a for loop so it could use the index                  //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      //if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName'i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                            servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                          servo.refreshKeys();                          if (editorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͼ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' 45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                          //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͽ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' -45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  //Updates the Groups Details with a height for all servos                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name'i );                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (GUILayout.RepeatButton("←"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveLeft();                      }                  }                    if (GUILayout.RepeatButton("→"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveRight();                      }                  }                    if (i > 0)                  {                        //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                    GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      updateGroupECRequirement(grp);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                    GUILayout.Label("Rotate"' width40);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //Changed this to a for loop so it could use the index                  //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      //if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName'i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                            servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                          servo.refreshKeys();                          if (editorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͼ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' 45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                          //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͽ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' -45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  //Updates the Groups Details with a height for all servos                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name'i );                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (GUILayout.RepeatButton("←"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveLeft();                      }                  }                    if (GUILayout.RepeatButton("→"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveRight();                      }                  }                    if (i > 0)                  {                        //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                    GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      updateGroupECRequirement(grp);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                    GUILayout.Label("Rotate"' width40);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //Changed this to a for loop so it could use the index                  //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      //if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName'i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                            servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                          servo.refreshKeys();                          if (editorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͼ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' 45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                          //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͽ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' -45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  //Updates the Groups Details with a height for all servos                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,EditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name'i );                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (GUILayout.RepeatButton("←"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveLeft();                      }                  }                    if (GUILayout.RepeatButton("→"' width20' GUILayout.Height(EditorButtonHeights)))                  {                      foreach (var servo in grp.servos)                      {                          servo.moveRight();                      }                  }                    if (i > 0)                  {                        //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                    GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      updateGroupECRequirement(grp);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                    GUILayout.Label("Rotate"' width40);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //Changed this to a for loop so it could use the index                  //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      //if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName'i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                            servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                          servo.refreshKeys();                          if (editorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͼ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' 45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                          //set a smaller height to align with text boxes                          if (GUILayout.Button("Ͽ"' width20' GUILayout.Height(EditorButtonHeights)))                          {                              if (servo.rotation == 0f && servo.translation == 0f)                                  servo.transform.Rotate(0' -45f' 0' Space.Self);                              else                                  ScreenMessages.PostScreenMessage("<color=#FF0000>Can't rotate position after adjusting part</color>");                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  //Updates the Groups Details with a height for all servos                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: var width20 = GUILayout.Width(20);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: var width40 = GUILayout.Width(40);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: var width60 = GUILayout.Width(60);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: var maxHeight = GUILayout.MaxHeight(Screen.height / 2);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: if (servo_groups.Count > 1)              {                  GUILayout.Space(60);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name' i);                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (i > 0)                  {                      //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                  GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                  if (update14to15)                      GUILayout.Label("Rotation"' expand);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName' i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                          //0.14 to 0.15 fix                          if (update14to15)                          {                              string tempRot = GUILayout.TextField(servo.rotation.ToString()'                                                                    expand);                              servo.rotation = float.Parse(tempRot);                          }                          //0.14 to 0.15 fix                          servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                            if (groupEditorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name' i);                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (i > 0)                  {                      //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                  GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                  if (update14to15)                      GUILayout.Label("Rotation"' expand);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName' i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                          //0.14 to 0.15 fix                          if (update14to15)                          {                              string tempRot = GUILayout.TextField(servo.rotation.ToString()'                                                                    expand);                              servo.rotation = float.Parse(tempRot);                          }                          //0.14 to 0.15 fix                          servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                            if (groupEditorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name' i);                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (i > 0)                  {                      //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                  GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                  if (update14to15)                      GUILayout.Label("Rotation"' expand);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName' i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                          //0.14 to 0.15 fix                          if (update14to15)                          {                              string tempRot = GUILayout.TextField(servo.rotation.ToString()'                                                                    expand);                              servo.rotation = float.Parse(tempRot);                          }                          //0.14 to 0.15 fix                          servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                            if (groupEditorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name' i);                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (i > 0)                  {                      //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                  GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                  if (update14to15)                      GUILayout.Label("Rotation"' expand);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName' i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                          //0.14 to 0.15 fix                          if (update14to15)                          {                              string tempRot = GUILayout.TextField(servo.rotation.ToString()'                                                                    expand);                              servo.rotation = float.Parse(tempRot);                          }                          //0.14 to 0.15 fix                          servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                            if (groupEditorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name' i);                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (i > 0)                  {                      //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                  GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                  if (update14to15)                      GUILayout.Label("Rotation"' expand);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName' i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                          //0.14 to 0.15 fix                          if (update14to15)                          {                              string tempRot = GUILayout.TextField(servo.rotation.ToString()'                                                                    expand);                              servo.rotation = float.Parse(tempRot);                          }                          //0.14 to 0.15 fix                          servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                            if (groupEditorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,GroupEditorWindow,The following statement contains a magic number: for (int i = 0; i < servo_groups.Count; i++)              {                  Group grp = servo_groups[i];                    GUILayout.BeginHorizontal();                    //Call the Add Group Handle code                  GUIDragAndDrop.DrawGroupHandle(grp.name' i);                    string tmp = GUILayout.TextField(grp.name' expand);                    if (grp.name != tmp)                  {                      grp.name = tmp;                  }                    tmp = GUILayout.TextField(grp.forwardKey' width20);                  if (grp.forwardKey != tmp)                  {                      grp.forwardKey = tmp;                  }                  tmp = GUILayout.TextField(grp.reverseKey' width20);                  if (grp.reverseKey != tmp)                  {                      grp.reverseKey = tmp;                  }                    if (i > 0)                  {                      //set a smaller height to align with text boxes                      if (GUILayout.Button("Remove"' width60' GUILayout.Height(EditorButtonHeights)))                      {                          foreach (var servo in grp.servos)                          {                              move_servo(grp' servo_groups[i - 1]' servo);                          }                          servo_groups.RemoveAt(i);                          resetWin = true;                          return;                      }                  }                  else                  {                      if (servo_groups.Count > 1)                      {                          GUILayout.Space(60);                      }                  }                  GUILayout.EndHorizontal();                    if (useEC)                  {                      GUILayout.BeginHorizontal();                      GUILayout.Space(20);                      GUILayout.Label(string.Format("Estimated Power Draw: {0:#0.##} Ec/s"' grp.groupTotalECRequirement)' expand);                      GUILayout.EndHorizontal();                  }                    GUILayout.BeginHorizontal();                    GUILayout.Space(20);                    GUILayout.BeginVertical();                    GUILayout.BeginHorizontal();                    //Pad the text so it still aligns with the text box                  GUIDragAndDrop.PadText();                  GUILayout.Label("Servo Name"' expand);                  if (update14to15)                      GUILayout.Label("Rotation"' expand);                    if (servo_groups.Count > 1)                  {                      GUILayout.Label("Group"' width40);                  }                  GUILayout.EndHorizontal();                    //foreach (var servo in grp.servos)                  for (int iS = 0; iS < grp.servos.Count; iS++)                  {                      var servo = grp.servos[iS];                      if (!servo.freeMoving)                      {                          GUILayout.BeginHorizontal();                            //Call the Add Servo Handle code                          GUIDragAndDrop.DrawServoHandle(servo.servoName' i' iS);                            //set a smaller height to align with text boxes                          if (GUILayout.Button("[]"' GUILayout.Width(30)' GUILayout.Height(EditorButtonHeights)))                          {                              tmpMin = servo.minTweak.ToString();                              tmpMax = servo.maxTweak.ToString();                              servoTweak = servo;                              guiTweakEnabled = true;                          }                            servo.servoName = GUILayout.TextField(servo.servoName'                                                                expand);                          //0.14 to 0.15 fix                          if (update14to15)                          {                              string tempRot = GUILayout.TextField(servo.rotation.ToString()'                                                                    expand);                              servo.rotation = float.Parse(tempRot);                          }                          //0.14 to 0.15 fix                          servo.groupName = grp.name;                          servo.reverseKey = grp.reverseKey;                          servo.forwardKey = grp.forwardKey;                            if (groupEditorWinPos.Contains(mousePos))                          {                              var last = GUILayoutUtility.GetLastRect();                              var pos = Event.current.mousePosition;                              bool highlight = last.Contains(pos);                              servo.part.SetHighlight(highlight'false);                          }                            if (servo_groups.Count > 1)                          {                              if (i > 0)                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↑"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i - 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                              if (i < (servo_groups.Count - 1))                              {                                  //Changed these to actual arrows - and set a smaller height to align with text boxes                                  if (GUILayout.Button("↓"' width20' GUILayout.Height(EditorButtonHeights)))                                  {                                      move_servo(grp' servo_groups[i + 1]' servo);                                  }                              }                              else                              {                                  GUILayout.Space(20);                              }                          }                          GUILayout.EndHorizontal();                      }                  }                  GUIDragAndDrop.EndDrawGroup(i);                    GUILayout.EndVertical();                    GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,tweakWindow,The following statement contains a magic number: var width20 = GUILayout.Width(20);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,tweakWindow,The following statement contains a magic number: var width40 = GUILayout.Width(40);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,tweakWindow,The following statement contains a magic number: var width60 = GUILayout.Width(60);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,tweakWindow,The following statement contains a magic number: var maxHeight = GUILayout.MaxHeight(Screen.height / 2);
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,tweakWindow,The following statement contains a magic number: if (GUILayout.Button("Save"' GUILayout.Width(50)))              {                  if (HighLogic.LoadedScene != GameScenes.FLIGHT)                  {                      if (servoTweak.part.symmetryCounterparts.Count > 1)                      {                          for (int i = 0; i < servoTweak.part.symmetryCounterparts.Count; i++)                          {                              float.TryParse(tmpMin' out ((MuMechToggle)servoTweak.part.symmetryCounterparts[i].Modules["MuMechToggle"]).minTweak);                              float.TryParse(tmpMax' out ((MuMechToggle)servoTweak.part.symmetryCounterparts[i].Modules["MuMechToggle"]).maxTweak);                          }                      }                  }                  float.TryParse(tmpMin' out servoTweak.minTweak);                  float.TryParse(tmpMax' out servoTweak.maxTweak);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,tweakWindow,The following statement contains a magic number: if (GUILayout.Button("Close"' GUILayout.Width(50)))              {                  saveConfigXML();                  guiTweakEnabled = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (controlWinPos.x == 0 && controlWinPos.y == 0)              {                  controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (controlWinPos.x == 0 && controlWinPos.y == 0)              {                  controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (controlWinPos.x == 0 && controlWinPos.y == 0)              {                  controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (controlWinPos.x == 0 && controlWinPos.y == 0)              {                  controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (editorWinPos.x == 0 && editorWinPos.y == 0)              {                  editorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (editorWinPos.x == 0 && editorWinPos.y == 0)              {                  editorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (editorWinPos.x == 0 && editorWinPos.y == 0)              {                  editorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (editorWinPos.x == 0 && editorWinPos.y == 0)              {                  editorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (groupEditorWinPos.x == 0 && groupEditorWinPos.y == 0)              {                  groupEditorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (groupEditorWinPos.x == 0 && groupEditorWinPos.y == 0)              {                  groupEditorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (groupEditorWinPos.x == 0 && groupEditorWinPos.y == 0)              {                  groupEditorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (groupEditorWinPos.x == 0 && groupEditorWinPos.y == 0)              {                  groupEditorWinPos = new Rect(Screen.width - 260' 50' 10' 10);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (tweakWinPos.x == 0 && tweakWinPos.y == 0)              {                  tweakWinPos = new Rect(Screen.width - 410' 220' 145' 130);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (tweakWinPos.x == 0 && tweakWinPos.y == 0)              {                  tweakWinPos = new Rect(Screen.width - 410' 220' 145' 130);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (tweakWinPos.x == 0 && tweakWinPos.y == 0)              {                  tweakWinPos = new Rect(Screen.width - 410' 220' 145' 130);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (tweakWinPos.x == 0 && tweakWinPos.y == 0)              {                  tweakWinPos = new Rect(Screen.width - 410' 220' 145' 130);              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos = new Rect(controlWinPos.x' controlWinPos.y'                                           10' 10);                  editorWinPos = new Rect(editorWinPos.x' editorWinPos.y'                                          10' 10);                  groupEditorWinPos = new Rect(groupEditorWinPos.x' groupEditorWinPos.y'                                          10' 10);                    tweakWinPos = new Rect(tweakWinPos.x' tweakWinPos.y'                                          10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechGUI,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUI.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                  //{                      controlWinPos = GUILayout.Window(956' controlWinPos'                                                       ControlWindow'                                                       "Servo Control"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                      if (groupEditorEnabled)                          groupEditorWinPos = GUILayout.Window(958' groupEditorWinPos'                                                          GroupEditorWindow'                                                          "Servo Group Editor"'                                                          GUILayout.Width(EditorWidth - 48)' //Using a variable here                                                          height);                      if (guiTweakEnabled)                          tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                           tweakWindow'                                                           servoTweak.servoName'                                                           GUILayout.Width(100)'                                                           GUILayout.Height(80));                  //}                  refreshKeysFromGUI();              }              else if (scene == GameScenes.EDITOR)              {                  var height = GUILayout.Height(Screen.height / 2);                  if (guiEnabled)                      editorWinPos = GUILayout.Window(957' editorWinPos'                                                      EditorWindow'                                                      "Servo Configuration"'                                                      GUILayout.Width(EditorWidth )' //Using a variable here                                                      height);                  if (guiTweakEnabled)                  {                      tweakWinPos = GUILayout.Window(959' tweakWinPos'                                                       tweakWindow'                                                       servoTweak.servoName'                                                       GUILayout.Width(100)'                                                       GUILayout.Height(80));                  }                  EditorLock(guiEnabled && editorWinPos.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnLoad,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  if (this.part.name.Contains("Gantry"))                  {                      //this.transform.Find("model/" + fixedMesh).Translate((-translateAxis.x * translation * 2)'                      //                                                    (-translateAxis.y * translation * 2)'                      //                                                    (-translateAxis.z * translation * 2)' Space.Self);                      this.fixedMeshTransform.Translate((-translateAxis.x * translation * 2)'                                                                          (-translateAxis.y * translation * 2)'                                                                          (-translateAxis.z * translation * 2)' Space.Self);                  }                  //parentUID = this.part.parent.uid;              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnLoad,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  if (this.part.name.Contains("Gantry"))                  {                      //this.transform.Find("model/" + fixedMesh).Translate((-translateAxis.x * translation * 2)'                      //                                                    (-translateAxis.y * translation * 2)'                      //                                                    (-translateAxis.z * translation * 2)' Space.Self);                      this.fixedMeshTransform.Translate((-translateAxis.x * translation * 2)'                                                                          (-translateAxis.y * translation * 2)'                                                                          (-translateAxis.z * translation * 2)' Space.Self);                  }                  //parentUID = this.part.parent.uid;              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnLoad,The following statement contains a magic number: if (scene == GameScenes.FLIGHT)              {                  if (this.part.name.Contains("Gantry"))                  {                      //this.transform.Find("model/" + fixedMesh).Translate((-translateAxis.x * translation * 2)'                      //                                                    (-translateAxis.y * translation * 2)'                      //                                                    (-translateAxis.z * translation * 2)' Space.Self);                      this.fixedMeshTransform.Translate((-translateAxis.x * translation * 2)'                                                                          (-translateAxis.y * translation * 2)'                                                                          (-translateAxis.z * translation * 2)' Space.Self);                  }                  //parentUID = this.part.parent.uid;              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkInputs,The following statement contains a magic number: if ((moveFlags & 0x101) != 0 || keyPressed(rotateKey))              {                  updateRotation(+keyRotateSpeed' reversedRotationKey' 2);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkInputs,The following statement contains a magic number: if ((moveFlags & 0x202) != 0 || keyPressed(revRotateKey))              {                  updateRotation(-keyRotateSpeed' reversedRotationKey' 2);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkInputs,The following statement contains a magic number: if ((moveFlags & 0x101) != 0 || keyPressed(translateKey))              {                  updateTranslation(+keyTranslateSpeed' reversedTranslationKey' 2);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkInputs,The following statement contains a magic number: if ((moveFlags & 0x202) != 0 || keyPressed(revTranslateKey))              {                  updateTranslation(-keyTranslateSpeed' reversedTranslationKey' 2);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkInputs,The following statement contains a magic number: if (((moveFlags & 0x404) != 0) && (rotationChanged == 0) && (translationChanged == 0))              {                  float speed;                  speed = HomeSpeed(rotation' keyRotateSpeed);                  updateRotation(speed' false' 2);                  speed = HomeSpeed(translation' keyTranslateSpeed);                  updateTranslation(speed' false' 2);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkInputs,The following statement contains a magic number: if (((moveFlags & 0x404) != 0) && (rotationChanged == 0) && (translationChanged == 0))              {                  float speed;                  speed = HomeSpeed(rotation' keyRotateSpeed);                  updateRotation(speed' false' 2);                  speed = HomeSpeed(translation' keyTranslateSpeed);                  updateTranslation(speed' false' 2);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkRotationLimits,The following statement contains a magic number: if (rotateLimits || limitTweakableFlag)              {                    if (rotation < minTweak || rotation > maxTweak)                  {                      rotation = Mathf.Clamp(rotation' minTweak' maxTweak);                      if (rotateLimitsRevertOn && ((rotationChanged & 1) > 0))                      {                          reversedRotationOn = !reversedRotationOn;                      }                      if (rotateLimitsRevertKey && ((rotationChanged & 2) > 0))                      {                          reversedRotationKey = !reversedRotationKey;                      }                      if (rotateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }              else              {                  if (rotation >= 180)                  {                      rotation -= 360;                      rotationDelta -= 360;                  }                  if (rotation < -180)                  {                      rotation += 360;                      rotationDelta += 360;                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkRotationLimits,The following statement contains a magic number: if (rotateLimits || limitTweakableFlag)              {                    if (rotation < minTweak || rotation > maxTweak)                  {                      rotation = Mathf.Clamp(rotation' minTweak' maxTweak);                      if (rotateLimitsRevertOn && ((rotationChanged & 1) > 0))                      {                          reversedRotationOn = !reversedRotationOn;                      }                      if (rotateLimitsRevertKey && ((rotationChanged & 2) > 0))                      {                          reversedRotationKey = !reversedRotationKey;                      }                      if (rotateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }              else              {                  if (rotation >= 180)                  {                      rotation -= 360;                      rotationDelta -= 360;                  }                  if (rotation < -180)                  {                      rotation += 360;                      rotationDelta += 360;                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkRotationLimits,The following statement contains a magic number: if (rotateLimits || limitTweakableFlag)              {                    if (rotation < minTweak || rotation > maxTweak)                  {                      rotation = Mathf.Clamp(rotation' minTweak' maxTweak);                      if (rotateLimitsRevertOn && ((rotationChanged & 1) > 0))                      {                          reversedRotationOn = !reversedRotationOn;                      }                      if (rotateLimitsRevertKey && ((rotationChanged & 2) > 0))                      {                          reversedRotationKey = !reversedRotationKey;                      }                      if (rotateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }              else              {                  if (rotation >= 180)                  {                      rotation -= 360;                      rotationDelta -= 360;                  }                  if (rotation < -180)                  {                      rotation += 360;                      rotationDelta += 360;                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkRotationLimits,The following statement contains a magic number: if (rotateLimits || limitTweakableFlag)              {                    if (rotation < minTweak || rotation > maxTweak)                  {                      rotation = Mathf.Clamp(rotation' minTweak' maxTweak);                      if (rotateLimitsRevertOn && ((rotationChanged & 1) > 0))                      {                          reversedRotationOn = !reversedRotationOn;                      }                      if (rotateLimitsRevertKey && ((rotationChanged & 2) > 0))                      {                          reversedRotationKey = !reversedRotationKey;                      }                      if (rotateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }              else              {                  if (rotation >= 180)                  {                      rotation -= 360;                      rotationDelta -= 360;                  }                  if (rotation < -180)                  {                      rotation += 360;                      rotationDelta += 360;                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkRotationLimits,The following statement contains a magic number: if (rotateLimits || limitTweakableFlag)              {                    if (rotation < minTweak || rotation > maxTweak)                  {                      rotation = Mathf.Clamp(rotation' minTweak' maxTweak);                      if (rotateLimitsRevertOn && ((rotationChanged & 1) > 0))                      {                          reversedRotationOn = !reversedRotationOn;                      }                      if (rotateLimitsRevertKey && ((rotationChanged & 2) > 0))                      {                          reversedRotationKey = !reversedRotationKey;                      }                      if (rotateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }              else              {                  if (rotation >= 180)                  {                      rotation -= 360;                      rotationDelta -= 360;                  }                  if (rotation < -180)                  {                      rotation += 360;                      rotationDelta += 360;                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkRotationLimits,The following statement contains a magic number: if (rotateLimits || limitTweakableFlag)              {                    if (rotation < minTweak || rotation > maxTweak)                  {                      rotation = Mathf.Clamp(rotation' minTweak' maxTweak);                      if (rotateLimitsRevertOn && ((rotationChanged & 1) > 0))                      {                          reversedRotationOn = !reversedRotationOn;                      }                      if (rotateLimitsRevertKey && ((rotationChanged & 2) > 0))                      {                          reversedRotationKey = !reversedRotationKey;                      }                      if (rotateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }              else              {                  if (rotation >= 180)                  {                      rotation -= 360;                      rotationDelta -= 360;                  }                  if (rotation < -180)                  {                      rotation += 360;                      rotationDelta += 360;                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkRotationLimits,The following statement contains a magic number: if (rotateLimits || limitTweakableFlag)              {                    if (rotation < minTweak || rotation > maxTweak)                  {                      rotation = Mathf.Clamp(rotation' minTweak' maxTweak);                      if (rotateLimitsRevertOn && ((rotationChanged & 1) > 0))                      {                          reversedRotationOn = !reversedRotationOn;                      }                      if (rotateLimitsRevertKey && ((rotationChanged & 2) > 0))                      {                          reversedRotationKey = !reversedRotationKey;                      }                      if (rotateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }              else              {                  if (rotation >= 180)                  {                      rotation -= 360;                      rotationDelta -= 360;                  }                  if (rotation < -180)                  {                      rotation += 360;                      rotationDelta += 360;                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,checkTranslationLimits,The following statement contains a magic number: if (translateLimits)              {                  if (translation < minTweak || translation > maxTweak)                  {                      translation = Mathf.Clamp(translation' minTweak' maxTweak);                      if (translateLimitsRevertOn && ((translationChanged & 1) > 0))                      {                          reversedTranslationOn = !reversedTranslationOn;                      }                      if (translateLimitsRevertKey && ((translationChanged & 2) > 0))                      {                          reversedTranslationKey = !reversedTranslationKey;                      }                      if (translateLimitsOff)                      {                          on = false;                          updateState();                      }                  }              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,FixedUpdate,The following statement contains a magic number: if (setupJoints())              {                  rotationChanged = 4;                  translationChanged = 4;              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,FixedUpdate,The following statement contains a magic number: if (setupJoints())              {                  rotationChanged = 4;                  translationChanged = 4;              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,positionWindow,The following statement contains a magic number: {                  GUILayout.BeginHorizontal();                  GUILayout.Label(this.servoName' GUILayout.ExpandWidth(true));                    float angle;                  Vector3 tempAxis;                  this.transform.rotation.ToAngleAxis(out angle' out tempAxis);                    GUILayout.BeginVertical();                  if (rotateJoint)                  {                      GUILayout.Label("Rotation: " + rotation);                  }                  else if (translateJoint)                  {                      GUILayout.Label("Translation: " + translation);                  }                  GUILayout.EndVertical();                    if (GUILayout.RepeatButton("←←"' GUILayout.Width(40)))                  {                      moveLeft();                  }                  if (GUILayout.Button("←"' GUILayout.Width(21)))                  {                      moveLeft();                  }                  if (GUILayout.Button("→"' GUILayout.Width(21)))                  {                      moveRight();                  }                    if (GUILayout.RepeatButton("→→"' GUILayout.Width(40)))                  {                      moveRight();                  }                  translationDelta = translation;                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,positionWindow,The following statement contains a magic number: {                  GUILayout.BeginHorizontal();                  GUILayout.Label(this.servoName' GUILayout.ExpandWidth(true));                    float angle;                  Vector3 tempAxis;                  this.transform.rotation.ToAngleAxis(out angle' out tempAxis);                    GUILayout.BeginVertical();                  if (rotateJoint)                  {                      GUILayout.Label("Rotation: " + rotation);                  }                  else if (translateJoint)                  {                      GUILayout.Label("Translation: " + translation);                  }                  GUILayout.EndVertical();                    if (GUILayout.RepeatButton("←←"' GUILayout.Width(40)))                  {                      moveLeft();                  }                  if (GUILayout.Button("←"' GUILayout.Width(21)))                  {                      moveLeft();                  }                  if (GUILayout.Button("→"' GUILayout.Width(21)))                  {                      moveRight();                  }                    if (GUILayout.RepeatButton("→→"' GUILayout.Width(40)))                  {                      moveRight();                  }                  translationDelta = translation;                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,positionWindow,The following statement contains a magic number: {                  GUILayout.BeginHorizontal();                  GUILayout.Label(this.servoName' GUILayout.ExpandWidth(true));                    float angle;                  Vector3 tempAxis;                  this.transform.rotation.ToAngleAxis(out angle' out tempAxis);                    GUILayout.BeginVertical();                  if (rotateJoint)                  {                      GUILayout.Label("Rotation: " + rotation);                  }                  else if (translateJoint)                  {                      GUILayout.Label("Translation: " + translation);                  }                  GUILayout.EndVertical();                    if (GUILayout.RepeatButton("←←"' GUILayout.Width(40)))                  {                      moveLeft();                  }                  if (GUILayout.Button("←"' GUILayout.Width(21)))                  {                      moveLeft();                  }                  if (GUILayout.Button("→"' GUILayout.Width(21)))                  {                      moveRight();                  }                    if (GUILayout.RepeatButton("→→"' GUILayout.Width(40)))                  {                      moveRight();                  }                  translationDelta = translation;                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,positionWindow,The following statement contains a magic number: {                  GUILayout.BeginHorizontal();                  GUILayout.Label(this.servoName' GUILayout.ExpandWidth(true));                    float angle;                  Vector3 tempAxis;                  this.transform.rotation.ToAngleAxis(out angle' out tempAxis);                    GUILayout.BeginVertical();                  if (rotateJoint)                  {                      GUILayout.Label("Rotation: " + rotation);                  }                  else if (translateJoint)                  {                      GUILayout.Label("Translation: " + translation);                  }                  GUILayout.EndVertical();                    if (GUILayout.RepeatButton("←←"' GUILayout.Width(40)))                  {                      moveLeft();                  }                  if (GUILayout.Button("←"' GUILayout.Width(21)))                  {                      moveLeft();                  }                  if (GUILayout.Button("→"' GUILayout.Width(21)))                  {                      moveRight();                  }                    if (GUILayout.RepeatButton("→→"' GUILayout.Width(40)))                  {                      moveRight();                  }                  translationDelta = translation;                  GUILayout.EndHorizontal();                  GUILayout.BeginHorizontal();                  GUILayout.EndHorizontal();              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (controlWinPos2.x == 0 && controlWinPos2.y == 0)              {                  //controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);                  controlWinPos2 = new Rect(260' 66' 10' 10);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (controlWinPos2.x == 0 && controlWinPos2.y == 0)              {                  //controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);                  controlWinPos2 = new Rect(260' 66' 10' 10);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (controlWinPos2.x == 0 && controlWinPos2.y == 0)              {                  //controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);                  controlWinPos2 = new Rect(260' 66' 10' 10);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (controlWinPos2.x == 0 && controlWinPos2.y == 0)              {                  //controlWinPos = new Rect(Screen.width - 510' 70' 10' 10);                  controlWinPos2 = new Rect(260' 66' 10' 10);              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos2 = new Rect(controlWinPos2.x' controlWinPos2.y'                                           10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (resetWin)              {                  controlWinPos2 = new Rect(controlWinPos2.x' controlWinPos2.y'                                           10' 10);                  resetWin = false;              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.EDITOR)              {                    var height = GUILayout.Height(Screen.height / 2);                  if (positionGUIEnabled)                      controlWinPos2 = GUILayout.Window(960' controlWinPos2'                                                       positionWindow'                                                       "Position Editor"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                    //PositionLock(positionGUIEnabled && controlWinPos2.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.EDITOR)              {                    var height = GUILayout.Height(Screen.height / 2);                  if (positionGUIEnabled)                      controlWinPos2 = GUILayout.Window(960' controlWinPos2'                                                       positionWindow'                                                       "Position Editor"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                    //PositionLock(positionGUIEnabled && controlWinPos2.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.EDITOR)              {                    var height = GUILayout.Height(Screen.height / 2);                  if (positionGUIEnabled)                      controlWinPos2 = GUILayout.Window(960' controlWinPos2'                                                       positionWindow'                                                       "Position Editor"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                    //PositionLock(positionGUIEnabled && controlWinPos2.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,OnGUI,The following statement contains a magic number: if (scene == GameScenes.EDITOR)              {                    var height = GUILayout.Height(Screen.height / 2);                  if (positionGUIEnabled)                      controlWinPos2 = GUILayout.Window(960' controlWinPos2'                                                       positionWindow'                                                       "Position Editor"'                                                       GUILayout.Width(300)'                                                       GUILayout.Height(80));                    //PositionLock(positionGUIEnabled && controlWinPos2.Contains(new Vector2(Input.mousePosition.x' Screen.height - Input.mousePosition.y)));              }
Magic Number,MuMech,ECConstraintData,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,ECConstraintData,The following statement contains a magic number: this.Enough = this.Available && (totalECAvailable >= groupRequiredEC * 0.1);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollTop = new Rect(8' 30' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollTop = new Rect(8' 30' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollTop = new Rect(8' 30' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollTop = new Rect(8' 30' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollBottom = new Rect(8' windowRect.height - 22' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollBottom = new Rect(8' windowRect.height - 22' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollBottom = new Rect(8' windowRect.height - 22' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowBegin,The following statement contains a magic number: rectScrollBottom = new Rect(8' windowRect.height - 22' windowRect.width - 25' 15);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,PadText,The following statement contains a magic number: if (Enabled)                  GUILayout.Space(20);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && ServoDragging != null && ServoOver!=null) {                  //What is the insert position of the dragged servo                  Int32 InsertIndex = ServoOver.ID + (ServoOverUpper?0:1);                  if((ServoDragging.groupID!=ServoOver.groupID)||                      ( ServoDragging.ID!=InsertIndex && (ServoDragging.ID+1)!=InsertIndex)){                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Count)                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList()[InsertIndex].ServoRect.y;                      else                          rectResMoveY = lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.y + lstServos.Where(x=>x.groupID==ServoOver.groupID).ToList().Last().ServoRect.height;                                            //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width-34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && GroupDragging != null && GroupOver!=null)              {                  //What is the insert position of the dragged group                  Int32 InsertIndex = GroupOver.ID + (GroupOverUpper ? 0 : 1);                  if (GroupDragging.ID != InsertIndex && (GroupDragging.ID+ 1) != InsertIndex)                  {                      //Only in here if the drop will cause the list to change                       Single rectResMoveY;                      //is it dropping in the list or at the end                      if (InsertIndex < lstGroups.Count)                          rectResMoveY = lstGroups[InsertIndex].GroupRect.y;                      else                          rectResMoveY = lstGroups.Last().GroupRect.y + lstGroups.Last().GroupRect.height;                        //calculate and draw the graphic                      InsertRect = new Rect(12'                          rectResMoveY + 26  - ScrollPosition.y'                          WindowRect.width - 34' 9);                      GUI.Box(InsertRect' ""' styleDragInsert);                  }              }              else if (draggingItem && ServoDragging != null && GroupOver != null && !lstServos.Any(x => x.groupID == GroupOver.ID))              {                  //This is the case for an empty Group                  Single rectResMoveY;                  //is it dropping in the list or at the end                  rectResMoveY = GroupOver.GroupRect.y + GroupOver.GroupRect.height;                    //calculate and draw the graphic                  InsertRect = new Rect(12'                      rectResMoveY + 26 - ScrollPosition.y'                      WindowRect.width - 34' 9);                  GUI.Box(InsertRect' ""' styleDragInsert);              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (MousePosition.y > 32 && MousePosition.y < WindowRect.height - 8)              {                  //inside the scrollview                  //check what group                  GroupOver = lstGroups.FirstOrDefault(x => x.GroupRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  GroupIconOver = lstGroups.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8'29)));                  if(GroupOver!=null)                      GroupOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - GroupOver.GroupRect.y) < GroupOver.GroupRect.height / 2;                    //or servo                  ServoOver = lstServos.FirstOrDefault(x => x.ServoRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  ServoIconOver = lstServos.FirstOrDefault(x => x.IconRect.Contains(MousePosition + ScrollPosition - new Vector2(8' 29)));                  if (ServoOver != null)                      ServoOverUpper = ((MousePosition + ScrollPosition - new Vector2(8' 29)).y - ServoOver.ServoRect.y) < ServoOver.ServoRect.height / 2;                } else {                  //Otherwise empty the variables                  GroupOver = null; ServoOver = null; GroupIconOver = null; ServoIconOver = null;               }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && rectScrollBottom.Contains(MousePosition))                  MuMechGUI.SetEditorScrollYPosition(ScrollPosition.y + (Time.deltaTime * 40));
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,WindowEnd,The following statement contains a magic number: if (draggingItem && rectScrollTop.Contains(MousePosition))                  MuMechGUI.SetEditorScrollYPosition(ScrollPosition.y - (Time.deltaTime * 40));
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,OnGUIEvery,The following statement contains a magic number: if (draggingItem && (ServoDragging != null || GroupDragging!=null)) {                  //set the Style                  //set and draw the text like a tooltip                  String Message = "Moving ";                  if(GroupDragging!=null) Message += " group: " + GroupDragging.Name;                  if(ServoDragging!=null) Message += " servo: " + ServoDragging.Name;                  Rect LabelPos = new Rect(Input.mousePosition.x - 5' Screen.height - Input.mousePosition.y - 9' 200' 22);                  GUI.Label(LabelPos' Message' styleDragTooltip);                    //On top of everything                  GUI.depth = 0;              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,OnGUIEvery,The following statement contains a magic number: if (draggingItem && (ServoDragging != null || GroupDragging!=null)) {                  //set the Style                  //set and draw the text like a tooltip                  String Message = "Moving ";                  if(GroupDragging!=null) Message += " group: " + GroupDragging.Name;                  if(ServoDragging!=null) Message += " servo: " + ServoDragging.Name;                  Rect LabelPos = new Rect(Input.mousePosition.x - 5' Screen.height - Input.mousePosition.y - 9' 200' 22);                  GUI.Label(LabelPos' Message' styleDragTooltip);                    //On top of everything                  GUI.depth = 0;              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,OnGUIEvery,The following statement contains a magic number: if (draggingItem && (ServoDragging != null || GroupDragging!=null)) {                  //set the Style                  //set and draw the text like a tooltip                  String Message = "Moving ";                  if(GroupDragging!=null) Message += " group: " + GroupDragging.Name;                  if(ServoDragging!=null) Message += " servo: " + ServoDragging.Name;                  Rect LabelPos = new Rect(Input.mousePosition.x - 5' Screen.height - Input.mousePosition.y - 9' 200' 22);                  GUI.Label(LabelPos' Message' styleDragTooltip);                    //On top of everything                  GUI.depth = 0;              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,OnGUIEvery,The following statement contains a magic number: if (draggingItem && (ServoDragging != null || GroupDragging!=null)) {                  //set the Style                  //set and draw the text like a tooltip                  String Message = "Moving ";                  if(GroupDragging!=null) Message += " group: " + GroupDragging.Name;                  if(ServoDragging!=null) Message += " servo: " + ServoDragging.Name;                  Rect LabelPos = new Rect(Input.mousePosition.x - 5' Screen.height - Input.mousePosition.y - 9' 200' 22);                  GUI.Label(LabelPos' Message' styleDragTooltip);                    //On top of everything                  GUI.depth = 0;              }
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragInsert.border = new RectOffset(8' 8' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragInsert.border = new RectOffset(8' 8' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragInsert.border = new RectOffset(8' 8' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragInsert.border = new RectOffset(8' 8' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.fontSize = 12;
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.border = new RectOffset(3' 3' 3' 3);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,InfernalRobotics,GUIDragAndDrop,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,InitStyles,The following statement contains a magic number: styleDragTooltip.padding = new RectOffset(4' 4' 6' 4);
Magic Number,InfernalRobotics,GroupDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The following statement contains a magic number: newG.GroupRect = new Rect(iconRect) {y=iconRect.y-5' width = windowWidth - 50'height=52 };
Magic Number,InfernalRobotics,GroupDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The following statement contains a magic number: newG.GroupRect = new Rect(iconRect) {y=iconRect.y-5' width = windowWidth - 50'height=52 };
Magic Number,InfernalRobotics,GroupDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The following statement contains a magic number: newG.GroupRect = new Rect(iconRect) {y=iconRect.y-5' width = windowWidth - 50'height=52 };
Magic Number,InfernalRobotics,ServoDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The following statement contains a magic number: newS.ServoRect = new Rect(iconRect) {y=iconRect.y - 5' width = windowWidth - 80'height=iconRect.height + 7 };
Magic Number,InfernalRobotics,ServoDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The following statement contains a magic number: newS.ServoRect = new Rect(iconRect) {y=iconRect.y - 5' width = windowWidth - 80'height=iconRect.height + 7 };
Magic Number,InfernalRobotics,ServoDetailsList,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\GUIDragAndDrop.cs,Add,The following statement contains a magic number: newS.ServoRect = new Rect(iconRect) {y=iconRect.y - 5' width = windowWidth - 80'height=iconRect.height + 7 };
Magic Number,InfernalRobotics,Utilities,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Utilities.cs,LoadImage,The following statement contains a magic number: if (File.Exists<T>(filename))              {                  var bytes = File.ReadAllBytes<T>(filename);                  Texture2D texture = new Texture2D(16' 16' TextureFormat.ARGB32' false);                  texture.LoadImage(bytes);                  return texture;              }              else              {                  return null;              }
Magic Number,InfernalRobotics,Utilities,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Utilities.cs,LoadImage,The following statement contains a magic number: if (File.Exists<T>(filename))              {                  var bytes = File.ReadAllBytes<T>(filename);                  Texture2D texture = new Texture2D(16' 16' TextureFormat.ARGB32' false);                  texture.LoadImage(bytes);                  return texture;              }              else              {                  return null;              }
Missing Default,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,MovePlusAction,The following switch statement is missing a default case: switch (param.type)              {                  case KSPActionType.Activate:                      moveFlags |= 0x100;                      break;                  case KSPActionType.Deactivate:                      moveFlags &= ~0x100;                      break;              }
Missing Default,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,MoveMinusAction,The following switch statement is missing a default case: switch (param.type)              {                  case KSPActionType.Activate:                      moveFlags |= 0x200;                      break;                  case KSPActionType.Deactivate:                      moveFlags &= ~0x200;                      break;              }
Missing Default,MuMech,MuMechToggle,C:\repos\sirkut_InfernalRobotics\InfernalRobotics\InfernalRobotics\Toggle.cs,MoveCenterAction,The following switch statement is missing a default case: switch (param.type)              {                  case KSPActionType.Activate:                      moveFlags |= 0x400;                      break;                  case KSPActionType.Deactivate:                      moveFlags &= ~0x400;                      break;              }
