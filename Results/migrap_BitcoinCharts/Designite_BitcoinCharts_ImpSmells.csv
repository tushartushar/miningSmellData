Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,BitcoinCharts.Net.Http.Formatting,Extensions,C:\repos\migrap_BitcoinCharts\src\BitcoinCharts\Net\Http\Formatting\TradeMediaTypeFormatter.cs,Add,The method has 5 parameters.
Magic Number,BitcoinCharts.Json.Converters,EpochDateTimeOffsetConverter,C:\repos\migrap_BitcoinCharts\src\BitcoinCharts\Json\Converters\EpochDateTimeOffsetConverter.cs,ReadJson,The following statement contains a magic number: if (reader.TokenType == JsonToken.String) {  	var value = long.Parse ((string)reader.Value);  	return Epoch.AddMilliseconds (value / 1000);  }  
Magic Number,BitcoinCharts.Json.Converters,EpochDateTimeOffsetConverter,C:\repos\migrap_BitcoinCharts\src\BitcoinCharts\Json\Converters\EpochDateTimeOffsetConverter.cs,ReadJson,The following statement contains a magic number: return Epoch.AddMilliseconds (value / 1000);  
Magic Number,BitcoinCharts.Net.Http.Formatting,TradeMediaTypeFormatter,C:\repos\migrap_BitcoinCharts\src\BitcoinCharts\Net\Http\Formatting\TradeMediaTypeFormatter.cs,ReadFromStreamAsync,The following statement contains a magic number: using (var reader = new StreamReader (stream)) {  	var line = reader.ReadLine ();  	var seperator = "'".ToCharArray ();  	while (null != (line = reader.ReadLine ())) {  		var parts = line.Split (seperator);  		var unixtime = parts [0].Parse ();  		var price = parts [1].Parse ();  		var quantity = parts [2].Parse ();  		var datetime = Epoch.AddSeconds (unixtime);  		trades.Add (symbol' datetime' price' quantity);  	}  }  
Magic Number,BitcoinCharts.Net.Http.Formatting,TradeMediaTypeFormatter,C:\repos\migrap_BitcoinCharts\src\BitcoinCharts\Net\Http\Formatting\TradeMediaTypeFormatter.cs,ReadFromStreamAsync,The following statement contains a magic number: while (null != (line = reader.ReadLine ())) {  	var parts = line.Split (seperator);  	var unixtime = parts [0].Parse ();  	var price = parts [1].Parse ();  	var quantity = parts [2].Parse ();  	var datetime = Epoch.AddSeconds (unixtime);  	trades.Add (symbol' datetime' price' quantity);  }  
