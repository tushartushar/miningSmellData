Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,OnUpdate,Cyclomatic complexity of the method is 12
Long Parameter List,SnowyPeak.Duality.Plugin.Frozen.FX,LightningBolt,C:\repos\SirePi_duality-frozen\FX\LightningBolt.cs,SetData,The method has 9 parameters.
Long Parameter List,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,SetData,The method has 11 parameters.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The length of the statement  "	inCanvas.DrawRect (this.GameObj.Transform.Pos.X' this.GameObj.Transform.Pos.Y' this.GameObj.Transform.Pos.Z - (Size.Z / 2)' Size.X' Size.Y); " is 140.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The length of the statement  "	inCanvas.DrawRect (this.GameObj.Transform.Pos.X' this.GameObj.Transform.Pos.Y' this.GameObj.Transform.Pos.Z' Size.X' Size.Y); " is 125.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The length of the statement  "	inCanvas.DrawRect (this.GameObj.Transform.Pos.X' this.GameObj.Transform.Pos.Y' this.GameObj.Transform.Pos.Z + (Size.Z / 2)' Size.X' Size.Y); " is 140.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXRectangle,C:\repos\SirePi_duality-frozen\FX\Components\FXRectangle.cs,_DrawInEditor,The length of the statement  "	inCanvas.DrawRect (this.GameObj.Transform.Pos.X' this.GameObj.Transform.Pos.Y' this.GameObj.Transform.Pos.Z' Size.X' Size.Y); " is 125.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleRepulsor,C:\repos\SirePi_duality-frozen\FX\Components\ParticleRepulsor.cs,AlterParticle,The length of the statement  "			inParticle.Direction -= MathF.CircularDist (originalAngle' targetAngle) * MathF.TurnDir (originalAngle' targetAngle) * strength; " is 128.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleAttractor,C:\repos\SirePi_duality-frozen\FX\Components\ParticleAttractor.cs,AlterParticle,The length of the statement  "			inParticle.Direction += MathF.CircularDist (originalAngle' targetAngle) * MathF.TurnDir (originalAngle' targetAngle) * strength; " is 128.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,InitializeParticle,The length of the statement  "	inParticle.SetData (_particleMaterial' origin' movementSpeed' rotationSpeed' scaleSpeed' rotation' _emitterDirection + direction' scale' ttl' _colorRange' RandomGeometryStrength); " is 179.
Long Statement,SnowyPeak.Duality.Plugin.Frozen.FX,LightningBolt,C:\repos\SirePi_duality-frozen\FX\LightningBolt.cs,PrepareTextureForDrawDevice,The length of the statement  "		BatchInfo bi = new BatchInfo (DrawTechnique.Add' Colors.White' new ContentRef<Texture> (new Texture (new ContentRef<Pixmap> (new Pixmap ())) { " is 142.
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The following statement contains a magic number: inCanvas.State.TransformHandle = Size.Xy / 2;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The following statement contains a magic number: inCanvas.DrawRect (this.GameObj.Transform.Pos.X' this.GameObj.Transform.Pos.Y' this.GameObj.Transform.Pos.Z - (Size.Z / 2)' Size.X' Size.Y);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The following statement contains a magic number: inCanvas.State.ColorTint = new ColorRgba (inCanvas.State.ColorTint) {  	A = (byte)(inCanvas.State.ColorTint.A / 1.5)  };  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The following statement contains a magic number: inCanvas.State.ColorTint = new ColorRgba (inCanvas.State.ColorTint) {  	A = (byte)(inCanvas.State.ColorTint.A / 1.5)  };  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_DrawInEditor,The following statement contains a magic number: inCanvas.DrawRect (this.GameObj.Transform.Pos.X' this.GameObj.Transform.Pos.Y' this.GameObj.Transform.Pos.Z + (Size.Z / 2)' Size.X' Size.Y);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXCube,C:\repos\SirePi_duality-frozen\FX\Components\FXCube.cs,_GetPoint,The following statement contains a magic number: result = result * Size / 2;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXArea,C:\repos\SirePi_duality-frozen\FX\Components\FXArea.cs,DrawInEditor,The following statement contains a magic number: Utilities.DrawCross (inCanvas' GameObj.Transform.Pos' 10);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXRectangle,C:\repos\SirePi_duality-frozen\FX\Components\FXRectangle.cs,_DrawInEditor,The following statement contains a magic number: inCanvas.State.TransformHandle = Size / 2;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,FXRectangle,C:\repos\SirePi_duality-frozen\FX\Components\FXRectangle.cs,_GetPoint,The following statement contains a magic number: result = result * Size / 2;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Lightning,The following statement contains a magic number: Sway = 100;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Lightning,The following statement contains a magic number: DetailLevel = 5;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXSource != null && FXTarget != null) {  		Canvas c = new Canvas (device);  		FXSource.DrawInEditor (c' Colors.MediumPurple);  		FXTarget.DrawInEditor (c' Colors.MediumPurple);  		Vector3 src = FXSource.GameObj.Transform.Pos;  		Vector3 tar = FXTarget.GameObj.Transform.Pos;  		c.PushState ();  		Vector3 line = tar - src;  		Vector2 normal = line.Xy.PerpendicularLeft;  		Vector3 p1 = line * 0.33f;  		Vector3 p2 = line * 0.33f;  		Vector3 p3 = line * 0.67f;  		Vector3 p4 = line * 0.67f;  		p1 += src + new Vector3 (normal * .04f' p1.Z);  		p2 += src + new Vector3 (normal * -.02f' p2.Z);  		p3 += src + new Vector3 (normal * .02f' p3.Z);  		p4 += src + new Vector3 (normal * -.04f' p4.Z);  		c.State.ColorTint = Colors.Pink;  		c.DrawLine (src.X' src.Y' src.Z' p1.X' p1.Y' p1.Z);  		c.DrawLine (p1.X' p1.Y' p1.Z' p2.X' p2.Y' p2.Z);  		c.DrawLine (p2.X' p2.Y' p2.Z' p3.X' p3.Y' p3.Z);  		c.DrawLine (p3.X' p3.Y' p3.Z' p4.X' p4.Y' p4.Z);  		c.DrawLine (p4.X' p4.Y' p4.Z' tar.X' tar.Y' tar.Z);  		c.PopState ();  	}  }  else {  	foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  		VertexC1P3T2[] v = new VertexC1P3T2[4];  		if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  			bolt.PrepareTextureForDrawDevice (device);  		}  		LightningBolt.BoltData bd = bolt.BatchInfos [device];  		Vector2 axis = (bd.End - bd.Start).Xy;  		Vector2 normal = axis.PerpendicularLeft.Normalized;  		Vector3 start = bd.Start;  		Vector3 end = bd.End;  		float scaleStartTemp = 1;  		float scaleEndTemp = 1;  		device.PreprocessCoords (ref start' ref scaleStartTemp);  		device.PreprocessCoords (ref end' ref scaleEndTemp);  		v [0] = new VertexC1P3T2 ();  		v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [0].TexCoord = Vector2.Zero;  		v [0].Color = bolt.CurrentColor;  		v [1] = new VertexC1P3T2 ();  		v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  		v [1].TexCoord = Vector2.UnitY;  		v [1].Color = bolt.CurrentColor;  		v [2] = new VertexC1P3T2 ();  		v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [2].TexCoord = new Vector2 (1' 1);  		v [2].Color = bolt.CurrentColor;  		v [3] = new VertexC1P3T2 ();  		v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  		v [3].TexCoord = Vector2.UnitX;  		v [3].Color = bolt.CurrentColor;  		device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: foreach (LightningBolt bolt in _bolts.Where (b => b.IsAlive)) {  	VertexC1P3T2[] v = new VertexC1P3T2[4];  	if (!bolt.BatchInfos.ContainsKey (device) || !bolt.BatchInfos [device].IsReady) {  		bolt.PrepareTextureForDrawDevice (device);  	}  	LightningBolt.BoltData bd = bolt.BatchInfos [device];  	Vector2 axis = (bd.End - bd.Start).Xy;  	Vector2 normal = axis.PerpendicularLeft.Normalized;  	Vector3 start = bd.Start;  	Vector3 end = bd.End;  	float scaleStartTemp = 1;  	float scaleEndTemp = 1;  	device.PreprocessCoords (ref start' ref scaleStartTemp);  	device.PreprocessCoords (ref end' ref scaleEndTemp);  	v [0] = new VertexC1P3T2 ();  	v [0].Pos = start - new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [0].TexCoord = Vector2.Zero;  	v [0].Color = bolt.CurrentColor;  	v [1] = new VertexC1P3T2 ();  	v [1].Pos = start + new Vector3 (normal * Sway * scaleStartTemp' 0);  	v [1].TexCoord = Vector2.UnitY;  	v [1].Color = bolt.CurrentColor;  	v [2] = new VertexC1P3T2 ();  	v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [2].TexCoord = new Vector2 (1' 1);  	v [2].Color = bolt.CurrentColor;  	v [3] = new VertexC1P3T2 ();  	v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  	v [3].TexCoord = Vector2.UnitX;  	v [3].Color = bolt.CurrentColor;  	device.AddVertices (bd.BatchInfo' VertexMode.Quads' v);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [2] = new VertexC1P3T2 ();  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [2].Pos = end + new Vector3 (normal * Sway * scaleEndTemp' 0);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [2].TexCoord = new Vector2 (1' 1);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [2].Color = bolt.CurrentColor;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [3] = new VertexC1P3T2 ();  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [3].Pos = end - new Vector3 (normal * Sway * scaleEndTemp' 0);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [3].TexCoord = Vector2.UnitX;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,Lightning,C:\repos\SirePi_duality-frozen\FX\Components\Lightning.cs,Draw,The following statement contains a magic number: v [3].Color = bolt.CurrentColor;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleAlterator,C:\repos\SirePi_duality-frozen\FX\Components\ParticleAlterator.cs,Draw,The following statement contains a magic number: if (Utilities.IsDualityEditor) {  	Canvas c = new Canvas (device);  	c.State.ColorTint = Colors.Black;  	Utilities.DrawCross (c' GameObj.Transform.Pos' 10);  	_DrawInEditor (c);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleAlterator,C:\repos\SirePi_duality-frozen\FX\Components\ParticleAlterator.cs,Draw,The following statement contains a magic number: Utilities.DrawCross (c' GameObj.Transform.Pos' 10);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,ReInitialize,The following statement contains a magic number: _emitterDirection = EmitterDirection * MathF.Pi / 180;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,ReInitialize,The following statement contains a magic number: _emitterRotationSpeed = EmitterRotationSpeed * MathF.Pi / 180;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,ReInitialize,The following statement contains a magic number: if (reinitializeParticles || _particleVertices.Length < _particlesNumberRange.Max * 4) {  	_particleVertices = new VertexC1P3T2[_particlesNumberRange.Max * 4];  	_particles = new Particle[_particlesNumberRange.Max];  	for (int i = 0; i < _particles.Length; i++) {  		_particles [i] = new Particle ();  	}  	_timeSinceLastParticle = 0;  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,ReInitialize,The following statement contains a magic number: if (reinitializeParticles || _particleVertices.Length < _particlesNumberRange.Max * 4) {  	_particleVertices = new VertexC1P3T2[_particlesNumberRange.Max * 4];  	_particles = new Particle[_particlesNumberRange.Max];  	for (int i = 0; i < _particles.Length; i++) {  		_particles [i] = new Particle ();  	}  	_timeSinceLastParticle = 0;  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,ReInitialize,The following statement contains a magic number: _particleVertices = new VertexC1P3T2[_particlesNumberRange.Max * 4];  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXArea != null) {  		Canvas c = new Canvas (device);  		FXArea.DrawInEditor (c' Colors.Cyan);  	}  }  else {  	if (_particlesAlive > 0) {  		Vector3 minPos = FXArea.GameObj.Transform.Pos;  		minPos.Z += FXArea.ZRange.Min;  		float minScale = 1;  		Vector3 maxPos = FXArea.GameObj.Transform.Pos;  		maxPos.Z += FXArea.ZRange.Max;  		float maxScale = 1;  		device.PreprocessCoords (ref minPos' ref minScale);  		device.PreprocessCoords (ref maxPos' ref maxScale);  		Vector3Range posRange = new Vector3Range (minPos' maxPos);  		FloatRange scaleRange = new FloatRange (minScale' maxScale);  		Vector3 pos = minPos;  		float scale = minScale;  		int index = 0;  		foreach (Particle p in _particles) {  			if (p.IsAlive) {  				bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  				if (FXArea.ZRange.Delta != 0) {  					float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  					pos = posRange.Lerp (zScale);  					scale = scaleRange.Lerp (zScale);  				}  				if (toDraw) {  					p.UpdateVertices (device' pos' scale);  					Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  				}  				index++;  			}  		}  		device.AddVertices (_particleMaterial.Material' VertexMode.Quads' _particleVertices' index * 4);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXArea != null) {  		Canvas c = new Canvas (device);  		FXArea.DrawInEditor (c' Colors.Cyan);  	}  }  else {  	if (_particlesAlive > 0) {  		Vector3 minPos = FXArea.GameObj.Transform.Pos;  		minPos.Z += FXArea.ZRange.Min;  		float minScale = 1;  		Vector3 maxPos = FXArea.GameObj.Transform.Pos;  		maxPos.Z += FXArea.ZRange.Max;  		float maxScale = 1;  		device.PreprocessCoords (ref minPos' ref minScale);  		device.PreprocessCoords (ref maxPos' ref maxScale);  		Vector3Range posRange = new Vector3Range (minPos' maxPos);  		FloatRange scaleRange = new FloatRange (minScale' maxScale);  		Vector3 pos = minPos;  		float scale = minScale;  		int index = 0;  		foreach (Particle p in _particles) {  			if (p.IsAlive) {  				bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  				if (FXArea.ZRange.Delta != 0) {  					float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  					pos = posRange.Lerp (zScale);  					scale = scaleRange.Lerp (zScale);  				}  				if (toDraw) {  					p.UpdateVertices (device' pos' scale);  					Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  				}  				index++;  			}  		}  		device.AddVertices (_particleMaterial.Material' VertexMode.Quads' _particleVertices' index * 4);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (_inEditor) {  	if (FXArea != null) {  		Canvas c = new Canvas (device);  		FXArea.DrawInEditor (c' Colors.Cyan);  	}  }  else {  	if (_particlesAlive > 0) {  		Vector3 minPos = FXArea.GameObj.Transform.Pos;  		minPos.Z += FXArea.ZRange.Min;  		float minScale = 1;  		Vector3 maxPos = FXArea.GameObj.Transform.Pos;  		maxPos.Z += FXArea.ZRange.Max;  		float maxScale = 1;  		device.PreprocessCoords (ref minPos' ref minScale);  		device.PreprocessCoords (ref maxPos' ref maxScale);  		Vector3Range posRange = new Vector3Range (minPos' maxPos);  		FloatRange scaleRange = new FloatRange (minScale' maxScale);  		Vector3 pos = minPos;  		float scale = minScale;  		int index = 0;  		foreach (Particle p in _particles) {  			if (p.IsAlive) {  				bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  				if (FXArea.ZRange.Delta != 0) {  					float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  					pos = posRange.Lerp (zScale);  					scale = scaleRange.Lerp (zScale);  				}  				if (toDraw) {  					p.UpdateVertices (device' pos' scale);  					Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  				}  				index++;  			}  		}  		device.AddVertices (_particleMaterial.Material' VertexMode.Quads' _particleVertices' index * 4);  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (_particlesAlive > 0) {  	Vector3 minPos = FXArea.GameObj.Transform.Pos;  	minPos.Z += FXArea.ZRange.Min;  	float minScale = 1;  	Vector3 maxPos = FXArea.GameObj.Transform.Pos;  	maxPos.Z += FXArea.ZRange.Max;  	float maxScale = 1;  	device.PreprocessCoords (ref minPos' ref minScale);  	device.PreprocessCoords (ref maxPos' ref maxScale);  	Vector3Range posRange = new Vector3Range (minPos' maxPos);  	FloatRange scaleRange = new FloatRange (minScale' maxScale);  	Vector3 pos = minPos;  	float scale = minScale;  	int index = 0;  	foreach (Particle p in _particles) {  		if (p.IsAlive) {  			bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  			if (FXArea.ZRange.Delta != 0) {  				float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  				pos = posRange.Lerp (zScale);  				scale = scaleRange.Lerp (zScale);  			}  			if (toDraw) {  				p.UpdateVertices (device' pos' scale);  				Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  			}  			index++;  		}  	}  	device.AddVertices (_particleMaterial.Material' VertexMode.Quads' _particleVertices' index * 4);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (_particlesAlive > 0) {  	Vector3 minPos = FXArea.GameObj.Transform.Pos;  	minPos.Z += FXArea.ZRange.Min;  	float minScale = 1;  	Vector3 maxPos = FXArea.GameObj.Transform.Pos;  	maxPos.Z += FXArea.ZRange.Max;  	float maxScale = 1;  	device.PreprocessCoords (ref minPos' ref minScale);  	device.PreprocessCoords (ref maxPos' ref maxScale);  	Vector3Range posRange = new Vector3Range (minPos' maxPos);  	FloatRange scaleRange = new FloatRange (minScale' maxScale);  	Vector3 pos = minPos;  	float scale = minScale;  	int index = 0;  	foreach (Particle p in _particles) {  		if (p.IsAlive) {  			bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  			if (FXArea.ZRange.Delta != 0) {  				float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  				pos = posRange.Lerp (zScale);  				scale = scaleRange.Lerp (zScale);  			}  			if (toDraw) {  				p.UpdateVertices (device' pos' scale);  				Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  			}  			index++;  		}  	}  	device.AddVertices (_particleMaterial.Material' VertexMode.Quads' _particleVertices' index * 4);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (_particlesAlive > 0) {  	Vector3 minPos = FXArea.GameObj.Transform.Pos;  	minPos.Z += FXArea.ZRange.Min;  	float minScale = 1;  	Vector3 maxPos = FXArea.GameObj.Transform.Pos;  	maxPos.Z += FXArea.ZRange.Max;  	float maxScale = 1;  	device.PreprocessCoords (ref minPos' ref minScale);  	device.PreprocessCoords (ref maxPos' ref maxScale);  	Vector3Range posRange = new Vector3Range (minPos' maxPos);  	FloatRange scaleRange = new FloatRange (minScale' maxScale);  	Vector3 pos = minPos;  	float scale = minScale;  	int index = 0;  	foreach (Particle p in _particles) {  		if (p.IsAlive) {  			bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  			if (FXArea.ZRange.Delta != 0) {  				float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  				pos = posRange.Lerp (zScale);  				scale = scaleRange.Lerp (zScale);  			}  			if (toDraw) {  				p.UpdateVertices (device' pos' scale);  				Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  			}  			index++;  		}  	}  	device.AddVertices (_particleMaterial.Material' VertexMode.Quads' _particleVertices' index * 4);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: foreach (Particle p in _particles) {  	if (p.IsAlive) {  		bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  		if (FXArea.ZRange.Delta != 0) {  			float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  			pos = posRange.Lerp (zScale);  			scale = scaleRange.Lerp (zScale);  		}  		if (toDraw) {  			p.UpdateVertices (device' pos' scale);  			Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  		}  		index++;  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: foreach (Particle p in _particles) {  	if (p.IsAlive) {  		bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  		if (FXArea.ZRange.Delta != 0) {  			float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  			pos = posRange.Lerp (zScale);  			scale = scaleRange.Lerp (zScale);  		}  		if (toDraw) {  			p.UpdateVertices (device' pos' scale);  			Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  		}  		index++;  	}  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (p.IsAlive) {  	bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  	if (FXArea.ZRange.Delta != 0) {  		float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  		pos = posRange.Lerp (zScale);  		scale = scaleRange.Lerp (zScale);  	}  	if (toDraw) {  		p.UpdateVertices (device' pos' scale);  		Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  	}  	index++;  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (p.IsAlive) {  	bool toDraw = DrawParticlesOffScreen || device.IsCoordInView (p.Position);  	if (FXArea.ZRange.Delta != 0) {  		float zScale = 1 - ((FXArea.ZRange.Max + FXArea.GameObj.Transform.Pos.Z - p.Position.Z) / FXArea.ZRange.Delta);  		pos = posRange.Lerp (zScale);  		scale = scaleRange.Lerp (zScale);  	}  	if (toDraw) {  		p.UpdateVertices (device' pos' scale);  		Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  	}  	index++;  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (toDraw) {  	p.UpdateVertices (device' pos' scale);  	Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: if (toDraw) {  	p.UpdateVertices (device' pos' scale);  	Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  }  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: Array.Copy (p.Vertices' 0' _particleVertices' index * 4' 4);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX.Components,ParticleEmitter,C:\repos\SirePi_duality-frozen\FX\Components\ParticleEmitter.cs,Draw,The following statement contains a magic number: device.AddVertices (_particleMaterial.Material' VertexMode.Quads' _particleVertices' index * 4);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,LightningBolt,C:\repos\SirePi_duality-frozen\FX\LightningBolt.cs,SetData,The following statement contains a magic number: _sway2 = sway * 2;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,Particle,The following statement contains a magic number: _vertexFactors = new Vector2[4];  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,Particle,The following statement contains a magic number: Vertices = new VertexC1P3T2[4];  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,SetData,The following statement contains a magic number: _vertexFactors [2] = Vector2.One - MathF.Rnd.NextVector2 (0' 0' randomFactor' randomFactor);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,SetData,The following statement contains a magic number: _vertexFactors [3] = Vector2.One - MathF.Rnd.NextVector2 (0' 0' randomFactor' randomFactor);  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [2].Pos.X = preprocessedPosition.X + edge3.X;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [2].Pos.Y = preprocessedPosition.Y + edge3.Y;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [2].Pos.Z = preprocessedPosition.Z;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [2].TexCoord.X = _uvRect.X + _uvRect.W;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [2].TexCoord.Y = _uvRect.Y + _uvRect.H;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [2].Color = _currentColor;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [3].Pos.X = preprocessedPosition.X + edge4.X;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [3].Pos.Y = preprocessedPosition.Y + edge4.Y;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [3].Pos.Z = preprocessedPosition.Z;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [3].TexCoord.X = _uvRect.X + _uvRect.W;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [3].TexCoord.Y = _uvRect.Y;  
Magic Number,SnowyPeak.Duality.Plugin.Frozen.FX,Particle,C:\repos\SirePi_duality-frozen\FX\Particle.cs,UpdateVertices,The following statement contains a magic number: Vertices [3].Color = _currentColor;  
