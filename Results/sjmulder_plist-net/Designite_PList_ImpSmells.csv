Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CE.iPhone.PList,PListDate,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListDate.cs,ReadBinary,Cyclomatic complexity of the method is 13
Complex Method,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,ReadBinary,Cyclomatic complexity of the method is 15
Complex Method,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,WriteBinary,Cyclomatic complexity of the method is 12
Complex Method,CE.iPhone.PList,PListReal,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListReal.cs,ReadBinary,Cyclomatic complexity of the method is 13
Complex Method,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,FormatIdx,Cyclomatic complexity of the method is 11
Long Statement,CE.iPhone.PList,PListArray,C:\repos\sjmulder_plist-net\PList\PListContainer\PListArray.cs,ReadBinary,The length of the statement  "		Add (reader.ReadInternal (reader.ElementIdxSize == 1 ? buf [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (buf' 2 * i)))); " is 132.
Long Statement,CE.iPhone.PList,PListDict,C:\repos\sjmulder_plist-net\PList\PListContainer\PListDict.cs,ReadBinary,The length of the statement  "		IPListElement plKey = reader.ReadInternal (reader.ElementIdxSize == 1 ? bufKeys [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (bufKeys' 2 * i))); " is 156.
Long Statement,CE.iPhone.PList,PListDict,C:\repos\sjmulder_plist-net\PList\PListContainer\PListDict.cs,ReadBinary,The length of the statement  "		IPListElement plVal = reader.ReadInternal (reader.ElementIdxSize == 1 ? bufVals [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (bufVals' 2 * i))); " is 156.
Long Statement,CE.iPhone.PList,PListRoot,C:\repos\sjmulder_plist-net\PList\PListRoot.cs,Save,The length of the statement  "		xmlWriter.WriteDocType ("plist"' "-//Apple Computer//DTD PLIST 1.0//EN"' "http://www.apple.com/DTDs/PropertyList-1.0.dtd"' null); " is 129.
Magic Number,CE.iPhone.PList,PListArray,C:\repos\sjmulder_plist-net\PList\PListContainer\PListArray.cs,ReadBinary,The following statement contains a magic number: for (int i = 0; i < reader.CurrentElementLength; i++) {  	Add (reader.ReadInternal (reader.ElementIdxSize == 1 ? buf [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (buf' 2 * i))));  }  
Magic Number,CE.iPhone.PList,PListArray,C:\repos\sjmulder_plist-net\PList\PListContainer\PListArray.cs,ReadBinary,The following statement contains a magic number: Add (reader.ReadInternal (reader.ElementIdxSize == 1 ? buf [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (buf' 2 * i))));  
Magic Number,CE.iPhone.PList,PListDict,C:\repos\sjmulder_plist-net\PList\PListContainer\PListDict.cs,ReadBinary,The following statement contains a magic number: for (int i = 0; i < reader.CurrentElementLength; i++) {  	IPListElement plKey = reader.ReadInternal (reader.ElementIdxSize == 1 ? bufKeys [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (bufKeys' 2 * i)));  	if (!(plKey is PListString))  		throw new PListFormatException ("Key is no String");  	IPListElement plVal = reader.ReadInternal (reader.ElementIdxSize == 1 ? bufVals [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (bufVals' 2 * i)));  	Add ((PListString)plKey' plVal);  }  
Magic Number,CE.iPhone.PList,PListDict,C:\repos\sjmulder_plist-net\PList\PListContainer\PListDict.cs,ReadBinary,The following statement contains a magic number: for (int i = 0; i < reader.CurrentElementLength; i++) {  	IPListElement plKey = reader.ReadInternal (reader.ElementIdxSize == 1 ? bufKeys [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (bufKeys' 2 * i)));  	if (!(plKey is PListString))  		throw new PListFormatException ("Key is no String");  	IPListElement plVal = reader.ReadInternal (reader.ElementIdxSize == 1 ? bufVals [i] : IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (bufVals' 2 * i)));  	Add ((PListString)plKey' plVal);  }  
Magic Number,CE.iPhone.PList,PListBool,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListBool.cs,ReadBinary,The following statement contains a magic number: if (reader.CurrentElementLength != 8 && reader.CurrentElementLength != 9)  	throw new PListFormatException ();  
Magic Number,CE.iPhone.PList,PListBool,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListBool.cs,ReadBinary,The following statement contains a magic number: if (reader.CurrentElementLength != 8 && reader.CurrentElementLength != 9)  	throw new PListFormatException ();  
Magic Number,CE.iPhone.PList,PListBool,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListBool.cs,ReadBinary,The following statement contains a magic number: Value = reader.CurrentElementLength == 9;  
Magic Number,CE.iPhone.PList,PListBool,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListBool.cs,GetPListElementLength,The following statement contains a magic number: return Value ? 9 : 8;  
Magic Number,CE.iPhone.PList,PListBool,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListBool.cs,GetPListElementLength,The following statement contains a magic number: return Value ? 9 : 8;  
Magic Number,CE.iPhone.PList,PListDate,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListDate.cs,ReadBinary,The following statement contains a magic number: switch (reader.CurrentElementLength) {  case 0:  	throw new PListFormatException ("Date < 32Bit");  case 1:  	throw new PListFormatException ("Date < 32Bit");  case 2:  	ticks = BitConverter.ToSingle (buf.Reverse ().ToArray ()' 0);  	break;  case 3:  	ticks = BitConverter.ToDouble (buf.Reverse ().ToArray ()' 0);  	break;  default:  	throw new PListFormatException ("Date > 64Bit");  }  
Magic Number,CE.iPhone.PList,PListDate,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListDate.cs,ReadBinary,The following statement contains a magic number: switch (reader.CurrentElementLength) {  case 0:  	throw new PListFormatException ("Date < 32Bit");  case 1:  	throw new PListFormatException ("Date < 32Bit");  case 2:  	ticks = BitConverter.ToSingle (buf.Reverse ().ToArray ()' 0);  	break;  case 3:  	ticks = BitConverter.ToDouble (buf.Reverse ().ToArray ()' 0);  	break;  default:  	throw new PListFormatException ("Date > 64Bit");  }  
Magic Number,CE.iPhone.PList,PListDate,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListDate.cs,ReadBinary,The following statement contains a magic number: Value = new DateTime (2001' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (ticks);  
Magic Number,CE.iPhone.PList,PListDate,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListDate.cs,GetPListElementLength,The following statement contains a magic number: return 3;  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,ReadBinary,The following statement contains a magic number: switch (reader.CurrentElementLength) {  case 0:  	Value = buf [0];  	break;  case 1:  	Value = IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (buf' 0));  	break;  case 2:  	Value = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	break;  case 3:  	Value = IPAddress.NetworkToHostOrder (BitConverter.ToInt64 (buf' 0));  	break;  default:  	throw new PListFormatException ("Int > 64Bit");  }  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,ReadBinary,The following statement contains a magic number: switch (reader.CurrentElementLength) {  case 0:  	Value = buf [0];  	break;  case 1:  	Value = IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (buf' 0));  	break;  case 2:  	Value = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	break;  case 3:  	Value = IPAddress.NetworkToHostOrder (BitConverter.ToInt64 (buf' 0));  	break;  default:  	throw new PListFormatException ("Int > 64Bit");  }  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,GetPListElementLength,The following statement contains a magic number: if (Value >= Int32.MinValue && Value <= Int32.MaxValue)  	return 2;  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,GetPListElementLength,The following statement contains a magic number: return 2;  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,GetPListElementLength,The following statement contains a magic number: if (Value >= Int64.MinValue && Value <= Int64.MaxValue)  	return 3;  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,GetPListElementLength,The following statement contains a magic number: return 3;  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,WriteBinary,The following statement contains a magic number: switch (length) {  case 0:  	buf = new Byte[] {  		(Byte)Value  	};  	break;  case 1:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Value));  	break;  case 2:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Value));  	break;  case 3:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int64)Value));  	break;  }  
Magic Number,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,WriteBinary,The following statement contains a magic number: switch (length) {  case 0:  	buf = new Byte[] {  		(Byte)Value  	};  	break;  case 1:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Value));  	break;  case 2:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Value));  	break;  case 3:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int64)Value));  	break;  }  
Magic Number,CE.iPhone.PList,PListReal,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListReal.cs,ReadBinary,The following statement contains a magic number: switch (reader.CurrentElementLength) {  case 0:  	throw new PListFormatException ("Real < 32Bit");  case 1:  	throw new PListFormatException ("Real < 32Bit");  case 2:  	Value = BitConverter.ToSingle (buf.Reverse ().ToArray ()' 0);  	break;  case 3:  	Value = BitConverter.ToDouble (buf.Reverse ().ToArray ()' 0);  	break;  default:  	throw new PListFormatException ("Real > 64Bit");  }  
Magic Number,CE.iPhone.PList,PListReal,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListReal.cs,ReadBinary,The following statement contains a magic number: switch (reader.CurrentElementLength) {  case 0:  	throw new PListFormatException ("Real < 32Bit");  case 1:  	throw new PListFormatException ("Real < 32Bit");  case 2:  	Value = BitConverter.ToSingle (buf.Reverse ().ToArray ()' 0);  	break;  case 3:  	Value = BitConverter.ToDouble (buf.Reverse ().ToArray ()' 0);  	break;  default:  	throw new PListFormatException ("Real > 64Bit");  }  
Magic Number,CE.iPhone.PList,PListReal,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListReal.cs,GetPListElementLength,The following statement contains a magic number: return 3;  
Magic Number,CE.iPhone.PList.Internal,PListBinaryReader,C:\repos\sjmulder_plist-net\PList\PListBinaryReader.cs,Read,The following statement contains a magic number: BaseStream.Seek (-32' SeekOrigin.End);  
Magic Number,CE.iPhone.PList.Internal,PListBinaryReader,C:\repos\sjmulder_plist-net\PList\PListBinaryReader.cs,Read,The following statement contains a magic number: ElementIdxSize = header [7];  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < Offsets.Count; i++) {  	Byte[] buf = null;  	switch (offsetSize) {  	case 1:  		buf = new Byte[] {  			(Byte)Offsets [i]  		};  		break;  	case 2:  		buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Offsets [i]));  		break;  	case 4:  		buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Offsets [i]));  		break;  	}  	BaseStream.Write (buf' 0' buf.Length);  }  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < Offsets.Count; i++) {  	Byte[] buf = null;  	switch (offsetSize) {  	case 1:  		buf = new Byte[] {  			(Byte)Offsets [i]  		};  		break;  	case 2:  		buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Offsets [i]));  		break;  	case 4:  		buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Offsets [i]));  		break;  	}  	BaseStream.Write (buf' 0' buf.Length);  }  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: switch (offsetSize) {  case 1:  	buf = new Byte[] {  		(Byte)Offsets [i]  	};  	break;  case 2:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Offsets [i]));  	break;  case 4:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Offsets [i]));  	break;  }  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: switch (offsetSize) {  case 1:  	buf = new Byte[] {  		(Byte)Offsets [i]  	};  	break;  case 2:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Offsets [i]));  	break;  case 4:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Offsets [i]));  	break;  }  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: header [6] = offsetSize;  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: header [7] = ElementIdxSize;  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: BitConverter.GetBytes (IPAddress.HostToNetworkOrder (elemCnt)).CopyTo (header' 12);  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: BitConverter.GetBytes (IPAddress.HostToNetworkOrder (topOffestIdx)).CopyTo (header' 20);  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following statement contains a magic number: BitConverter.GetBytes (IPAddress.HostToNetworkOrder (offsetTableOffset)).CopyTo (header' 28);  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,FormatIdx,The following statement contains a magic number: switch (ElementIdxSize) {  case 1:  	res = new Byte[] {  		(Byte)idx  	};  	break;  case 2:  	res = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)idx));  	break;  case 4:  	res = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)idx));  	break;  default:  	throw new PListFormatException ("Invalid ElementIdxSize");  }  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,FormatIdx,The following statement contains a magic number: switch (ElementIdxSize) {  case 1:  	res = new Byte[] {  		(Byte)idx  	};  	break;  case 2:  	res = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)idx));  	break;  case 4:  	res = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)idx));  	break;  default:  	throw new PListFormatException ("Invalid ElementIdxSize");  }  
Magic Number,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,WriteInternal,The following statement contains a magic number: if (len >= 0x0F) {  	IPListElement extLen = PListElementFactory.Instance.CreateLengthElement (len);  	Byte extLenTypeCode = (Byte)(extLen.TypeCode << 4 | extLen.GetPListElementLength ());  	BaseStream.WriteByte (extLenTypeCode);  	extLen.WriteBinary (this);  }  
Magic Number,CE.iPhone.PList.Internal,PListElementFactory,C:\repos\sjmulder_plist-net\PList\PListElementFactory.cs,PListElementFactory,The following statement contains a magic number: Register ("string"' 5' new PListString ());  
Magic Number,CE.iPhone.PList.Internal,PListElementFactory,C:\repos\sjmulder_plist-net\PList\PListElementFactory.cs,PListElementFactory,The following statement contains a magic number: Register ("ustring"' 6' new PListString ());  
Missing Default,CE.iPhone.PList,PListInteger,C:\repos\sjmulder_plist-net\PList\PListPrimitives\PListInteger.cs,WriteBinary,The following switch statement is missing a default case: switch (length) {  case 0:  	buf = new Byte[] {  		(Byte)Value  	};  	break;  case 1:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Value));  	break;  case 2:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Value));  	break;  case 3:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int64)Value));  	break;  }  
Missing Default,CE.iPhone.PList.Internal,PListBinaryWriter,C:\repos\sjmulder_plist-net\PList\PListBinaryWriter.cs,Write,The following switch statement is missing a default case: switch (offsetSize) {  case 1:  	buf = new Byte[] {  		(Byte)Offsets [i]  	};  	break;  case 2:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int16)Offsets [i]));  	break;  case 4:  	buf = BitConverter.GetBytes (IPAddress.HostToNetworkOrder ((Int32)Offsets [i]));  	break;  }  
