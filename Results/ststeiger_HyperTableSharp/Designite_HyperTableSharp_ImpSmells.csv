Implementation smell,Namespace,Class,File,Method,Description
Long Method,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The method has 294 lines of code.
Long Method,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The method has 200 lines of code.
Long Method,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The method has 175 lines of code.
Complex Method,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,Cyclomatic complexity of the method is 26
Complex Method,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Hypertable.ThriftGen,Cell,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Cell.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,Cyclomatic complexity of the method is 29
Complex Method,Hypertable.ThriftGen,ClientException,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ClientException.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Read,Cyclomatic complexity of the method is 27
Complex Method,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Read,Cyclomatic complexity of the method is 27
Complex Method,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,Cyclomatic complexity of the method is 29
Complex Method,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Hypertable.ThriftGen,NamespaceListing,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\NamespaceListing.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,Cyclomatic complexity of the method is 37
Complex Method,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,Cyclomatic complexity of the method is 33
Complex Method,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,Cyclomatic complexity of the method is 85
Complex Method,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,Cyclomatic complexity of the method is 27
Complex Method,Hypertable.ThriftGen,Schema,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Schema.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Hypertable.Thrift,SerializedCellsReader,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsReader.cs,next,Cyclomatic complexity of the method is 12
Complex Method,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,Cyclomatic complexity of the method is 11
Long Parameter List,Hypertable.Thrift,ThriftClient,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\ThriftClient.cs,create,The method has 5 parameters.
Long Parameter List,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The method has 5 parameters.
Long Parameter List,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The method has 5 parameters.
Long Parameter List,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The method has 14 parameters.
Long Parameter List,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The method has 7 parameters.
Long Parameter List,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The method has 10 parameters.
Long Statement,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The length of the statement  "			if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) { " is 154.
Long Statement,Hypertable.Thrift,SerializedCellsReader,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsReader.cs,reset,The length of the statement  "		throw new java.lang.AssertionError ("SerializedCells version mismatch' expected " + SerializedCellsFlag.VERSION + "' got " + version); " is 134.
Long Statement,Hypertable.Thrift,SerializedCellsReader,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsReader.cs,reset,The length of the statement  "		throw new java.lang.AssertionError ("SerializedCells version mismatch' expected " + SerializedCellsFlag.VERSION + "' got " + version); " is 134.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The length of the statement  "	return add (row_bytes' 0' row_bytes.Length' column_family_bytes' 0' column_family_bytes.Length' column_qualifier_bytes' 0' column_qualifier_bytes.Length' timestamp' value.array ()' value.arrayOffset ()' value.limit ()' SerializedCellsFlag.FLAG_INSERT); " is 252.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row_bytes' 0' row_bytes.Length' null' 0' 0' null' 0' 0' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_ROW); " is 128.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row_bytes' 0' row_bytes.Length' column_family_bytes' 0' column_family_bytes.Length' null' 0' 0' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_COLUMN_FAMILY); " is 178.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row_bytes' 0' row_bytes.Length' column_family_bytes' 0' column_family_bytes.Length' column_qualifier_bytes' 0' column_qualifier_bytes.Length' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_CELL); " is 215.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The length of the statement  "	return add (row.array ()' row.arrayOffset ()' row.limit ()' column_family.array ()' column_family.arrayOffset ()' column_family.limit ()' column_qualifier.array ()' column_qualifier.arrayOffset ()' column_qualifier.limit ()' timestamp' value.array ()' value.arrayOffset ()' value.limit ()' SerializedCellsFlag.FLAG_INSERT); " is 323.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row.array ()' row.arrayOffset ()' row.limit ()' null' 0' 0' null' 0' 0' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_ROW); " is 144.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row.array ()' row.arrayOffset ()' row.limit ()' column_family.array ()' column_family.arrayOffset ()' column_family.limit ()' null' 0' 0' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_COLUMN_FAMILY); " is 220.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row.array ()' row.arrayOffset ()' row.limit ()' column_family.array ()' column_family.arrayOffset ()' column_family.limit ()' column_qualifier.array ()' column_qualifier.arrayOffset ()' column_qualifier.limit ()' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_CELL); " is 286.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row' row_offset' row_length' null' 0' 0' null' 0' 0' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_ROW); " is 125.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row' row_offset' row_length' column_family' column_family_offset' column_family_length' null' 0' 0' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_COLUMN_FAMILY); " is 182.
Long Statement,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_delete,The length of the statement  "	return add (row' row_offset' row_length' column_family' column_family_offset' column_family_length' column_qualifier' column_qualifier_offset' column_qualifier_length' timestamp' null' 0' 0' SerializedCellsFlag.FLAG_DELETE_CELL); " is 229.
Complex Conditional,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The conditional expression  "client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)"  is complex.
Empty Catch Block,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The method has an empty catch block.
Empty Catch Block,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The method has an empty catch block.
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	client = ThriftClient.create ("localhost"' 38080);  	// if (!client.namespace_exists("Tutorial"))  	if (!client.namespace_exists ("test"))  		System.Console.WriteLine ("Namespace test does not exist");  	//client.namespace_create("test");  	client.create_namespace ("mynamespace");  	ns = client.namespace_open ("test");  	// HQL examples  	show (client.hql_query (ns' "show tables").ToString ());  	show (client.hql_query (ns' "select * from thrift_test").ToString ());  	// Schema example  	Schema schema = new Schema ();  	schema = client.table_get_schema (ns' "thrift_test");  	/*                 Iterator ag_it = schema.access_groups.keySet().iterator();                 show("Access groups:");                 while (ag_it.hasNext())                  {                 show("\t" + ag_it.next());                 }                 */show ("Access groups:");  	foreach (string ThisAccessGroup in schema.Access_groups.Keys) {  		show ("\t" + ThisAccessGroup);  	}  	/*                 Iterator cf_it = schema.column_families.keySet().iterator();                 show("Column families:");                 while (cf_it.hasNext())                  {                     show("\t" + cf_it.next());                 }                 */show ("Column families:");  	foreach (string ThisFamily in schema.Column_families.Keys) {  		show ("\t" + ThisFamily);  	}  	// mutator examples  	long mutator = client.mutator_open (ns' "thrift_test"' 0' 0);  	try {  		Cell cell = new Cell ();  		Key key = new Key ();  		key.Row = "java-k1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		//cell.SetValue(vtmp);  		client.mutator_set_cell (mutator' cell);  	}  	finally {  		client.mutator_close (mutator);  	}  	// shared mutator example  	{  		MutateSpec mutate_spec = new MutateSpec ();  		mutate_spec.Appname = "test-java";  		mutate_spec.Flush_interval = 1000;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-put-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.offer_cell (ns' "thrift_test"' mutate_spec' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-put-v2";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.shared_mutator_refresh (ns' "thrift_test"' mutate_spec);  		client.shared_mutator_set_cell (ns' "thrift_test"' mutate_spec' cell);  		System.Threading.Thread.Sleep (2000);  	// scanner examples  	// empty scan spec select all  	// restricted scanspec  	//scanSpec.addToColumns("col:/^.*$/");  	// asynchronous api  	// issue 497  	// End Scope  	}  	System.Console.WriteLine ("Full scan");  	ScanSpec scanSpec = new ScanSpec ();  	long scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell  			cells = client.scanner_get_cells (scanner);  		}  		// End While  	}  	// End Try  	catch {  	}  	finally {  		client.scanner_close (scanner);  	}  	scanSpec.Columns.Add ("col:/^.*$/");  	scanSpec.Row_regexp = "java.*";  	scanSpec.Value_regexp = "v2";  	scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	System.Console.WriteLine ("Restricted scan");  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell   			cells = client.scanner_get_cells (scanner);  		}  		// End While   	}  	catch (System.Exception) {  	}  	finally {  		client.scanner_close (scanner);  	}  	long future = 0;  	long mutator_async_1 = 0;  	long mutator_async_2 = 0;  	long color_scanner = 0;  	long location_scanner = 0;  	long energy_scanner = 0;  	int expected_cells = 6;  	int num_cells = 0;  	try {  		System.Console.WriteLine ("Asynchronous mutator");  		future = client.future_open (0);  		mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		Result result;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-async-put-v1";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_1' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-async-put-v2";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_2' cell);  		client.async_mutator_flush (mutator_async_1);  		client.async_mutator_flush (mutator_async_2);  		int num_flushes = 0;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || result.Is_scan)  				break;  			num_flushes++;  		}  		// Whend  		if (num_flushes > 2) {  			System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  			System.Environment.Exit (1);  		}  		if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  			System.Console.WriteLine ("Future object in unexpected state");  			System.Environment.Exit (1);  		}  	}  	finally {  		client.async_mutator_close (mutator_async_1);  		client.async_mutator_close (mutator_async_2);  	}  	try {  		System.Console.WriteLine ("Asynchronous scan");  		ScanSpec ss = new ScanSpec ();  		color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  		location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  		energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  		Result result;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || !result.Is_scan)  				break;  			foreach (Cell cell in result.Cells) {  				byte[] tmp = cell.Value;  				// string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  				num_cells++;  			}  			// Next cell   			if (num_cells >= 6) {  				client.future_cancel (future);  				break;  			}  		}  		// Whend   		if (!client.future_is_cancelled (future)) {  			System.Console.WriteLine ("Expected future object to be cancelled");  			System.Environment.Exit (1);  		}  	}  	// End Try  	finally {  		client.async_scanner_close (color_scanner);  		client.async_scanner_close (location_scanner);  		client.async_scanner_close (energy_scanner);  		client.future_close (future);  	}  	if (num_cells != 6) {  		System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  		System.Environment.Exit (1);  	}  	{  		Cell cell;  		Key key;  		string str;  		client.hql_query (ns' "drop table if exists java_thrift_test");  		client.hql_query (ns' "create table java_thrift_test ( c1' c2' c3 )");  		mutator = client.mutator_open (ns' "java_thrift_test"' 0' 0);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		key.Column_qualifier = "test";  		cell.Key = key;  		str = "foo";  		// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		cell.Key = key;  		str = "bar";  		//// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		client.mutator_close (mutator);  		HqlResult result = client.hql_query (ns' "select * from java_thrift_test");  		List<Cell> cells = result.Cells;  		int qualifier_count = 0;  		foreach (Cell c in cells) {  			if (c.Key.__isset.column_qualifier && c.Key.Column_qualifier.Length == 0)  				qualifier_count++;  		}  		// Next c  		if (qualifier_count != 1) {  			System.Console.WriteLine ("ERROR: Expected qualifier_count of 1' got " + qualifier_count);  			client.namespace_close (ns);  			System.Environment.Exit (1);  		}  		// End if (qualifier_count != 1)  	}  	client.namespace_close (ns);  }  // End Try  catch (System.Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.Error.WriteLine (e.StackTrace);  	try {  		if (client != null && ns != -1)  			client.namespace_close (ns);  	}  	catch (System.Exception ex) {  		System.Console.WriteLine (ex.Message);  		System.Console.Error.WriteLine ("Problem closing namespace \"test\" - " + e.Message);  	}  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	client = ThriftClient.create ("localhost"' 38080);  	// if (!client.namespace_exists("Tutorial"))  	if (!client.namespace_exists ("test"))  		System.Console.WriteLine ("Namespace test does not exist");  	//client.namespace_create("test");  	client.create_namespace ("mynamespace");  	ns = client.namespace_open ("test");  	// HQL examples  	show (client.hql_query (ns' "show tables").ToString ());  	show (client.hql_query (ns' "select * from thrift_test").ToString ());  	// Schema example  	Schema schema = new Schema ();  	schema = client.table_get_schema (ns' "thrift_test");  	/*                 Iterator ag_it = schema.access_groups.keySet().iterator();                 show("Access groups:");                 while (ag_it.hasNext())                  {                 show("\t" + ag_it.next());                 }                 */show ("Access groups:");  	foreach (string ThisAccessGroup in schema.Access_groups.Keys) {  		show ("\t" + ThisAccessGroup);  	}  	/*                 Iterator cf_it = schema.column_families.keySet().iterator();                 show("Column families:");                 while (cf_it.hasNext())                  {                     show("\t" + cf_it.next());                 }                 */show ("Column families:");  	foreach (string ThisFamily in schema.Column_families.Keys) {  		show ("\t" + ThisFamily);  	}  	// mutator examples  	long mutator = client.mutator_open (ns' "thrift_test"' 0' 0);  	try {  		Cell cell = new Cell ();  		Key key = new Key ();  		key.Row = "java-k1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		//cell.SetValue(vtmp);  		client.mutator_set_cell (mutator' cell);  	}  	finally {  		client.mutator_close (mutator);  	}  	// shared mutator example  	{  		MutateSpec mutate_spec = new MutateSpec ();  		mutate_spec.Appname = "test-java";  		mutate_spec.Flush_interval = 1000;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-put-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.offer_cell (ns' "thrift_test"' mutate_spec' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-put-v2";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.shared_mutator_refresh (ns' "thrift_test"' mutate_spec);  		client.shared_mutator_set_cell (ns' "thrift_test"' mutate_spec' cell);  		System.Threading.Thread.Sleep (2000);  	// scanner examples  	// empty scan spec select all  	// restricted scanspec  	//scanSpec.addToColumns("col:/^.*$/");  	// asynchronous api  	// issue 497  	// End Scope  	}  	System.Console.WriteLine ("Full scan");  	ScanSpec scanSpec = new ScanSpec ();  	long scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell  			cells = client.scanner_get_cells (scanner);  		}  		// End While  	}  	// End Try  	catch {  	}  	finally {  		client.scanner_close (scanner);  	}  	scanSpec.Columns.Add ("col:/^.*$/");  	scanSpec.Row_regexp = "java.*";  	scanSpec.Value_regexp = "v2";  	scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	System.Console.WriteLine ("Restricted scan");  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell   			cells = client.scanner_get_cells (scanner);  		}  		// End While   	}  	catch (System.Exception) {  	}  	finally {  		client.scanner_close (scanner);  	}  	long future = 0;  	long mutator_async_1 = 0;  	long mutator_async_2 = 0;  	long color_scanner = 0;  	long location_scanner = 0;  	long energy_scanner = 0;  	int expected_cells = 6;  	int num_cells = 0;  	try {  		System.Console.WriteLine ("Asynchronous mutator");  		future = client.future_open (0);  		mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		Result result;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-async-put-v1";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_1' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-async-put-v2";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_2' cell);  		client.async_mutator_flush (mutator_async_1);  		client.async_mutator_flush (mutator_async_2);  		int num_flushes = 0;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || result.Is_scan)  				break;  			num_flushes++;  		}  		// Whend  		if (num_flushes > 2) {  			System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  			System.Environment.Exit (1);  		}  		if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  			System.Console.WriteLine ("Future object in unexpected state");  			System.Environment.Exit (1);  		}  	}  	finally {  		client.async_mutator_close (mutator_async_1);  		client.async_mutator_close (mutator_async_2);  	}  	try {  		System.Console.WriteLine ("Asynchronous scan");  		ScanSpec ss = new ScanSpec ();  		color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  		location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  		energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  		Result result;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || !result.Is_scan)  				break;  			foreach (Cell cell in result.Cells) {  				byte[] tmp = cell.Value;  				// string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  				num_cells++;  			}  			// Next cell   			if (num_cells >= 6) {  				client.future_cancel (future);  				break;  			}  		}  		// Whend   		if (!client.future_is_cancelled (future)) {  			System.Console.WriteLine ("Expected future object to be cancelled");  			System.Environment.Exit (1);  		}  	}  	// End Try  	finally {  		client.async_scanner_close (color_scanner);  		client.async_scanner_close (location_scanner);  		client.async_scanner_close (energy_scanner);  		client.future_close (future);  	}  	if (num_cells != 6) {  		System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  		System.Environment.Exit (1);  	}  	{  		Cell cell;  		Key key;  		string str;  		client.hql_query (ns' "drop table if exists java_thrift_test");  		client.hql_query (ns' "create table java_thrift_test ( c1' c2' c3 )");  		mutator = client.mutator_open (ns' "java_thrift_test"' 0' 0);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		key.Column_qualifier = "test";  		cell.Key = key;  		str = "foo";  		// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		cell.Key = key;  		str = "bar";  		//// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		client.mutator_close (mutator);  		HqlResult result = client.hql_query (ns' "select * from java_thrift_test");  		List<Cell> cells = result.Cells;  		int qualifier_count = 0;  		foreach (Cell c in cells) {  			if (c.Key.__isset.column_qualifier && c.Key.Column_qualifier.Length == 0)  				qualifier_count++;  		}  		// Next c  		if (qualifier_count != 1) {  			System.Console.WriteLine ("ERROR: Expected qualifier_count of 1' got " + qualifier_count);  			client.namespace_close (ns);  			System.Environment.Exit (1);  		}  		// End if (qualifier_count != 1)  	}  	client.namespace_close (ns);  }  // End Try  catch (System.Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.Error.WriteLine (e.StackTrace);  	try {  		if (client != null && ns != -1)  			client.namespace_close (ns);  	}  	catch (System.Exception ex) {  		System.Console.WriteLine (ex.Message);  		System.Console.Error.WriteLine ("Problem closing namespace \"test\" - " + e.Message);  	}  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	client = ThriftClient.create ("localhost"' 38080);  	// if (!client.namespace_exists("Tutorial"))  	if (!client.namespace_exists ("test"))  		System.Console.WriteLine ("Namespace test does not exist");  	//client.namespace_create("test");  	client.create_namespace ("mynamespace");  	ns = client.namespace_open ("test");  	// HQL examples  	show (client.hql_query (ns' "show tables").ToString ());  	show (client.hql_query (ns' "select * from thrift_test").ToString ());  	// Schema example  	Schema schema = new Schema ();  	schema = client.table_get_schema (ns' "thrift_test");  	/*                 Iterator ag_it = schema.access_groups.keySet().iterator();                 show("Access groups:");                 while (ag_it.hasNext())                  {                 show("\t" + ag_it.next());                 }                 */show ("Access groups:");  	foreach (string ThisAccessGroup in schema.Access_groups.Keys) {  		show ("\t" + ThisAccessGroup);  	}  	/*                 Iterator cf_it = schema.column_families.keySet().iterator();                 show("Column families:");                 while (cf_it.hasNext())                  {                     show("\t" + cf_it.next());                 }                 */show ("Column families:");  	foreach (string ThisFamily in schema.Column_families.Keys) {  		show ("\t" + ThisFamily);  	}  	// mutator examples  	long mutator = client.mutator_open (ns' "thrift_test"' 0' 0);  	try {  		Cell cell = new Cell ();  		Key key = new Key ();  		key.Row = "java-k1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		//cell.SetValue(vtmp);  		client.mutator_set_cell (mutator' cell);  	}  	finally {  		client.mutator_close (mutator);  	}  	// shared mutator example  	{  		MutateSpec mutate_spec = new MutateSpec ();  		mutate_spec.Appname = "test-java";  		mutate_spec.Flush_interval = 1000;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-put-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.offer_cell (ns' "thrift_test"' mutate_spec' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-put-v2";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.shared_mutator_refresh (ns' "thrift_test"' mutate_spec);  		client.shared_mutator_set_cell (ns' "thrift_test"' mutate_spec' cell);  		System.Threading.Thread.Sleep (2000);  	// scanner examples  	// empty scan spec select all  	// restricted scanspec  	//scanSpec.addToColumns("col:/^.*$/");  	// asynchronous api  	// issue 497  	// End Scope  	}  	System.Console.WriteLine ("Full scan");  	ScanSpec scanSpec = new ScanSpec ();  	long scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell  			cells = client.scanner_get_cells (scanner);  		}  		// End While  	}  	// End Try  	catch {  	}  	finally {  		client.scanner_close (scanner);  	}  	scanSpec.Columns.Add ("col:/^.*$/");  	scanSpec.Row_regexp = "java.*";  	scanSpec.Value_regexp = "v2";  	scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	System.Console.WriteLine ("Restricted scan");  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell   			cells = client.scanner_get_cells (scanner);  		}  		// End While   	}  	catch (System.Exception) {  	}  	finally {  		client.scanner_close (scanner);  	}  	long future = 0;  	long mutator_async_1 = 0;  	long mutator_async_2 = 0;  	long color_scanner = 0;  	long location_scanner = 0;  	long energy_scanner = 0;  	int expected_cells = 6;  	int num_cells = 0;  	try {  		System.Console.WriteLine ("Asynchronous mutator");  		future = client.future_open (0);  		mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		Result result;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-async-put-v1";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_1' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-async-put-v2";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_2' cell);  		client.async_mutator_flush (mutator_async_1);  		client.async_mutator_flush (mutator_async_2);  		int num_flushes = 0;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || result.Is_scan)  				break;  			num_flushes++;  		}  		// Whend  		if (num_flushes > 2) {  			System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  			System.Environment.Exit (1);  		}  		if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  			System.Console.WriteLine ("Future object in unexpected state");  			System.Environment.Exit (1);  		}  	}  	finally {  		client.async_mutator_close (mutator_async_1);  		client.async_mutator_close (mutator_async_2);  	}  	try {  		System.Console.WriteLine ("Asynchronous scan");  		ScanSpec ss = new ScanSpec ();  		color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  		location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  		energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  		Result result;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || !result.Is_scan)  				break;  			foreach (Cell cell in result.Cells) {  				byte[] tmp = cell.Value;  				// string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  				num_cells++;  			}  			// Next cell   			if (num_cells >= 6) {  				client.future_cancel (future);  				break;  			}  		}  		// Whend   		if (!client.future_is_cancelled (future)) {  			System.Console.WriteLine ("Expected future object to be cancelled");  			System.Environment.Exit (1);  		}  	}  	// End Try  	finally {  		client.async_scanner_close (color_scanner);  		client.async_scanner_close (location_scanner);  		client.async_scanner_close (energy_scanner);  		client.future_close (future);  	}  	if (num_cells != 6) {  		System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  		System.Environment.Exit (1);  	}  	{  		Cell cell;  		Key key;  		string str;  		client.hql_query (ns' "drop table if exists java_thrift_test");  		client.hql_query (ns' "create table java_thrift_test ( c1' c2' c3 )");  		mutator = client.mutator_open (ns' "java_thrift_test"' 0' 0);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		key.Column_qualifier = "test";  		cell.Key = key;  		str = "foo";  		// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		cell.Key = key;  		str = "bar";  		//// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		client.mutator_close (mutator);  		HqlResult result = client.hql_query (ns' "select * from java_thrift_test");  		List<Cell> cells = result.Cells;  		int qualifier_count = 0;  		foreach (Cell c in cells) {  			if (c.Key.__isset.column_qualifier && c.Key.Column_qualifier.Length == 0)  				qualifier_count++;  		}  		// Next c  		if (qualifier_count != 1) {  			System.Console.WriteLine ("ERROR: Expected qualifier_count of 1' got " + qualifier_count);  			client.namespace_close (ns);  			System.Environment.Exit (1);  		}  		// End if (qualifier_count != 1)  	}  	client.namespace_close (ns);  }  // End Try  catch (System.Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.Error.WriteLine (e.StackTrace);  	try {  		if (client != null && ns != -1)  			client.namespace_close (ns);  	}  	catch (System.Exception ex) {  		System.Console.WriteLine (ex.Message);  		System.Console.Error.WriteLine ("Problem closing namespace \"test\" - " + e.Message);  	}  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	client = ThriftClient.create ("localhost"' 38080);  	// if (!client.namespace_exists("Tutorial"))  	if (!client.namespace_exists ("test"))  		System.Console.WriteLine ("Namespace test does not exist");  	//client.namespace_create("test");  	client.create_namespace ("mynamespace");  	ns = client.namespace_open ("test");  	// HQL examples  	show (client.hql_query (ns' "show tables").ToString ());  	show (client.hql_query (ns' "select * from thrift_test").ToString ());  	// Schema example  	Schema schema = new Schema ();  	schema = client.table_get_schema (ns' "thrift_test");  	/*                 Iterator ag_it = schema.access_groups.keySet().iterator();                 show("Access groups:");                 while (ag_it.hasNext())                  {                 show("\t" + ag_it.next());                 }                 */show ("Access groups:");  	foreach (string ThisAccessGroup in schema.Access_groups.Keys) {  		show ("\t" + ThisAccessGroup);  	}  	/*                 Iterator cf_it = schema.column_families.keySet().iterator();                 show("Column families:");                 while (cf_it.hasNext())                  {                     show("\t" + cf_it.next());                 }                 */show ("Column families:");  	foreach (string ThisFamily in schema.Column_families.Keys) {  		show ("\t" + ThisFamily);  	}  	// mutator examples  	long mutator = client.mutator_open (ns' "thrift_test"' 0' 0);  	try {  		Cell cell = new Cell ();  		Key key = new Key ();  		key.Row = "java-k1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		//cell.SetValue(vtmp);  		client.mutator_set_cell (mutator' cell);  	}  	finally {  		client.mutator_close (mutator);  	}  	// shared mutator example  	{  		MutateSpec mutate_spec = new MutateSpec ();  		mutate_spec.Appname = "test-java";  		mutate_spec.Flush_interval = 1000;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-put-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.offer_cell (ns' "thrift_test"' mutate_spec' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-put-v2";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.shared_mutator_refresh (ns' "thrift_test"' mutate_spec);  		client.shared_mutator_set_cell (ns' "thrift_test"' mutate_spec' cell);  		System.Threading.Thread.Sleep (2000);  	// scanner examples  	// empty scan spec select all  	// restricted scanspec  	//scanSpec.addToColumns("col:/^.*$/");  	// asynchronous api  	// issue 497  	// End Scope  	}  	System.Console.WriteLine ("Full scan");  	ScanSpec scanSpec = new ScanSpec ();  	long scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell  			cells = client.scanner_get_cells (scanner);  		}  		// End While  	}  	// End Try  	catch {  	}  	finally {  		client.scanner_close (scanner);  	}  	scanSpec.Columns.Add ("col:/^.*$/");  	scanSpec.Row_regexp = "java.*";  	scanSpec.Value_regexp = "v2";  	scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	System.Console.WriteLine ("Restricted scan");  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell   			cells = client.scanner_get_cells (scanner);  		}  		// End While   	}  	catch (System.Exception) {  	}  	finally {  		client.scanner_close (scanner);  	}  	long future = 0;  	long mutator_async_1 = 0;  	long mutator_async_2 = 0;  	long color_scanner = 0;  	long location_scanner = 0;  	long energy_scanner = 0;  	int expected_cells = 6;  	int num_cells = 0;  	try {  		System.Console.WriteLine ("Asynchronous mutator");  		future = client.future_open (0);  		mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		Result result;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-async-put-v1";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_1' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-async-put-v2";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_2' cell);  		client.async_mutator_flush (mutator_async_1);  		client.async_mutator_flush (mutator_async_2);  		int num_flushes = 0;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || result.Is_scan)  				break;  			num_flushes++;  		}  		// Whend  		if (num_flushes > 2) {  			System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  			System.Environment.Exit (1);  		}  		if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  			System.Console.WriteLine ("Future object in unexpected state");  			System.Environment.Exit (1);  		}  	}  	finally {  		client.async_mutator_close (mutator_async_1);  		client.async_mutator_close (mutator_async_2);  	}  	try {  		System.Console.WriteLine ("Asynchronous scan");  		ScanSpec ss = new ScanSpec ();  		color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  		location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  		energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  		Result result;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || !result.Is_scan)  				break;  			foreach (Cell cell in result.Cells) {  				byte[] tmp = cell.Value;  				// string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  				num_cells++;  			}  			// Next cell   			if (num_cells >= 6) {  				client.future_cancel (future);  				break;  			}  		}  		// Whend   		if (!client.future_is_cancelled (future)) {  			System.Console.WriteLine ("Expected future object to be cancelled");  			System.Environment.Exit (1);  		}  	}  	// End Try  	finally {  		client.async_scanner_close (color_scanner);  		client.async_scanner_close (location_scanner);  		client.async_scanner_close (energy_scanner);  		client.future_close (future);  	}  	if (num_cells != 6) {  		System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  		System.Environment.Exit (1);  	}  	{  		Cell cell;  		Key key;  		string str;  		client.hql_query (ns' "drop table if exists java_thrift_test");  		client.hql_query (ns' "create table java_thrift_test ( c1' c2' c3 )");  		mutator = client.mutator_open (ns' "java_thrift_test"' 0' 0);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		key.Column_qualifier = "test";  		cell.Key = key;  		str = "foo";  		// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		cell.Key = key;  		str = "bar";  		//// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		client.mutator_close (mutator);  		HqlResult result = client.hql_query (ns' "select * from java_thrift_test");  		List<Cell> cells = result.Cells;  		int qualifier_count = 0;  		foreach (Cell c in cells) {  			if (c.Key.__isset.column_qualifier && c.Key.Column_qualifier.Length == 0)  				qualifier_count++;  		}  		// Next c  		if (qualifier_count != 1) {  			System.Console.WriteLine ("ERROR: Expected qualifier_count of 1' got " + qualifier_count);  			client.namespace_close (ns);  			System.Environment.Exit (1);  		}  		// End if (qualifier_count != 1)  	}  	client.namespace_close (ns);  }  // End Try  catch (System.Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.Error.WriteLine (e.StackTrace);  	try {  		if (client != null && ns != -1)  			client.namespace_close (ns);  	}  	catch (System.Exception ex) {  		System.Console.WriteLine (ex.Message);  		System.Console.Error.WriteLine ("Problem closing namespace \"test\" - " + e.Message);  	}  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	client = ThriftClient.create ("localhost"' 38080);  	// if (!client.namespace_exists("Tutorial"))  	if (!client.namespace_exists ("test"))  		System.Console.WriteLine ("Namespace test does not exist");  	//client.namespace_create("test");  	client.create_namespace ("mynamespace");  	ns = client.namespace_open ("test");  	// HQL examples  	show (client.hql_query (ns' "show tables").ToString ());  	show (client.hql_query (ns' "select * from thrift_test").ToString ());  	// Schema example  	Schema schema = new Schema ();  	schema = client.table_get_schema (ns' "thrift_test");  	/*                 Iterator ag_it = schema.access_groups.keySet().iterator();                 show("Access groups:");                 while (ag_it.hasNext())                  {                 show("\t" + ag_it.next());                 }                 */show ("Access groups:");  	foreach (string ThisAccessGroup in schema.Access_groups.Keys) {  		show ("\t" + ThisAccessGroup);  	}  	/*                 Iterator cf_it = schema.column_families.keySet().iterator();                 show("Column families:");                 while (cf_it.hasNext())                  {                     show("\t" + cf_it.next());                 }                 */show ("Column families:");  	foreach (string ThisFamily in schema.Column_families.Keys) {  		show ("\t" + ThisFamily);  	}  	// mutator examples  	long mutator = client.mutator_open (ns' "thrift_test"' 0' 0);  	try {  		Cell cell = new Cell ();  		Key key = new Key ();  		key.Row = "java-k1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		//cell.SetValue(vtmp);  		client.mutator_set_cell (mutator' cell);  	}  	finally {  		client.mutator_close (mutator);  	}  	// shared mutator example  	{  		MutateSpec mutate_spec = new MutateSpec ();  		mutate_spec.Appname = "test-java";  		mutate_spec.Flush_interval = 1000;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-put-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.offer_cell (ns' "thrift_test"' mutate_spec' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-put-v2";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.shared_mutator_refresh (ns' "thrift_test"' mutate_spec);  		client.shared_mutator_set_cell (ns' "thrift_test"' mutate_spec' cell);  		System.Threading.Thread.Sleep (2000);  	// scanner examples  	// empty scan spec select all  	// restricted scanspec  	//scanSpec.addToColumns("col:/^.*$/");  	// asynchronous api  	// issue 497  	// End Scope  	}  	System.Console.WriteLine ("Full scan");  	ScanSpec scanSpec = new ScanSpec ();  	long scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell  			cells = client.scanner_get_cells (scanner);  		}  		// End While  	}  	// End Try  	catch {  	}  	finally {  		client.scanner_close (scanner);  	}  	scanSpec.Columns.Add ("col:/^.*$/");  	scanSpec.Row_regexp = "java.*";  	scanSpec.Value_regexp = "v2";  	scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	System.Console.WriteLine ("Restricted scan");  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell   			cells = client.scanner_get_cells (scanner);  		}  		// End While   	}  	catch (System.Exception) {  	}  	finally {  		client.scanner_close (scanner);  	}  	long future = 0;  	long mutator_async_1 = 0;  	long mutator_async_2 = 0;  	long color_scanner = 0;  	long location_scanner = 0;  	long energy_scanner = 0;  	int expected_cells = 6;  	int num_cells = 0;  	try {  		System.Console.WriteLine ("Asynchronous mutator");  		future = client.future_open (0);  		mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		Result result;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-async-put-v1";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_1' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-async-put-v2";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_2' cell);  		client.async_mutator_flush (mutator_async_1);  		client.async_mutator_flush (mutator_async_2);  		int num_flushes = 0;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || result.Is_scan)  				break;  			num_flushes++;  		}  		// Whend  		if (num_flushes > 2) {  			System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  			System.Environment.Exit (1);  		}  		if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  			System.Console.WriteLine ("Future object in unexpected state");  			System.Environment.Exit (1);  		}  	}  	finally {  		client.async_mutator_close (mutator_async_1);  		client.async_mutator_close (mutator_async_2);  	}  	try {  		System.Console.WriteLine ("Asynchronous scan");  		ScanSpec ss = new ScanSpec ();  		color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  		location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  		energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  		Result result;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || !result.Is_scan)  				break;  			foreach (Cell cell in result.Cells) {  				byte[] tmp = cell.Value;  				// string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  				num_cells++;  			}  			// Next cell   			if (num_cells >= 6) {  				client.future_cancel (future);  				break;  			}  		}  		// Whend   		if (!client.future_is_cancelled (future)) {  			System.Console.WriteLine ("Expected future object to be cancelled");  			System.Environment.Exit (1);  		}  	}  	// End Try  	finally {  		client.async_scanner_close (color_scanner);  		client.async_scanner_close (location_scanner);  		client.async_scanner_close (energy_scanner);  		client.future_close (future);  	}  	if (num_cells != 6) {  		System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  		System.Environment.Exit (1);  	}  	{  		Cell cell;  		Key key;  		string str;  		client.hql_query (ns' "drop table if exists java_thrift_test");  		client.hql_query (ns' "create table java_thrift_test ( c1' c2' c3 )");  		mutator = client.mutator_open (ns' "java_thrift_test"' 0' 0);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		key.Column_qualifier = "test";  		cell.Key = key;  		str = "foo";  		// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		cell.Key = key;  		str = "bar";  		//// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		client.mutator_close (mutator);  		HqlResult result = client.hql_query (ns' "select * from java_thrift_test");  		List<Cell> cells = result.Cells;  		int qualifier_count = 0;  		foreach (Cell c in cells) {  			if (c.Key.__isset.column_qualifier && c.Key.Column_qualifier.Length == 0)  				qualifier_count++;  		}  		// Next c  		if (qualifier_count != 1) {  			System.Console.WriteLine ("ERROR: Expected qualifier_count of 1' got " + qualifier_count);  			client.namespace_close (ns);  			System.Environment.Exit (1);  		}  		// End if (qualifier_count != 1)  	}  	client.namespace_close (ns);  }  // End Try  catch (System.Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.Error.WriteLine (e.StackTrace);  	try {  		if (client != null && ns != -1)  			client.namespace_close (ns);  	}  	catch (System.Exception ex) {  		System.Console.WriteLine (ex.Message);  		System.Console.Error.WriteLine ("Problem closing namespace \"test\" - " + e.Message);  	}  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	client = ThriftClient.create ("localhost"' 38080);  	// if (!client.namespace_exists("Tutorial"))  	if (!client.namespace_exists ("test"))  		System.Console.WriteLine ("Namespace test does not exist");  	//client.namespace_create("test");  	client.create_namespace ("mynamespace");  	ns = client.namespace_open ("test");  	// HQL examples  	show (client.hql_query (ns' "show tables").ToString ());  	show (client.hql_query (ns' "select * from thrift_test").ToString ());  	// Schema example  	Schema schema = new Schema ();  	schema = client.table_get_schema (ns' "thrift_test");  	/*                 Iterator ag_it = schema.access_groups.keySet().iterator();                 show("Access groups:");                 while (ag_it.hasNext())                  {                 show("\t" + ag_it.next());                 }                 */show ("Access groups:");  	foreach (string ThisAccessGroup in schema.Access_groups.Keys) {  		show ("\t" + ThisAccessGroup);  	}  	/*                 Iterator cf_it = schema.column_families.keySet().iterator();                 show("Column families:");                 while (cf_it.hasNext())                  {                     show("\t" + cf_it.next());                 }                 */show ("Column families:");  	foreach (string ThisFamily in schema.Column_families.Keys) {  		show ("\t" + ThisFamily);  	}  	// mutator examples  	long mutator = client.mutator_open (ns' "thrift_test"' 0' 0);  	try {  		Cell cell = new Cell ();  		Key key = new Key ();  		key.Row = "java-k1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		//cell.SetValue(vtmp);  		client.mutator_set_cell (mutator' cell);  	}  	finally {  		client.mutator_close (mutator);  	}  	// shared mutator example  	{  		MutateSpec mutate_spec = new MutateSpec ();  		mutate_spec.Appname = "test-java";  		mutate_spec.Flush_interval = 1000;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-put-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.offer_cell (ns' "thrift_test"' mutate_spec' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-put-v2";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.shared_mutator_refresh (ns' "thrift_test"' mutate_spec);  		client.shared_mutator_set_cell (ns' "thrift_test"' mutate_spec' cell);  		System.Threading.Thread.Sleep (2000);  	// scanner examples  	// empty scan spec select all  	// restricted scanspec  	//scanSpec.addToColumns("col:/^.*$/");  	// asynchronous api  	// issue 497  	// End Scope  	}  	System.Console.WriteLine ("Full scan");  	ScanSpec scanSpec = new ScanSpec ();  	long scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell  			cells = client.scanner_get_cells (scanner);  		}  		// End While  	}  	// End Try  	catch {  	}  	finally {  		client.scanner_close (scanner);  	}  	scanSpec.Columns.Add ("col:/^.*$/");  	scanSpec.Row_regexp = "java.*";  	scanSpec.Value_regexp = "v2";  	scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	System.Console.WriteLine ("Restricted scan");  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell   			cells = client.scanner_get_cells (scanner);  		}  		// End While   	}  	catch (System.Exception) {  	}  	finally {  		client.scanner_close (scanner);  	}  	long future = 0;  	long mutator_async_1 = 0;  	long mutator_async_2 = 0;  	long color_scanner = 0;  	long location_scanner = 0;  	long energy_scanner = 0;  	int expected_cells = 6;  	int num_cells = 0;  	try {  		System.Console.WriteLine ("Asynchronous mutator");  		future = client.future_open (0);  		mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		Result result;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-async-put-v1";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_1' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-async-put-v2";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_2' cell);  		client.async_mutator_flush (mutator_async_1);  		client.async_mutator_flush (mutator_async_2);  		int num_flushes = 0;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || result.Is_scan)  				break;  			num_flushes++;  		}  		// Whend  		if (num_flushes > 2) {  			System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  			System.Environment.Exit (1);  		}  		if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  			System.Console.WriteLine ("Future object in unexpected state");  			System.Environment.Exit (1);  		}  	}  	finally {  		client.async_mutator_close (mutator_async_1);  		client.async_mutator_close (mutator_async_2);  	}  	try {  		System.Console.WriteLine ("Asynchronous scan");  		ScanSpec ss = new ScanSpec ();  		color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  		location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  		energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  		Result result;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || !result.Is_scan)  				break;  			foreach (Cell cell in result.Cells) {  				byte[] tmp = cell.Value;  				// string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  				num_cells++;  			}  			// Next cell   			if (num_cells >= 6) {  				client.future_cancel (future);  				break;  			}  		}  		// Whend   		if (!client.future_is_cancelled (future)) {  			System.Console.WriteLine ("Expected future object to be cancelled");  			System.Environment.Exit (1);  		}  	}  	// End Try  	finally {  		client.async_scanner_close (color_scanner);  		client.async_scanner_close (location_scanner);  		client.async_scanner_close (energy_scanner);  		client.future_close (future);  	}  	if (num_cells != 6) {  		System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  		System.Environment.Exit (1);  	}  	{  		Cell cell;  		Key key;  		string str;  		client.hql_query (ns' "drop table if exists java_thrift_test");  		client.hql_query (ns' "create table java_thrift_test ( c1' c2' c3 )");  		mutator = client.mutator_open (ns' "java_thrift_test"' 0' 0);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		key.Column_qualifier = "test";  		cell.Key = key;  		str = "foo";  		// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		cell.Key = key;  		str = "bar";  		//// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		client.mutator_close (mutator);  		HqlResult result = client.hql_query (ns' "select * from java_thrift_test");  		List<Cell> cells = result.Cells;  		int qualifier_count = 0;  		foreach (Cell c in cells) {  			if (c.Key.__isset.column_qualifier && c.Key.Column_qualifier.Length == 0)  				qualifier_count++;  		}  		// Next c  		if (qualifier_count != 1) {  			System.Console.WriteLine ("ERROR: Expected qualifier_count of 1' got " + qualifier_count);  			client.namespace_close (ns);  			System.Environment.Exit (1);  		}  		// End if (qualifier_count != 1)  	}  	client.namespace_close (ns);  }  // End Try  catch (System.Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.Error.WriteLine (e.StackTrace);  	try {  		if (client != null && ns != -1)  			client.namespace_close (ns);  	}  	catch (System.Exception ex) {  		System.Console.WriteLine (ex.Message);  		System.Console.Error.WriteLine ("Problem closing namespace \"test\" - " + e.Message);  	}  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	client = ThriftClient.create ("localhost"' 38080);  	// if (!client.namespace_exists("Tutorial"))  	if (!client.namespace_exists ("test"))  		System.Console.WriteLine ("Namespace test does not exist");  	//client.namespace_create("test");  	client.create_namespace ("mynamespace");  	ns = client.namespace_open ("test");  	// HQL examples  	show (client.hql_query (ns' "show tables").ToString ());  	show (client.hql_query (ns' "select * from thrift_test").ToString ());  	// Schema example  	Schema schema = new Schema ();  	schema = client.table_get_schema (ns' "thrift_test");  	/*                 Iterator ag_it = schema.access_groups.keySet().iterator();                 show("Access groups:");                 while (ag_it.hasNext())                  {                 show("\t" + ag_it.next());                 }                 */show ("Access groups:");  	foreach (string ThisAccessGroup in schema.Access_groups.Keys) {  		show ("\t" + ThisAccessGroup);  	}  	/*                 Iterator cf_it = schema.column_families.keySet().iterator();                 show("Column families:");                 while (cf_it.hasNext())                  {                     show("\t" + cf_it.next());                 }                 */show ("Column families:");  	foreach (string ThisFamily in schema.Column_families.Keys) {  		show ("\t" + ThisFamily);  	}  	// mutator examples  	long mutator = client.mutator_open (ns' "thrift_test"' 0' 0);  	try {  		Cell cell = new Cell ();  		Key key = new Key ();  		key.Row = "java-k1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		//cell.SetValue(vtmp);  		client.mutator_set_cell (mutator' cell);  	}  	finally {  		client.mutator_close (mutator);  	}  	// shared mutator example  	{  		MutateSpec mutate_spec = new MutateSpec ();  		mutate_spec.Appname = "test-java";  		mutate_spec.Flush_interval = 1000;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-put-v1";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.offer_cell (ns' "thrift_test"' mutate_spec' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-put-v2";  		//// cell.Value = ByteBuffer.wrap(vtmp.getBytes());  		cell.Value = vtmp.getBytes ();  		client.shared_mutator_refresh (ns' "thrift_test"' mutate_spec);  		client.shared_mutator_set_cell (ns' "thrift_test"' mutate_spec' cell);  		System.Threading.Thread.Sleep (2000);  	// scanner examples  	// empty scan spec select all  	// restricted scanspec  	//scanSpec.addToColumns("col:/^.*$/");  	// asynchronous api  	// issue 497  	// End Scope  	}  	System.Console.WriteLine ("Full scan");  	ScanSpec scanSpec = new ScanSpec ();  	long scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell  			cells = client.scanner_get_cells (scanner);  		}  		// End While  	}  	// End Try  	catch {  	}  	finally {  		client.scanner_close (scanner);  	}  	scanSpec.Columns.Add ("col:/^.*$/");  	scanSpec.Row_regexp = "java.*";  	scanSpec.Value_regexp = "v2";  	scanner = client.scanner_open (ns' "thrift_test"' scanSpec);  	System.Console.WriteLine ("Restricted scan");  	try {  		List<Cell> cells = client.scanner_get_cells (scanner);  		//while (cells.size() > 0)   		while (cells.Count > 0) {  			foreach (Cell cell in cells) {  				byte[] tmp = cell.Value;  				//string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  			}  			// Next cell   			cells = client.scanner_get_cells (scanner);  		}  		// End While   	}  	catch (System.Exception) {  	}  	finally {  		client.scanner_close (scanner);  	}  	long future = 0;  	long mutator_async_1 = 0;  	long mutator_async_2 = 0;  	long color_scanner = 0;  	long location_scanner = 0;  	long energy_scanner = 0;  	int expected_cells = 6;  	int num_cells = 0;  	try {  		System.Console.WriteLine ("Asynchronous mutator");  		future = client.future_open (0);  		mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  		Result result;  		Cell cell = new Cell ();  		Key key;  		key = new Key ();  		key.Row = "java-put1";  		key.Column_family = "col";  		cell.Key = key;  		string vtmp = "java-async-put-v1";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_1' cell);  		key = new Key ();  		key.Row = "java-put2";  		key.Column_family = "col";  		cell.Key = key;  		vtmp = "java-async-put-v2";  		//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  		cell.Value = vtmp.getBytes ();  		client.async_mutator_set_cell (mutator_async_2' cell);  		client.async_mutator_flush (mutator_async_1);  		client.async_mutator_flush (mutator_async_2);  		int num_flushes = 0;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || result.Is_scan)  				break;  			num_flushes++;  		}  		// Whend  		if (num_flushes > 2) {  			System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  			System.Environment.Exit (1);  		}  		if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  			System.Console.WriteLine ("Future object in unexpected state");  			System.Environment.Exit (1);  		}  	}  	finally {  		client.async_mutator_close (mutator_async_1);  		client.async_mutator_close (mutator_async_2);  	}  	try {  		System.Console.WriteLine ("Asynchronous scan");  		ScanSpec ss = new ScanSpec ();  		color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  		location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  		energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  		Result result;  		while (true) {  			result = client.future_get_result (future' 0);  			if (result.Is_empty || result.Is_error || !result.Is_scan)  				break;  			foreach (Cell cell in result.Cells) {  				byte[] tmp = cell.Value;  				// string s = new string(tmp);  				string s = StringExtensions.GetString (tmp);  				show (s);  				num_cells++;  			}  			// Next cell   			if (num_cells >= 6) {  				client.future_cancel (future);  				break;  			}  		}  		// Whend   		if (!client.future_is_cancelled (future)) {  			System.Console.WriteLine ("Expected future object to be cancelled");  			System.Environment.Exit (1);  		}  	}  	// End Try  	finally {  		client.async_scanner_close (color_scanner);  		client.async_scanner_close (location_scanner);  		client.async_scanner_close (energy_scanner);  		client.future_close (future);  	}  	if (num_cells != 6) {  		System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  		System.Environment.Exit (1);  	}  	{  		Cell cell;  		Key key;  		string str;  		client.hql_query (ns' "drop table if exists java_thrift_test");  		client.hql_query (ns' "create table java_thrift_test ( c1' c2' c3 )");  		mutator = client.mutator_open (ns' "java_thrift_test"' 0' 0);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		key.Column_qualifier = "test";  		cell.Key = key;  		str = "foo";  		// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		cell = new Cell ();  		key = new Key ();  		key.Row = "000";  		key.Column_family = "c1";  		cell.Key = key;  		str = "bar";  		//// cell.Value = ByteBuffer.wrap(str.getBytes() );  		cell.Value = str.getBytes ();  		client.mutator_set_cell (mutator' cell);  		client.mutator_close (mutator);  		HqlResult result = client.hql_query (ns' "select * from java_thrift_test");  		List<Cell> cells = result.Cells;  		int qualifier_count = 0;  		foreach (Cell c in cells) {  			if (c.Key.__isset.column_qualifier && c.Key.Column_qualifier.Length == 0)  				qualifier_count++;  		}  		// Next c  		if (qualifier_count != 1) {  			System.Console.WriteLine ("ERROR: Expected qualifier_count of 1' got " + qualifier_count);  			client.namespace_close (ns);  			System.Environment.Exit (1);  		}  		// End if (qualifier_count != 1)  	}  	client.namespace_close (ns);  }  // End Try  catch (System.Exception e) {  	System.Console.WriteLine (e.Message);  	System.Console.Error.WriteLine (e.StackTrace);  	try {  		if (client != null && ns != -1)  			client.namespace_close (ns);  	}  	catch (System.Exception ex) {  		System.Console.WriteLine (ex.Message);  		System.Console.Error.WriteLine ("Problem closing namespace \"test\" - " + e.Message);  	}  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: client = ThriftClient.create ("localhost"' 38080);  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: mutate_spec.Flush_interval = 1000;  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	System.Console.WriteLine ("Asynchronous mutator");  	future = client.future_open (0);  	mutator_async_1 = client.async_mutator_open (ns' "thrift_test"' future' 0);  	mutator_async_2 = client.async_mutator_open (ns' "thrift_test"' future' 0);  	Result result;  	Cell cell = new Cell ();  	Key key;  	key = new Key ();  	key.Row = "java-put1";  	key.Column_family = "col";  	cell.Key = key;  	string vtmp = "java-async-put-v1";  	//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  	cell.Value = vtmp.getBytes ();  	client.async_mutator_set_cell (mutator_async_1' cell);  	key = new Key ();  	key.Row = "java-put2";  	key.Column_family = "col";  	cell.Key = key;  	vtmp = "java-async-put-v2";  	//cell.Value = ByteBuffer.wrap(vtmp.getBytes() );  	cell.Value = vtmp.getBytes ();  	client.async_mutator_set_cell (mutator_async_2' cell);  	client.async_mutator_flush (mutator_async_1);  	client.async_mutator_flush (mutator_async_2);  	int num_flushes = 0;  	while (true) {  		result = client.future_get_result (future' 0);  		if (result.Is_empty || result.Is_error || result.Is_scan)  			break;  		num_flushes++;  	}  	// Whend  	if (num_flushes > 2) {  		System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  		System.Environment.Exit (1);  	}  	if (client.future_is_cancelled (future) || client.future_is_full (future) || !client.future_is_empty (future) || client.future_has_outstanding (future)) {  		System.Console.WriteLine ("Future object in unexpected state");  		System.Environment.Exit (1);  	}  }  finally {  	client.async_mutator_close (mutator_async_1);  	client.async_mutator_close (mutator_async_2);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: if (num_flushes > 2) {  	System.Console.WriteLine ("Expected 2 flushes' received " + num_flushes);  	System.Environment.Exit (1);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: try {  	System.Console.WriteLine ("Asynchronous scan");  	ScanSpec ss = new ScanSpec ();  	color_scanner = client.async_scanner_open (ns' "FruitColor"' future' ss);  	location_scanner = client.async_scanner_open (ns' "FruitLocation"' future' ss);  	energy_scanner = client.async_scanner_open (ns' "FruitEnergy"' future' ss);  	Result result;  	while (true) {  		result = client.future_get_result (future' 0);  		if (result.Is_empty || result.Is_error || !result.Is_scan)  			break;  		foreach (Cell cell in result.Cells) {  			byte[] tmp = cell.Value;  			// string s = new string(tmp);  			string s = StringExtensions.GetString (tmp);  			show (s);  			num_cells++;  		}  		// Next cell   		if (num_cells >= 6) {  			client.future_cancel (future);  			break;  		}  	}  	// Whend   	if (!client.future_is_cancelled (future)) {  		System.Console.WriteLine ("Expected future object to be cancelled");  		System.Environment.Exit (1);  	}  }  // End Try  finally {  	client.async_scanner_close (color_scanner);  	client.async_scanner_close (location_scanner);  	client.async_scanner_close (energy_scanner);  	client.future_close (future);  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: while (true) {  	result = client.future_get_result (future' 0);  	if (result.Is_empty || result.Is_error || !result.Is_scan)  		break;  	foreach (Cell cell in result.Cells) {  		byte[] tmp = cell.Value;  		// string s = new string(tmp);  		string s = StringExtensions.GetString (tmp);  		show (s);  		num_cells++;  	}  	// Next cell   	if (num_cells >= 6) {  		client.future_cancel (future);  		break;  	}  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: if (num_cells >= 6) {  	client.future_cancel (future);  	break;  }  
Magic Number,HyperTableSharp,BasicClientTest,C:\repos\ststeiger_HyperTableSharp\BasicClientTest.cs,Start,The following statement contains a magic number: if (num_cells != 6) {  	System.Console.WriteLine ("Expected " + expected_cells + " cells got " + num_cells.ToString ());  	System.Environment.Exit (1);  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			In_memory = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I16) {  			Replication = iprot.ReadI16 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Blocksize = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Compressor = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Bloom_filter = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Columns = new List<ColumnFamily> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					ColumnFamily _elem30 = new ColumnFamily ();  					_elem30 = new ColumnFamily ();  					_elem30.Read (iprot);  					Columns.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			In_memory = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I16) {  			Replication = iprot.ReadI16 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Blocksize = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Compressor = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Bloom_filter = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Columns = new List<ColumnFamily> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					ColumnFamily _elem30 = new ColumnFamily ();  					_elem30 = new ColumnFamily ();  					_elem30.Read (iprot);  					Columns.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			In_memory = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I16) {  			Replication = iprot.ReadI16 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Blocksize = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Compressor = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Bloom_filter = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Columns = new List<ColumnFamily> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					ColumnFamily _elem30 = new ColumnFamily ();  					_elem30 = new ColumnFamily ();  					_elem30.Read (iprot);  					Columns.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			In_memory = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I16) {  			Replication = iprot.ReadI16 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Blocksize = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Compressor = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Bloom_filter = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Columns = new List<ColumnFamily> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					ColumnFamily _elem30 = new ColumnFamily ();  					_elem30 = new ColumnFamily ();  					_elem30.Read (iprot);  					Columns.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			In_memory = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I16) {  			Replication = iprot.ReadI16 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Blocksize = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Compressor = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Bloom_filter = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Columns = new List<ColumnFamily> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					ColumnFamily _elem30 = new ColumnFamily ();  					_elem30 = new ColumnFamily ();  					_elem30.Read (iprot);  					Columns.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			In_memory = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I16) {  			Replication = iprot.ReadI16 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Blocksize = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Compressor = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Bloom_filter = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Columns = new List<ColumnFamily> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					ColumnFamily _elem30 = new ColumnFamily ();  					_elem30 = new ColumnFamily ();  					_elem30.Read (iprot);  					Columns.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		In_memory = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I16) {  		Replication = iprot.ReadI16 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Blocksize = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Compressor = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Bloom_filter = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Columns = new List<ColumnFamily> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				ColumnFamily _elem30 = new ColumnFamily ();  				_elem30 = new ColumnFamily ();  				_elem30.Read (iprot);  				Columns.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		In_memory = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I16) {  		Replication = iprot.ReadI16 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Blocksize = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Compressor = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Bloom_filter = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Columns = new List<ColumnFamily> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				ColumnFamily _elem30 = new ColumnFamily ();  				_elem30 = new ColumnFamily ();  				_elem30.Read (iprot);  				Columns.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		In_memory = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I16) {  		Replication = iprot.ReadI16 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Blocksize = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Compressor = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Bloom_filter = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Columns = new List<ColumnFamily> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				ColumnFamily _elem30 = new ColumnFamily ();  				_elem30 = new ColumnFamily ();  				_elem30.Read (iprot);  				Columns.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		In_memory = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I16) {  		Replication = iprot.ReadI16 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Blocksize = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Compressor = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Bloom_filter = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Columns = new List<ColumnFamily> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				ColumnFamily _elem30 = new ColumnFamily ();  				_elem30 = new ColumnFamily ();  				_elem30.Read (iprot);  				Columns.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		In_memory = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I16) {  		Replication = iprot.ReadI16 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Blocksize = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Compressor = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Bloom_filter = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Columns = new List<ColumnFamily> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				ColumnFamily _elem30 = new ColumnFamily ();  				_elem30 = new ColumnFamily ();  				_elem30.Read (iprot);  				Columns.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		In_memory = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I16) {  		Replication = iprot.ReadI16 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Blocksize = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Compressor = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Bloom_filter = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Columns = new List<ColumnFamily> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				ColumnFamily _elem30 = new ColumnFamily ();  				_elem30 = new ColumnFamily ();  				_elem30.Read (iprot);  				Columns.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: if (__isset.in_memory) {  	field.Name = "in_memory";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (In_memory);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: if (__isset.replication) {  	field.Name = "replication";  	field.Type = TType.I16;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI16 (Replication);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: if (__isset.blocksize) {  	field.Name = "blocksize";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Blocksize);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: if (Compressor != null && __isset.compressor) {  	field.Name = "compressor";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Compressor);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: if (Bloom_filter != null && __isset.bloom_filter) {  	field.Name = "bloom_filter";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Bloom_filter);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: if (Columns != null && __isset.columns) {  	field.Name = "columns";  	field.Type = TType.List;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Columns.Count));  		foreach (ColumnFamily _iter31 in Columns) {  			_iter31.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,AccessGroup,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\AccessGroup.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Hypertable.ThriftGen,Cell,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Cell.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			Key = new Key ();  			Key.Read (iprot);  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Value = iprot.ReadBinary ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Cell,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Cell.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		Key = new Key ();  		Key.Read (iprot);  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Value = iprot.ReadBinary ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Cell,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Cell.cs,Write,The following statement contains a magic number: if (Value != null && __isset.value) {  	field.Name = "value";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBinary (Value);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Cell,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Cell.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Start_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			End_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Start_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			End_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Start_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			End_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Start_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			End_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Start_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			End_column = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Start_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		End_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Start_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		End_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Start_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		End_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Start_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		End_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Start_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		End_column = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: if (Start_column != null && __isset.start_column) {  	field.Name = "start_column";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Start_column);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: if (__isset.start_inclusive) {  	field.Name = "start_inclusive";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Start_inclusive);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: if (End_row != null && __isset.end_row) {  	field.Name = "end_row";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (End_row);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: if (End_column != null && __isset.end_column) {  	field.Name = "end_column";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (End_column);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: if (__isset.end_inclusive) {  	field.Name = "end_inclusive";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (End_inclusive);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,CellInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\CellInterval.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Hypertable.ThriftGen,ClientException,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ClientException.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Code = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ClientException,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ClientException.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Code = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ClientException,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ClientException.cs,Write,The following statement contains a magic number: if (Message != null && __isset.message) {  	field.Name = "message";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Message);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ClientException,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ClientException.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Ag = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Max_versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Ttl = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Ag = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Max_versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Ttl = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Ag = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Max_versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Ttl = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Ag = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Max_versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Ttl = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Ag = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Max_versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Ttl = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Ag = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Max_versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Ttl = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Write,The following statement contains a magic number: if (Ag != null && __isset.ag) {  	field.Name = "ag";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Ag);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Write,The following statement contains a magic number: if (__isset.max_versions) {  	field.Name = "max_versions";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Max_versions);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Write,The following statement contains a magic number: if (Ttl != null && __isset.ttl) {  	field.Name = "ttl";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Ttl);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnFamily,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnFamily.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Column_family = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Operation = (ColumnPredicateOperation)iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Value = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Column_family = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Operation = (ColumnPredicateOperation)iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Value = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Column_family = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Operation = (ColumnPredicateOperation)iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Value = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Column_family = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Operation = (ColumnPredicateOperation)iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Value = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Write,The following statement contains a magic number: if (__isset.operation) {  	field.Name = "operation";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Operation);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Write,The following statement contains a magic number: if (Value != null && __isset.value) {  	field.Name = "value";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Value);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ColumnPredicate,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ColumnPredicate.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					Results.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<Hypertable.ThriftGen.Cell> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Hypertable.ThriftGen.Cell _elem5 = new Hypertable.ThriftGen.Cell ();  					_elem5 = new Hypertable.ThriftGen.Cell ();  					_elem5.Read (iprot);  					Cells.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					Results.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<Hypertable.ThriftGen.Cell> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Hypertable.ThriftGen.Cell _elem5 = new Hypertable.ThriftGen.Cell ();  					_elem5 = new Hypertable.ThriftGen.Cell ();  					_elem5.Read (iprot);  					Cells.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					Results.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<Hypertable.ThriftGen.Cell> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Hypertable.ThriftGen.Cell _elem5 = new Hypertable.ThriftGen.Cell ();  					_elem5 = new Hypertable.ThriftGen.Cell ();  					_elem5.Read (iprot);  					Cells.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				Results.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<Hypertable.ThriftGen.Cell> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Hypertable.ThriftGen.Cell _elem5 = new Hypertable.ThriftGen.Cell ();  				_elem5 = new Hypertable.ThriftGen.Cell ();  				_elem5.Read (iprot);  				Cells.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				Results.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<Hypertable.ThriftGen.Cell> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Hypertable.ThriftGen.Cell _elem5 = new Hypertable.ThriftGen.Cell ();  				_elem5 = new Hypertable.ThriftGen.Cell ();  				_elem5.Read (iprot);  				Cells.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				Results.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<Hypertable.ThriftGen.Cell> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Hypertable.ThriftGen.Cell _elem5 = new Hypertable.ThriftGen.Cell ();  				_elem5 = new Hypertable.ThriftGen.Cell ();  				_elem5.Read (iprot);  				Cells.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Write,The following statement contains a magic number: if (Cells != null && __isset.cells) {  	field.Name = "cells";  	field.Type = TType.List;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Cells.Count));  		foreach (Hypertable.ThriftGen.Cell _iter7 in Cells) {  			_iter7.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Write,The following statement contains a magic number: if (__isset.scanner) {  	field.Name = "scanner";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Scanner);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Write,The following statement contains a magic number: if (__isset.mutator) {  	field.Name = "mutator";  	field.Type = TType.I64;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Mutator);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list8 = iprot.ReadListBegin ();  				for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {  					string _elem10 = null;  					_elem10 = iprot.ReadString ();  					Results.Add (_elem10);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list11 = iprot.ReadListBegin ();  				for (int _i12 = 0; _i12 < _list11.Count; ++_i12) {  					List<string> _elem13 = new List<string> ();  					{  						_elem13 = new List<string> ();  						TList _list14 = iprot.ReadListBegin ();  						for (int _i15 = 0; _i15 < _list14.Count; ++_i15) {  							string _elem16 = null;  							_elem16 = iprot.ReadString ();  							_elem13.Add (_elem16);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem13);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list8 = iprot.ReadListBegin ();  				for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {  					string _elem10 = null;  					_elem10 = iprot.ReadString ();  					Results.Add (_elem10);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list11 = iprot.ReadListBegin ();  				for (int _i12 = 0; _i12 < _list11.Count; ++_i12) {  					List<string> _elem13 = new List<string> ();  					{  						_elem13 = new List<string> ();  						TList _list14 = iprot.ReadListBegin ();  						for (int _i15 = 0; _i15 < _list14.Count; ++_i15) {  							string _elem16 = null;  							_elem16 = iprot.ReadString ();  							_elem13.Add (_elem16);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem13);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list8 = iprot.ReadListBegin ();  				for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {  					string _elem10 = null;  					_elem10 = iprot.ReadString ();  					Results.Add (_elem10);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list11 = iprot.ReadListBegin ();  				for (int _i12 = 0; _i12 < _list11.Count; ++_i12) {  					List<string> _elem13 = new List<string> ();  					{  						_elem13 = new List<string> ();  						TList _list14 = iprot.ReadListBegin ();  						for (int _i15 = 0; _i15 < _list14.Count; ++_i15) {  							string _elem16 = null;  							_elem16 = iprot.ReadString ();  							_elem13.Add (_elem16);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem13);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list8 = iprot.ReadListBegin ();  			for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {  				string _elem10 = null;  				_elem10 = iprot.ReadString ();  				Results.Add (_elem10);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list11 = iprot.ReadListBegin ();  			for (int _i12 = 0; _i12 < _list11.Count; ++_i12) {  				List<string> _elem13 = new List<string> ();  				{  					_elem13 = new List<string> ();  					TList _list14 = iprot.ReadListBegin ();  					for (int _i15 = 0; _i15 < _list14.Count; ++_i15) {  						string _elem16 = null;  						_elem16 = iprot.ReadString ();  						_elem13.Add (_elem16);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem13);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list8 = iprot.ReadListBegin ();  			for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {  				string _elem10 = null;  				_elem10 = iprot.ReadString ();  				Results.Add (_elem10);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list11 = iprot.ReadListBegin ();  			for (int _i12 = 0; _i12 < _list11.Count; ++_i12) {  				List<string> _elem13 = new List<string> ();  				{  					_elem13 = new List<string> ();  					TList _list14 = iprot.ReadListBegin ();  					for (int _i15 = 0; _i15 < _list14.Count; ++_i15) {  						string _elem16 = null;  						_elem16 = iprot.ReadString ();  						_elem13.Add (_elem16);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem13);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list8 = iprot.ReadListBegin ();  			for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {  				string _elem10 = null;  				_elem10 = iprot.ReadString ();  				Results.Add (_elem10);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list11 = iprot.ReadListBegin ();  			for (int _i12 = 0; _i12 < _list11.Count; ++_i12) {  				List<string> _elem13 = new List<string> ();  				{  					_elem13 = new List<string> ();  					TList _list14 = iprot.ReadListBegin ();  					for (int _i15 = 0; _i15 < _list14.Count; ++_i15) {  						string _elem16 = null;  						_elem16 = iprot.ReadString ();  						_elem13.Add (_elem16);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem13);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Write,The following statement contains a magic number: if (Cells != null && __isset.cells) {  	field.Name = "cells";  	field.Type = TType.List;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.List' Cells.Count));  		foreach (List<string> _iter18 in Cells) {  			{  				oprot.WriteListBegin (new TList (TType.String' _iter18.Count));  				foreach (string _iter19 in _iter18) {  					oprot.WriteString (_iter19);  				}  				oprot.WriteListEnd ();  			}  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Write,The following statement contains a magic number: if (__isset.scanner) {  	field.Name = "scanner";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Scanner);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Write,The following statement contains a magic number: if (__isset.mutator) {  	field.Name = "mutator";  	field.Type = TType.I64;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Mutator);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResult2,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResult2.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					string _elem22 = null;  					_elem22 = iprot.ReadString ();  					Results.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list23 = iprot.ReadListBegin ();  				for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  					List<string> _elem25 = new List<string> ();  					{  						_elem25 = new List<string> ();  						TList _list26 = iprot.ReadListBegin ();  						for (int _i27 = 0; _i27 < _list26.Count; ++_i27) {  							string _elem28 = null;  							_elem28 = iprot.ReadString ();  							_elem25.Add (_elem28);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem25);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					string _elem22 = null;  					_elem22 = iprot.ReadString ();  					Results.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list23 = iprot.ReadListBegin ();  				for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  					List<string> _elem25 = new List<string> ();  					{  						_elem25 = new List<string> ();  						TList _list26 = iprot.ReadListBegin ();  						for (int _i27 = 0; _i27 < _list26.Count; ++_i27) {  							string _elem28 = null;  							_elem28 = iprot.ReadString ();  							_elem25.Add (_elem28);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem25);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Results = new List<string> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					string _elem22 = null;  					_elem22 = iprot.ReadString ();  					Results.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list23 = iprot.ReadListBegin ();  				for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  					List<string> _elem25 = new List<string> ();  					{  						_elem25 = new List<string> ();  						TList _list26 = iprot.ReadListBegin ();  						for (int _i27 = 0; _i27 < _list26.Count; ++_i27) {  							string _elem28 = null;  							_elem28 = iprot.ReadString ();  							_elem25.Add (_elem28);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem25);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Scanner = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Mutator = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				string _elem22 = null;  				_elem22 = iprot.ReadString ();  				Results.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list23 = iprot.ReadListBegin ();  			for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  				List<string> _elem25 = new List<string> ();  				{  					_elem25 = new List<string> ();  					TList _list26 = iprot.ReadListBegin ();  					for (int _i27 = 0; _i27 < _list26.Count; ++_i27) {  						string _elem28 = null;  						_elem28 = iprot.ReadString ();  						_elem25.Add (_elem28);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem25);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				string _elem22 = null;  				_elem22 = iprot.ReadString ();  				Results.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list23 = iprot.ReadListBegin ();  			for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  				List<string> _elem25 = new List<string> ();  				{  					_elem25 = new List<string> ();  					TList _list26 = iprot.ReadListBegin ();  					for (int _i27 = 0; _i27 < _list26.Count; ++_i27) {  						string _elem28 = null;  						_elem28 = iprot.ReadString ();  						_elem25.Add (_elem28);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem25);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Results = new List<string> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				string _elem22 = null;  				_elem22 = iprot.ReadString ();  				Results.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list23 = iprot.ReadListBegin ();  			for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  				List<string> _elem25 = new List<string> ();  				{  					_elem25 = new List<string> ();  					TList _list26 = iprot.ReadListBegin ();  					for (int _i27 = 0; _i27 < _list26.Count; ++_i27) {  						string _elem28 = null;  						_elem28 = iprot.ReadString ();  						_elem25.Add (_elem28);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem25);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Scanner = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Mutator = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Write,The following statement contains a magic number: if (Cells != null && __isset.cells) {  	field.Name = "cells";  	field.Type = TType.List;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.List' Cells.Count));  		foreach (List<string> _iter30 in Cells) {  			{  				oprot.WriteListBegin (new TList (TType.String' _iter30.Count));  				foreach (string _iter31 in _iter30) {  					oprot.WriteString (_iter31);  				}  				oprot.WriteListEnd ();  			}  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Write,The following statement contains a magic number: if (__isset.scanner) {  	field.Name = "scanner";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Scanner);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Write,The following statement contains a magic number: if (__isset.mutator) {  	field.Name = "mutator";  	field.Type = TType.I64;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Mutator);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,HqlResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\HqlResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Key,The following statement contains a magic number: this._flag = (KeyFlag)255;  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Column_family = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Column_qualifier = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			Flag = (KeyFlag)iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Column_family = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Column_qualifier = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			Flag = (KeyFlag)iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Column_family = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Column_qualifier = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			Flag = (KeyFlag)iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Column_family = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Column_qualifier = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			Flag = (KeyFlag)iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Column_family = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Column_qualifier = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			Flag = (KeyFlag)iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Column_family = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Column_qualifier = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		Flag = (KeyFlag)iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Column_family = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Column_qualifier = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		Flag = (KeyFlag)iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Column_family = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Column_qualifier = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		Flag = (KeyFlag)iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Column_family = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Column_qualifier = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		Flag = (KeyFlag)iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Column_family = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Column_qualifier = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		Flag = (KeyFlag)iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: if (Column_family != null && __isset.column_family) {  	field.Name = "column_family";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Column_family);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: if (Column_qualifier != null && __isset.column_qualifier) {  	field.Name = "column_qualifier";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Column_qualifier);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: if (__isset.timestamp) {  	field.Name = "timestamp";  	field.Type = TType.I64;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Timestamp);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: if (__isset.revision) {  	field.Name = "revision";  	field.Type = TType.I64;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Revision);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: if (__isset.flag) {  	field.Name = "flag";  	field.Type = TType.I32;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Flag);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Key,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Key.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,MutateSpec,The following statement contains a magic number: this._flush_interval = 1000;  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,MutateSpec,The following statement contains a magic number: this._flags = 2;  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Appname = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Flush_interval = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Flags = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Appname = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Flush_interval = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Flags = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Appname = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Flush_interval = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Flags = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Appname = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Flush_interval = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Flags = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Write,The following statement contains a magic number: if (__isset.flush_interval) {  	field.Name = "flush_interval";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Flush_interval);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Write,The following statement contains a magic number: if (__isset.flags) {  	field.Name = "flags";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Flags);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,MutateSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\MutateSpec.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,NamespaceListing,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\NamespaceListing.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Is_namespace = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,NamespaceListing,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\NamespaceListing.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Is_namespace = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,NamespaceListing,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\NamespaceListing.cs,Write,The following statement contains a magic number: if (__isset.is_namespace) {  	field.Name = "is_namespace";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Is_namespace);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,NamespaceListing,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\NamespaceListing.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<Cell> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Cell _elem18 = new Cell ();  					_elem18 = new Cell ();  					_elem18.Read (iprot);  					Cells.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<Cell> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Cell _elem18 = new Cell ();  					_elem18 = new Cell ();  					_elem18.Read (iprot);  					Cells.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<Cell> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Cell _elem18 = new Cell ();  					_elem18 = new Cell ();  					_elem18.Read (iprot);  					Cells.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<Cell> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Cell _elem18 = new Cell ();  					_elem18 = new Cell ();  					_elem18.Read (iprot);  					Cells.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<Cell> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Cell _elem18 = new Cell ();  					_elem18 = new Cell ();  					_elem18.Read (iprot);  					Cells.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<Cell> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Cell _elem18 = new Cell ();  					_elem18 = new Cell ();  					_elem18.Read (iprot);  					Cells.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<Cell> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Cell _elem18 = new Cell ();  				_elem18 = new Cell ();  				_elem18.Read (iprot);  				Cells.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<Cell> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Cell _elem18 = new Cell ();  				_elem18 = new Cell ();  				_elem18.Read (iprot);  				Cells.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<Cell> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Cell _elem18 = new Cell ();  				_elem18 = new Cell ();  				_elem18.Read (iprot);  				Cells.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<Cell> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Cell _elem18 = new Cell ();  				_elem18 = new Cell ();  				_elem18.Read (iprot);  				Cells.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<Cell> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Cell _elem18 = new Cell ();  				_elem18 = new Cell ();  				_elem18.Read (iprot);  				Cells.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<Cell> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Cell _elem18 = new Cell ();  				_elem18 = new Cell ();  				_elem18.Read (iprot);  				Cells.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: if (__isset.id) {  	field.Name = "id";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Id);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: if (__isset.is_scan) {  	field.Name = "is_scan";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Is_scan);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: if (__isset.is_error) {  	field.Name = "is_error";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Is_error);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: if (__isset.error) {  	field.Name = "error";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Error);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: if (Error_msg != null && __isset.error_msg) {  	field.Name = "error_msg";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Error_msg);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: if (Cells != null && __isset.cells) {  	field.Name = "cells";  	field.Type = TType.List;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Cells.Count));  		foreach (Cell _iter19 in Cells) {  			_iter19.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Result,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Result.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					List<string> _elem22 = new List<string> ();  					{  						_elem22 = new List<string> ();  						TList _list23 = iprot.ReadListBegin ();  						for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  							string _elem25 = null;  							_elem25 = iprot.ReadString ();  							_elem22.Add (_elem25);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					List<string> _elem22 = new List<string> ();  					{  						_elem22 = new List<string> ();  						TList _list23 = iprot.ReadListBegin ();  						for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  							string _elem25 = null;  							_elem25 = iprot.ReadString ();  							_elem22.Add (_elem25);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					List<string> _elem22 = new List<string> ();  					{  						_elem22 = new List<string> ();  						TList _list23 = iprot.ReadListBegin ();  						for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  							string _elem25 = null;  							_elem25 = iprot.ReadString ();  							_elem22.Add (_elem25);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					List<string> _elem22 = new List<string> ();  					{  						_elem22 = new List<string> ();  						TList _list23 = iprot.ReadListBegin ();  						for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  							string _elem25 = null;  							_elem25 = iprot.ReadString ();  							_elem22.Add (_elem25);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					List<string> _elem22 = new List<string> ();  					{  						_elem22 = new List<string> ();  						TList _list23 = iprot.ReadListBegin ();  						for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  							string _elem25 = null;  							_elem25 = iprot.ReadString ();  							_elem22.Add (_elem25);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Cells = new List<List<string>> ();  				TList _list20 = iprot.ReadListBegin ();  				for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  					List<string> _elem22 = new List<string> ();  					{  						_elem22 = new List<string> ();  						TList _list23 = iprot.ReadListBegin ();  						for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  							string _elem25 = null;  							_elem25 = iprot.ReadString ();  							_elem22.Add (_elem25);  						}  						iprot.ReadListEnd ();  					}  					Cells.Add (_elem22);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				List<string> _elem22 = new List<string> ();  				{  					_elem22 = new List<string> ();  					TList _list23 = iprot.ReadListBegin ();  					for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  						string _elem25 = null;  						_elem25 = iprot.ReadString ();  						_elem22.Add (_elem25);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				List<string> _elem22 = new List<string> ();  				{  					_elem22 = new List<string> ();  					TList _list23 = iprot.ReadListBegin ();  					for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  						string _elem25 = null;  						_elem25 = iprot.ReadString ();  						_elem22.Add (_elem25);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				List<string> _elem22 = new List<string> ();  				{  					_elem22 = new List<string> ();  					TList _list23 = iprot.ReadListBegin ();  					for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  						string _elem25 = null;  						_elem25 = iprot.ReadString ();  						_elem22.Add (_elem25);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				List<string> _elem22 = new List<string> ();  				{  					_elem22 = new List<string> ();  					TList _list23 = iprot.ReadListBegin ();  					for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  						string _elem25 = null;  						_elem25 = iprot.ReadString ();  						_elem22.Add (_elem25);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				List<string> _elem22 = new List<string> ();  				{  					_elem22 = new List<string> ();  					TList _list23 = iprot.ReadListBegin ();  					for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  						string _elem25 = null;  						_elem25 = iprot.ReadString ();  						_elem22.Add (_elem25);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Cells = new List<List<string>> ();  			TList _list20 = iprot.ReadListBegin ();  			for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {  				List<string> _elem22 = new List<string> ();  				{  					_elem22 = new List<string> ();  					TList _list23 = iprot.ReadListBegin ();  					for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {  						string _elem25 = null;  						_elem25 = iprot.ReadString ();  						_elem22.Add (_elem25);  					}  					iprot.ReadListEnd ();  				}  				Cells.Add (_elem22);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: if (__isset.id) {  	field.Name = "id";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Id);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: if (__isset.is_scan) {  	field.Name = "is_scan";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Is_scan);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: if (__isset.is_error) {  	field.Name = "is_error";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Is_error);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: if (__isset.error) {  	field.Name = "error";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Error);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: if (Error_msg != null && __isset.error_msg) {  	field.Name = "error_msg";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Error_msg);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: if (Cells != null && __isset.cells) {  	field.Name = "cells";  	field.Type = TType.List;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.List' Cells.Count));  		foreach (List<string> _iter26 in Cells) {  			{  				oprot.WriteListBegin (new TList (TType.String' _iter26.Count));  				foreach (string _iter27 in _iter26) {  					oprot.WriteString (_iter27);  				}  				oprot.WriteListEnd ();  			}  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultAsArrays,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultAsArrays.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Cells = iprot.ReadBinary ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Cells = iprot.ReadBinary ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Cells = iprot.ReadBinary ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Cells = iprot.ReadBinary ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Cells = iprot.ReadBinary ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			Is_empty = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Is_scan = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Is_error = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Error = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Error_msg = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Cells = iprot.ReadBinary ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Cells = iprot.ReadBinary ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Cells = iprot.ReadBinary ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Cells = iprot.ReadBinary ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Cells = iprot.ReadBinary ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Cells = iprot.ReadBinary ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		Is_empty = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Is_scan = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Is_error = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Error = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Error_msg = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Cells = iprot.ReadBinary ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: if (__isset.id) {  	field.Name = "id";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Id);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: if (__isset.is_scan) {  	field.Name = "is_scan";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Is_scan);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: if (__isset.is_error) {  	field.Name = "is_error";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Is_error);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: if (__isset.error) {  	field.Name = "error";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Error);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: if (Error_msg != null && __isset.error_msg) {  	field.Name = "error_msg";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Error_msg);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: if (Cells != null && __isset.cells) {  	field.Name = "cells";  	field.Type = TType.String;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteBinary (Cells);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ResultSerialized,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ResultSerialized.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Start_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			End_inclusive = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Start_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		End_inclusive = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Write,The following statement contains a magic number: if (__isset.start_inclusive) {  	field.Name = "start_inclusive";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Start_inclusive);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Write,The following statement contains a magic number: if (End_row != null && __isset.end_row) {  	field.Name = "end_row";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (End_row);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Write,The following statement contains a magic number: if (__isset.end_inclusive) {  	field.Name = "end_inclusive";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (End_inclusive);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,RowInterval,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\RowInterval.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Row_intervals = new List<RowInterval> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					RowInterval _elem2 = new RowInterval ();  					_elem2 = new RowInterval ();  					_elem2.Read (iprot);  					Row_intervals.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Cell_intervals = new List<CellInterval> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					CellInterval _elem5 = new CellInterval ();  					_elem5 = new CellInterval ();  					_elem5.Read (iprot);  					Cell_intervals.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Return_deletes = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Versions = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Row_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Start_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			End_time = iprot.ReadI64 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Columns = new List<string> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					string _elem8 = null;  					_elem8 = iprot.ReadString ();  					Columns.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Keys_only = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I32) {  			Cell_limit = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Cell_limit_per_family = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Row_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Value_regexp = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Scan_and_filter_rows = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			Row_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			Cell_offset = iprot.ReadI32 ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.List) {  			{  				Column_predicates = new List<ColumnPredicate> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					ColumnPredicate _elem11 = new ColumnPredicate ();  					_elem11 = new ColumnPredicate ();  					_elem11.Read (iprot);  					Column_predicates.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			Do_not_cache = iprot.ReadBool ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Row_intervals = new List<RowInterval> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				RowInterval _elem2 = new RowInterval ();  				_elem2 = new RowInterval ();  				_elem2.Read (iprot);  				Row_intervals.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Cell_intervals = new List<CellInterval> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				CellInterval _elem5 = new CellInterval ();  				_elem5 = new CellInterval ();  				_elem5.Read (iprot);  				Cell_intervals.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Return_deletes = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Versions = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Row_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Start_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		End_time = iprot.ReadI64 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Columns = new List<string> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				string _elem8 = null;  				_elem8 = iprot.ReadString ();  				Columns.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Keys_only = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I32) {  		Cell_limit = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Cell_limit_per_family = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Row_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Value_regexp = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Scan_and_filter_rows = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		Row_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		Cell_offset = iprot.ReadI32 ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.List) {  		{  			Column_predicates = new List<ColumnPredicate> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				ColumnPredicate _elem11 = new ColumnPredicate ();  				_elem11 = new ColumnPredicate ();  				_elem11.Read (iprot);  				Column_predicates.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		Do_not_cache = iprot.ReadBool ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (Cell_intervals != null && __isset.cell_intervals) {  	field.Name = "cell_intervals";  	field.Type = TType.List;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Cell_intervals.Count));  		foreach (CellInterval _iter13 in Cell_intervals) {  			_iter13.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.return_deletes) {  	field.Name = "return_deletes";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Return_deletes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.versions) {  	field.Name = "versions";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Versions);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.row_limit) {  	field.Name = "row_limit";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Row_limit);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.start_time) {  	field.Name = "start_time";  	field.Type = TType.I64;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Start_time);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.end_time) {  	field.Name = "end_time";  	field.Type = TType.I64;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (End_time);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (Columns != null && __isset.columns) {  	field.Name = "columns";  	field.Type = TType.List;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' Columns.Count));  		foreach (string _iter14 in Columns) {  			oprot.WriteString (_iter14);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.keys_only) {  	field.Name = "keys_only";  	field.Type = TType.Bool;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Keys_only);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.cell_limit_per_family) {  	field.Name = "cell_limit_per_family";  	field.Type = TType.I32;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Cell_limit_per_family);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (Row_regexp != null && __isset.row_regexp) {  	field.Name = "row_regexp";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Row_regexp);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (Value_regexp != null && __isset.value_regexp) {  	field.Name = "value_regexp";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Value_regexp);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.scan_and_filter_rows) {  	field.Name = "scan_and_filter_rows";  	field.Type = TType.Bool;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Scan_and_filter_rows);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.cell_limit) {  	field.Name = "cell_limit";  	field.Type = TType.I32;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Cell_limit);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.row_offset) {  	field.Name = "row_offset";  	field.Type = TType.I32;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Row_offset);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.cell_offset) {  	field.Name = "cell_offset";  	field.Type = TType.I32;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Cell_offset);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (Column_predicates != null && __isset.column_predicates) {  	field.Name = "column_predicates";  	field.Type = TType.List;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Column_predicates.Count));  		foreach (ColumnPredicate _iter15 in Column_predicates) {  			_iter15.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: if (__isset.do_not_cache) {  	field.Name = "do_not_cache";  	field.Type = TType.Bool;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Do_not_cache);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,ScanSpec,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\ScanSpec.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,Hypertable.ThriftGen,Schema,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Schema.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Map) {  			{  				Access_groups = new Dictionary<string' AccessGroup> ();  				TMap _map32 = iprot.ReadMapBegin ();  				for (int _i33 = 0; _i33 < _map32.Count; ++_i33) {  					string _key34;  					AccessGroup _val35;  					_key34 = iprot.ReadString ();  					_val35 = new AccessGroup ();  					_val35.Read (iprot);  					Access_groups [_key34] = _val35;  				}  				iprot.ReadMapEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Map) {  			{  				Column_families = new Dictionary<string' ColumnFamily> ();  				TMap _map36 = iprot.ReadMapBegin ();  				for (int _i37 = 0; _i37 < _map36.Count; ++_i37) {  					string _key38;  					ColumnFamily _val39;  					_key38 = iprot.ReadString ();  					_val39 = new ColumnFamily ();  					_val39.Read (iprot);  					Column_families [_key38] = _val39;  				}  				iprot.ReadMapEnd ();  			}  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Schema,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Schema.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Map) {  		{  			Access_groups = new Dictionary<string' AccessGroup> ();  			TMap _map32 = iprot.ReadMapBegin ();  			for (int _i33 = 0; _i33 < _map32.Count; ++_i33) {  				string _key34;  				AccessGroup _val35;  				_key34 = iprot.ReadString ();  				_val35 = new AccessGroup ();  				_val35.Read (iprot);  				Access_groups [_key34] = _val35;  			}  			iprot.ReadMapEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Map) {  		{  			Column_families = new Dictionary<string' ColumnFamily> ();  			TMap _map36 = iprot.ReadMapBegin ();  			for (int _i37 = 0; _i37 < _map36.Count; ++_i37) {  				string _key38;  				ColumnFamily _val39;  				_key38 = iprot.ReadString ();  				_val39 = new ColumnFamily ();  				_val39.Read (iprot);  				Column_families [_key38] = _val39;  			}  			iprot.ReadMapEnd ();  		}  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,Schema,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Schema.cs,Write,The following statement contains a magic number: if (Column_families != null && __isset.column_families) {  	field.Name = "column_families";  	field.Type = TType.Map;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.String' TType.Struct' Column_families.Count));  		foreach (string _iter41 in Column_families.Keys) {  			oprot.WriteString (_iter41);  			Column_families [_iter41].Write (oprot);  		}  		oprot.WriteMapEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,Schema,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\Schema.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Ip_address = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Hostname = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Ip_address = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Hostname = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Ip_address = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Hostname = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Start_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			End_row = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Ip_address = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Hostname = iprot.ReadString ();  		}  		else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Ip_address = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Hostname = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Ip_address = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Hostname = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Ip_address = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Hostname = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Start_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		End_row = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Ip_address = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Hostname = iprot.ReadString ();  	}  	else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: if (End_row != null && __isset.end_row) {  	field.Name = "end_row";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (End_row);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: if (Location != null && __isset.location) {  	field.Name = "location";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Location);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: if (Ip_address != null && __isset.ip_address) {  	field.Name = "ip_address";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Ip_address);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: if (Hostname != null && __isset.hostname) {  	field.Name = "hostname";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Hostname);  	oprot.WriteFieldEnd ();  }  
Magic Number,Hypertable.ThriftGen,TableSplit,C:\repos\ststeiger_HyperTableSharp\HyperTable\ThriftGen\TableSplit.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Hypertable.Thrift,ThriftClient,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\ThriftClient.cs,create,The following statement contains a magic number: return create (host' port' 1600000' true);  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,SerializedCellsWriter,The following statement contains a magic number: mBuffer = ByteBuffer.allocate (size + 5);  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,SerializedCellsWriter,The following statement contains a magic number: mBuffer = ByteBuffer.allocate (size + 5);  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (length >= mBuffer.remaining ()) {  	if (mBuffer.position () > 4) {  		if (!mGrow)  			// dont grow this buffer  			return false;  		else {  			// grow  			ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  			newBuffer.order (ByteOrder.LITTLE_ENDIAN);  			newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  			mBuffer = newBuffer;  		}  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (length >= mBuffer.remaining ()) {  	if (mBuffer.position () > 4) {  		if (!mGrow)  			// dont grow this buffer  			return false;  		else {  			// grow  			ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  			newBuffer.order (ByteOrder.LITTLE_ENDIAN);  			newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  			mBuffer = newBuffer;  		}  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (length >= mBuffer.remaining ()) {  	if (mBuffer.position () > 4) {  		if (!mGrow)  			// dont grow this buffer  			return false;  		else {  			// grow  			ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  			newBuffer.order (ByteOrder.LITTLE_ENDIAN);  			newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  			mBuffer = newBuffer;  		}  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (mBuffer.position () > 4) {  	if (!mGrow)  		// dont grow this buffer  		return false;  	else {  		// grow  		ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  		newBuffer.order (ByteOrder.LITTLE_ENDIAN);  		newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  		mBuffer = newBuffer;  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (mBuffer.position () > 4) {  	if (!mGrow)  		// dont grow this buffer  		return false;  	else {  		// grow  		ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  		newBuffer.order (ByteOrder.LITTLE_ENDIAN);  		newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  		mBuffer = newBuffer;  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (mBuffer.position () > 4) {  	if (!mGrow)  		// dont grow this buffer  		return false;  	else {  		// grow  		ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  		newBuffer.order (ByteOrder.LITTLE_ENDIAN);  		newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  		mBuffer = newBuffer;  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (!mGrow)  	// dont grow this buffer  	return false;  else {  	// grow  	ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  	newBuffer.order (ByteOrder.LITTLE_ENDIAN);  	newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  	mBuffer = newBuffer;  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: if (!mGrow)  	// dont grow this buffer  	return false;  else {  	// grow  	ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  	newBuffer.order (ByteOrder.LITTLE_ENDIAN);  	newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  	mBuffer = newBuffer;  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add_serialized_cell_array,The following statement contains a magic number: mBuffer.put (serialized_cells' 4' length);  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (timestamp == SerializedCellsFlag.AUTO_ASSIGN)  	control |= SerializedCellsFlag.AUTO_TIMESTAMP;  else if (timestamp != SerializedCellsFlag.NULL) {  	control |= SerializedCellsFlag.HAVE_TIMESTAMP;  	length += 8;  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (timestamp != SerializedCellsFlag.NULL) {  	control |= SerializedCellsFlag.HAVE_TIMESTAMP;  	length += 8;  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: length += 8;  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (length >= mBuffer.remaining ()) {  	if (mBuffer.position () > 4) {  		if (!mGrow)  			// dont grow this buffer  			return false;  		else {  			// grow  			ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  			newBuffer.order (ByteOrder.LITTLE_ENDIAN);  			newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  			mBuffer = newBuffer;  		}  	}  	else {  		mBuffer = ByteBuffer.allocate (length + 5);  		mBuffer.order (ByteOrder.LITTLE_ENDIAN);  		mBuffer.putInt (SerializedCellsFlag.VERSION);  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (length >= mBuffer.remaining ()) {  	if (mBuffer.position () > 4) {  		if (!mGrow)  			// dont grow this buffer  			return false;  		else {  			// grow  			ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  			newBuffer.order (ByteOrder.LITTLE_ENDIAN);  			newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  			mBuffer = newBuffer;  		}  	}  	else {  		mBuffer = ByteBuffer.allocate (length + 5);  		mBuffer.order (ByteOrder.LITTLE_ENDIAN);  		mBuffer.putInt (SerializedCellsFlag.VERSION);  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (length >= mBuffer.remaining ()) {  	if (mBuffer.position () > 4) {  		if (!mGrow)  			// dont grow this buffer  			return false;  		else {  			// grow  			ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  			newBuffer.order (ByteOrder.LITTLE_ENDIAN);  			newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  			mBuffer = newBuffer;  		}  	}  	else {  		mBuffer = ByteBuffer.allocate (length + 5);  		mBuffer.order (ByteOrder.LITTLE_ENDIAN);  		mBuffer.putInt (SerializedCellsFlag.VERSION);  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (length >= mBuffer.remaining ()) {  	if (mBuffer.position () > 4) {  		if (!mGrow)  			// dont grow this buffer  			return false;  		else {  			// grow  			ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  			newBuffer.order (ByteOrder.LITTLE_ENDIAN);  			newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  			mBuffer = newBuffer;  		}  	}  	else {  		mBuffer = ByteBuffer.allocate (length + 5);  		mBuffer.order (ByteOrder.LITTLE_ENDIAN);  		mBuffer.putInt (SerializedCellsFlag.VERSION);  	}  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (mBuffer.position () > 4) {  	if (!mGrow)  		// dont grow this buffer  		return false;  	else {  		// grow  		ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  		newBuffer.order (ByteOrder.LITTLE_ENDIAN);  		newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  		mBuffer = newBuffer;  	}  }  else {  	mBuffer = ByteBuffer.allocate (length + 5);  	mBuffer.order (ByteOrder.LITTLE_ENDIAN);  	mBuffer.putInt (SerializedCellsFlag.VERSION);  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (mBuffer.position () > 4) {  	if (!mGrow)  		// dont grow this buffer  		return false;  	else {  		// grow  		ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  		newBuffer.order (ByteOrder.LITTLE_ENDIAN);  		newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  		mBuffer = newBuffer;  	}  }  else {  	mBuffer = ByteBuffer.allocate (length + 5);  	mBuffer.order (ByteOrder.LITTLE_ENDIAN);  	mBuffer.putInt (SerializedCellsFlag.VERSION);  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (mBuffer.position () > 4) {  	if (!mGrow)  		// dont grow this buffer  		return false;  	else {  		// grow  		ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  		newBuffer.order (ByteOrder.LITTLE_ENDIAN);  		newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  		mBuffer = newBuffer;  	}  }  else {  	mBuffer = ByteBuffer.allocate (length + 5);  	mBuffer.order (ByteOrder.LITTLE_ENDIAN);  	mBuffer.putInt (SerializedCellsFlag.VERSION);  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (mBuffer.position () > 4) {  	if (!mGrow)  		// dont grow this buffer  		return false;  	else {  		// grow  		ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  		newBuffer.order (ByteOrder.LITTLE_ENDIAN);  		newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  		mBuffer = newBuffer;  	}  }  else {  	mBuffer = ByteBuffer.allocate (length + 5);  	mBuffer.order (ByteOrder.LITTLE_ENDIAN);  	mBuffer.putInt (SerializedCellsFlag.VERSION);  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (!mGrow)  	// dont grow this buffer  	return false;  else {  	// grow  	ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  	newBuffer.order (ByteOrder.LITTLE_ENDIAN);  	newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  	mBuffer = newBuffer;  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: if (!mGrow)  	// dont grow this buffer  	return false;  else {  	// grow  	ByteBuffer newBuffer = ByteBuffer.allocate (((mBuffer.capacity () + length) * 3) / 2);  	newBuffer.order (ByteOrder.LITTLE_ENDIAN);  	newBuffer.put (mBuffer.array ()' 0' mBuffer.position ());  	mBuffer = newBuffer;  }  
Magic Number,Hypertable.Thrift,SerializedCellsWriter,C:\repos\ststeiger_HyperTableSharp\HyperTable\Thrift\SerializedCellsWriter.cs,add,The following statement contains a magic number: mBuffer = ByteBuffer.allocate (length + 5);  
