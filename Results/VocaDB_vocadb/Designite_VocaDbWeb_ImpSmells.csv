Implementation smell,Namespace,Class,File,Method,Description
Long Method,VocaDb.Web,SwaggerConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\SwaggerConfig.cs,Register,The method has 182 lines of code.
Long Method,VocaDb.Web.App_Start,BundleConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\BundleConfig.cs,RegisterBundles,The method has 519 lines of code.
Complex Method,VocaDb.Web,MvcApplication,C:\repos\VocaDB_vocadb\VocaDbWeb\Global.asax.cs,Application_Error,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Web.Controllers,AlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AlbumController.cs,Edit,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Web.Models.Album,AlbumEditViewModel,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\Album\AlbumEditViewModel.cs,CheckModel,Cyclomatic complexity of the method is 8
Long Parameter List,VocaDb.Web.Controllers.Api,ActivityEntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ActivityEntryApiController.cs,GetList,The method has 9 parameters. Parameters: before' since' userId' editEvent' maxResults' getTotalCount' fields' entryFields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,ReleaseEventSeriesApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ReleaseEventSeriesApiController.cs,GetList,The method has 6 parameters. Parameters: query' start' maxResults' getTotalCount' nameMatchMode' lang
Long Parameter List,VocaDb.Web.Controllers.Api,AlbumApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\AlbumApiController.cs,GetList,The method has 23 parameters. Parameters: query' discTypes' tagName' tagId' childTags' artistId' artistParticipationStatus' childVoicebanks' includeMembers' barcode' status' releaseDateAfter' releaseDateBefore' advancedFilters' start' maxResults' getTotalCount' sort' preferAccurateMatches' deleted' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,ArtistApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ArtistApiController.cs,GetArtist,The method has 6 parameters. Parameters: a' m' fields' relations' lang' ctx
Long Parameter List,VocaDb.Web.Controllers.Api,ArtistApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ArtistApiController.cs,GetList,The method has 17 parameters. Parameters: query' artistTypes' allowBaseVoicebanks' tagName' tagId' childTags' followedByUserId' status' advancedFilters' start' maxResults' getTotalCount' sort' preferAccurateMatches' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,DiscussionApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\DiscussionApiController.cs,GetTopics,The method has 6 parameters. Parameters: folderId' start' maxResults' getTotalCount' sort' fields
Long Parameter List,VocaDb.Web.Controllers.Api,EntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\EntryApiController.cs,EntryApiController,The method has 6 parameters. Parameters: queries' otherService' albumService' artistService' songQueries' entryUrlParser
Long Parameter List,VocaDb.Web.Controllers.Api,EntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\EntryApiController.cs,GetList,The method has 12 parameters. Parameters: query' tagName' tagId' childTags' status' start' maxResults' getTotalCount' sort' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,ReleaseEventApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ReleaseEventApiController.cs,GetList,The method has 19 parameters. Parameters: query' nameMatchMode' seriesId' afterDate' beforeDate' category' userCollectionId' tagId' childTags' artistId' childVoicebanks' includeMembers' status' start' maxResults' getTotalCount' sort' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,SongApiController,The method has 6 parameters. Parameters: service' queries' songAggregateQueries' entryLinkFactory' userPermissionContext' userService
Long Parameter List,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,GetList,The method has 24 parameters. Parameters: query' songTypes' tagName' tagId' childTags' artistId' artistParticipationStatus' childVoicebanks' includeMembers' onlyWithPvs' pvServices' since' minScore' userCollectionId' status' advancedFilters' start' maxResults' getTotalCount' sort' preferAccurateMatches' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,GetTopSongs,The method has 7 parameters. Parameters: durationHours' startDate' filterBy' vocalist' maxResults' fields' languagePreference
Long Parameter List,VocaDb.Web.Controllers.Api,SongListApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongListApiController.cs,GetFeaturedLists,The method has 7 parameters. Parameters: query' nameMatchMode' featuredCategory' start' maxResults' getTotalCount' sort
Long Parameter List,VocaDb.Web.Controllers.Api,SongListApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongListApiController.cs,GetSongs,The method has 15 parameters. Parameters: listId' query' songTypes' pvServices' tagId' artistId' childVoicebanks' advancedFilters' start' maxResults' getTotalCount' sort' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,TagApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\TagApiController.cs,GetList,The method has 12 parameters. Parameters: query' allowChildren' categoryName' start' maxResults' getTotalCount' nameMatchMode' sort' preferAccurateMatches' fields' lang' target
Long Parameter List,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,UserApiController,The method has 6 parameters. Parameters: queries' messageQueries' service' permissionContext' thumbPersister' userIconFactory
Long Parameter List,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetAlbumCollection,The method has 16 parameters. Parameters: id' query' tagId' tag' artistId' purchaseStatuses' releaseEventId' albumTypes' advancedFilters' start' maxResults' getTotalCount' sort' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetFollowedArtists,The method has 10 parameters. Parameters: id' query' artistType' start' maxResults' getTotalCount' sort' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetList,The method has 13 parameters. Parameters: query' groups' joinDateAfter' joinDateBefore' nameMatchMode' start' maxResults' getTotalCount' sort' includeDisabled' onlyVerified' knowsLanguage' fields
Long Parameter List,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetMessages,The method has 7 parameters. Parameters: id' inbox' unread' anotherUserId' start' maxResults' getTotalCount
Long Parameter List,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetRatedSongs,The method has 18 parameters. Parameters: id' query' tagName' tagId' artistId' childVoicebanks' rating' songListId' groupByRating' pvServices' advancedFilters' start' maxResults' getTotalCount' sort' nameMatchMode' fields' lang
Long Parameter List,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetSongLists,The method has 8 parameters. Parameters: id' query' nameMatchMode' start' maxResults' getTotalCount' sort' fields
Long Parameter List,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChartWithAverage,The method has 5 parameters. Parameters: title' pointsTitle' yAxisTitle' points' average
Long Parameter List,VocaDb.Web.Helpers,KnockoutHtmlExtender,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\KnockoutHtmlExtender.cs,DropdownForKnockout,The method has 6 parameters. Parameters: htmlHelper' expression' selectList' binding' cssClass' id
Long Parameter List,VocaDb.Web.Helpers,KnockoutHtmlExtender,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\KnockoutHtmlExtender.cs,TextAreaForKnockout,The method has 8 parameters. Parameters: htmlHelper' expression' binding' cssClass' id' maxLength' rows' cols
Long Parameter List,VocaDb.Web.Helpers,KnockoutHtmlExtender,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\KnockoutHtmlExtender.cs,TextBoxForKnockout,The method has 8 parameters. Parameters: htmlHelper' expression' binding' cssClass' id' maxLength' size' placeholder
Long Parameter List,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,EnumDropDownList,The method has 5 parameters. Parameters: htmlHelper' name' enumType' htmlAttributes' selectedValue
Long Parameter List,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,EnumDropDownList,The method has 5 parameters. Parameters: htmlHelper' name' enumType' htmlAttributes' selectedValue
Long Parameter List,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,EnumDropDownListFor,The method has 5 parameters. Parameters: htmlHelper' expression' enumType' htmlAttributes' selectedValue
Long Parameter List,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,EnumDropDownListForDic,The method has 5 parameters. Parameters: htmlHelper' expression' enumType' htmlAttributes' selectedValue
Long Parameter List,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,EnumDropDownListFor,The method has 5 parameters. Parameters: htmlHelper' expression' values' htmlAttributes' selectedValue
Long Parameter List,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,LanguageSelectionDropDownListFor,The method has 5 parameters. Parameters: htmlHelper' expression' htmlAttributes' allowUnspecified' selectedValue
Long Parameter List,VocaDb.Web.Code,JsonModelBinder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\FromJsonAttribute.cs,BindModel,The method has 5 parameters. Parameters: controllerContext' bindingContext' propertyName' type' allowHtml
Long Parameter List,VocaDb.Web.Code,IdNotNumberConstraint,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\IdNotNumberConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,VocaDb.Web.Code.Security.Membership,VocaDbMembershipProvider,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\Security\Membership\VocaDbMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Parameter List,VocaDb.Web.Controllers,AlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AlbumController.cs,AlbumController,The method has 5 parameters. Parameters: service' queries' userQueries' albumDescriptionGenerator' markdownParser
Long Parameter List,VocaDb.Web.Controllers,EventController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\EventController.cs,EventController,The method has 5 parameters. Parameters: queries' service' enumTranslations' entryLinkFactory' thumbPersister
Long Parameter List,VocaDb.Web.Controllers,ExtController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ExtController.cs,ExtController,The method has 7 parameters. Parameters: entryUrlParser' entryThumbPersister' albumService' artistService' eventQueries' songService' tagQueries
Long Parameter List,VocaDb.Web.Controllers,ExtController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ExtController.cs,EmbedSong,The method has 5 parameters. Parameters: songId' pvId' w' h' lang
Long Parameter List,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,SearchController,The method has 9 parameters. Parameters: services' artistService' albumService' songService' songListQueries' tagQueries' eventQueries' entryQueries' permissionContext
Long Parameter List,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,DateLineChartWithAverage,The method has 5 parameters. Parameters: title' pointsTitle' yAxisTitle' points' average
Long Parameter List,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,StatsController,The method has 5 parameters. Parameters: userRepository' repository' permissionContext' songAggregateQueries' context
Long Parameter List,VocaDb.Web.Controllers,TagController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\TagController.cs,TagController,The method has 5 parameters. Parameters: queries' entryLinkFactory' enumTranslations' markdownParser' entryThumbPersister
Long Parameter List,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,UserController,The method has 10 parameters. Parameters: service' data' artistService' artistQueries' otherService' repository' messageQueries' ipRuleManager' config' markdownParser
Long Parameter List,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,FavoriteSongs,The method has 5 parameters. Parameters: id' page' rating' sort' groupByRating
Long Parameter List,VocaDb.Web.Models.Home,SearchEntries,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\Home\SearchEntries.cs,SearchEntries,The method has 5 parameters. Parameters: filter' albums' artists' songs' tags
Long Parameter List,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,QueryService,The method has 12 parameters. Parameters: artistQueries' tagQueries' userQueries' albumService' albumQueries' artistService' songQueries' songService' songListQueries' userService' entryQueries' userPermissionContext
Long Identifier,VocaDb.Web.Helpers,Translate,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\Translate.cs,,The length of the parameter ReleaseEventEditableFieldNames is 30.
Long Identifier,VocaDb.Web.Helpers,Translate,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\Translate.cs,,The length of the parameter ReleaseEventSeriesEditableFieldNames is 36.
Long Statement,VocaDb.Web.Controllers.Api,CommentApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\CommentApiController.cs,GetComments,The length of the statement  "			return new PartialFindResult<CommentForApiContract>(db.HandleQuery(ctx => GetComments(ctx' entryType).GetAll(entryId))' 0); " is 123.
Long Statement,VocaDb.Web.Controllers.Api,ActivityEntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ActivityEntryApiController.cs,GetList,The length of the statement  "						fields.HasFlag(ActivityEntryOptionalFields.Entry) ? entryForApiContractFactory.Create(a.EntryBase' entryFields' lang' ssl) : null'  " is 130.
Long Statement,VocaDb.Web.Controllers.Api,AlbumApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\AlbumApiController.cs,GetOne,The length of the statement  "			var album = queries.GetAlbumWithMergeRecord(id' (a' m) => new AlbumForApiContract(a' m' lang' thumbPersister' ssl' fields' songFields)); " is 136.
Long Statement,VocaDb.Web.Controllers.Api,AlbumApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\AlbumApiController.cs,GetList,The length of the statement  "			var queryParams = new AlbumQueryParams(textQuery' discTypes' start' Math.Min(maxResults' absoluteMax)' getTotalCount' sort ?? AlbumSortRule.Name' preferAccurateMatches) { " is 170.
Long Statement,VocaDb.Web.Controllers.Api,AlbumApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\AlbumApiController.cs,GetList,The length of the statement  "			var entries = service.Find(a => new AlbumForApiContract(a' null' lang' thumbPersister' ssl' fields' SongOptionalFields.None)' queryParams); " is 139.
Long Statement,VocaDb.Web.Controllers.Api,ArtistApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ArtistApiController.cs,GetList,The length of the statement  "			var param = new ArtistQueryParams(textQuery' types' start' Math.Min(maxResults' absoluteMax)' getTotalCount' sort' preferAccurateMatches) { " is 139.
Long Statement,VocaDb.Web.Controllers.Api,EntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\EntryApiController.cs,GetList,The length of the statement  "			return queries.GetList(query' tagId' tagName' childTags' status' start' maxResults' getTotalCount' sort' nameMatchMode' fields' lang' ssl' searchEvents: true); " is 159.
Long Statement,VocaDb.Web.Controllers.Api,EntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\EntryApiController.cs,GetToolTip,The length of the statement  "					data = RazorHelper.RenderPartialViewToString("AlbumWithCoverPopupContent"' albumService.GetAlbum(id)' "EntryApiController"' Request); " is 133.
Long Statement,VocaDb.Web.Controllers.Api,EntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\EntryApiController.cs,GetToolTip,The length of the statement  "					data = RazorHelper.RenderPartialViewToString("ArtistPopupContent"' artistService.GetArtist(id)' "EntryApiController"' Request); " is 127.
Long Statement,VocaDb.Web.Controllers.Api,EntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\EntryApiController.cs,GetToolTip,The length of the statement  "					data = RazorHelper.RenderPartialViewToString("SongPopupContent"' songQueries.GetSong(id)' "EntryApiController"' Request); " is 121.
Long Statement,VocaDb.Web.Controllers.Api,MikuApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\MikuApiController.cs,GetMikus,The length of the statement  "			return Redirect("http://www.pixiv.net/search.php?s_mode=s_tag&word=%E3%81%BE%E3%81%BE%E3%81%BE%E5%BC%8F%E3%81%82%E3%81%B4%E3%83%9F%E3%82%AF");" is 142.
Long Statement,VocaDb.Web.Controllers.Api,PVApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\PVApiController.cs,GetPVByUrl,The length of the statement  "				throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest) { ReasonPhrase = result.Exception.Message });" is 128.
Long Statement,VocaDb.Web.Controllers.Api,ReleaseEventApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ReleaseEventApiController.cs,GetAlbums,The length of the statement  "				return ev.Albums.Select(a => new AlbumForApiContract(a' null' lang' thumbPersister' WebHelper.IsSSL(Request)' fields' SongOptionalFields.None)).ToArray(); " is 154.
Long Statement,VocaDb.Web.Controllers.Api,ReleaseEventApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ReleaseEventApiController.cs,GetList,The length of the statement  "			return queries.Find(e => new ReleaseEventForApiContract(e' lang' fields' thumbPersister' WebHelper.IsSSL(Request))' queryParams); " is 129.
Long Statement,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,GetDerived,The length of the statement  "			var songs = queries.HandleQuery(s => s.Load(id).AlternateVersions.Select(child => new SongForApiContract(child' null' lang' fields)).ToArray()); " is 144.
Long Statement,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,GetList,The length of the statement  "			var param = new SongQueryParams(textQuery' types' start' Math.Min(maxResults' absoluteMax)' getTotalCount' sort' false' preferAccurateMatches' null) { " is 150.
Long Statement,VocaDb.Web.Controllers.Api,SongListApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongListApiController.cs,GetFeaturedLists,The length of the statement  "			return queries.Find(s => new SongListForApiContract(s' userIconFactory' entryImagePersister' ssl' SongListOptionalFields.MainPicture)' " is 134.
Long Statement,VocaDb.Web.Controllers.Api,TagApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\TagApiController.cs,GetByName,The length of the statement  "			var tag = queries.GetTagByName(name' t => new TagForApiContract(t' thumbPersister' WebHelper.IsSSL(Request)' lang' fields)); " is 124.
Long Statement,VocaDb.Web.Controllers.Api,TagApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\TagApiController.cs,GetChildTags,The length of the statement  "			return queries.HandleQuery(ctx => ctx.Load(tagId).Children.Select(t => new TagForApiContract(t' thumbPersister' WebHelper.IsSSL(Request)' lang' fields)).ToArray()); " is 164.
Long Statement,VocaDb.Web.Controllers.Api,TagApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\TagApiController.cs,GetList,The length of the statement  "			var queryParams = new TagQueryParams(new CommonSearchParams(TagSearchTextQuery.Create(query' nameMatchMode)' false' preferAccurateMatches)' " is 139.
Long Statement,VocaDb.Web.Controllers.Api,TagApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\TagApiController.cs,GetTopTags,The length of the statement  "			return queries.Find(t => new TagBaseContract(t' lang)' new TagQueryParams(new CommonSearchParams()' new PagingProperties(0' 15' false)) { " is 137.
Long Statement,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetEvents,The length of the statement  "			return queries.GetEvents(id' relationshipType' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series); " is 168.
Long Statement,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,GetRatedSongs,The length of the statement  "			var songs = queries.GetRatedSongs(queryParams' ratedSong => new RatedSongForUserForApiContract(ratedSong' lang' fields)); " is 121.
Long Statement,VocaDb.Web,MvcApplication,C:\repos\VocaDB_vocadb\VocaDbWeb\Global.asax.cs,Application_Error,The length of the statement  "			// NHibernate missing entity exceptions. Usually caused by an invalid or deleted Id. This error has been logged already. " is 120.
Long Statement,VocaDb.Web.Code.WebApi,RestrictBannedIPAttribute,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\WebApi\RestrictBannedIPAttribute.cs,OnActionExecuting,The length of the statement  "			var ipRules = (IPRuleManager)actionContext.ControllerContext.Configuration.DependencyResolver.GetService(typeof(IPRuleManager)); " is 128.
Long Statement,VocaDb.Web.Helpers,RazorHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\RazorHelper.cs,RenderPartialViewToString,The length of the statement  "				var fakeControllerContext = new ControllerContext(new HttpContextWrapper(new HttpContext(new HttpRequest(null' request.RequestUri.ToString()' null)' new HttpResponse(null)))' routeData' new HelpController(null)); " is 212.
Long Statement,VocaDb.Web.Helpers,RazorHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\RazorHelper.cs,RenderPartialViewToString,The length of the statement  "				var viewContext = new ViewContext(fakeControllerContext' razorViewResult.View' new ViewDataDictionary(model)' new TempDataDictionary()' writer); " is 144.
Long Statement,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChartWithAverage,The length of the statement  "			var averages = (average ? points.Select(p => Tuple.Create(p.Item1' Math.Floor(points.Where(p2 => p2.Item1 >= p.Item1 - TimeSpan.FromDays(182) && p2.Item1 <= p.Item1 + TimeSpan.FromDays(182)).Average(p3 => p3.Item2)))).ToArray() : new Tuple<DateTime' double>[0]); " is 262.
Long Statement,VocaDb.Web.Helpers,HtmlPrefixScopeExtensions,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HtmlPrefixScopeExtensions.cs,BeginCollectionItem,The length of the statement  "            // autocomplete="off" is needed to work around a very annoying Chrome behaviour whereby it reuses old values after the user clicks "Back"' which causes the xyz.index and xyz[...] values to get out of sync." is 205.
Long Statement,VocaDb.Web.Helpers,HtmlPrefixScopeExtensions,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HtmlPrefixScopeExtensions.cs,BeginCollectionItem,The length of the statement  "            html.ViewContext.Writer.WriteLine(string.Format("<input type=\"hidden\" name=\"{0}.index\" autocomplete=\"off\" value=\"{1}\" />"' collectionName' html.Encode(itemIndex)));" is 172.
Long Statement,VocaDb.Web.Helpers,PVHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\PVHelper.cs,GetMainPVs,The length of the statement  "			return EnumVal<PVService>.Values.Select(service => VideoServiceHelper.GetPV(allPvs' service)).Where(p => p != null).ToArray();" is 126.
Long Statement,VocaDb.Web.Helpers,ResourceHelpers,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ResourceHelpers.cs,ToDict,The length of the statement  "			return resourceManager.GetResourceSet(CultureInfo.CurrentUICulture' true' true).Cast<DictionaryEntry>().ToDictionary(k => k.Key' v => v.Value);" is 143.
Long Statement,VocaDb.Web.Helpers,Translate,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\Translate.cs,PermissionTokenName,The length of the statement  "				return (token.Name != null ? PermissionTokenNames.ResourceManager.GetString(token.Name) : null) ?? token.Name ?? token.Id.ToString(); " is 133.
Long Statement,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,ConditionalAttribute,The length of the statement  "				return new MvcHtmlString(!string.IsNullOrEmpty(value) ? attributeName + "=\"" + html.Encode(value) + "\"" : attributeName); " is 123.
Long Statement,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,CreateArtistTypesList,The length of the statement  "			return new SelectList(AppConfig.ArtistTypes.ToDictionary(s => s' Translate.ArtistTypeName)' "Key"' "Value"' selectedValue); " is 123.
Long Statement,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,CreateDiscTypesList,The length of the statement  "			return new SelectList(EnumVal<DiscType>.Values.ToDictionary(s => s' Translate.DiscTypeName)' "Key"' "Value"' selectedValue); " is 124.
Long Statement,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,CreateEmailOptionsList,The length of the statement  "			return new SelectList(EnumVal<UserEmailOptions>.Values.ToDictionary(s => s' Translate.EmailOptions)' "Key"' "Value"' selectedValue); " is 132.
Long Statement,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,CreateSongTypesList,The length of the statement  "			return new SelectList(AppConfig.SongTypes.ToDictionary(s => s' Translate.SongTypeNames.GetName)' "Key"' "Value"' selectedValue); " is 128.
Long Statement,VocaDb.Web.Helpers,ViewHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\ViewHelper.cs,LanguageSelectionDropDownListFor,The length of the statement  "			return htmlHelper.DropDownListFor(expression' allowUnspecified ? CreateLanguageSelectionList(selectedValue) : CreateLanguageSelectionListWithoutUnspecified(selectedValue)' htmlAttributes); " is 188.
Long Statement,VocaDb.Web.Models.Tag,TagEditViewModel,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\Tag\TagEditViewModel.cs,CopyNonEditableProperties,The length of the statement  "				return string.Join("' "' EnumVal<EntryType>.Values.Where(e => e != EntryType.Undefined).Where(e => t.HasFlag((TagTargetTypes)e)).Select(e => Translate.EntryTypeNames[e])); " is 171.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("Album"' "Al/{id}/{friendlyName}"' new { controller = "Album"' action = "Details"' friendlyName = UrlParameter.Optional }' new { id = numeric }); " is 161.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("Artist"' "Ar/{id}/{friendlyName}"' new { controller = "Artist"' action = "Details"' friendlyName = UrlParameter.Optional }' new { id = numeric }); " is 163.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("ReleaseEvent"' "E/{id}/{slug}"' new { controller = "Event"' action = "Details"' slug = UrlParameter.Optional }' new { id = numeric }); " is 151.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("ReleaseEventSeries"' "Es/{id}/{slug}"' new { controller = "Event"' action = "SeriesDetails"' slug = UrlParameter.Optional }' new { id = numeric }); " is 164.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("Song"' "S/{id}/{friendlyName}"' new { controller = "Song"' action = "Details"' friendlyName = UrlParameter.Optional }' new { id = numeric }); " is 158.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("SongList"' "L/{id}/{slug}"' new { controller = "SongList"' action = "Details"' slug = UrlParameter.Optional }' new { id = numeric }); " is 150.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("Tag"' "T/{id}/{slug}"' new { controller = "Tag"' action = "DetailsById"' slug = UrlParameter.Optional }' new { id = numeric }); " is 144.
Long Statement,VocaDb.Web.App_Start,RouteConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\RouteConfig.cs,RegisterRoutes,The length of the statement  "			routes.MapRoute("Discussion"' "discussion/{*clientPath}"' new { controller = "Discussion"' action = "Index"' clientPath = UrlParameter.Optional }); " is 147.
Long Statement,VocaDb.Web.App_Start,WebApiConfig,C:\repos\VocaDB_vocadb\VocaDbWeb\App_Start\WebApiConfig.cs,Configure,The length of the statement  "			json.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); // All properties in camel case " is 120.
Long Statement,VocaDb.Web.Code,EnumArrayModelBinder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\EnumArrayModelBinder.cs,BindModel,The length of the statement  "			var result = enumValType.GetMethod("ParseMultiple"' BindingFlags.Public | BindingFlags.Static).Invoke(null' new [] { val.AttemptedValue }); " is 139.
Long Statement,VocaDb.Web.Code,ErrorLogger,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\ErrorLogger.cs,RequestInfo,The length of the statement  "				msg' request.UserHostAddress' request.UserHostName' request.HttpMethod' request.Unvalidated.Url.PathAndQuery' request.UserAgent' request.UrlReferrer); " is 150.
Long Statement,VocaDb.Web.Code,JsonModelBinder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\FromJsonAttribute.cs,BindModel,The length of the statement  "			var stringified = (!allowHtml ? controllerContext.HttpContext.Request[propertyName] : controllerContext.HttpContext.Request.Unvalidated[propertyName]); " is 151.
Long Statement,VocaDb.Web.Code,JsonModelBinder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\FromJsonAttribute.cs,BindModel,The length of the statement  "				obj = JsonConvert.DeserializeObject(stringified' type' new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }); " is 132.
Long Statement,VocaDb.Web.Code,JsonModelBinder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\FromJsonAttribute.cs,BindProperty,The length of the statement  "			return BindModel(controllerContext' bindingContext' propertyDescriptor.Name' propertyDescriptor.PropertyType' propertyDescriptor.Attributes.Contains(allowHtmlAttribute)); " is 170.
Long Statement,VocaDb.Web.Code,TimeAgoStringBuilder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\TimeAgoStringBuilder.cs,Diff,The length of the statement  "			// Note: DateTime substraction does not automatically consider the DateTimeKind - we need to convert them to the same kind.  " is 123.
Long Statement,VocaDb.Web.Code.Feeds,SongFeedFactory,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\Feeds\SongFeedFactory.cs,CreateFeedItem,The length of the statement  "			var item = new SyndicationItem(song.Name' new TextSyndicationContent(contentFac(song)' TextSyndicationContentKind.Html)'" is 120.
Long Statement,VocaDb.Web.Code.Markdown,MarkdownParser,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\Markdown\MarkdownParser.cs,TranformMarkdown,The length of the statement  "			// These settings roughtly correspond to GitHub-flavored Markdown (https://help.github.com/articles/github-flavored-markdown) " is 125.
Long Statement,VocaDb.Web.Code.Markdown,MarkdownParser,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\Markdown\MarkdownParser.cs,TranformMarkdown,The length of the statement  "			return new MarkdownSharp.Markdown(new MarkdownOptions { AutoHyperlink = true' AutoNewLines = true' StrictBoldItalic = true }) " is 125.
Long Statement,VocaDb.Web.Code.Security,LogFileReader,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\Security\LogFileReader.cs,GetLatestLogFileContents,The length of the statement  "			var latestFile = (folder != null ? Directory.GetFiles(folder' "*.log").OrderByDescending(f => f).FirstOrDefault() : null);" is 122.
Long Statement,VocaDb.Web.Controllers,AdminController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AdminController.cs,AuditLogEntries,The length of the statement  "			var entries = Service.GetAuditLog(model.Filter' start' 200' cutoffDays' model.UserName' excludeUsers' model.OnlyNewUsers' model.GroupId);" is 137.
Long Statement,VocaDb.Web.Controllers,AlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AlbumController.cs,CreateAlbumEditViewModel,The length of the statement  "			return Service.GetAlbum(id' album => new AlbumEditViewModel(new AlbumContract(album' PermissionContext.LanguagePreference)' PermissionContext' " is 142.
Long Statement,VocaDb.Web.Controllers,AlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AlbumController.cs,FindDuplicate,The length of the statement  "			var contracts = result.Select(f => new DuplicateEntryResultContract<AlbumMatchProperty>(f' AlbumMatchProperty.Title)).ToArray(); " is 128.
Long Statement,VocaDb.Web.Controllers,AlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AlbumController.cs,Details,The length of the statement  "				albumDescriptionGenerator.GenerateDescription(model' d => Translate.DiscTypeNames.GetName(d' CultureInfo.InvariantCulture)); " is 124.
Long Statement,VocaDb.Web.Controllers,AlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AlbumController.cs,Edit,The length of the statement  "			if (model.OriginalRelease != null && model.OriginalRelease.ReleaseDate != null && !OptionalDateTime.IsValid(model.OriginalRelease.ReleaseDate.Year' model.OriginalRelease.ReleaseDate.Day' model.OriginalRelease.ReleaseDate.Month)) " is 228.
Long Statement,VocaDb.Web.Controllers,AlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AlbumController.cs,Edit,The length of the statement  "				ModelState.AddModelError("ImageError"' "The uploaded image could not processed' it might be broken. Please check the file and try again."); " is 139.
Long Statement,VocaDb.Web.Controllers,ArtistController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ArtistController.cs,CreateArtistEditViewModel,The length of the statement  "			return queries.Get(id' album => new ArtistEditViewModel(new ArtistContract(album' PermissionContext.LanguagePreference)' PermissionContext' " is 139.
Long Statement,VocaDb.Web.Controllers,ArtistController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ArtistController.cs,FindDuplicate,The length of the statement  "			var result = queries.FindDuplicates(new[] { term1' term2' term3 }' linkUrl).Select(e => new DuplicateEntryResultContract<ArtistEditableFields>(e' ArtistEditableFields.Names)); " is 175.
Long Statement,VocaDb.Web.Controllers,ArtistController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ArtistController.cs,Details,The length of the statement  "			prop.Description = new ArtistDescriptionGenerator().GenerateDescription(model' markdownParser.GetPlainText(model.Description.EnglishOrOriginal)' Translate.ArtistTypeNames); " is 172.
Long Statement,VocaDb.Web.Controllers,ArtistController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ArtistController.cs,Details,The length of the statement  "			prop.OpenGraph.Title = hasDescription ? string.Format("{0} ({1})"' model.Name' Translate.ArtistTypeName(model.ArtistType)) : model.Name; " is 136.
Long Statement,VocaDb.Web.Controllers,ArtistController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ArtistController.cs,Create,The length of the statement  "			if (string.IsNullOrWhiteSpace(model.NameOriginal) && string.IsNullOrWhiteSpace(model.NameRomaji) && string.IsNullOrWhiteSpace(model.NameEnglish)) " is 145.
Long Statement,VocaDb.Web.Controllers,ArtistController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ArtistController.cs,Create,The length of the statement  "				ModelState.AddModelError("Picture"' "The uploaded image could not processed' it might be broken. Please check the file and try again."); " is 136.
Long Statement,VocaDb.Web.Controllers,ArtistController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ArtistController.cs,Edit,The length of the statement  "				ModelState.AddModelError("ImageError"' "The uploaded image could not processed' it might be broken. Please check the file and try again.");				 " is 139.
Long Statement,VocaDb.Web.Controllers,ControllerBase,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ControllerBase.cs,AddFormSubmissionError,The length of the statement  "			ModelState.AddModelError(string.Empty' string.Format("Error while sending form contents - please try again. Diagnostic error message: {0}."' details)); " is 151.
Long Statement,VocaDb.Web.Controllers,ControllerBase,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ControllerBase.cs,CheckConcurrentEdit,The length of the statement  "					TempData.SetStatusMessage(string.Format(ViewRes.EntryEditStrings.ConcurrentEditWarningNow' conflictingEditor.UserName)); " is 120.
Long Statement,VocaDb.Web.Controllers,ControllerBase,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ControllerBase.cs,CheckConcurrentEdit,The length of the statement  "					TempData.SetStatusMessage(string.Format(ViewRes.EntryEditStrings.ConcurrentEditWarning' conflictingEditor.UserName' (int)ago.TotalMinutes)); " is 140.
Long Statement,VocaDb.Web.Controllers,EventController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\EventController.cs,Index,The length of the statement  "					ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series' thumbPersister' WebHelper.IsSSL(Request))' " is 163.
Long Statement,VocaDb.Web.Controllers,EventController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\EventController.cs,PopupContent,The length of the statement  "		    var releaseEvent = queries.Load(id' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series); " is 157.
Long Statement,VocaDb.Web.Controllers,EventController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\EventController.cs,ViewVersion,The length of the statement  "		    return View(new ViewVersion<ArchivedEventVersionDetailsContract>(contract' enumTranslations' contract.ComparedVersionId)); " is 122.
Long Statement,VocaDb.Web.Controllers,ExtController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ExtController.cs,EntryToolTip,The length of the statement  "					data = RenderPartialViewToString("_EventPopupContent"' eventQueries.GetOne(id' ContentLanguagePreference.Default' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series' WebHelper.IsSSL(Request))); " is 262.
Long Statement,VocaDb.Web.Controllers,ExtController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ExtController.cs,EntryToolTip,The length of the statement  "						new TagForApiContract(t' entryThumbPersister' WebHelper.IsSSL(Request)' ContentLanguagePreference.Default' TagOptionalFields.AdditionalNames | TagOptionalFields.MainPicture))); " is 176.
Long Statement,VocaDb.Web.Controllers,MikuDbAlbumController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\MikuDbAlbumController.cs,AcceptImported,The length of the statement  "			var selectedSongIds = (album.Tracks != null ? album.Tracks.Where(t => t.Selected).Select(t => t.ExistingSong.Id).ToArray() : new int[] { });" is 140.
Long Statement,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The length of the statement  "						NameMatchMode.Auto' Model.DataContracts.Api.EntryOptionalFields.None' Model.Domain.Globalization.ContentLanguagePreference.Default' false'  " is 138.
Long Statement,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The length of the statement  "					var artist = artistService.FindArtists(new ArtistQueryParams(artistTextQuery' null' 0' 2' false' ArtistSortRule.None' false) { " is 126.
Long Statement,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The length of the statement  "					var album = albumService.Find(new AlbumQueryParams(textQuery' DiscType.Unknown' 0' 2' false' AlbumSortRule.None' false) { " is 121.
Long Statement,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The length of the statement  "					var tags = tagQueries.Find(new TagQueryParams(new CommonSearchParams(textQuery' true' true)' PagingProperties.FirstPage(2)) { " is 125.
Long Statement,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,Radio,The length of the statement  "			return Index(new SearchIndexViewModel(EntryType.Song) { MinScore = 1' Sort = "AdditionDate"' ViewMode = "PlayList"' Autoplay = true' Shuffle = true }); " is 151.
Long Statement,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Details,The length of the statement  "			var contract = queries.GetSongDetails(id' albumId' GetHostnameForValidHit()' null' WebHelper.GetUserLanguageCodes(Request)); " is 124.
Long Statement,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Details,The length of the statement  "			prop.OpenGraph.Title = hasDescription ? string.Format("{0} ({1})"' titleAndArtist' Translate.SongTypeNames[model.SongType]) : model.Name; " is 137.
Long Statement,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Create,The length of the statement  "			if (string.IsNullOrWhiteSpace(model.NameOriginal) && string.IsNullOrWhiteSpace(model.NameRomaji) && string.IsNullOrWhiteSpace(model.NameEnglish)) " is 145.
Long Statement,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Edit,The length of the statement  "			var model = Service.GetSong(id' song => new SongEditViewModel(new SongContract(song' PermissionContext.LanguagePreference' false)'  " is 130.
Long Statement,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Edit,The length of the statement  "				return View(Service.GetSong(model.Id' song => new SongEditViewModel(new SongContract(song' PermissionContext.LanguagePreference' false)'  " is 136.
Long Statement,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Feed,The length of the statement  "						ArtistIds = !indexParams.artistId.HasValue || indexParams.artistId.Value == 0 ? null : new [] { indexParams.artistId.Value } " is 124.
Long Statement,VocaDb.Web.Controllers,SongListController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongListController.cs,Details,The length of the statement  "			var thumbUrl = viewModel.ThumbUrl = Url.EntryImageOld(contract.Thumb' ImageSize.Original) ?? Url.EntryImageOld(contract.Thumb' ImageSize.Thumb); " is 144.
Long Statement,VocaDb.Web.Controllers,SongListController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongListController.cs,Export,The length of the statement  "			var formatString = "%notes%;%publishdate%;%title%;%url%;%pv.original.niconicodouga%;%pv.original.!niconicodouga%;%pv.reprint%"; " is 127.
Long Statement,VocaDb.Web.Controllers,SongListController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongListController.cs,Export,The length of the statement  "			var tagString = queries.HandleQuery(ctx => new SongListFormatter(entryLinkFactory).ApplyFormat(ctx.Load(id)' formatString' PermissionContext.LanguagePreference' true)); " is 168.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SaveCachedReport,The length of the statement  "			context.Cache.Add("report_" + name' data' null' Cache.NoAbsoluteExpiration' TimeSpan.FromDays(1)' CacheItemPriority.Default' null); " is 131.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SumToBaseVoicebanks,The length of the statement  "					.GroupBy(byDate2 => baseVoicebankMap.ContainsKey(byDate2.ArtistId) ? baseVoicebankMap[byDate2.ArtistId] : byDate2.ArtistId) " is 123.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,GetGenreTagUsages,The length of the statement  "				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(PermissionContext.LanguagePreference).ToDictionary(t => t.Id); " is 155.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,AlbumsPerMonth,The length of the statement  "						&& (a.OriginalRelease.ReleaseDate.Year < now.Year || (a.OriginalRelease.ReleaseDate.Year == now.Year && a.OriginalRelease.ReleaseDate.Month <= now.Month)) " is 154.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,AlbumsPerVocaloid,The length of the statement  "			Expression<Func<ArtistForAlbum' bool>> dateFilter = (song) => (cutoff.HasValue ? song.Album.CreateDate >= cutoff : true); " is 121.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,AlbumSongsOverTime,The length of the statement  "			var data = songAggregateQueries.SongsOverTime(TimeUnit.Month' false' null' a => a.AllAlbums.Any()' a => a.AllAlbums.Count == 0); " is 128.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,ArtistsPerMonth,The length of the statement  "					.GroupBy(a => new { // Note: we want to do count distinct here' but it's not supported by NHibernate LINQ' so doing a second group by in memory " is 143.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,CumulativeSongsPublished,The length of the statement  "			var values = songAggregateQueries.SongsOverTime(TimeUnit.Month' false' cutoff' a => a.PVs.PVs.Any()' a => a.PVs.PVs.Count == 0).First(); " is 136.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SongsPublishedPerDay,The length of the statement  "			var values = songAggregateQueries.SongsOverTime(unit' false' cutoff' s => s.PublishDate.DateTime <= DateTime.Now' null)[0]; " is 123.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SongsPublishedPerDay,The length of the statement  "			return DateLineChartWithAverage("Songs published per " + unit.ToString().ToLowerInvariant()' "Songs"' "Number of songs"' points); " is 129.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SongsPerVocaloid,The length of the statement  "					.Where(a => a.ArtistType == ArtistType.Vocaloid || a.ArtistType == ArtistType.UTAU || a.ArtistType == ArtistType.Utaite) " is 120.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SongsPerVocaloidOverTime,The length of the statement  "					.Where(s => !s.Song.Deleted && s.Song.PublishDate.DateTime != null && s.Song.PublishDate.DateTime.Value.Year >= startYear && vocalistTypes.Contains(s.Artist.ArtistType)) " is 169.
Long Statement,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SongsWithoutPVOverTime,The length of the statement  "			var data = songAggregateQueries.SongsOverTime(TimeUnit.Month' false' null' a => a.PVs.PVs.Any()' a => a.PVs.PVs.Count == 0); " is 124.
Long Statement,VocaDb.Web.Controllers,TagController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\TagController.cs,ViewVersion,The length of the statement  "			return View(new ViewVersion<ArchivedTagVersionDetailsContract>(contract' enumTranslations' contract.ComparedVersionId)); " is 120.
Long Statement,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,Create,The length of the statement  "			string restrictedErr = "Sorry' access from your host is restricted. It is possible this restriction is no longer valid. If you think this is the case' please contact support."; " is 176.
Long Statement,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,Create,The length of the statement  "				log.Warn("An attempt was made to fill the bot decoy field from {0} with the value '{1}'."' Hostname' ModelState["Extra"]); " is 122.
Long Statement,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,MySettings,The length of the statement  "				ModelState.AddModelError("Username"' "Username is invalid. Username may contain alphanumeric characters and underscores."); " is 123.
Long Statement,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,MySettings,The length of the statement  "				ModelState.AddModelError("Username"' "Username may only be changed once per year. If necessary' contact a staff member."); " is 122.
Long Statement,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,RequestVerification,The length of the statement  "			artistQueries.CreateReport(selectedArtist.Id' ArtistReportType.OwnershipClaim' Hostname' string.Format("Account verification request: {0}"' fullMessage)' null); " is 160.
Long Statement,VocaDb.Web.Models,UserEdit,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\UserModels.cs,ToContract,The length of the statement  "				AdditionalPermissions = new HashSet<PermissionToken>(Permissions.Where(p => p.HasFlag).Select(p => PermissionToken.GetById(p.PermissionType.Id))) " is 145.
Long Statement,VocaDb.Web.Models.Album,Versions,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\Album\Versions.cs,CreateForAlbum,The length of the statement  "				GetChangeString(album.ChangedFields)' album.Reason != AlbumArchiveReason.PropertiesUpdated || album.ChangedFields != AlbumEditableFields.Nothing); " is 146.
Long Statement,VocaDb.Web.Models.Artist,Versions,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\Artist\Versions.cs,CreateForArtist,The length of the statement  "				GetChangeString(artist.ChangedFields)' artist.Reason != ArtistArchiveReason.PropertiesUpdated || artist.ChangedFields != ArtistEditableFields.Nothing); " is 151.
Long Statement,VocaDb.Web.Models.Song,Versions,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\Song\Versions.cs,CreateForSong,The length of the statement  "				GetChangeString(song.ChangedFields)' song.Reason != SongArchiveReason.PropertiesUpdated || song.ChangedFields != SongEditableFields.Nothing); " is 141.
Long Statement,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,FindAlbums,The length of the statement  "			return albumService.Find(SearchTextQuery.Create(term' nameMatchMode)' DiscType.Unknown' 0' maxResults' true' moveExactToTop: true' sortRule: sort); " is 147.
Long Statement,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,FindArtists,The length of the statement  "			return artistService.FindArtists(new ArtistQueryParams(ArtistSearchTextQuery.Create(term' nameMatchMode)' new ArtistType[] {}' 0' maxResults' true' ArtistSortRule.Name' true)); " is 176.
Long Statement,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,FindSongs,The length of the statement  "				SearchTextQuery.Create(term' nameMatchMode)' new SongType[] {}' 0' sampleSize' true' SongSortRule.Name' false' true' null)' false); " is 131.
Long Statement,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,FindSongs,The length of the statement  "			return new PartialFindResult<SongWithAlbumAndPVsContract>(results.Items.Take(maxResults).ToArray()' results.TotalCount' results.Term); " is 134.
Long Statement,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,GetAlbumDetails,The length of the statement  "			var albums = albumService.Find(SearchTextQuery.Create(term)' DiscType.Unknown' 0' 10' false' moveExactToTop: true' sortRule: sort); " is 131.
Long Statement,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,GetArtistDetails,The length of the statement  "			var artists = artistService.FindArtists(new ArtistQueryParams(ArtistSearchTextQuery.Create(term)' new ArtistType[] {}' 0' 10'  " is 125.
Long Statement,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,GetTagByName,The length of the statement  "			var tag = tagQueries.Find(t => new TagContract(t' ContentLanguagePreference.Default' true)' new TagQueryParams(new CommonSearchParams(TagSearchTextQuery.Create(name)' false' true)' " is 180.
Empty Catch Block,VocaDb.Web.Controllers.Api,ResourcesApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\ResourcesApiController.cs,GetList,The method has an empty catch block.
Empty Catch Block,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,ForgotPassword,The method has an empty catch block.
Magic Number,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,GetTopSongs,The following statement contains a magic number: return queries.HandleQuery(ctx => {			    				var query = ctx.Query()  					.Where(s => !s.Deleted && s.RatingScore > 0)  					.WhereHasVocalist(vocalist ?? SongVocalistSelection.Nothing);    				if (durationHours.HasValue) {    					var timeSpan = TimeSpan.FromHours(durationHours.Value);  					DateTime? endDate = null;    					if (!startDate.HasValue) {  						startDate = DateTime.Now - timeSpan;  					} else {  						endDate = startDate + timeSpan;  					}    					switch (filterBy) {  						case TopSongsDateFilterType.PublishDate: {  							startDate = startDate?.Date;  							endDate = endDate?.Date;  							query = query.WherePublishDateIsBetween(startDate' endDate);  							break;  						}  						case TopSongsDateFilterType.CreateDate: {  							query = query.Where(s => s.CreateDate >= startDate);  							break;		  						}  						case TopSongsDateFilterType.Popularity: {  							// Sort by number of ratings and hits during that time  							// Older songs get more hits so value them even less  							query = query.OrderByDescending(s => s.UserFavorites  								.Where(f => f.Date >= startDate)  								.Sum(f => (int)f.Rating) + (s.Hits.Count(h => h.Date >= startDate) / 100));  							break;  						}  					}  						  					if (filterBy != TopSongsDateFilterType.Popularity) {  						query = query.OrderByDescending(s => s.RatingScore + (s.Hits.Count / 30));  					}    				} else {  					query = query.OrderByDescending(s => s.RatingScore);			  				}  					  				var songs = query  					.Take(maxResults)  					.ToArray();    				var contracts = songs  					.Select(s => new SongForApiContract(s' null' languagePreference' fields))  					.ToArray();    				return contracts;    			});
Magic Number,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,GetTopSongs,The following statement contains a magic number: return queries.HandleQuery(ctx => {			    				var query = ctx.Query()  					.Where(s => !s.Deleted && s.RatingScore > 0)  					.WhereHasVocalist(vocalist ?? SongVocalistSelection.Nothing);    				if (durationHours.HasValue) {    					var timeSpan = TimeSpan.FromHours(durationHours.Value);  					DateTime? endDate = null;    					if (!startDate.HasValue) {  						startDate = DateTime.Now - timeSpan;  					} else {  						endDate = startDate + timeSpan;  					}    					switch (filterBy) {  						case TopSongsDateFilterType.PublishDate: {  							startDate = startDate?.Date;  							endDate = endDate?.Date;  							query = query.WherePublishDateIsBetween(startDate' endDate);  							break;  						}  						case TopSongsDateFilterType.CreateDate: {  							query = query.Where(s => s.CreateDate >= startDate);  							break;		  						}  						case TopSongsDateFilterType.Popularity: {  							// Sort by number of ratings and hits during that time  							// Older songs get more hits so value them even less  							query = query.OrderByDescending(s => s.UserFavorites  								.Where(f => f.Date >= startDate)  								.Sum(f => (int)f.Rating) + (s.Hits.Count(h => h.Date >= startDate) / 100));  							break;  						}  					}  						  					if (filterBy != TopSongsDateFilterType.Popularity) {  						query = query.OrderByDescending(s => s.RatingScore + (s.Hits.Count / 30));  					}    				} else {  					query = query.OrderByDescending(s => s.RatingScore);			  				}  					  				var songs = query  					.Take(maxResults)  					.ToArray();    				var contracts = songs  					.Select(s => new SongForApiContract(s' null' languagePreference' fields))  					.ToArray();    				return contracts;    			});
Magic Number,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,PostPVs,The following statement contains a magic number: queries.HandleTransaction(ctx => {    				var song = ctx.Load(id);    				EntryPermissionManager.VerifyEdit(userPermissionContext' song);    				var diff = new SongDiff();    				var pvDiff = queries.UpdatePVs(ctx' song' diff' pvs);    				if (pvDiff.Changed) {    					var logStr = string.Format("updated PVs for song {0}"' entryLinkFactory.CreateEntryLink(song)).Truncate(400);    					queries.Archive(ctx' song' diff' SongArchiveReason.PropertiesUpdated' string.Empty);  					ctx.Update(song);  					ctx.AuditLogger.AuditLog(logStr);    				}    			});
Magic Number,VocaDb.Web.Controllers.Api,TagApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\TagApiController.cs,GetTopTags,The following statement contains a magic number: return queries.Find(t => new TagBaseContract(t' lang)' new TagQueryParams(new CommonSearchParams()' new PagingProperties(0' 15' false)) {  				CategoryName = categoryName'  				SortRule = TagSortRule.UsageCount'  				LanguagePreference = lang  			})  			.Items.OrderBy(t => t.Name).ToArray();
Magic Number,VocaDb.Web.Helpers,DateTimeUtils,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\DateTimeUtils.cs,ParseFromSimpleString,The following statement contains a magic number: var unit = (match.Groups.Count >= 3 ? match.Groups[2].Value : string.Empty).ToLowerInvariant();
Magic Number,VocaDb.Web.Helpers,DateTimeUtils,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\DateTimeUtils.cs,ParseFromSimpleString,The following statement contains a magic number: var unit = (match.Groups.Count >= 3 ? match.Groups[2].Value : string.Empty).ToLowerInvariant();
Magic Number,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,ToEpochTime,The following statement contains a magic number: return (date - new DateTime(1970' 1' 1)).TotalMilliseconds;
Magic Number,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChartWithAverage,The following statement contains a magic number: var averages = (average ? points.Select(p => Tuple.Create(p.Item1' Math.Floor(points.Where(p2 => p2.Item1 >= p.Item1 - TimeSpan.FromDays(182) && p2.Item1 <= p.Item1 + TimeSpan.FromDays(182)).Average(p3 => p3.Item2)))).ToArray() : new Tuple<DateTime' double>[0]);
Magic Number,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChartWithAverage,The following statement contains a magic number: var averages = (average ? points.Select(p => Tuple.Create(p.Item1' Math.Floor(points.Where(p2 => p2.Item1 >= p.Item1 - TimeSpan.FromDays(182) && p2.Item1 <= p.Item1 + TimeSpan.FromDays(182)).Average(p3 => p3.Item2)))).ToArray() : new Tuple<DateTime' double>[0]);
Magic Number,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChartWithAverage,The following statement contains a magic number: var series = (average ? new[] {  					dataSeries'  					new Series {  						Type = SeriesType.Spline'  						Name = "Average"'  						Data = averages.Select(p => new object[] { ToEpochTime(p.Item1)' p.Item2 }).ToArray()'  						Marker = new {  							enabled = false  						}'  						LineWidth = 4  					}  				}  				: new[] { dataSeries });
Magic Number,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChart,The following statement contains a magic number: return new Highchart {  				Chart = new Chart {  					Height = 600  				}'  				Title = title'  				XAxis = new Axis(AxisType.Datetime' new Title())'  				YAxis = new Axis {  					Title = yAxisTitle'  					Min = 0'  				}'  				Tooltip = new {  					Shared = true'  					Crosshairs = true  				}'  				PlotOptions = new PlotOptions {  					Bar = new {  						DataLabels = new {  							Enabled = true  						}  					}  				}'  				Legend = new {  					Layout = "vertical"'  					Align = "left"'  					X = 120'  					VerticalAlign = "top"'  					Y = 100'  					Floating = true'  					BackgroundColor = "#FFFFFF"  				}'  				Series = series  			};
Magic Number,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChart,The following statement contains a magic number: return new Highchart {  				Chart = new Chart {  					Height = 600  				}'  				Title = title'  				XAxis = new Axis(AxisType.Datetime' new Title())'  				YAxis = new Axis {  					Title = yAxisTitle'  					Min = 0'  				}'  				Tooltip = new {  					Shared = true'  					Crosshairs = true  				}'  				PlotOptions = new PlotOptions {  					Bar = new {  						DataLabels = new {  							Enabled = true  						}  					}  				}'  				Legend = new {  					Layout = "vertical"'  					Align = "left"'  					X = 120'  					VerticalAlign = "top"'  					Y = 100'  					Floating = true'  					BackgroundColor = "#FFFFFF"  				}'  				Series = series  			};
Magic Number,VocaDb.Web.Helpers,HighchartsHelper,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\HighchartsHelper.cs,DateLineChart,The following statement contains a magic number: return new Highchart {  				Chart = new Chart {  					Height = 600  				}'  				Title = title'  				XAxis = new Axis(AxisType.Datetime' new Title())'  				YAxis = new Axis {  					Title = yAxisTitle'  					Min = 0'  				}'  				Tooltip = new {  					Shared = true'  					Crosshairs = true  				}'  				PlotOptions = new PlotOptions {  					Bar = new {  						DataLabels = new {  							Enabled = true  						}  					}  				}'  				Legend = new {  					Layout = "vertical"'  					Align = "left"'  					X = 120'  					VerticalAlign = "top"'  					Y = 100'  					Floating = true'  					BackgroundColor = "#FFFFFF"  				}'  				Series = series  			};
Magic Number,VocaDb.Web.Helpers,KnockoutHtmlExtender,C:\repos\VocaDB_vocadb\VocaDbWeb\Helpers\KnockoutHtmlExtender.cs,TextBoxForKnockout,The following statement contains a magic number: var htmlAttributes = new Dictionary<string' object>(3) { { "data-bind"' binding } };
Magic Number,VocaDb.Web.Code,TimeAgoStringBuilder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\TimeAgoStringBuilder.cs,FormatTimeAgo,The following statement contains a magic number: if (timeSpan.TotalDays >= 2)  				return string.Format(TimeStrings.TimeAgo' (int)timeSpan.TotalDays' TimeStrings.Days);
Magic Number,VocaDb.Web.Code,TimeAgoStringBuilder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\TimeAgoStringBuilder.cs,FormatTimeAgo,The following statement contains a magic number: if (timeSpan.TotalHours >= 2)  				return string.Format(TimeStrings.TimeAgo' (int)timeSpan.TotalHours' TimeStrings.Hours);
Magic Number,VocaDb.Web.Code,TimeAgoStringBuilder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\TimeAgoStringBuilder.cs,FormatTimeAgo,The following statement contains a magic number: if (timeSpan.TotalDays > 60) {  				var months = ((now.Year - time.Year) * 12) + now.Month - time.Month;  				return string.Format(TimeStrings.TimeAgo' months' TimeStrings.Months);  			}
Magic Number,VocaDb.Web.Code,TimeAgoStringBuilder,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\TimeAgoStringBuilder.cs,FormatTimeAgo,The following statement contains a magic number: if (timeSpan.TotalDays > 60) {  				var months = ((now.Year - time.Year) * 12) + now.Month - time.Month;  				return string.Format(TimeStrings.TimeAgo' months' TimeStrings.Months);  			}
Magic Number,VocaDb.Web.Code.Security,StopForumSpamClient,C:\repos\VocaDB_vocadb\VocaDbWeb\Code\Security\StopForumSpam\StopForumSpamClient.cs,CallApi,The following statement contains a magic number: request.Timeout = 10000;
Magic Number,VocaDb.Web.Controllers,AdminController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AdminController.cs,AuditLogEntries,The following statement contains a magic number: var cutoffDays = (string.IsNullOrEmpty(model.UserName) ? 365 : 0);
Magic Number,VocaDb.Web.Controllers,AdminController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\AdminController.cs,AuditLogEntries,The following statement contains a magic number: var entries = Service.GetAuditLog(model.Filter' start' 200' cutoffDays' model.UserName' excludeUsers' model.OnlyNewUsers' model.GroupId);
Magic Number,VocaDb.Web.Controllers,ErrorController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ErrorController.cs,IPForbidden,The following statement contains a magic number: Response.SubStatusCode = 6;
Magic Number,VocaDb.Web.Controllers,EventController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\EventController.cs,Index,The following statement contains a magic number: var queryParams = new EventQueryParams {  		        AfterDate = DateTime.Now.AddDays(-2)'  		        Paging = new PagingProperties(0' 15' false)'  		        SortRule = EventSortRule.Date'  				SortDirection = SortDirection.Ascending  			};
Magic Number,VocaDb.Web.Controllers,EventController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\EventController.cs,Index,The following statement contains a magic number: var queryParams = new EventQueryParams {  		        AfterDate = DateTime.Now.AddDays(-2)'  		        Paging = new PagingProperties(0' 15' false)'  		        SortRule = EventSortRule.Date'  				SortDirection = SortDirection.Ascending  			};
Magic Number,VocaDb.Web.Controllers,HomeController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\HomeController.cs,FindNames,The following statement contains a magic number: var result = otherService.FindNames(SearchTextQuery.Create(term)' 10);
Magic Number,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The following statement contains a magic number: switch (searchType) {  				  				case EntryType.Undefined: {  					var result = entryQueries.GetList(filter' null' null' false' null' 0' 1' true' EntrySortRule.Name'   						NameMatchMode.Auto' Model.DataContracts.Api.EntryOptionalFields.None' Model.Domain.Globalization.ContentLanguagePreference.Default' false'   						searchTags: true' searchEvents: true);    					if (result.TotalCount == 1) {    						var item = result.Items.First();  						var entryId = item.Id;    						switch (item.EntryType) {  							case EntryType.Album:  								return RedirectToAlbum(entryId);  							case EntryType.Artist:  								return RedirectToArtist(entryId);  							case EntryType.ReleaseEvent:  								return RedirectToReleaseEvent(entryId' item.UrlSlug);  							case EntryType.Song:  								return RedirectToSong(entryId);  							case EntryType.Tag:  								return RedirectToTag(entryId' item.UrlSlug);  						}    					}    				}  				break;    				case EntryType.Artist:  					var artist = artistService.FindArtists(new ArtistQueryParams(artistTextQuery' null' 0' 2' false' ArtistSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (artist.Items.Length == 1) {  						return RedirectToArtist(artist.Items[0].Id);  					}  					break;    				case EntryType.Album:  					var album = albumService.Find(new AlbumQueryParams(textQuery' DiscType.Unknown' 0' 2' false' AlbumSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (album.Items.Length == 1) {  						return RedirectToAlbum(album.Items[0].Id);  					}  					break;    				case EntryType.ReleaseEvent:  					var queryParams = new EventQueryParams {  						TextQuery = textQuery'  						Paging = new PagingProperties(0' 2' false)  					};  					var ev = eventQueries.Find(s => new { s.Id' s.UrlSlug }' queryParams);  					if (ev.Items.Length == 1) {  						return RedirectToReleaseEvent(ev.Items[0].Id' ev.Items[0].UrlSlug);  					}  					break;    				case EntryType.Song:  					var song = songService.Find(new SongQueryParams(textQuery' null' 0' 2' false' SongSortRule.None' false' false' null) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (song.Items.Length == 1) {  						return RedirectToSong(song.Items[0].Id);  					}  					break;    				case EntryType.SongList:  					var list = songListQueries.Find(s => s.Id' textQuery' null' 0' 2' false' SongListSortRule.Name);  					if (list.Items.Length == 1) {  						return RedirectToSongList(list.Items[0]);  					}  					return RedirectToAction("Featured"' "SongList");    				case EntryType.Tag:  					var tags = tagQueries.Find(new TagQueryParams(new CommonSearchParams(textQuery' true' true)' PagingProperties.FirstPage(2)) {  						AllowChildren = true'  						LanguagePreference = PermissionContext.LanguagePreference  					}' TagOptionalFields.None' WebHelper.IsSSL(Request)' permissionContext.LanguagePreference);  					if (tags.Items.Length == 1) {  						return RedirectToTag(tags.Items.First().Id' tags.Items.First().Name);  					}  					break;    				default: {  					var action = "Index";  					var controller = searchType.ToString();  					return RedirectToAction(action' controller' new { filter });  				}    			}
Magic Number,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The following statement contains a magic number: switch (searchType) {  				  				case EntryType.Undefined: {  					var result = entryQueries.GetList(filter' null' null' false' null' 0' 1' true' EntrySortRule.Name'   						NameMatchMode.Auto' Model.DataContracts.Api.EntryOptionalFields.None' Model.Domain.Globalization.ContentLanguagePreference.Default' false'   						searchTags: true' searchEvents: true);    					if (result.TotalCount == 1) {    						var item = result.Items.First();  						var entryId = item.Id;    						switch (item.EntryType) {  							case EntryType.Album:  								return RedirectToAlbum(entryId);  							case EntryType.Artist:  								return RedirectToArtist(entryId);  							case EntryType.ReleaseEvent:  								return RedirectToReleaseEvent(entryId' item.UrlSlug);  							case EntryType.Song:  								return RedirectToSong(entryId);  							case EntryType.Tag:  								return RedirectToTag(entryId' item.UrlSlug);  						}    					}    				}  				break;    				case EntryType.Artist:  					var artist = artistService.FindArtists(new ArtistQueryParams(artistTextQuery' null' 0' 2' false' ArtistSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (artist.Items.Length == 1) {  						return RedirectToArtist(artist.Items[0].Id);  					}  					break;    				case EntryType.Album:  					var album = albumService.Find(new AlbumQueryParams(textQuery' DiscType.Unknown' 0' 2' false' AlbumSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (album.Items.Length == 1) {  						return RedirectToAlbum(album.Items[0].Id);  					}  					break;    				case EntryType.ReleaseEvent:  					var queryParams = new EventQueryParams {  						TextQuery = textQuery'  						Paging = new PagingProperties(0' 2' false)  					};  					var ev = eventQueries.Find(s => new { s.Id' s.UrlSlug }' queryParams);  					if (ev.Items.Length == 1) {  						return RedirectToReleaseEvent(ev.Items[0].Id' ev.Items[0].UrlSlug);  					}  					break;    				case EntryType.Song:  					var song = songService.Find(new SongQueryParams(textQuery' null' 0' 2' false' SongSortRule.None' false' false' null) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (song.Items.Length == 1) {  						return RedirectToSong(song.Items[0].Id);  					}  					break;    				case EntryType.SongList:  					var list = songListQueries.Find(s => s.Id' textQuery' null' 0' 2' false' SongListSortRule.Name);  					if (list.Items.Length == 1) {  						return RedirectToSongList(list.Items[0]);  					}  					return RedirectToAction("Featured"' "SongList");    				case EntryType.Tag:  					var tags = tagQueries.Find(new TagQueryParams(new CommonSearchParams(textQuery' true' true)' PagingProperties.FirstPage(2)) {  						AllowChildren = true'  						LanguagePreference = PermissionContext.LanguagePreference  					}' TagOptionalFields.None' WebHelper.IsSSL(Request)' permissionContext.LanguagePreference);  					if (tags.Items.Length == 1) {  						return RedirectToTag(tags.Items.First().Id' tags.Items.First().Name);  					}  					break;    				default: {  					var action = "Index";  					var controller = searchType.ToString();  					return RedirectToAction(action' controller' new { filter });  				}    			}
Magic Number,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The following statement contains a magic number: switch (searchType) {  				  				case EntryType.Undefined: {  					var result = entryQueries.GetList(filter' null' null' false' null' 0' 1' true' EntrySortRule.Name'   						NameMatchMode.Auto' Model.DataContracts.Api.EntryOptionalFields.None' Model.Domain.Globalization.ContentLanguagePreference.Default' false'   						searchTags: true' searchEvents: true);    					if (result.TotalCount == 1) {    						var item = result.Items.First();  						var entryId = item.Id;    						switch (item.EntryType) {  							case EntryType.Album:  								return RedirectToAlbum(entryId);  							case EntryType.Artist:  								return RedirectToArtist(entryId);  							case EntryType.ReleaseEvent:  								return RedirectToReleaseEvent(entryId' item.UrlSlug);  							case EntryType.Song:  								return RedirectToSong(entryId);  							case EntryType.Tag:  								return RedirectToTag(entryId' item.UrlSlug);  						}    					}    				}  				break;    				case EntryType.Artist:  					var artist = artistService.FindArtists(new ArtistQueryParams(artistTextQuery' null' 0' 2' false' ArtistSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (artist.Items.Length == 1) {  						return RedirectToArtist(artist.Items[0].Id);  					}  					break;    				case EntryType.Album:  					var album = albumService.Find(new AlbumQueryParams(textQuery' DiscType.Unknown' 0' 2' false' AlbumSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (album.Items.Length == 1) {  						return RedirectToAlbum(album.Items[0].Id);  					}  					break;    				case EntryType.ReleaseEvent:  					var queryParams = new EventQueryParams {  						TextQuery = textQuery'  						Paging = new PagingProperties(0' 2' false)  					};  					var ev = eventQueries.Find(s => new { s.Id' s.UrlSlug }' queryParams);  					if (ev.Items.Length == 1) {  						return RedirectToReleaseEvent(ev.Items[0].Id' ev.Items[0].UrlSlug);  					}  					break;    				case EntryType.Song:  					var song = songService.Find(new SongQueryParams(textQuery' null' 0' 2' false' SongSortRule.None' false' false' null) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (song.Items.Length == 1) {  						return RedirectToSong(song.Items[0].Id);  					}  					break;    				case EntryType.SongList:  					var list = songListQueries.Find(s => s.Id' textQuery' null' 0' 2' false' SongListSortRule.Name);  					if (list.Items.Length == 1) {  						return RedirectToSongList(list.Items[0]);  					}  					return RedirectToAction("Featured"' "SongList");    				case EntryType.Tag:  					var tags = tagQueries.Find(new TagQueryParams(new CommonSearchParams(textQuery' true' true)' PagingProperties.FirstPage(2)) {  						AllowChildren = true'  						LanguagePreference = PermissionContext.LanguagePreference  					}' TagOptionalFields.None' WebHelper.IsSSL(Request)' permissionContext.LanguagePreference);  					if (tags.Items.Length == 1) {  						return RedirectToTag(tags.Items.First().Id' tags.Items.First().Name);  					}  					break;    				default: {  					var action = "Index";  					var controller = searchType.ToString();  					return RedirectToAction(action' controller' new { filter });  				}    			}
Magic Number,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The following statement contains a magic number: switch (searchType) {  				  				case EntryType.Undefined: {  					var result = entryQueries.GetList(filter' null' null' false' null' 0' 1' true' EntrySortRule.Name'   						NameMatchMode.Auto' Model.DataContracts.Api.EntryOptionalFields.None' Model.Domain.Globalization.ContentLanguagePreference.Default' false'   						searchTags: true' searchEvents: true);    					if (result.TotalCount == 1) {    						var item = result.Items.First();  						var entryId = item.Id;    						switch (item.EntryType) {  							case EntryType.Album:  								return RedirectToAlbum(entryId);  							case EntryType.Artist:  								return RedirectToArtist(entryId);  							case EntryType.ReleaseEvent:  								return RedirectToReleaseEvent(entryId' item.UrlSlug);  							case EntryType.Song:  								return RedirectToSong(entryId);  							case EntryType.Tag:  								return RedirectToTag(entryId' item.UrlSlug);  						}    					}    				}  				break;    				case EntryType.Artist:  					var artist = artistService.FindArtists(new ArtistQueryParams(artistTextQuery' null' 0' 2' false' ArtistSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (artist.Items.Length == 1) {  						return RedirectToArtist(artist.Items[0].Id);  					}  					break;    				case EntryType.Album:  					var album = albumService.Find(new AlbumQueryParams(textQuery' DiscType.Unknown' 0' 2' false' AlbumSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (album.Items.Length == 1) {  						return RedirectToAlbum(album.Items[0].Id);  					}  					break;    				case EntryType.ReleaseEvent:  					var queryParams = new EventQueryParams {  						TextQuery = textQuery'  						Paging = new PagingProperties(0' 2' false)  					};  					var ev = eventQueries.Find(s => new { s.Id' s.UrlSlug }' queryParams);  					if (ev.Items.Length == 1) {  						return RedirectToReleaseEvent(ev.Items[0].Id' ev.Items[0].UrlSlug);  					}  					break;    				case EntryType.Song:  					var song = songService.Find(new SongQueryParams(textQuery' null' 0' 2' false' SongSortRule.None' false' false' null) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (song.Items.Length == 1) {  						return RedirectToSong(song.Items[0].Id);  					}  					break;    				case EntryType.SongList:  					var list = songListQueries.Find(s => s.Id' textQuery' null' 0' 2' false' SongListSortRule.Name);  					if (list.Items.Length == 1) {  						return RedirectToSongList(list.Items[0]);  					}  					return RedirectToAction("Featured"' "SongList");    				case EntryType.Tag:  					var tags = tagQueries.Find(new TagQueryParams(new CommonSearchParams(textQuery' true' true)' PagingProperties.FirstPage(2)) {  						AllowChildren = true'  						LanguagePreference = PermissionContext.LanguagePreference  					}' TagOptionalFields.None' WebHelper.IsSSL(Request)' permissionContext.LanguagePreference);  					if (tags.Items.Length == 1) {  						return RedirectToTag(tags.Items.First().Id' tags.Items.First().Name);  					}  					break;    				default: {  					var action = "Index";  					var controller = searchType.ToString();  					return RedirectToAction(action' controller' new { filter });  				}    			}
Magic Number,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The following statement contains a magic number: switch (searchType) {  				  				case EntryType.Undefined: {  					var result = entryQueries.GetList(filter' null' null' false' null' 0' 1' true' EntrySortRule.Name'   						NameMatchMode.Auto' Model.DataContracts.Api.EntryOptionalFields.None' Model.Domain.Globalization.ContentLanguagePreference.Default' false'   						searchTags: true' searchEvents: true);    					if (result.TotalCount == 1) {    						var item = result.Items.First();  						var entryId = item.Id;    						switch (item.EntryType) {  							case EntryType.Album:  								return RedirectToAlbum(entryId);  							case EntryType.Artist:  								return RedirectToArtist(entryId);  							case EntryType.ReleaseEvent:  								return RedirectToReleaseEvent(entryId' item.UrlSlug);  							case EntryType.Song:  								return RedirectToSong(entryId);  							case EntryType.Tag:  								return RedirectToTag(entryId' item.UrlSlug);  						}    					}    				}  				break;    				case EntryType.Artist:  					var artist = artistService.FindArtists(new ArtistQueryParams(artistTextQuery' null' 0' 2' false' ArtistSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (artist.Items.Length == 1) {  						return RedirectToArtist(artist.Items[0].Id);  					}  					break;    				case EntryType.Album:  					var album = albumService.Find(new AlbumQueryParams(textQuery' DiscType.Unknown' 0' 2' false' AlbumSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (album.Items.Length == 1) {  						return RedirectToAlbum(album.Items[0].Id);  					}  					break;    				case EntryType.ReleaseEvent:  					var queryParams = new EventQueryParams {  						TextQuery = textQuery'  						Paging = new PagingProperties(0' 2' false)  					};  					var ev = eventQueries.Find(s => new { s.Id' s.UrlSlug }' queryParams);  					if (ev.Items.Length == 1) {  						return RedirectToReleaseEvent(ev.Items[0].Id' ev.Items[0].UrlSlug);  					}  					break;    				case EntryType.Song:  					var song = songService.Find(new SongQueryParams(textQuery' null' 0' 2' false' SongSortRule.None' false' false' null) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (song.Items.Length == 1) {  						return RedirectToSong(song.Items[0].Id);  					}  					break;    				case EntryType.SongList:  					var list = songListQueries.Find(s => s.Id' textQuery' null' 0' 2' false' SongListSortRule.Name);  					if (list.Items.Length == 1) {  						return RedirectToSongList(list.Items[0]);  					}  					return RedirectToAction("Featured"' "SongList");    				case EntryType.Tag:  					var tags = tagQueries.Find(new TagQueryParams(new CommonSearchParams(textQuery' true' true)' PagingProperties.FirstPage(2)) {  						AllowChildren = true'  						LanguagePreference = PermissionContext.LanguagePreference  					}' TagOptionalFields.None' WebHelper.IsSSL(Request)' permissionContext.LanguagePreference);  					if (tags.Items.Length == 1) {  						return RedirectToTag(tags.Items.First().Id' tags.Items.First().Name);  					}  					break;    				default: {  					var action = "Index";  					var controller = searchType.ToString();  					return RedirectToAction(action' controller' new { filter });  				}    			}
Magic Number,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The following statement contains a magic number: switch (searchType) {  				  				case EntryType.Undefined: {  					var result = entryQueries.GetList(filter' null' null' false' null' 0' 1' true' EntrySortRule.Name'   						NameMatchMode.Auto' Model.DataContracts.Api.EntryOptionalFields.None' Model.Domain.Globalization.ContentLanguagePreference.Default' false'   						searchTags: true' searchEvents: true);    					if (result.TotalCount == 1) {    						var item = result.Items.First();  						var entryId = item.Id;    						switch (item.EntryType) {  							case EntryType.Album:  								return RedirectToAlbum(entryId);  							case EntryType.Artist:  								return RedirectToArtist(entryId);  							case EntryType.ReleaseEvent:  								return RedirectToReleaseEvent(entryId' item.UrlSlug);  							case EntryType.Song:  								return RedirectToSong(entryId);  							case EntryType.Tag:  								return RedirectToTag(entryId' item.UrlSlug);  						}    					}    				}  				break;    				case EntryType.Artist:  					var artist = artistService.FindArtists(new ArtistQueryParams(artistTextQuery' null' 0' 2' false' ArtistSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (artist.Items.Length == 1) {  						return RedirectToArtist(artist.Items[0].Id);  					}  					break;    				case EntryType.Album:  					var album = albumService.Find(new AlbumQueryParams(textQuery' DiscType.Unknown' 0' 2' false' AlbumSortRule.None' false) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (album.Items.Length == 1) {  						return RedirectToAlbum(album.Items[0].Id);  					}  					break;    				case EntryType.ReleaseEvent:  					var queryParams = new EventQueryParams {  						TextQuery = textQuery'  						Paging = new PagingProperties(0' 2' false)  					};  					var ev = eventQueries.Find(s => new { s.Id' s.UrlSlug }' queryParams);  					if (ev.Items.Length == 1) {  						return RedirectToReleaseEvent(ev.Items[0].Id' ev.Items[0].UrlSlug);  					}  					break;    				case EntryType.Song:  					var song = songService.Find(new SongQueryParams(textQuery' null' 0' 2' false' SongSortRule.None' false' false' null) {  						LanguagePreference = PermissionContext.LanguagePreference  					});  					if (song.Items.Length == 1) {  						return RedirectToSong(song.Items[0].Id);  					}  					break;    				case EntryType.SongList:  					var list = songListQueries.Find(s => s.Id' textQuery' null' 0' 2' false' SongListSortRule.Name);  					if (list.Items.Length == 1) {  						return RedirectToSongList(list.Items[0]);  					}  					return RedirectToAction("Featured"' "SongList");    				case EntryType.Tag:  					var tags = tagQueries.Find(new TagQueryParams(new CommonSearchParams(textQuery' true' true)' PagingProperties.FirstPage(2)) {  						AllowChildren = true'  						LanguagePreference = PermissionContext.LanguagePreference  					}' TagOptionalFields.None' WebHelper.IsSSL(Request)' permissionContext.LanguagePreference);  					if (tags.Items.Length == 1) {  						return RedirectToTag(tags.Items.First().Id' tags.Items.First().Name);  					}  					break;    				default: {  					var action = "Index";  					var controller = searchType.ToString();  					return RedirectToAction(action' controller' new { filter });  				}    			}
Magic Number,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Feed,The following statement contains a magic number: var pageSize = (indexParams.pageSize.HasValue ? Math.Min(indexParams.pageSize.Value' 30) : 30);
Magic Number,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,Feed,The following statement contains a magic number: var pageSize = (indexParams.pageSize.HasValue ? Math.Min(indexParams.pageSize.Value' 30) : 30);
Magic Number,VocaDb.Web.Controllers,SongController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SongController.cs,LatestVideos,The following statement contains a magic number: return Feed(new IndexRouteParams { onlyWithPVs = true' pageSize = 20' sort = SongSortRule.AdditionDate });
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,GetRootVb,The following statement contains a magic number: while (loops++ <= 10) {  				if (!voicebankMap.ContainsKey(vb))  					return vb;  				vb = voicebankMap[vb];  			}
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,AreaChart,The following statement contains a magic number: var json = new Highchart {  				Chart = new Chart {  					Height = 600'  					Type = ChartType.Area  				}'  				Title = title'  				XAxis = new Axis(AxisType.Datetime' new Title())'  				YAxis = new Axis {  					Title = "Percentage"'  					Min = 0  				}'  				Tooltip = new {  					Shared = true'  					Crosshairs = true  				}'  				PlotOptions = new PlotOptions {  					Bar = new {  						DataLabels = new {  							Enabled = true  						}  					}'  					Area = new PlotOptionsArea {  						Stacking = PlotOptionsAreaStacking.Percent'  						LineColor = "#ffffff"'  						LineWidth = 1'  						Marker = new {  							LineWidth = 1'  							LineColor = "#ffffff"  						}  					}  				}'  				Legend = new {  					Layout = "vertical"'  					Align = "left"'  					X = 120'  					VerticalAlign = "top"'  					Y = 100'  					Floating = true'  					BackgroundColor = "#FFFFFF"  				}'  				Series = (  					dataSeries  				)  			};
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,AreaChart,The following statement contains a magic number: var json = new Highchart {  				Chart = new Chart {  					Height = 600'  					Type = ChartType.Area  				}'  				Title = title'  				XAxis = new Axis(AxisType.Datetime' new Title())'  				YAxis = new Axis {  					Title = "Percentage"'  					Min = 0  				}'  				Tooltip = new {  					Shared = true'  					Crosshairs = true  				}'  				PlotOptions = new PlotOptions {  					Bar = new {  						DataLabels = new {  							Enabled = true  						}  					}'  					Area = new PlotOptionsArea {  						Stacking = PlotOptionsAreaStacking.Percent'  						LineColor = "#ffffff"'  						LineWidth = 1'  						Marker = new {  							LineWidth = 1'  							LineColor = "#ffffff"  						}  					}  				}'  				Legend = new {  					Layout = "vertical"'  					Align = "left"'  					X = 120'  					VerticalAlign = "top"'  					Y = 100'  					Floating = true'  					BackgroundColor = "#FFFFFF"  				}'  				Series = (  					dataSeries  				)  			};
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,AreaChart,The following statement contains a magic number: var json = new Highchart {  				Chart = new Chart {  					Height = 600'  					Type = ChartType.Area  				}'  				Title = title'  				XAxis = new Axis(AxisType.Datetime' new Title())'  				YAxis = new Axis {  					Title = "Percentage"'  					Min = 0  				}'  				Tooltip = new {  					Shared = true'  					Crosshairs = true  				}'  				PlotOptions = new PlotOptions {  					Bar = new {  						DataLabels = new {  							Enabled = true  						}  					}'  					Area = new PlotOptionsArea {  						Stacking = PlotOptionsAreaStacking.Percent'  						LineColor = "#ffffff"'  						LineWidth = 1'  						Marker = new {  							LineWidth = 1'  							LineColor = "#ffffff"  						}  					}  				}'  				Legend = new {  					Layout = "vertical"'  					Align = "left"'  					X = 120'  					VerticalAlign = "top"'  					Y = 100'  					Floating = true'  					BackgroundColor = "#FFFFFF"  				}'  				Series = (  					dataSeries  				)  			};
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SimpleBarChart,The following statement contains a magic number: return Json(new {  				chart = new {  					type = "bar"'  					height = 600  				}'  				title = new {  					text = title  				}'  				xAxis = new {  					categories'  					title = new {  						text = (string)null  					}  				}'  				yAxis = new {  					title = new {  						text = seriesName  					}  				}'  				plotOptions = new {  					bar = new {  						dataLabels = new {  							enabled = true  						}  					}  				}'  				legend = new {  					enabled = false  				}'  				series = new Object[] {  					new {  						name = seriesName'  						data						  					}  				}  				  			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,GetGenreTagUsages,The following statement contains a magic number: return userRepository.HandleQuery(ctx => {  				  				var genres = ctx.OfType<T>()  					.Query()  					.Where(u => u.Tag.Parent == null && u.Tag.CategoryName == TagCommonCategoryNames.Genres)  					.GroupBy(s => s.Tag.Id)  					.Select(g => new {  						TagId = g.Key'  						Count = g.Count()  					})  					.OrderByDescending(g => g.Count)  					.ToArray();    				var mainGenreIds = genres.OrderByDescending(t => t.Count).Take(10).Select(t => t.TagId).ToArray();  				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(PermissionContext.LanguagePreference).ToDictionary(t => t.Id);  				var sorted = genres.Select(t => new {  					TagName = mainGenreTags.ContainsKey(t.TagId) ? mainGenreTags[t.TagId].Name : null'  					Count = t.Count  				}).OrderByDescending(t => t.Count);    				var mainGenres = sorted.Take(10).ToArray();  				var otherCount = sorted.Skip(10).Sum(g => g.Count);  				var points = mainGenres.Concat(new[] { new {  					TagName = "Other genres"'   					Count = otherCount  				} }).Select(g => Tuple.Create(g.TagName' g.Count)).ToArray();    				return points;    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,GetGenreTagUsages,The following statement contains a magic number: return userRepository.HandleQuery(ctx => {  				  				var genres = ctx.OfType<T>()  					.Query()  					.Where(u => u.Tag.Parent == null && u.Tag.CategoryName == TagCommonCategoryNames.Genres)  					.GroupBy(s => s.Tag.Id)  					.Select(g => new {  						TagId = g.Key'  						Count = g.Count()  					})  					.OrderByDescending(g => g.Count)  					.ToArray();    				var mainGenreIds = genres.OrderByDescending(t => t.Count).Take(10).Select(t => t.TagId).ToArray();  				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(PermissionContext.LanguagePreference).ToDictionary(t => t.Id);  				var sorted = genres.Select(t => new {  					TagName = mainGenreTags.ContainsKey(t.TagId) ? mainGenreTags[t.TagId].Name : null'  					Count = t.Count  				}).OrderByDescending(t => t.Count);    				var mainGenres = sorted.Take(10).ToArray();  				var otherCount = sorted.Skip(10).Sum(g => g.Count);  				var points = mainGenres.Concat(new[] { new {  					TagName = "Other genres"'   					Count = otherCount  				} }).Select(g => Tuple.Create(g.TagName' g.Count)).ToArray();    				return points;    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,GetGenreTagUsages,The following statement contains a magic number: return userRepository.HandleQuery(ctx => {  				  				var genres = ctx.OfType<T>()  					.Query()  					.Where(u => u.Tag.Parent == null && u.Tag.CategoryName == TagCommonCategoryNames.Genres)  					.GroupBy(s => s.Tag.Id)  					.Select(g => new {  						TagId = g.Key'  						Count = g.Count()  					})  					.OrderByDescending(g => g.Count)  					.ToArray();    				var mainGenreIds = genres.OrderByDescending(t => t.Count).Take(10).Select(t => t.TagId).ToArray();  				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(PermissionContext.LanguagePreference).ToDictionary(t => t.Id);  				var sorted = genres.Select(t => new {  					TagName = mainGenreTags.ContainsKey(t.TagId) ? mainGenreTags[t.TagId].Name : null'  					Count = t.Count  				}).OrderByDescending(t => t.Count);    				var mainGenres = sorted.Take(10).ToArray();  				var otherCount = sorted.Skip(10).Sum(g => g.Count);  				var points = mainGenres.Concat(new[] { new {  					TagName = "Other genres"'   					Count = otherCount  				} }).Select(g => Tuple.Create(g.TagName' g.Count)).ToArray();    				return points;    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,GetTopValues,The following statement contains a magic number: var data = userRepository.HandleQuery(ctx => {  				  				return func(ctx.OfType<T>().Query())  					.OrderByDescending(a => a.Value)  					.Take(25)  					.ToArray();    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SongsAddedPerDay,The following statement contains a magic number: var values = repository.HandleQuery(ctx => {    				var query = ctx.Query<Song>();    				if (cutoff.HasValue)  					query = query.Where(a => a.CreateDate >= cutoff);    				return query  					.OrderBy(a => a.CreateDate.Year)  					.ThenBy(a => a.CreateDate.Month)  					.ThenBy(a => a.CreateDate.Day)  					.GroupBy(a => new {  						Year = a.CreateDate.Year'   						Month = a.CreateDate.Month'  						Day = a.CreateDate.Day  					})  					.Select(a => new {  						a.Key.Year'  						a.Key.Month'  						a.Key.Day'  						Count = a.Count()  					})  					.Where(a => a.Count < 1000)  					.ToArray();    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,SongsPerVocaloidOverTime,The following statement contains a magic number: var data = repository.HandleQuery(ctx => {    				// Note: the same song may be included multiple times for different artists  				var points = ctx.Query<ArtistForSong>()  					.Where(s => !s.Song.Deleted && s.Song.PublishDate.DateTime != null && s.Song.PublishDate.DateTime.Value.Year >= startYear && vocalistTypes.Contains(s.Artist.ArtistType))  					.FilterIfNotNull(cutoff' s => s.Song.PublishDate.DateTime > cutoff)  					.OrderBy(a => a.Song.PublishDate.DateTime.Value.Year)  					.GroupBy(s => new {  						s.Song.PublishDate.DateTime.Value.Year'  						ArtistId = s.Artist.Id'  					})  					.Select(s => new {  						s.Key.Year'  						s.Key.ArtistId'  						Count = s.Count()  					})  					.ToArray()  					.Select(s => new SongsPerArtistPerDate(new DateTime(s.Year' 1' 1)' s.ArtistId' s.Count))  					.ToArray();    				points = SumToBaseVoicebanks(ctx' points);    				var artists = ctx.Query<Artist>().Where(a => vocalistTypes.Contains(a.ArtistType)).ToDictionary(a => a.Id);    				// Group by artist' select artists with top 20 most songs (as counted for the root VB)  				// Note: we're filtering artists only after summing to root VBs' because otherwise appends would be ignored  				var byArtist = points.GroupBy(p => p.ArtistId)  					.OrderByDescending(byArtist2 => byArtist2.Select(p2 => p2.Count).Sum())  					.Take(15)  					.Select(a => Tuple.Create(artists[a.Key]' a.ToArray()));  				return byArtist;    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,HitsPerAlbum,The following statement contains a magic number: var values = userRepository.HandleQuery(ctx => {  				  				var idsAndHits = ctx.OfType<AlbumHit>().Query()  					.FilterIfNotNull(cutoff' s => s.Date > cutoff)  					.GroupBy(h => h.Entry.Id)  					.Select(h => new {  						Id = h.Key'  						Count = h.Count()  					})  					.OrderByDescending(h => h.Count)  					.Take(25)  					.ToArray();    				var ids = idsAndHits.Select(i => i.Id).ToArray();    				var albums = ctx.OfType<Album>().Query()  					.Where(a => ids.Contains(a.Id))  					.Select(a => new LocalizedValue {  						Name = new TranslatedString {			  							DefaultLanguage = a.Names.SortNames.DefaultLanguage'  							English = a.Names.SortNames.English'   							Romaji = a.Names.SortNames.Romaji'   							Japanese = a.Names.SortNames.Japanese'   						}'  						EntryId = a.Id  					}).ToArray();    				foreach (var hit in idsAndHits)  					albums.First(a => a.EntryId == hit.Id).Value = hit.Count;    				return albums.OrderByDescending(a => a.Value);    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,HitsPerSong,The following statement contains a magic number: var values = userRepository.HandleQuery(ctx => {  				  				var idsAndHits = ctx.OfType<SongHit>().Query()  					.FilterIfNotNull(cutoff' s => s.Date > cutoff)  					.GroupBy(h => h.Entry.Id)  					.Select(h => new {  						Id = h.Key'  						Count = h.Count()  					})  					.OrderByDescending(h => h.Count)  					.Take(25)  					.ToArray();    				var ids = idsAndHits.Select(i => i.Id).ToArray();    				var songs = GetSongsWithNames(ctx' ids).Values;    				foreach (var hit in idsAndHits)  					songs.First(a => a.EntryId == hit.Id).Value = hit.Count;    				return songs.OrderByDescending(a => a.Value);    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,HitsPerSongOverTime,The following statement contains a magic number: var data = repository.HandleQuery(ctx => {    				var topSongIds = ctx.Query<SongHit>()  					.Where(s => !s.Entry.Deleted && s.Entry.PublishDate.DateTime != null)  					.FilterIfNotNull(cutoff' s => s.Entry.PublishDate.DateTime > cutoff)  					.GroupBy(s => new {  						SongId = s.Entry.Id'  					})  					.Select(s => new {  						s.Key.SongId'  						TotalCount = s.Count()  					})  					.OrderByDescending(s => s.TotalCount)  					.Take(20)  					.ToArray()  					.Select(s => s.SongId)  					.ToArray();    				// Note: the same song may be included multiple times for different artists  				var points = ctx.Query<SongHit>()  					.Where(s => topSongIds.Contains(s.Entry.Id))  					.OrderBy(a => a.Date.Year)  					.ThenBy(a => a.Date.Month)  					.ThenBy(a => a.Date.Day)  					.GroupBy(s => new {  						Year = s.Date.Year'  						Month = s.Date.Month'  						Day = s.Date.Day'  						SongId = s.Entry.Id'  					})  					.Select(s => new {  						s.Key.Year'  						s.Key.Month'  						s.Key.Day'  						s.Key.SongId'  						Count = s.Count()  					})  					.ToArray()  					.Select(s => new {  						s.SongId'  						Data = new CountPerDayContract(s.Year' s.Month' s.Day' s.Count)'  					})  					.ToArray();    				var songs = GetSongsWithNames(ctx' topSongIds);    				var bySong = points.GroupBy(p => p.SongId).Select(p => new EntryWithIdAndData<LocalizedValue> {  					Id = p.Key'  					Entry = songs[p.Key]'  					Data = p.Select(d => d.Data).ToArray()  				}).OrderByIds(topSongIds);  				return bySong;    			});
Magic Number,VocaDb.Web.Controllers,StatsController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\StatsController.cs,ScorePerSongOverTime,The following statement contains a magic number: var data = repository.HandleQuery(ctx => {    				var topSongIds = ctx.Query<FavoriteSongForUser>()  					.Where(s => !s.Song.Deleted && s.Song.PublishDate.DateTime != null)  					.FilterIfNotNull(cutoff' s => s.Song.PublishDate.DateTime > cutoff)  					.GroupBy(s => new {  						SongId = s.Song.Id'  					})  					.Select(s => new {  						s.Key.SongId'  						TotalCount = s.Sum(s2 => (int)s2.Rating)  					})  					.OrderByDescending(s => s.TotalCount)  					.Take(20)  					.ToArray()  					.Select(s => s.SongId)  					.ToArray();    				// Note: the same song may be included multiple times for different artists  				var points = ctx.Query<FavoriteSongForUser>()  					.Where(s => topSongIds.Contains(s.Song.Id))  					.OrderBy(a => a.Date.Year)  					.ThenBy(a => a.Date.Month)  					.ThenBy(a => a.Date.Day)  					.GroupBy(s => new {  						Year = s.Date.Year'  						Month = s.Date.Month'  						Day = s.Date.Day'  						SongId = s.Song.Id'  					})  					.Select(s => new {  						s.Key.Year'  						s.Key.Month'  						s.Key.Day'  						s.Key.SongId'  						Count = s.Sum(s2 => (int)s2.Rating)  					})  					.ToArray()  					.Select(s => new {  						s.SongId'  						Data = new CountPerDayContract(s.Year' s.Month' s.Day' s.Count)'  					})  					.ToArray();    				var songs = GetSongsWithNames(ctx' topSongIds);    				var bySong = points.GroupBy(p => p.SongId).Select(p => new EntryWithIdAndData<LocalizedValue> {  					Id = p.Key'  					Entry = songs[p.Key]'  					Data = p.Select(d => d.Data).ToArray().AddPreviousValues(true' TimeUnit.Day' DateTime.Now).ToArray()  				}).OrderByIds(topSongIds);  				return bySong;    			});
Magic Number,VocaDb.Web.Controllers,UserController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\UserController.cs,MySettings,The following statement contains a magic number: if (user == null || user.Id != model.Id)  				return new HttpStatusCodeResult(403);
Magic Number,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,FindSongs,The following statement contains a magic number: var sampleSize = Math.Min(maxResults * 2' 30);
Magic Number,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,FindSongs,The following statement contains a magic number: var sampleSize = Math.Min(maxResults * 2' 30);
Magic Number,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,FindTags,The following statement contains a magic number: return tagQueries.FindNames(TagSearchTextQuery.Create(term)' true' 10);
Magic Number,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,GetAlbumDetails,The following statement contains a magic number: var albums = albumService.Find(SearchTextQuery.Create(term)' DiscType.Unknown' 0' 10' false' moveExactToTop: true' sortRule: sort);
Magic Number,VocaDb.Web.Services,QueryService,C:\repos\VocaDB_vocadb\VocaDbWeb\Services\QueryService.svc.cs,GetArtistDetails,The following statement contains a magic number: var artists = artistService.FindArtists(new ArtistQueryParams(ArtistSearchTextQuery.Create(term)' new ArtistType[] {}' 0' 10'   				false' ArtistSortRule.Name' true));
Missing Default,VocaDb.Web.Controllers.Api,CommentApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\CommentApiController.cs,GetComments,The following switch statement is missing a default case: switch (entryType) {  				case EntryType.ReleaseEvent:  					return new CommentQueries<ReleaseEventComment' ReleaseEvent>(ctx' userContext' userIconFactory' entryLinkFactory);  			}
Missing Default,VocaDb.Web.Controllers.Api,EntryApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\EntryApiController.cs,GetToolTip,The following switch statement is missing a default case: switch (entryId.EntryType) {  				case EntryType.Album:  					data = RazorHelper.RenderPartialViewToString("AlbumWithCoverPopupContent"' albumService.GetAlbum(id)' "EntryApiController"' Request);  					break;  				case EntryType.Artist:  					data = RazorHelper.RenderPartialViewToString("ArtistPopupContent"' artistService.GetArtist(id)' "EntryApiController"' Request);  					break;  				case EntryType.Song:  					data = RazorHelper.RenderPartialViewToString("SongPopupContent"' songQueries.GetSong(id)' "EntryApiController"' Request);  					break;  			}
Missing Default,VocaDb.Web.Controllers.Api,SongApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\SongApiController.cs,GetTopSongs,The following switch statement is missing a default case: switch (filterBy) {  						case TopSongsDateFilterType.PublishDate: {  							startDate = startDate?.Date;  							endDate = endDate?.Date;  							query = query.WherePublishDateIsBetween(startDate' endDate);  							break;  						}  						case TopSongsDateFilterType.CreateDate: {  							query = query.Where(s => s.CreateDate >= startDate);  							break;		  						}  						case TopSongsDateFilterType.Popularity: {  							// Sort by number of ratings and hits during that time  							// Older songs get more hits so value them even less  							query = query.OrderByDescending(s => s.UserFavorites  								.Where(f => f.Date >= startDate)  								.Sum(f => (int)f.Rating) + (s.Hits.Count(h => h.Date >= startDate) / 100));  							break;  						}  					}
Missing Default,VocaDb.Web.Controllers.Api,UserApiController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\Api\UserApiController.cs,PostSetting,The following switch statement is missing a default case: switch (settingName.ToLowerInvariant()) {  				case "languagepreference":  					setting = permissionContext.LanguagePreferenceSetting;  					break;  			}
Missing Default,VocaDb.Web.Models.Tag,TagEditViewModel,C:\repos\VocaDB_vocadb\VocaDbWeb\Models\Tag\TagEditViewModel.cs,CopyNonEditableProperties,The following switch statement is missing a default case: switch (t) {  					case TagTargetTypes.Nothing:  						return "Nothing";  					case TagTargetTypes.All:  						return "Anything";  				}
Missing Default,VocaDb.Web.Controllers,ExtController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\ExtController.cs,EntryToolTip,The following switch statement is missing a default case: switch (entryId.EntryType) {  				case EntryType.Album:  					data = RenderPartialViewToString("AlbumWithCoverPopupContent"' albumService.GetAlbum(id));  					break;  				case EntryType.Artist:  					data = RenderPartialViewToString("ArtistPopupContent"' artistService.GetArtist(id));  					break;  				case EntryType.ReleaseEvent:  					data = RenderPartialViewToString("_EventPopupContent"' eventQueries.GetOne(id' ContentLanguagePreference.Default' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series' WebHelper.IsSSL(Request)));  					break;  				case EntryType.Song:  					data = RenderPartialViewToString("SongPopupContent"' songService.GetSong(id));  					break;  				case EntryType.Tag:  					data = RenderPartialViewToString("_TagPopupContent"' tagQueries.LoadTag(id' t =>   						new TagForApiContract(t' entryThumbPersister' WebHelper.IsSSL(Request)' ContentLanguagePreference.Default' TagOptionalFields.AdditionalNames | TagOptionalFields.MainPicture)));  					break;  			}
Missing Default,VocaDb.Web.Controllers,SearchController,C:\repos\VocaDB_vocadb\VocaDbWeb\Controllers\SearchController.cs,TryRedirect,The following switch statement is missing a default case: switch (item.EntryType) {  							case EntryType.Album:  								return RedirectToAlbum(entryId);  							case EntryType.Artist:  								return RedirectToArtist(entryId);  							case EntryType.ReleaseEvent:  								return RedirectToReleaseEvent(entryId' item.UrlSlug);  							case EntryType.Song:  								return RedirectToSong(entryId);  							case EntryType.Tag:  								return RedirectToTag(entryId' item.UrlSlug);  						}
