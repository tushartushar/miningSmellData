Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Rolcore.Net.Mail,EmailUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Mail\EmailUtils.cs,CreateMessage,The method has 7 parameters.
Long Parameter List,Rolcore.Net.WebMethods,WebMethodsHtmlResponseException,C:\repos\Rollins_Rolcore\src\Rolcore.Net\WebMethods\WebMethodsHtmlResponseException.cs,WebMethodsHtmlResponseException,The method has 8 parameters.
Long Statement,Rolcore.Net.Mail,EmailUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Mail\EmailUtils.cs,CreateStrictEmailAddressMatcher,The length of the statement  "	return new Regex (@"^(([^<>()[\]\\.';:\s@\""]+" + @"(\.[^<>()[\]\\.';:\s@\""]+)*)|(\"".+\""))@" + @"((\[[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}" + @"\.[0-9]{1'3}\])|(([a-zA-Z\-0-9]+\.)+" + @"[a-zA-Z]{2'}))$"' RegexOptions.IgnoreCase); " is 229.
Long Statement,Rolcore.Net.WebMethods,WebMethodsCommunicationUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\WebMethods\WebMethodsCommunicationUtils.cs,GetHtmlServiceBaseUrl,The length of the statement  "	//    return "http://webmp21f:9777/invoke/Rol.System.RCCC.out.Zipcode/getBranchByZip?SERVICETYPE={0}&ZIPCODE={1}"; // "http://webmt23:8888/invoke/Rol.System.RCCC.out.Zipcode/getBranchByZip?SERVICETYPE={0}&ZIPCODE={1}"; " is 218.
Long Statement,Rolcore.Net.WebMethods,WebMethodsCommunicationUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\WebMethods\WebMethodsCommunicationUtils.cs,GetHtmlServiceBaseUrl,The length of the statement  "		return "http://webmp21f:9777/invoke/Rol.System.RCCC.out.Zipcode.wrapper/getBranchInfoByZipService?serviceType={0}&zipCode={1}"; " is 127.
Long Statement,Rolcore.Net.WebMethods,WebMethodsCommunicationUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\WebMethods\WebMethodsCommunicationUtils.cs,GetHtmlServiceBaseUrl,The length of the statement  "	// "http://webmt23:8888/invoke/Rol.System.RCCC.out.Zipcode.wrapper/getBranchInfoByZipService?serviceType={0}&zipCode={1}"; " is 122.
Long Statement,Rolcore.Net.WebMethods,WebMethodsHtmlResponseException,C:\repos\Rollins_Rolcore\src\Rolcore.Net\WebMethods\WebMethodsHtmlResponseException.cs,Create,The length of the statement  "	return new WebMethodsHtmlResponseException (response [MessageObjectName].AsString' exceptionData [ErrorDumpObjectName].AsString' exceptionData [ErrorDumpObjectName].AsString' exceptionData [ErrorTypeObjectName].AsString' exceptionData [UserObjectName].AsString' exceptionData [TimeObjectName].AsDateTime' exceptionData [DetailsObjectName].AsString' exceptionData [ErrorMessageIdObjectName].AsString); " is 400.
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: if (ipAddressParts.Length > 1)  	for (int i = ipAddressParts.Length - 1; i >= 0; i--)  		result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: if (ipAddressParts.Length > 1)  	for (int i = ipAddressParts.Length - 1; i >= 0; i--)  		result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: if (ipAddressParts.Length > 1)  	for (int i = ipAddressParts.Length - 1; i >= 0; i--)  		result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: for (int i = ipAddressParts.Length - 1; i >= 0; i--)  	result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: for (int i = ipAddressParts.Length - 1; i >= 0; i--)  	result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: for (int i = ipAddressParts.Length - 1; i >= 0; i--)  	result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
Magic Number,Rolcore.Net.Sockets,TcpIpUtils,C:\repos\Rollins_Rolcore\src\Rolcore.Net\Sockets\TcpIpUtils.cs,IpStringToDouble,The following statement contains a magic number: result += ((int.Parse (ipAddressParts [i]) % 256) * System.Math.Pow (256' (3 - i)));  
