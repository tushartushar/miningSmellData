Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rolcore,DateTimeExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeExtensions.cs,NearestWeekday,Cyclomatic complexity of the method is 13
Complex Method,Rolcore,DateTimeUnitExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUnitExtensions.cs,ToMilliseconds,Cyclomatic complexity of the method is 10
Complex Method,Rolcore,DateTimeUnitExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUnitExtensions.cs,ToSeconds,Cyclomatic complexity of the method is 10
Complex Method,Rolcore,DateTimeUnitExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUnitExtensions.cs,ToTimeSpan,Cyclomatic complexity of the method is 10
Long Parameter List,Rolcore.Collections.Generic,IEnumerableExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Collections\Generic\IEnumerableExtensions.cs,Combine,The method has 5 parameters.
Long Parameter List,Rolcore.ComponentModel.Composition,ConfigurationExportProvider,C:\repos\Rollins_Rolcore\src\Rolcore\ComponentModel\Composition\ConfigurationExportProvider.cs,GetExportsCore,The method has 5 parameters.
Long Statement,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetIntersection,The length of the statement  "	Contract.Requires<InvalidOperationException> (this.Intersects (other)' "other does not intersect with current instance."); " is 122.
Long Statement,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,Intersects,The length of the statement  "	(this.StartDate.HasValue && other.EndDate.HasValue && other.EndDate.Value < this.StartDate.Value) // other starts after this ends " is 129.
Long Statement,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,Intersects,The length of the statement  "	|| (this.EndDate.HasValue && other.StartDate.HasValue && other.StartDate.Value > this.EndDate.Value) // this ends before other starts " is 133.
Long Statement,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,Intersects,The length of the statement  "	|| (other.StartDate.HasValue && this.EndDate.HasValue && this.EndDate.Value < other.StartDate.Value) // this starts after other end " is 131.
Long Statement,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetEarlierEndDate,The length of the statement  "	return (Nullable.Compare<DateTime> (this.EndDate' other) == 0) ? other : (this.EndDate.HasValue && !other.HasValue) ? this.EndDate : (!this.EndDate.HasValue && other.HasValue) ? other : (Nullable.Compare<DateTime> (this.EndDate' other) >= 0) ? other : this.EndDate; " is 265.
Long Statement,Rolcore,DateTimeUnitExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUnitExtensions.cs,ToMilliseconds,The length of the statement  "	Contract.Requires<ArgumentOutOfRangeException> ((int)dateTimeUnit < (int)DateTimeUnit.Year' "dateTimeUnit too large to convert to milliseconds."); " is 146.
Long Statement,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,HolidaysByYear,The length of the statement  "	// Veterans Day' November 11th (except from 1971 to 1977' inclusive' when it was celebrated on the fourth Monday in October; formerly known as Armistice - not supported). " is 170.
Long Statement,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetNthDayOfWeekInMonth,The length of the statement  "	throw new InvalidOperationException (string.Format ("There are not {0} {1}s in {2}/{3}."' dayOccurences' dayOfWeek' month' year)); " is 130.
Long Statement,Rolcore,NullableExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\NullableExtensions.cs,NullableToString,The length of the statement  "	Contract.Requires<InvalidOperationException> (!value.HasValue || format != null' "format not supplied for non null value"); " is 123.
Long Statement,Rolcore,StringExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\StringExtensions.cs,ToUri,The length of the statement  "	Uri result = (baseUri == null) ? new Uri (s' UriKind.RelativeOrAbsolute) // the constructor will error if it's passed a relative path but not specified as such " is 159.
Long Statement,Rolcore,StringExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\StringExtensions.cs,ToBase64UriSafeString,The length of the statement  "	var result = new StringBuilder (s.ToBase64String ()).Replace ('+'' Base64UriSafePlusAlternative).Replace ('/'' Base64UriSafeSlashAlternative); " is 142.
Long Statement,Rolcore,StringExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\StringExtensions.cs,FromBase64UriSafeString,The length of the statement  "	s = new StringBuilder (s).Replace (Base64UriSafePlusAlternative' '+').Replace (Base64UriSafeSlashAlternative' '/').ToString (); " is 127.
Long Statement,Rolcore.ComponentModel.Composition,ConfigurationExportProvider,C:\repos\Rollins_Rolcore\src\Rolcore\ComponentModel\Composition\ConfigurationExportProvider.cs,GetExportsCore,The length of the statement  "			var getAccessor = ReflectionModelServices.GetImportingMember (definition).GetAccessors ().Where (x => x is MethodInfo).Select (x => x as MethodInfo).FirstOrDefault (x => (x.Attributes & MethodAttributes.SpecialName) == MethodAttributes.SpecialName && x.Name.StartsWith ("get_"' StringComparison.Ordinal)); " is 305.
Long Statement,Rolcore.Configuration,ConfigurationExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Configuration\ConfigurationExtensions.cs,WriteAppSetting,The length of the statement  "	Contract.Requires<InvalidOperationException> (!config.AppSettings.SectionInformation.IsLocked' "AppSettings section is locked."); " is 129.
Long Statement,Rolcore.Configuration,ConfigurationExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Configuration\ConfigurationExtensions.cs,DeleteAppSetting,The length of the statement  "	Contract.Requires<InvalidOperationException> (!config.AppSettings.SectionInformation.IsLocked' "AppSettings section is locked."); " is 129.
Long Statement,Rolcore.Reflection,ObjectExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Reflection\ObjectExtensions.cs,CopyMatchingObjectPropertiesTo,The length of the statement  "		var destProperty = destProperties.SingleOrDefault (p => p.Name == propertyName && p.PropertyType.IsAssignableFrom (sourceType)); " is 128.
Long Statement,Rolcore.Reflection,ObjectExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Reflection\ObjectExtensions.cs,CopyMatchingObjectPropertiesTo,The length of the statement  "			if (((sourceType.IsValueType || sourceType.IsAnsiClass) && destProperty.CanWrite) || (destProperty.CanWrite && sourcePropertyValue == null)) " is 140.
Long Statement,Rolcore.Reflection,ObjectExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Reflection\ObjectExtensions.cs,GetPropertiesWithAttribute,The length of the statement  "	Contract.Requires<InvalidOperationException> (attributeType.IsSubclassOf (typeof(Attribute))' "attributeType is not an attribute."); " is 132.
Long Statement,Rolcore.Science,RandomAssignmentExperiment,C:\repos\Rollins_Rolcore\src\Rolcore\Science\RandomAssignmentExperiment.cs,IndexOf,The length of the statement  "	RandomAssignmentExperimentItem<T> searchItem = this.Where (experimentItem => experimentItem.Item.Equals (item)).FirstOrDefault (); " is 130.
Long Statement,Rolcore.Science,RandomAssignmentExperiment,C:\repos\Rollins_Rolcore\src\Rolcore\Science\RandomAssignmentExperiment.cs,PickItem,The length of the statement  "	Contract.Requires<InvalidOperationException> (this.Count > 0' "No items have been configured as part of the experiment."); " is 122.
Complex Conditional,Rolcore.Collections.Specialized,NameValueCollectionExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Collections\Specialized\NameValueCollectionExtensions.cs,IsEquivalentTo,The conditional expression  "(value == null && compare != null) || (value != null && compare == null)"  is complex.
Complex Conditional,Rolcore.Diagnostics,ConsoleWriter,C:\repos\Rollins_Rolcore\src\Rolcore\Diagnostics\ConsoleWriter.cs,Write,The conditional expression  "buffer == null || index < 0 || count < 0 || buffer.Length - index < count"  is complex.
Complex Conditional,Rolcore.Diagnostics,DebuggerWriter,C:\repos\Rollins_Rolcore\src\Rolcore\Diagnostics\DebuggerWriter.cs,Write,The conditional expression  "buffer == null || index < 0 || count < 0 || buffer.Length - index < count"  is complex.
Complex Conditional,Rolcore.Reflection,ObjectExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Reflection\ObjectExtensions.cs,CopyMatchingObjectPropertiesTo,The conditional expression  "((sourceType.IsValueType || sourceType.IsAnsiClass) && destProperty.CanWrite) || (destProperty.CanWrite && sourcePropertyValue == null)"  is complex.
Complex Conditional,Rolcore.Reflection,ObjectExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Reflection\ObjectExtensions.cs,CopyMatchingObjectPropertiesTo,The conditional expression  "!shallow && !sourceType.IsValueType && !sourceType.IsAnsiClass && sourcePropertyValue != null"  is complex.
Magic Number,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = 17;  	if (this.StartDate.HasValue) {  		result = (result * 23) + this.StartDate.GetHashCode ();  	}  	if (this.EndDate.HasValue) {  		result = (result * 23) + this.EndDate.GetHashCode ();  	}  	return result;  }  
Magic Number,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = 17;  	if (this.StartDate.HasValue) {  		result = (result * 23) + this.StartDate.GetHashCode ();  	}  	if (this.EndDate.HasValue) {  		result = (result * 23) + this.EndDate.GetHashCode ();  	}  	return result;  }  
Magic Number,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = 17;  	if (this.StartDate.HasValue) {  		result = (result * 23) + this.StartDate.GetHashCode ();  	}  	if (this.EndDate.HasValue) {  		result = (result * 23) + this.EndDate.GetHashCode ();  	}  	return result;  }  
Magic Number,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetHashCode,The following statement contains a magic number: if (this.StartDate.HasValue) {  	result = (result * 23) + this.StartDate.GetHashCode ();  }  
Magic Number,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetHashCode,The following statement contains a magic number: result = (result * 23) + this.StartDate.GetHashCode ();  
Magic Number,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetHashCode,The following statement contains a magic number: if (this.EndDate.HasValue) {  	result = (result * 23) + this.EndDate.GetHashCode ();  }  
Magic Number,Rolcore,DateRange,C:\repos\Rollins_Rolcore\src\Rolcore\DateRange.cs,GetHashCode,The following statement contains a magic number: result = (result * 23) + this.EndDate.GetHashCode ();  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,HolidaysByYear,The following statement contains a magic number: Contract.Requires<ArgumentOutOfRangeException> (year <= 9999' "year is greater than 9'999");  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,HolidaysByYear,The following statement contains a magic number: result.Add ((new DateTime (year' 7' 4).NearestWeekday ()));  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,HolidaysByYear,The following statement contains a magic number: result.Add ((new DateTime (year' 7' 4).NearestWeekday ()));  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,HolidaysByYear,The following statement contains a magic number: result.Add (GetNthDayOfWeekInMonth (year' MonthOfYear.November' DayOfWeek.Thursday' 4).NearestWeekday ());  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,HolidaysByYear,The following statement contains a magic number: result.Add ((new DateTime (year' 12' 25)).NearestWeekday ());  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,HolidaysByYear,The following statement contains a magic number: result.Add ((new DateTime (year' 12' 25)).NearestWeekday ());  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetNthDayOfWeekInMonth,The following statement contains a magic number: Contract.Requires<ArgumentOutOfRangeException> (year <= 9999' "year is greater than 9'999");  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetNthDayOfWeekInMonth,The following statement contains a magic number: Contract.Requires<ArgumentOutOfRangeException> (dayOccurences <= 5' "dayOccurences is greater than five");  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetLastDayOfWeekInMonth,The following statement contains a magic number: Contract.Requires<ArgumentOutOfRangeException> (year <= 9999' "year is greater than 9'999");  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetLastDayOfWeekInMonth,The following statement contains a magic number: try {  	return GetNthDayOfWeekInMonth (year' month' dayOfWeek' 5);  }  catch (InvalidOperationException) {  	return GetNthDayOfWeekInMonth (year' month' dayOfWeek' 4);  }  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetLastDayOfWeekInMonth,The following statement contains a magic number: try {  	return GetNthDayOfWeekInMonth (year' month' dayOfWeek' 5);  }  catch (InvalidOperationException) {  	return GetNthDayOfWeekInMonth (year' month' dayOfWeek' 4);  }  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetLastDayOfWeekInMonth,The following statement contains a magic number: return GetNthDayOfWeekInMonth (year' month' dayOfWeek' 5);  
Magic Number,Rolcore,DateTimeUtils,C:\repos\Rollins_Rolcore\src\Rolcore\DateTimeUtils.cs,GetLastDayOfWeekInMonth,The following statement contains a magic number: return GetNthDayOfWeekInMonth (year' month' dayOfWeek' 4);  
Magic Number,Rolcore.Geography,IntExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Geography\IntExtensions.cs,ToUsa5DigitPostalCode,The following statement contains a magic number: if (i > 99999) {  	throw new ArgumentOutOfRangeException ("i is greater than five digits.");  }  
Magic Number,Rolcore.Geography,IntExtensions,C:\repos\Rollins_Rolcore\src\Rolcore\Geography\IntExtensions.cs,ToUsa5DigitPostalCode,The following statement contains a magic number: return i.ToString ().PadLeft (5' '0');  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: try {  	checked {  		Fraction frac;  		if (dValue % 1 == 0)// if whole number  		 {  			frac = new Fraction ((long)dValue);  		}  		else {  			double dTemp = dValue;  			long iMultiple = 1;  			string strTemp = dValue.ToString ();  			while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  			 {  				dTemp *= 10;  				iMultiple *= 10;  				strTemp = dTemp.ToString ();  			}  			int i = 0;  			while (strTemp [i] != '.')  				i++;  			int iDigitsAfterDecimal = strTemp.Length - i - 1;  			while (iDigitsAfterDecimal > 0) {  				dTemp *= 10;  				iMultiple *= 10;  				iDigitsAfterDecimal--;  			}  			frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  		}  		return frac;  	}  }  catch (OverflowException) {  	throw new FractionException ("Conversion not possible due to overflow");  }  catch (Exception) {  	throw new FractionException ("Conversion not possible");  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: try {  	checked {  		Fraction frac;  		if (dValue % 1 == 0)// if whole number  		 {  			frac = new Fraction ((long)dValue);  		}  		else {  			double dTemp = dValue;  			long iMultiple = 1;  			string strTemp = dValue.ToString ();  			while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  			 {  				dTemp *= 10;  				iMultiple *= 10;  				strTemp = dTemp.ToString ();  			}  			int i = 0;  			while (strTemp [i] != '.')  				i++;  			int iDigitsAfterDecimal = strTemp.Length - i - 1;  			while (iDigitsAfterDecimal > 0) {  				dTemp *= 10;  				iMultiple *= 10;  				iDigitsAfterDecimal--;  			}  			frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  		}  		return frac;  	}  }  catch (OverflowException) {  	throw new FractionException ("Conversion not possible due to overflow");  }  catch (Exception) {  	throw new FractionException ("Conversion not possible");  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: try {  	checked {  		Fraction frac;  		if (dValue % 1 == 0)// if whole number  		 {  			frac = new Fraction ((long)dValue);  		}  		else {  			double dTemp = dValue;  			long iMultiple = 1;  			string strTemp = dValue.ToString ();  			while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  			 {  				dTemp *= 10;  				iMultiple *= 10;  				strTemp = dTemp.ToString ();  			}  			int i = 0;  			while (strTemp [i] != '.')  				i++;  			int iDigitsAfterDecimal = strTemp.Length - i - 1;  			while (iDigitsAfterDecimal > 0) {  				dTemp *= 10;  				iMultiple *= 10;  				iDigitsAfterDecimal--;  			}  			frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  		}  		return frac;  	}  }  catch (OverflowException) {  	throw new FractionException ("Conversion not possible due to overflow");  }  catch (Exception) {  	throw new FractionException ("Conversion not possible");  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: try {  	checked {  		Fraction frac;  		if (dValue % 1 == 0)// if whole number  		 {  			frac = new Fraction ((long)dValue);  		}  		else {  			double dTemp = dValue;  			long iMultiple = 1;  			string strTemp = dValue.ToString ();  			while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  			 {  				dTemp *= 10;  				iMultiple *= 10;  				strTemp = dTemp.ToString ();  			}  			int i = 0;  			while (strTemp [i] != '.')  				i++;  			int iDigitsAfterDecimal = strTemp.Length - i - 1;  			while (iDigitsAfterDecimal > 0) {  				dTemp *= 10;  				iMultiple *= 10;  				iDigitsAfterDecimal--;  			}  			frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  		}  		return frac;  	}  }  catch (OverflowException) {  	throw new FractionException ("Conversion not possible due to overflow");  }  catch (Exception) {  	throw new FractionException ("Conversion not possible");  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: checked {  	Fraction frac;  	if (dValue % 1 == 0)// if whole number  	 {  		frac = new Fraction ((long)dValue);  	}  	else {  		double dTemp = dValue;  		long iMultiple = 1;  		string strTemp = dValue.ToString ();  		while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  		 {  			dTemp *= 10;  			iMultiple *= 10;  			strTemp = dTemp.ToString ();  		}  		int i = 0;  		while (strTemp [i] != '.')  			i++;  		int iDigitsAfterDecimal = strTemp.Length - i - 1;  		while (iDigitsAfterDecimal > 0) {  			dTemp *= 10;  			iMultiple *= 10;  			iDigitsAfterDecimal--;  		}  		frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  	}  	return frac;  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: checked {  	Fraction frac;  	if (dValue % 1 == 0)// if whole number  	 {  		frac = new Fraction ((long)dValue);  	}  	else {  		double dTemp = dValue;  		long iMultiple = 1;  		string strTemp = dValue.ToString ();  		while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  		 {  			dTemp *= 10;  			iMultiple *= 10;  			strTemp = dTemp.ToString ();  		}  		int i = 0;  		while (strTemp [i] != '.')  			i++;  		int iDigitsAfterDecimal = strTemp.Length - i - 1;  		while (iDigitsAfterDecimal > 0) {  			dTemp *= 10;  			iMultiple *= 10;  			iDigitsAfterDecimal--;  		}  		frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  	}  	return frac;  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: checked {  	Fraction frac;  	if (dValue % 1 == 0)// if whole number  	 {  		frac = new Fraction ((long)dValue);  	}  	else {  		double dTemp = dValue;  		long iMultiple = 1;  		string strTemp = dValue.ToString ();  		while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  		 {  			dTemp *= 10;  			iMultiple *= 10;  			strTemp = dTemp.ToString ();  		}  		int i = 0;  		while (strTemp [i] != '.')  			i++;  		int iDigitsAfterDecimal = strTemp.Length - i - 1;  		while (iDigitsAfterDecimal > 0) {  			dTemp *= 10;  			iMultiple *= 10;  			iDigitsAfterDecimal--;  		}  		frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  	}  	return frac;  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: checked {  	Fraction frac;  	if (dValue % 1 == 0)// if whole number  	 {  		frac = new Fraction ((long)dValue);  	}  	else {  		double dTemp = dValue;  		long iMultiple = 1;  		string strTemp = dValue.ToString ();  		while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  		 {  			dTemp *= 10;  			iMultiple *= 10;  			strTemp = dTemp.ToString ();  		}  		int i = 0;  		while (strTemp [i] != '.')  			i++;  		int iDigitsAfterDecimal = strTemp.Length - i - 1;  		while (iDigitsAfterDecimal > 0) {  			dTemp *= 10;  			iMultiple *= 10;  			iDigitsAfterDecimal--;  		}  		frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  	}  	return frac;  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: if (dValue % 1 == 0)// if whole number   {  	frac = new Fraction ((long)dValue);  }  else {  	double dTemp = dValue;  	long iMultiple = 1;  	string strTemp = dValue.ToString ();  	while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  	 {  		dTemp *= 10;  		iMultiple *= 10;  		strTemp = dTemp.ToString ();  	}  	int i = 0;  	while (strTemp [i] != '.')  		i++;  	int iDigitsAfterDecimal = strTemp.Length - i - 1;  	while (iDigitsAfterDecimal > 0) {  		dTemp *= 10;  		iMultiple *= 10;  		iDigitsAfterDecimal--;  	}  	frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: if (dValue % 1 == 0)// if whole number   {  	frac = new Fraction ((long)dValue);  }  else {  	double dTemp = dValue;  	long iMultiple = 1;  	string strTemp = dValue.ToString ();  	while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  	 {  		dTemp *= 10;  		iMultiple *= 10;  		strTemp = dTemp.ToString ();  	}  	int i = 0;  	while (strTemp [i] != '.')  		i++;  	int iDigitsAfterDecimal = strTemp.Length - i - 1;  	while (iDigitsAfterDecimal > 0) {  		dTemp *= 10;  		iMultiple *= 10;  		iDigitsAfterDecimal--;  	}  	frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: if (dValue % 1 == 0)// if whole number   {  	frac = new Fraction ((long)dValue);  }  else {  	double dTemp = dValue;  	long iMultiple = 1;  	string strTemp = dValue.ToString ();  	while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  	 {  		dTemp *= 10;  		iMultiple *= 10;  		strTemp = dTemp.ToString ();  	}  	int i = 0;  	while (strTemp [i] != '.')  		i++;  	int iDigitsAfterDecimal = strTemp.Length - i - 1;  	while (iDigitsAfterDecimal > 0) {  		dTemp *= 10;  		iMultiple *= 10;  		iDigitsAfterDecimal--;  	}  	frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: if (dValue % 1 == 0)// if whole number   {  	frac = new Fraction ((long)dValue);  }  else {  	double dTemp = dValue;  	long iMultiple = 1;  	string strTemp = dValue.ToString ();  	while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9  	 {  		dTemp *= 10;  		iMultiple *= 10;  		strTemp = dTemp.ToString ();  	}  	int i = 0;  	while (strTemp [i] != '.')  		i++;  	int iDigitsAfterDecimal = strTemp.Length - i - 1;  	while (iDigitsAfterDecimal > 0) {  		dTemp *= 10;  		iMultiple *= 10;  		iDigitsAfterDecimal--;  	}  	frac = new Fraction ((int)System.Math.Round (dTemp)' iMultiple);  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9   {  	dTemp *= 10;  	iMultiple *= 10;  	strTemp = dTemp.ToString ();  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: while (strTemp.IndexOf ("E") > 0)// if in the form like 12E-9   {  	dTemp *= 10;  	iMultiple *= 10;  	strTemp = dTemp.ToString ();  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: dTemp *= 10;  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: iMultiple *= 10;  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: while (iDigitsAfterDecimal > 0) {  	dTemp *= 10;  	iMultiple *= 10;  	iDigitsAfterDecimal--;  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: while (iDigitsAfterDecimal > 0) {  	dTemp *= 10;  	iMultiple *= 10;  	iDigitsAfterDecimal--;  }  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: dTemp *= 10;  
Magic Number,Rolcore.Math,Fraction,C:\repos\Rollins_Rolcore\src\Rolcore\Math\Fraction.cs,ToFraction,The following statement contains a magic number: iMultiple *= 10;  
Magic Number,Rolcore.Reflection,ReflectionUtils,C:\repos\Rollins_Rolcore\src\Rolcore\Reflection\ReflectionUtils.cs,ReplaceVars,The following statement contains a magic number: foreach (Match varMatch in varMatches) {  	string varName = varMatch.Value.Substring (2' varMatch.Value.Length - 3);  	object varValue = obj.GetPropertyValue (varName);  	if (varValue == null)  		varValue = string.Empty;  	if ((varValue is IEnumerable) && (!(varValue is string))) {  		IEnumerable arrayVarValue = (IEnumerable)varValue;  		StringBuilder newVarValue = new StringBuilder ();  		foreach (object arrayEntry in arrayVarValue)  			newVarValue.AppendLine (arrayEntry.ToString ());  		varValue = newVarValue.ToString ();  	}  	result.Replace (varMatch.Value' varValue.ToString ());  }  
Magic Number,Rolcore.Reflection,ReflectionUtils,C:\repos\Rollins_Rolcore\src\Rolcore\Reflection\ReflectionUtils.cs,ReplaceVars,The following statement contains a magic number: foreach (Match varMatch in varMatches) {  	string varName = varMatch.Value.Substring (2' varMatch.Value.Length - 3);  	object varValue = obj.GetPropertyValue (varName);  	if (varValue == null)  		varValue = string.Empty;  	if ((varValue is IEnumerable) && (!(varValue is string))) {  		IEnumerable arrayVarValue = (IEnumerable)varValue;  		StringBuilder newVarValue = new StringBuilder ();  		foreach (object arrayEntry in arrayVarValue)  			newVarValue.AppendLine (arrayEntry.ToString ());  		varValue = newVarValue.ToString ();  	}  	result.Replace (varMatch.Value' varValue.ToString ());  }  
