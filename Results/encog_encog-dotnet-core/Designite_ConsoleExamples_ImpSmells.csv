Implementation smell,Namespace,Class,File,Method,Description
Long Method,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The method has 102 lines of code.
Long Method,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The method has 117 lines of code.
Complex Method,ConsoleExamples,ConsoleExamples,C:\repos\encog_encog-dotnet-core\ConsoleExamples\ConsoleExamples.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,Encog.Examples.Boltzmann,BoltzTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,IsValidTour,Cyclomatic complexity of the method is 8
Long Parameter List,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The method has 5 parameters. Parameters: fileName' startLine' HowMany' WindowSize' outputsize
Long Parameter List,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,GenerateATemporalSet,The method has 5 parameters. Parameters: fileName' startLine' HowMany' WindowSize' outputsize
Long Parameter List,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Copy,The method has 5 parameters. Parameters: source' target' start' stop' size
Long Parameter List,Encog.Examples.XOR,XORFactory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The method has 5 parameters. Parameters: methodName' methodArchitecture' trainerName' trainerArgs' outputNeurons
Long Parameter List,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The method has 5 parameters. Parameters: methodName' methodArchitecture' trainerName' trainerArgs' outputNeurons
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "            IMLDataPair aPairInput = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Opens.ToArray())' NetworkUtility.CalculatePercents(Opens.ToArray())' 100' 1); " is 162.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "            IMLDataPair aPairInput3 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Close.ToArray())' NetworkUtility.CalculatePercents(Close.ToArray())' 100' 1); " is 163.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "            IMLDataPair aPairInput2 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(High.ToArray())' NetworkUtility.CalculatePercents(High.ToArray())' 100' 1); " is 161.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "            IMLDataPair aPairInput4 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Volume.ToArray())' NetworkUtility.CalculatePercents(Volume.ToArray())' 100' 1); " is 165.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "            IMLDataPair aPairInput5 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Ranges.ToArray())' NetworkUtility.CalculatePercents(Ranges.ToArray())' 100' 1); " is 165.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "            Console.WriteLine(@"Percent Correct with normal Data Set:" + normalCorrectRate + @" Percent Correct with temporal Dataset:" + " is 125.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The length of the statement  "                Console.WriteLine(@"Iteration #:" + trainMain.IterationNumber + @" Error:" + trainMain.Error + @" Genetic Iteration:" + trainAlt.IterationNumber); " is 146.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "            IMLDataPair aPairInput = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Opens.ToArray())' NetworkUtility.CalculatePercents(Opens.ToArray())' WindowSize' outputsize); " is 178.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "            IMLDataPair aPairInput3 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Close.ToArray())' NetworkUtility.CalculatePercents(Close.ToArray())' WindowSize' outputsize); " is 179.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "            IMLDataPair aPairInput2 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(High.ToArray())' NetworkUtility.CalculatePercents(High.ToArray())' WindowSize' outputsize); " is 177.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "            IMLDataPair aPairInput4 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Volume.ToArray())' NetworkUtility.CalculatePercents(Volume.ToArray())' WindowSize' outputsize); " is 181.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "            IMLDataPair aPairInput5 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Ranges.ToArray())' NetworkUtility.CalculatePercents(Ranges.ToArray())' WindowSize' outputsize); " is 181.
Long Statement,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,GenerateATemporalSet,The length of the statement  "            return TrainerHelper.GenerateTrainingWithPercentChangeOnSerie(WindowSize' outputsize' Opens.ToArray()' Close.ToArray()' High.ToArray()' Low.ToArray()' Volume.ToArray()); " is 169.
Long Statement,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The length of the statement  "                    Console.WriteLine(@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size"); " is 121.
Long Statement,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The length of the statement  "                        BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad(app.Args[1]' CONFIG.EvalHowMany' CONFIG.EvalStartFrom' CONFIG.Inputs' " is 128.
Long Statement,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The length of the statement  "                       BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad(app.Args[1]' CONFIG.HowMany' CONFIG.StartFrom' CONFIG.Inputs' " is 120.
Long Statement,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,Execute,The length of the statement  "            Console.WriteLine(@"Elman should be able to get into the 10% range'\nfeedforward should not go below 25%.\nThe recurrent Elment net can learn better in this case."); " is 165.
Long Statement,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,Execute,The length of the statement  "            app.WriteLine("Jordan will perform only marginally better than feedforward.\nThe more output neurons' the better performance a Jordan will give."); " is 147.
Long Statement,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The length of the statement  "            Console.WriteLine("Network computed denormalized : " + computes.Item2.Stats.DeNormalize(network.Compute(new BasicMLData(computes.Item1.ToArray()))[0])); " is 152.
Long Statement,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The length of the statement  "            //Degenerate training data only provides outputs as 1 or 0 (averaging over all outputs for a given set of inputs would produce something approaching the smooth training data). " is 175.
Long Statement,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The length of the statement  "                    //3D//sw.WriteLine(InverseScale(pair.Input[0]) + "' " + InverseScale(pair.Input[1]) + "' " + InverseScale(pair.Input[2]) + "' " + Chop(InverseScale(output[0])));// + "' " + pair.Ideal[0]);// + "'ideal=" + pair.Ideal[0]); " is 220.
Long Statement,Encog.Examples.RateSP500,PredictSP500,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\RateSP500\PredictSP500.cs,trainNetworkBackprop,The length of the statement  "                Console.WriteLine(@"Training " + @"Epoch #" + epoch + @" Error:" + trainMain.Error+ @" Genetic iteration:"+trainAlt.IterationNumber+ @"neat iteration:"+train.IterationNumber ); " is 176.
Long Statement,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Create,The length of the statement  "            SupportVectorMachine result = new SupportVectorMachine(inputs' SVMType.EpsilonSupportVectorRegression' KernelType.Sigmoid); " is 123.
Long Statement,Encog.Examples.SVM_Predict,SVMExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The length of the statement  "                    Console.WriteLine(@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size"); " is 121.
Long Statement,Encog.Examples.SVMPredictCSV,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,TrainNetworks,The length of the statement  "            Console.WriteLine("SVM Trained in :" + sw.ElapsedMilliseconds + "For error:" + trainMain.Error + " Iterated:" + trainMain.IterationNumber); " is 139.
Long Statement,Encog.Examples.SVMPredictCSV,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainNetworks,The length of the statement  "            Console.WriteLine("SVM Trained in :" + sw.ElapsedMilliseconds + "For error:"+trainMain.Error +" Iterated:"+trainMain.IterationNumber); " is 134.
Long Statement,Encog.Examples.SVMPredictCSV,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainSVMNetwork,The length of the statement  "            //BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad(app.Args[1]'1000'500'CONFIG.INPUT_WINDOW'CONFIG.PREDICT_WINDOW); " is 125.
Long Statement,Encog.Examples.SVMPredictCSV,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainSVMNetwork,The length of the statement  "            TemporalMLDataSet Tempo = CreateEval.GenerateATemporalSet(app.Args[1]' 1000' 500' CONFIG.INPUT_WINDOW' CONFIG.PREDICT_WINDOW); " is 126.
Magic Number,ConsoleExamples,ConsoleExamples,C:\repos\encog_encog-dotnet-core\ConsoleExamples\ConsoleExamples.cs,ListCommands,The following statement contains a magic number: foreach (ExampleInfo info in examples)              {                  commands.Add(info.Command.PadRight(20) + ": " + info.Title);              }
Magic Number,Encog.Examples.Adaline,AdalineDigits,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Adaline\AdalineDigits.cs,Execute,The following statement contains a magic number: (new RangeRandomizer(-0.5' 0.5)).Randomize(network);
Magic Number,Encog.Examples.Adaline,AdalineDigits,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Adaline\AdalineDigits.cs,Execute,The following statement contains a magic number: (new RangeRandomizer(-0.5' 0.5)).Randomize(network);
Magic Number,Encog.Examples.Adaline,AdalineDigits,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Adaline\AdalineDigits.cs,Execute,The following statement contains a magic number: IMLTrain train = new TrainAdaline(network' training' 0.01);
Magic Number,Encog.Examples.Adaline,AdalineDigits,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Adaline\AdalineDigits.cs,Execute,The following statement contains a magic number: do              {                  train.Iteration();                  app.WriteLine("Epoch #" + epoch + " Error:" + train.Error);                  epoch++;              } while (train.Error > 0.01);
Magic Number,Encog.Examples.Analyst,AnalystExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyst\AnalystExample.cs,Execute,The following statement contains a magic number: if (app.Args.Length != 2)              {                  Console.WriteLine("Usage: AnalystExample [iris/forest] [data directory]");                  Console.WriteLine("Data directory can be any empty directory.  Raw files will be downloaded to here.");                  return;              }
Magic Number,Encog.Examples.Analyst,AnalystExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyst\AnalystExample.cs,ForestExample,The following statement contains a magic number: encog.MaxIteration = 300;
Magic Number,Encog.Examples.Bayesian,BayesianTaxi,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Bayesian\BayesianTaxi.cs,Execute,The following statement contains a magic number: BlueTaxi.Table.AddLine(0.85' true);
Magic Number,Encog.Examples.Bayesian,BayesianTaxi,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Bayesian\BayesianTaxi.cs,Execute,The following statement contains a magic number: WitnessSawBlue.Table.AddLine(0.80' true' true);
Magic Number,Encog.Examples.Bayesian,BayesianTaxi,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Bayesian\BayesianTaxi.cs,Execute,The following statement contains a magic number: WitnessSawBlue.Table.AddLine(0.20' true' false);
Magic Number,Encog.Examples.Benchmark,ElliottBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ElliottBenchmark.cs,Evaluate,The following statement contains a magic number: for (; ; )              {                  rprop.Iteration();                                  iterations++;                  if (rprop.Error < TARGET_ERROR)                  {                      return iterations;                  }                    if (iterations > 1000)                  {                      iterations = 0;                      return -1;                  }              }
Magic Number,Encog.Examples.Benchmark,FahlmanEncoder,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\FahlmanEncoder.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(train' 0.01);
Magic Number,Encog.Examples.Benchmark,SimpleBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\SimpleBenchmark.cs,Execute,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  long time = BenchmarkEncog(input' output);                  Console.WriteLine("Regular: {0}ms"' time);              }
Magic Number,Encog.Examples.Benchmark,SimpleBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\SimpleBenchmark.cs,BenchmarkEncog,The following statement contains a magic number: network.Reset(23);
Magic Number,Encog.Examples.Benchmark,SimpleBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\SimpleBenchmark.cs,BenchmarkEncog,The following statement contains a magic number: IMLTrain train = new Backpropagation(network' trainingSet' 0.7' 0.7);
Magic Number,Encog.Examples.Benchmark,SimpleBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\SimpleBenchmark.cs,BenchmarkEncog,The following statement contains a magic number: IMLTrain train = new Backpropagation(network' trainingSet' 0.7' 0.7);
Magic Number,Encog.Examples.Benchmark,SimpleBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\SimpleBenchmark.cs,Generate,The following statement contains a magic number: var rand = new Random(42);
Magic Number,Encog.Examples.Benchmark,ThreadCount,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ThreadCount.cs,Execute,The following statement contains a magic number: for (int i = 1; i < 16; i++)              {                  Perform(i);              }
Magic Number,Encog.Examples.Benchmark,ThreadCount,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ThreadCount.cs,Perform,The following statement contains a magic number: IMLDataSet training = RandomTrainingFactory.Generate(1000' 50000'                                                                   INPUT_COUNT' OUTPUT_COUNT' -1' 1);
Magic Number,Encog.Examples.Benchmark,ThreadCount,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ThreadCount.cs,Perform,The following statement contains a magic number: IMLDataSet training = RandomTrainingFactory.Generate(1000' 50000'                                                                   INPUT_COUNT' OUTPUT_COUNT' -1' 1);
Magic Number,Encog.Examples.Benchmark,ThreadCount,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ThreadCount.cs,Perform,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  rprop.Iteration();              }
Magic Number,Encog.Examples.Benchmark,WeightInitialization,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\WeightInitialization.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 10' 0' 1' true);
Magic Number,Encog.Examples.Benchmark,WeightInitialization,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\WeightInitialization.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 10' 0' 1' true);
Magic Number,Encog.Examples.Benchmark,MultiThreadBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\MultiThreadBenchmark.cs,generateTraining,The following statement contains a magic number: IMLDataSet training = RandomTrainingFactory.Generate(1000' 50000'                                                                   INPUT_COUNT' OUTPUT_COUNT' -1' 1);
Magic Number,Encog.Examples.Benchmark,MultiThreadBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\MultiThreadBenchmark.cs,generateTraining,The following statement contains a magic number: IMLDataSet training = RandomTrainingFactory.Generate(1000' 50000'                                                                   INPUT_COUNT' OUTPUT_COUNT' -1' 1);
Magic Number,Encog.Examples.Benchmark,MultiThreadBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\MultiThreadBenchmark.cs,EvaluateRPROP,The following statement contains a magic number: for (int i = 1; i <= 20; i++)              {                  train.Iteration();                  Console.WriteLine("Iteration #" + i + " Error:" + train.Error);              }
Magic Number,Encog.Examples.Benchmark,MultiThreadBenchmark,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\MultiThreadBenchmark.cs,EvaluateMPROP,The following statement contains a magic number: for (int i = 1; i <= 20; i++)              {                  train.Iteration();                  Console.WriteLine("Iteration #" + i + " Error:" + train.Error);              }
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Opens = QuickCSVUtils.QuickParseCSV(fileName' "Open"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Opens = QuickCSVUtils.QuickParseCSV(fileName' "Open"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> High = QuickCSVUtils.QuickParseCSV(fileName' "High"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> High = QuickCSVUtils.QuickParseCSV(fileName' "High"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Low = QuickCSVUtils.QuickParseCSV(fileName' "Low"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Low = QuickCSVUtils.QuickParseCSV(fileName' "Low"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Close = QuickCSVUtils.QuickParseCSV(fileName' "Close"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Close = QuickCSVUtils.QuickParseCSV(fileName' "Close"' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Volume = QuickCSVUtils.QuickParseCSV(fileName' 5' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Volume = QuickCSVUtils.QuickParseCSV(fileName' 5' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: List<double> Volume = QuickCSVUtils.QuickParseCSV(fileName' 5' 1200' 1200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: TemporalMLDataSet superTemportal = TrainerHelper.GenerateTrainingWithPercentChangeOnSerie(100' 1' Opens.ToArray()'                                                                                                    Close.ToArray()' High.ToArray()' Low.ToArray()' Volume.ToArray());
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: IMLDataPair aPairInput = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Opens.ToArray())' NetworkUtility.CalculatePercents(Opens.ToArray())' 100' 1);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: IMLDataPair aPairInput3 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Close.ToArray())' NetworkUtility.CalculatePercents(Close.ToArray())' 100' 1);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: IMLDataPair aPairInput2 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(High.ToArray())' NetworkUtility.CalculatePercents(High.ToArray())' 100' 1);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: IMLDataPair aPairInput4 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Volume.ToArray())' NetworkUtility.CalculatePercents(Volume.ToArray())' 100' 1);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: IMLDataPair aPairInput5 = TrainerHelper.ProcessPairs(NetworkUtility.CalculatePercents(Ranges.ToArray())' NetworkUtility.CalculatePercents(Ranges.ToArray())' 100' 1);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The following statement contains a magic number: var network = (BasicNetwork)CreateElmanNetwork(100' 1);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,EvaluateNetworks,The following statement contains a magic number: foreach (IMLDataPair pair in set)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                   Direction  actualDirection = DetermineDirection(actual);                 Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                  count++;                  Console.WriteLine(@"Number" + @"count" + @": actual=" + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);                               }
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,EvaluateNetworks,The following statement contains a magic number: foreach (IMLDataPair pair in set)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                   Direction  actualDirection = DetermineDirection(actual);                 Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                  count++;                  Console.WriteLine(@"Number" + @"count" + @": actual=" + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);                               }
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: Backpropagation trainMain = new Backpropagation(network' minis'0.0001'0.6);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: Backpropagation trainMain = new Backpropagation(network' minis'0.0001'0.6);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: EncogUtility.TrainConsole(trainMain'network'minis' 15.2);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The following statement contains a magic number: List<double> Volume = QuickCSVUtils.QuickParseCSV(fileName' 5' startLine' HowMany);
Magic Number,Encog.Examples.Analyzer,CreateEval,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,GenerateATemporalSet,The following statement contains a magic number: List<double> Volume = QuickCSVUtils.QuickParseCSV(fileName' 5' startLine' HowMany);
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare(app.Args[0]' "randomtrainer"' true) == 0)              {                  if (app.Args.Length > 1)                  {                      RandomTrainer.RandomTrainerMethod(Convert.ToInt16(app.Args[1])' Convert.ToInt16(app.Args[2]));                      MakeAPause();                      app.Exit();                  }                  else                  {                      Console.WriteLine(@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");                      Console.WriteLine(@"Error % "+ RandomTrainer.RandomTrainerMethod(3000' 50));                                                            }                    Console.ReadKey();                  return;              }
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare(app.Args[0]' "randomtrainer"' true) == 0)              {                  if (app.Args.Length > 1)                  {                      RandomTrainer.RandomTrainerMethod(Convert.ToInt16(app.Args[1])' Convert.ToInt16(app.Args[2]));                      MakeAPause();                      app.Exit();                  }                  else                  {                      Console.WriteLine(@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");                      Console.WriteLine(@"Error % "+ RandomTrainer.RandomTrainerMethod(3000' 50));                                                            }                    Console.ReadKey();                  return;              }
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare(app.Args[0]' "randomtrainer"' true) == 0)              {                  if (app.Args.Length > 1)                  {                      RandomTrainer.RandomTrainerMethod(Convert.ToInt16(app.Args[1])' Convert.ToInt16(app.Args[2]));                      MakeAPause();                      app.Exit();                  }                  else                  {                      Console.WriteLine(@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");                      Console.WriteLine(@"Error % "+ RandomTrainer.RandomTrainerMethod(3000' 50));                                                            }                    Console.ReadKey();                  return;              }
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare(app.Args[0]' "train"' true) == 0)              {                  if (app.Args.Length> 0)                  {                      //We have enough arguments' lets test them.                      if (File.Exists(app.Args[1]))                      {                          //the file exits lets build the training.                            //create our basic ml dataset.                         BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad(app.Args[1]' CONFIG.HowMany' CONFIG.StartFrom' CONFIG.Inputs'                                                     CONFIG.Outputs);                            //create our network.                          BasicNetwork network = (BasicNetwork) CreateEval.CreateElmanNetwork(CONFIG.Inputs' CONFIG.Outputs);                            //Train it..                            double LastError = CreateEval.TrainNetworks(network' set);                            Console.WriteLine("NetWork Trained to :" + LastError);                          NetworkUtility.SaveTraining(CONFIG.DIRECTORY' CONFIG.TrainingFile' set);                          NetworkUtility.SaveNetwork(CONFIG.DIRECTORY' CONFIG.NetWorkFile' network);                          Console.WriteLine("Network Saved to :" + CONFIG.DIRECTORY + " File Named :" +                                            CONFIG.NetWorkFile);                            Console.WriteLine("Training Saved to :" + CONFIG.DIRECTORY + " File Named :" +                                           CONFIG.TrainingFile);                          MakeAPause();                            app.Exit();                          return;                      }                      else                      {                          Console.WriteLine("Couldnt find the file :" + app.Args[2].ToString());                          Console.WriteLine("Exiting");                          MakeAPause();                          app.Exit();                          return;                      }                  }              }              else              {                  Console.WriteLine("Couldnt understand your command..");                  Console.WriteLine(                      "Valid commands are : RandomTrainer or Randomtrainer [inputs] [output] ' or Train [File]");                  Console.WriteLine(                     "Valid commands are : Range Prune' to prune your network.");                  Console.WriteLine(                     "Valid commands are : Range eval ' to evaluate your network.");                      MakeAPause();                  app.Exit();              }
Magic Number,Encog.Examples.Analyzer,RandomTrainer,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\RandomTrainer.cs,RandomTrainerMethod,The following statement contains a magic number: network.AddLayer(new BasicLayer(new ActivationTANH()' false' 20));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: IMLDataSet trainingData = GenerationUtil.GenerateSingleDataRange(                  (x) => (3 * Math.Pow(x' 2) + (12 * x) + 4)                  ' 0' 100' 1);
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: IMLDataSet trainingData = GenerationUtil.GenerateSingleDataRange(                  (x) => (3 * Math.Pow(x' 2) + (12 * x) + 4)                  ' 0' 100' 1);
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: IMLDataSet trainingData = GenerationUtil.GenerateSingleDataRange(                  (x) => (3 * Math.Pow(x' 2) + (12 * x) + 4)                  ' 0' 100' 1);
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: IMLDataSet trainingData = GenerationUtil.GenerateSingleDataRange(                  (x) => (3 * Math.Pow(x' 2) + (12 * x) + 4)                  ' 0' 100' 1);
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: IMLDataSet trainingData = GenerationUtil.GenerateSingleDataRange(                  (x) => (3 * Math.Pow(x' 2) + (12 * x) + 4)                  ' 0' 100' 1);
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: PrgPopulation pop = new PrgPopulation(context' 1000);
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.5' new SubtreeCrossover());
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.25' new ConstMutation(context' 0.5' 1.0));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.25' new ConstMutation(context' 0.5' 1.0));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.25' new SubtreeMutation(context' 4));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.25' new SubtreeMutation(context' 4));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster(new ComplexityAdjustedScore(10' 20' 10' 20.0));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster(new ComplexityAdjustedScore(10' 20' 10' 20.0));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster(new ComplexityAdjustedScore(10' 20' 10' 20.0));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster(new ComplexityAdjustedScore(10' 20' 10' 20.0));
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: (new RampedHalfAndHalf(context' 1' 6)).Generate(new EncogRandom()' pop);
Magic Number,Encog.Examples.EPL,SimpleEPL,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: try              {                    for (int i = 0; i < 1000; i++)                  {                      genetic.Iteration();                      best = (EncogProgram)genetic.BestGenome;                      Console.Out.WriteLine(genetic.IterationNumber + "' Error: "                              + best.Score + "'Best Genome Size:" + best.Size                              + "'Species Count:" + pop.Species.Count + "'best: " + best.DumpAsCommonExpression());                  }                    //EncogUtility.evaluate(best' trainingData);                    Console.Out.WriteLine("Final score:" + best.Score                          + "' effective score:" + best.AdjustedScore);                  Console.Out.WriteLine(best.DumpAsCommonExpression());                  //pop.dumpMembers(Integer.MAX_VALUE);                  //pop.dumpMembers(10);                }              catch (Exception t)              {                  Console.Out.WriteLine(t.ToString());              }              finally              {                  genetic.FinishTraining();                  EncogFramework.Instance.Shutdown();              }
Magic Number,Encog.Examples.Forest,Evaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\Evaluate.cs,EvaluateNetwork,The following statement contains a magic number: while (csv.Next())              {                  total++;                  for (int i = 0; i < input.Length; i++)                  {                      input[i] = csv.GetDouble(i);                  }                  IMLData inputData = norm.BuildForNetworkInput(input);                  IMLData output = network.Compute(inputData);                  int coverTypeActual = DetermineTreeType(eqField' output);                  int coverTypeIdeal = (int) csv.GetDouble(54) - 1;                    KeepScore(coverTypeActual' coverTypeIdeal);                    if (coverTypeActual == coverTypeIdeal)                  {                      correct++;                  }              }
Magic Number,Encog.Examples.Forest,Evaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\Evaluate.cs,EvaluateNetwork,The following statement contains a magic number: for (int i = 0; i < 7; i++)              {                  double p = (_treeCorrect[i]/(double) _treeCount[i]);                  Console.WriteLine(@"Tree Type #" + i + @" - Correct/total: "                                    + _treeCorrect[i] + @"/" + _treeCount[i] + @"("                                    + Format.FormatPercentWhole(p) + @")");              }
Magic Number,Encog.Examples.Forest,ForestConfig,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestConfig.cs,ForestConfig,The following statement contains a magic number: TrainingMinutes = 10;
Magic Number,Encog.Examples.Forest,ForestConfig,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestConfig.cs,ForestConfig,The following statement contains a magic number: HiddenCount = 100;
Magic Number,Encog.Examples.Forest,ForestCover,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 1)              {                  Console.WriteLine(@"Usage: ForestCover [data directory] [generate/train/traingui/evaluate] [e/o]");              }              else              {                  try                  {                      var config = new ForestConfig(new FileInfo(app.Args[0]));                      if (String.Compare(app.Args[1]' "generate"' true) == 0)                      {                          if (app.Args.Length < 3)                          {                              Console.WriteLine(                                  @"When using generate' you must specify an 'e' or an 'o' as the second parameter.");                          }                          else                          {                              bool useOneOf = !app.Args[2].ToLower().Equals("e");                                Generate(config' useOneOf);                          }                      }                      else if (String.Compare(app.Args[1]' "train"' true) == 0)                      {                          Train(config' false);                      }                      else if (String.Compare(app.Args[1]' "traingui"' true) == 0)                      {                          Train(config' true);                      }                      else if (String.Compare(app.Args[1]' "evaluate"' true) == 0)                      {                          Evaluate(config);                      }                  }                  /*catch (Exception e)                  {                      Console.WriteLine(e.StackTrace);                  }*/                  finally                  {                      EncogFramework.Instance.Shutdown();                  }              }
Magic Number,Encog.Examples.Forest,ForestCover,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 1)              {                  Console.WriteLine(@"Usage: ForestCover [data directory] [generate/train/traingui/evaluate] [e/o]");              }              else              {                  try                  {                      var config = new ForestConfig(new FileInfo(app.Args[0]));                      if (String.Compare(app.Args[1]' "generate"' true) == 0)                      {                          if (app.Args.Length < 3)                          {                              Console.WriteLine(                                  @"When using generate' you must specify an 'e' or an 'o' as the second parameter.");                          }                          else                          {                              bool useOneOf = !app.Args[2].ToLower().Equals("e");                                Generate(config' useOneOf);                          }                      }                      else if (String.Compare(app.Args[1]' "train"' true) == 0)                      {                          Train(config' false);                      }                      else if (String.Compare(app.Args[1]' "traingui"' true) == 0)                      {                          Train(config' true);                      }                      else if (String.Compare(app.Args[1]' "evaluate"' true) == 0)                      {                          Evaluate(config);                      }                  }                  /*catch (Exception e)                  {                      Console.WriteLine(e.StackTrace);                  }*/                  finally                  {                      EncogFramework.Instance.Shutdown();                  }              }
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem(coverType' 2);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem(coverType' 3);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem(coverType' 4);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem(coverType' 5);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem(coverType' 6);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem(coverType' 7);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem(coverType' 2);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem(coverType' 3);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem(coverType' 4);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem(coverType' 5);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem(coverType' 6);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem(coverType' 7);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Copy,The following statement contains a magic number: var inputField = new IInputField[55];
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Copy,The following statement contains a magic number: for (int i = 0; i < 55; i++)              {                  inputField[i] = new InputFieldCSV(true' source.ToString()' i);                  norm.AddInputField(inputField[i]);                  IOutputField outputField = new OutputFieldDirect(inputField[i]);                  norm.AddOutputField(outputField);              }
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Narrow,The following statement contains a magic number: var inputField = new IInputField[55];
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Narrow,The following statement contains a magic number: for (int i = 0; i < 55; i++)              {                  inputField[i] = new InputFieldCSV(true' source.ToString()' i);                  norm.AddInputField(inputField[i]);                  IOutputField outputField = new OutputFieldDirect(inputField[i]);                  norm.AddOutputField(outputField);              }
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy(_config.CoverTypeFile' _config.TrainingFile' 0' 2' 4);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy(_config.CoverTypeFile' _config.TrainingFile' 0' 2' 4);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy(_config.CoverTypeFile' _config.EvaluateFile' 3' 3' 4);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy(_config.CoverTypeFile' _config.EvaluateFile' 3' 3' 4);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy(_config.CoverTypeFile' _config.EvaluateFile' 3' 3' 4);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step2,The following statement contains a magic number: Narrow(_config.TrainingFile' _config.BalanceFile' 54' 3000);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step2,The following statement contains a magic number: Narrow(_config.TrainingFile' _config.BalanceFile' 54' 3000);
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: var wilderness = new IInputField[4];
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: var soilType = new IInputField[40];
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(inputSlope = new InputFieldCSV(true' _config.BalanceFile.ToString()' 2));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(hWater = new InputFieldCSV(true' _config.BalanceFile.ToString()' 3));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(vWater = new InputFieldCSV(true' _config.BalanceFile.ToString()' 4));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(roadway = new InputFieldCSV(true' _config.BalanceFile.ToString()' 5));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(shade9 = new InputFieldCSV(true' _config.BalanceFile.ToString()' 6));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(shade12 = new InputFieldCSV(true' _config.BalanceFile.ToString()' 7));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(shade3 = new InputFieldCSV(true' _config.BalanceFile.ToString()' 8));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(firepoint = new InputFieldCSV(true' _config.BalanceFile.ToString()' 9));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  norm.AddInputField(wilderness[i] = new InputFieldCSV(true' _config.BalanceFile.ToString()' 10 + i));              }
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  norm.AddInputField(wilderness[i] = new InputFieldCSV(true' _config.BalanceFile.ToString()' 10 + i));              }
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 40; i++)              {                  norm.AddInputField(soilType[i] = new InputFieldCSV(true' _config.BalanceFile.ToString()' 14 + i));              }
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 40; i++)              {                  norm.AddInputField(soilType[i] = new InputFieldCSV(true' _config.BalanceFile.ToString()' 14 + i));              }
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField(coverType = new InputFieldCSV(false' _config.BalanceFile.ToString()' 54));
Magic Number,Encog.Examples.Forest,GenerateData,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 40; i++)              {                  norm.AddOutputField(new OutputFieldDirect(soilType[i]));              }
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,GetForexPairData,The following statement contains a magic number: ForexPair=  Encog.Util.NetworkUtil.QuickCSVUtils.QuickParseCSV("DB!EURUSD.Bar.Time.600.csv"' "Close"' 2500).ToArray();
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Execute,The following statement contains a magic number: EvaluateEnd = EvaluateStart + 100;
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,CreateElmanNetwork,The following statement contains a magic number: pattern.AddHiddenLayer(2);
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Train,The following statement contains a magic number: var trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Train,The following statement contains a magic number: var trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Train,The following statement contains a magic number: var trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Train,The following statement contains a magic number: while (!stop.ShouldStop() && trainMain.IterationNumber < 1500)              {                  trainMain.Iteration();                  Console.WriteLine("Training " +  "' Epoch #" + epoch + " Error:" + trainMain.Error);                  epoch++;              }
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedForexPair[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  var prediction = output[0];                  _closedLoopForexPair[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopForexPair[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  var closedLoopPrediction = output[0];                    // display                  Console.WriteLine("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"'                      (StartingYear + year)'                      Format.FormatDouble(_normalizedForexPair[year]' 5)'                      Format.FormatDouble(prediction' 5)'                      Format.FormatDouble(closedLoopPrediction' 5)'                      Format.FormatDouble(_normalizedForexPair[year] - prediction' 5)'                      array.Stats.DeNormalize(prediction)'                      ForexPair[year]);              }
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedForexPair[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  var prediction = output[0];                  _closedLoopForexPair[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopForexPair[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  var closedLoopPrediction = output[0];                    // display                  Console.WriteLine("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"'                      (StartingYear + year)'                      Format.FormatDouble(_normalizedForexPair[year]' 5)'                      Format.FormatDouble(prediction' 5)'                      Format.FormatDouble(closedLoopPrediction' 5)'                      Format.FormatDouble(_normalizedForexPair[year] - prediction' 5)'                      array.Stats.DeNormalize(prediction)'                      ForexPair[year]);              }
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedForexPair[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  var prediction = output[0];                  _closedLoopForexPair[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopForexPair[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  var closedLoopPrediction = output[0];                    // display                  Console.WriteLine("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"'                      (StartingYear + year)'                      Format.FormatDouble(_normalizedForexPair[year]' 5)'                      Format.FormatDouble(prediction' 5)'                      Format.FormatDouble(closedLoopPrediction' 5)'                      Format.FormatDouble(_normalizedForexPair[year] - prediction' 5)'                      array.Stats.DeNormalize(prediction)'                      ForexPair[year]);              }
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedForexPair[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  var prediction = output[0];                  _closedLoopForexPair[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopForexPair[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  var closedLoopPrediction = output[0];                    // display                  Console.WriteLine("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"'                      (StartingYear + year)'                      Format.FormatDouble(_normalizedForexPair[year]' 5)'                      Format.FormatDouble(prediction' 5)'                      Format.FormatDouble(closedLoopPrediction' 5)'                      Format.FormatDouble(_normalizedForexPair[year] - prediction' 5)'                      array.Stats.DeNormalize(prediction)'                      ForexPair[year]);              }
Magic Number,Encog.Examples.Freeform,ConvertToFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ConvertToFreeform.cs,Execute,The following statement contains a magic number: network.AddLayer(new BasicLayer(null' true' 2));
Magic Number,Encog.Examples.Freeform,ConvertToFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ConvertToFreeform.cs,Execute,The following statement contains a magic number: network.AddLayer(new BasicLayer(new ActivationSigmoid()' true' 3));
Magic Number,Encog.Examples.Freeform,ConvertToFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ConvertToFreeform.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(network' trainingSet' 0.01);
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(  				network' score' 10' 2' 100);
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(  				network' score' 10' 2' 100);
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(  				network' score' 10' 2' 100);
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainMain = new FreeformBackPropagation(network' trainingSet'0.00001' 0.0);
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,TrainNetwork,The following statement contains a magic number: EncogUtility.TrainToError(trainMain' 0.01);
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,Execute,The following statement contains a magic number: IMLDataSet trainingSet = temp.Generate(120);
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,Execute,The following statement contains a magic number: FreeformNetwork elmanNetwork = FreeformNetwork.CreateElman(1' 6' 1' new ActivationSigmoid());
Magic Number,Encog.Examples.Freeform,ElmanFreeform,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,Execute,The following statement contains a magic number: FreeformNetwork feedforwardNetwork = FreeformNetwork.CreateFeedforward(1' 6' 0' 1' new ActivationSigmoid());
Magic Number,Encog.Examples.Freeform,FreeformOnlineXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformOnlineXOR.cs,Execute,The following statement contains a magic number: IFreeformLayer inputLayer = network.CreateInputLayer(2);
Magic Number,Encog.Examples.Freeform,FreeformOnlineXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformOnlineXOR.cs,Execute,The following statement contains a magic number: IFreeformLayer hiddenLayer1 = network.CreateLayer(3);
Magic Number,Encog.Examples.Freeform,FreeformOnlineXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformOnlineXOR.cs,Execute,The following statement contains a magic number: var train = new FreeformBackPropagation(network' trainingSet' 0.7' 0.2);
Magic Number,Encog.Examples.Freeform,FreeformOnlineXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformOnlineXOR.cs,Execute,The following statement contains a magic number: var train = new FreeformBackPropagation(network' trainingSet' 0.7' 0.2);
Magic Number,Encog.Examples.Freeform,FreeformOnlineXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformOnlineXOR.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(train' 0.01);
Magic Number,Encog.Examples.Freeform,FreeformXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformXOR.cs,Execute,The following statement contains a magic number: IFreeformLayer inputLayer = network.CreateInputLayer(2);
Magic Number,Encog.Examples.Freeform,FreeformXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformXOR.cs,Execute,The following statement contains a magic number: IFreeformLayer hiddenLayer1 = network.CreateLayer(3);
Magic Number,Encog.Examples.Freeform,FreeformXOR,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformXOR.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(network' trainingSet' 0.01);
Magic Number,Encog.Examples.Freeform,SkipNeuralNetwork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\SkipNeuralNetwork.cs,Execute,The following statement contains a magic number: var inputLayer = network.CreateInputLayer(2);
Magic Number,Encog.Examples.Freeform,SkipNeuralNetwork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\SkipNeuralNetwork.cs,Execute,The following statement contains a magic number: var hiddenLayer1 = network.CreateLayer(3);
Magic Number,Encog.Examples.Freeform,SkipNeuralNetwork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\SkipNeuralNetwork.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(network' trainingSet' 0.01);
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.9'new SpliceNoRepeat(CITIES/3));
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.9'new SpliceNoRepeat(CITIES/3));
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,Execute,The following statement contains a magic number: genetic.AddOperation(0.1'new MutateShuffle());
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,RandomGenome,The following statement contains a magic number: for (int i = 0; i < organism.Length - 1; i++) {  			int icandidate;  			do {  				icandidate = (int) (rnd.NextDouble() * organism.Length);  			} while (taken[icandidate]);  			organism[i] = icandidate;  			taken[icandidate] = true;  			if (i == organism.Length - 2) {  				icandidate = 0;  				while (taken[icandidate]) {  					icandidate++;  				}  				organism[i + 1] = icandidate;  			}  		}
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn("petal-length"' 2' ColumnType.Continuous);
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn("petal-width"' 3' ColumnType.Continuous);
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: ColumnDefinition outputColumn = data.DefineSourceColumn("species"' 4'                  ColumnType.Nominal);
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: model.HoldBackValidation(0.3' true' 1001);
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: model.HoldBackValidation(0.3' true' 1001);
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: var bestMethod = (IMLRegression) model.Crossvalidate(5' true);
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: var line = new String[4];
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                  line[0] = csv.Get(0);                  line[1] = csv.Get(1);                  line[2] = csv.Get(2);                  line[3] = csv.Get(3);                  String correct = csv.Get(4);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                  line[0] = csv.Get(0);                  line[1] = csv.Get(1);                  line[2] = csv.Get(2);                  line[3] = csv.Get(3);                  String correct = csv.Get(4);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                  line[0] = csv.Get(0);                  line[1] = csv.Get(1);                  line[2] = csv.Get(2);                  line[3] = csv.Get(3);                  String correct = csv.Get(4);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                  line[0] = csv.Get(0);                  line[1] = csv.Get(1);                  line[2] = csv.Get(2);                  line[3] = csv.Get(3);                  String correct = csv.Get(4);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                  line[0] = csv.Get(0);                  line[1] = csv.Get(1);                  line[2] = csv.Get(2);                  line[3] = csv.Get(3);                  String correct = csv.Get(4);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn("displacement"' 2' ColumnType.Continuous);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: ColumnDefinition columnHorsePower = data.DefineSourceColumn("horsepower"' 3' ColumnType.Continuous);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn("weight"' 4' ColumnType.Continuous);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn("acceleration"' 5' ColumnType.Continuous);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: ColumnDefinition columnModelYear = data.DefineSourceColumn("model_year"' 6' ColumnType.Ordinal);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn("origin"' 7' ColumnType.Nominal);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: model.HoldBackValidation(0.3' true' 1001);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: model.HoldBackValidation(0.3' true' 1001);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: var bestMethod = (IMLRegression) model.Crossvalidate(5' true);
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: var line = new String[7];
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next())              {                  var result = new StringBuilder();                    line[0] = csv.Get(1);                  line[1] = csv.Get(2);                  line[2] = csv.Get(3);                  line[3] = csv.Get(4);                  line[4] = csv.Get(5);                  line[5] = csv.Get(6);                  line[6] = csv.Get(7);                    String correct = csv.Get(0);                  helper.NormalizeInputVector(line' ((BasicMLData) input).Data' false);                  IMLData output = bestMethod.Compute(input);                  String irisChosen = helper.DenormalizeOutputVectorToString(output)[0];                    result.Append(line);                  result.Append(" -> predicted: ");                  result.Append(irisChosen);                  result.Append("(correct: ");                  result.Append(correct);                  result.Append(")");                    Console.WriteLine(result.ToString());              }
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: model.HoldBackValidation(0.3' false' 1001);
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: model.HoldBackValidation(0.3' false' 1001);
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: var bestMethod = (IMLRegression) model.Crossvalidate(5'                  false);
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: var line = new String[2];
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: var slice = new double[2];
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: int stopAfter = 100;
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: while (csv.Next() && stopAfter > 0)              {                  var result = new StringBuilder();                    line[0] = csv.Get(2); // ssn                  line[1] = csv.Get(3); // dev                  helper.NormalizeInputVector(line' slice' false);                    // enough data to build a full window?                  if (window.IsReady())                  {                      window.CopyWindow(((BasicMLData) input).Data' 0);                      String correct = csv.Get(2); // trying to predict SSN.                      IMLData output = bestMethod.Compute(input);                      String predicted = helper                          .DenormalizeOutputVectorToString(output)[0];                        result.Append(line);                      result.Append(" -> predicted: ");                      result.Append(predicted);                      result.Append("(correct: ");                      result.Append(correct);                      result.Append(")");                        Console.WriteLine(result.ToString());                  }                    // Add the normalized slice to the window. We do this just after                  // the after checking to see if the window is ready so that the                  // window is always one behind the current row. This is because                  // we are trying to predict next row.                  window.Add(slice);                    stopAfter--;              }
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: while (csv.Next() && stopAfter > 0)              {                  var result = new StringBuilder();                    line[0] = csv.Get(2); // ssn                  line[1] = csv.Get(3); // dev                  helper.NormalizeInputVector(line' slice' false);                    // enough data to build a full window?                  if (window.IsReady())                  {                      window.CopyWindow(((BasicMLData) input).Data' 0);                      String correct = csv.Get(2); // trying to predict SSN.                      IMLData output = bestMethod.Compute(input);                      String predicted = helper                          .DenormalizeOutputVectorToString(output)[0];                        result.Append(line);                      result.Append(" -> predicted: ");                      result.Append(predicted);                      result.Append("(correct: ");                      result.Append(correct);                      result.Append(")");                        Console.WriteLine(result.ToString());                  }                    // Add the normalized slice to the window. We do this just after                  // the after checking to see if the window is ready so that the                  // window is always one behind the current row. This is because                  // we are trying to predict next row.                  window.Add(slice);                    stopAfter--;              }
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: while (csv.Next() && stopAfter > 0)              {                  var result = new StringBuilder();                    line[0] = csv.Get(2); // ssn                  line[1] = csv.Get(3); // dev                  helper.NormalizeInputVector(line' slice' false);                    // enough data to build a full window?                  if (window.IsReady())                  {                      window.CopyWindow(((BasicMLData) input).Data' 0);                      String correct = csv.Get(2); // trying to predict SSN.                      IMLData output = bestMethod.Compute(input);                      String predicted = helper                          .DenormalizeOutputVectorToString(output)[0];                        result.Append(line);                      result.Append(" -> predicted: ");                      result.Append(predicted);                      result.Append("(correct: ");                      result.Append(correct);                      result.Append(")");                        Console.WriteLine(result.ToString());                  }                    // Add the normalized slice to the window. We do this just after                  // the after checking to see if the window is ready so that the                  // window is always one behind the current row. This is because                  // we are trying to predict next row.                  window.Add(slice);                    stopAfter--;              }
Magic Number,Encog.Examples.Hopfield.Associate,HopfieldAssociate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Hopfield\Associate\HopfieldAssociate.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < pattern.Length; i++)              {                  BiPolarMLData pattern1 = ConvertPattern(pattern' i);                  hopfield.CurrentState = pattern1;                  int cycles = hopfield.RunUntilStable(100);                  BiPolarMLData pattern2 = hopfield.CurrentState;                  Console.WriteLine("Cycles until stable(max 100): " + cycles + "' result=");                  Display(pattern1' pattern2);                  Console.WriteLine(@"----------------------");              }
Magic Number,Encog.Examples.Hopfield.Simple,HopfieldSimple,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Hopfield\Simple\HopfieldSimple.cs,Execute,The following statement contains a magic number: var network = new HopfieldNetwork(4);
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare(packet.Command' IndicatorLink.PacketBar' true) == 0)              {                                  double dataClose = CSVFormat.EgFormat.Parse(packet.Args[2]);                  double lastValue = CSVFormat.EgFormat.Parse(packet.Args[4]);                  const double period = 14;                    double result;                    if (double.IsNaN(lastValue))                      result = dataClose;                  else                      result = dataClose*(2.0/(1 + period)) + (1 - (2.0/(1 + period)))*lastValue;                    String[] args = {                                      CSVFormat.EgFormat.Format(result' EncogFramework.DefaultPrecision)'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"                                  };                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare(packet.Command' IndicatorLink.PacketBar' true) == 0)              {                                  double dataClose = CSVFormat.EgFormat.Parse(packet.Args[2]);                  double lastValue = CSVFormat.EgFormat.Parse(packet.Args[4]);                  const double period = 14;                    double result;                    if (double.IsNaN(lastValue))                      result = dataClose;                  else                      result = dataClose*(2.0/(1 + period)) + (1 - (2.0/(1 + period)))*lastValue;                    String[] args = {                                      CSVFormat.EgFormat.Format(result' EncogFramework.DefaultPrecision)'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"                                  };                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare(packet.Command' IndicatorLink.PacketBar' true) == 0)              {                                  double dataClose = CSVFormat.EgFormat.Parse(packet.Args[2]);                  double lastValue = CSVFormat.EgFormat.Parse(packet.Args[4]);                  const double period = 14;                    double result;                    if (double.IsNaN(lastValue))                      result = dataClose;                  else                      result = dataClose*(2.0/(1 + period)) + (1 - (2.0/(1 + period)))*lastValue;                    String[] args = {                                      CSVFormat.EgFormat.Format(result' EncogFramework.DefaultPrecision)'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"                                  };                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare(packet.Command' IndicatorLink.PacketBar' true) == 0)              {                                  double dataClose = CSVFormat.EgFormat.Parse(packet.Args[2]);                  double lastValue = CSVFormat.EgFormat.Parse(packet.Args[4]);                  const double period = 14;                    double result;                    if (double.IsNaN(lastValue))                      result = dataClose;                  else                      result = dataClose*(2.0/(1 + period)) + (1 - (2.0/(1 + period)))*lastValue;                    String[] args = {                                      CSVFormat.EgFormat.Format(result' EncogFramework.DefaultPrecision)'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"                                  };                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare(packet.Command' IndicatorLink.PacketBar' true) == 0)              {                                  double dataClose = CSVFormat.EgFormat.Parse(packet.Args[2]);                  double lastValue = CSVFormat.EgFormat.Parse(packet.Args[4]);                  const double period = 14;                    double result;                    if (double.IsNaN(lastValue))                      result = dataClose;                  else                      result = dataClose*(2.0/(1 + period)) + (1 - (2.0/(1 + period)))*lastValue;                    String[] args = {                                      CSVFormat.EgFormat.Format(result' EncogFramework.DefaultPrecision)'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"'                                      "?"                                  };                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: while (csv.Next())              {                  var a = new double[Config.InputWindow + 1];                  double close = csv.GetDouble(1);                    const int fastIndex = 2;                  const int slowIndex = fastIndex + Config.InputWindow;                    a[0] = close;                  for (int i = 0; i < 3; i++)                  {                      double fast = csv.GetDouble(fastIndex + i);                      double slow = csv.GetDouble(slowIndex + i);                      double diff = _fieldDifference.Normalize((fast - slow)/Config.PipSize);                      a[i + 1] = diff;                  }                  _window.Add(a);                    if (_window.IsFull())                  {                      double max = (_window.CalculateMax(0' Config.InputWindow) - close)/Config.PipSize;                      double min = (_window.CalculateMin(0' Config.InputWindow) - close)/Config.PipSize;                        double o = Math.Abs(max) > Math.Abs(min) ? max : min;                        a = _window.GetLast();                      for (int i = 0; i < 3; i++)                      {                          inputData[i] = a[i + 1];                      }                        o = _fieldOutcome.Normalize(o);                      idealData[0] = o;                        output.Add(inputData' idealData);                  }              }
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: while (csv.Next())              {                  var a = new double[Config.InputWindow + 1];                  double close = csv.GetDouble(1);                    const int fastIndex = 2;                  const int slowIndex = fastIndex + Config.InputWindow;                    a[0] = close;                  for (int i = 0; i < 3; i++)                  {                      double fast = csv.GetDouble(fastIndex + i);                      double slow = csv.GetDouble(slowIndex + i);                      double diff = _fieldDifference.Normalize((fast - slow)/Config.PipSize);                      a[i + 1] = diff;                  }                  _window.Add(a);                    if (_window.IsFull())                  {                      double max = (_window.CalculateMax(0' Config.InputWindow) - close)/Config.PipSize;                      double min = (_window.CalculateMin(0' Config.InputWindow) - close)/Config.PipSize;                        double o = Math.Abs(max) > Math.Abs(min) ? max : min;                        a = _window.GetLast();                      for (int i = 0; i < 3; i++)                      {                          inputData[i] = a[i + 1];                      }                        o = _fieldOutcome.Normalize(o);                      idealData[0] = o;                        output.Add(inputData' idealData);                  }              }
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: while (csv.Next())              {                  var a = new double[Config.InputWindow + 1];                  double close = csv.GetDouble(1);                    const int fastIndex = 2;                  const int slowIndex = fastIndex + Config.InputWindow;                    a[0] = close;                  for (int i = 0; i < 3; i++)                  {                      double fast = csv.GetDouble(fastIndex + i);                      double slow = csv.GetDouble(slowIndex + i);                      double diff = _fieldDifference.Normalize((fast - slow)/Config.PipSize);                      a[i + 1] = diff;                  }                  _window.Add(a);                    if (_window.IsFull())                  {                      double max = (_window.CalculateMax(0' Config.InputWindow) - close)/Config.PipSize;                      double min = (_window.CalculateMin(0' Config.InputWindow) - close)/Config.PipSize;                        double o = Math.Abs(max) > Math.Abs(min) ? max : min;                        a = _window.GetLast();                      for (int i = 0; i < 3; i++)                      {                          inputData[i] = a[i + 1];                      }                        o = _fieldOutcome.Normalize(o);                      idealData[0] = o;                        output.Add(inputData' idealData);                  }              }
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,CalibrateFile,The following statement contains a magic number: while (csv.Next())              {                  var a = new double[1];                  double close = csv.GetDouble(1);                    const int fastIndex = 2;                  const int slowIndex = fastIndex + Config.InputWindow;                  a[0] = close;                  for (int i = 0; i < Config.InputWindow; i++)                  {                      double fast = csv.GetDouble(fastIndex + i);                      double slow = csv.GetDouble(slowIndex + i);                        if (!double.IsNaN(fast) && !double.IsNaN(slow))                      {                          double diff = (fast - slow)/Config.PipSize;                          _minDifference = Math.Min(_minDifference' diff);                          _maxDifference = Math.Max(_maxDifference' diff);                      }                  }                  _window.Add(a);                    if (_window.IsFull())                  {                      double max = (_window.CalculateMax(0' Config.InputWindow) - close)/Config.PipSize;                      double min = (_window.CalculateMin(0' Config.InputWindow) - close)/Config.PipSize;                        double o = Math.Abs(max) > Math.Abs(min) ? max : min;                        _maxPiPs = Math.Max(_maxPiPs' (int) o);                      _minPiPs = Math.Min(_minPiPs' (int) o);                  }              }
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,Calibrate,The following statement contains a magic number: Console.WriteLine(@"DIFF_RANGE = " + (int) (Math.Max(_maxDifference' Math.Abs(_minDifference))*1.2));
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,Calibrate,The following statement contains a magic number: Console.WriteLine(@"PIP_RANGE = " + (int) (Math.Max(_maxPiPs' Math.Abs(_minPiPs))*1.2));
Magic Number,Encog.Examples.Indicator.Avg,IndicatorExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\IndicatorExample.cs,Execute,The following statement contains a magic number: if (args.Length != 2)              {                  Console.WriteLine(@"Usage: IndicatorExample [clear/collect/generate/train/run] [work path]");              }              else              {                  _path = args[1];                  if (string.Compare(args[0]' "collect"' true) == 0)                  {                      Run(true);                  }                  else if (string.Compare(args[0]' "train"' true) == 0)                  {                      Train();                  }                  else if (string.Compare(args[0]' "run"' true) == 0)                  {                      Run(false);                  }                  else if (string.Compare(args[0]' "clear"' true) == 0)                  {                      Clear();                  }                  else if (string.Compare(args[0]' "generate"' true) == 0)                  {                      Generate();                  }                  else if (string.Compare(args[0]' "calibrate"' true) == 0)                  {                      Calibrate();                  }              }
Magic Number,Encog.Examples.Indicator.Avg,IndicatorExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\IndicatorExample.cs,Train,The following statement contains a magic number: if (method is IMLResettable && !(train is ManhattanPropagation))              {                  train.AddStrategy(new RequiredImprovementStrategy(500));              }
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: if (_method == null)              {                  if (_holder.Record(when' 2' packet.Args))                  {                      _rowsDownloaded++;                  }              }              else              {                  var input = new BasicMLData(Config.PredictWindow);                    const int fastIndex = 2;                  const int slowIndex = fastIndex + Config.InputWindow;                    for (int i = 0; i < 3; i++)                  {                      double fast = CSVFormat.EgFormat.Parse(packet.Args[fastIndex + i]);                      double slow = CSVFormat.EgFormat.Parse(packet.Args[slowIndex + i]);                      double diff = _fieldDifference.Normalize((fast - slow)/Config.PipSize);                      input[i] = _fieldDifference.Normalize(diff);                  }                    IMLData result = _method.Compute(input);                    double d = result[0];                  d = _fieldOutcome.DeNormalize(d);                    String[] args = {                                      "?"' // line 1                                      "?"' // line 2                                      CSVFormat.EgFormat.Format(d' EncogFramework.DefaultPrecision)' // bar 1                                  }; // arrow 2                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: if (_method == null)              {                  if (_holder.Record(when' 2' packet.Args))                  {                      _rowsDownloaded++;                  }              }              else              {                  var input = new BasicMLData(Config.PredictWindow);                    const int fastIndex = 2;                  const int slowIndex = fastIndex + Config.InputWindow;                    for (int i = 0; i < 3; i++)                  {                      double fast = CSVFormat.EgFormat.Parse(packet.Args[fastIndex + i]);                      double slow = CSVFormat.EgFormat.Parse(packet.Args[slowIndex + i]);                      double diff = _fieldDifference.Normalize((fast - slow)/Config.PipSize);                      input[i] = _fieldDifference.Normalize(diff);                  }                    IMLData result = _method.Compute(input);                    double d = result[0];                  d = _fieldOutcome.DeNormalize(d);                    String[] args = {                                      "?"' // line 1                                      "?"' // line 2                                      CSVFormat.EgFormat.Format(d' EncogFramework.DefaultPrecision)' // bar 1                                  }; // arrow 2                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: if (_method == null)              {                  if (_holder.Record(when' 2' packet.Args))                  {                      _rowsDownloaded++;                  }              }              else              {                  var input = new BasicMLData(Config.PredictWindow);                    const int fastIndex = 2;                  const int slowIndex = fastIndex + Config.InputWindow;                    for (int i = 0; i < 3; i++)                  {                      double fast = CSVFormat.EgFormat.Parse(packet.Args[fastIndex + i]);                      double slow = CSVFormat.EgFormat.Parse(packet.Args[slowIndex + i]);                      double diff = _fieldDifference.Normalize((fast - slow)/Config.PipSize);                      input[i] = _fieldDifference.Normalize(diff);                  }                    IMLData result = _method.Compute(input);                    double d = result[0];                  d = _fieldOutcome.DeNormalize(d);                    String[] args = {                                      "?"' // line 1                                      "?"' // line 2                                      CSVFormat.EgFormat.Format(d' EncogFramework.DefaultPrecision)' // bar 1                                  }; // arrow 2                    Link.WritePacket(IndicatorLink.PacketInd' args);              }
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NextFile,The following statement contains a magic number: foreach (string file in list)              {                  var fn = new FileInfo(file);                  if (fn.Name.StartsWith("collected") && fn.Name.EndsWith(".csv"))                  {                      int idx = fn.Name.IndexOf(".csv");                      String str = fn.Name.Substring(9' idx - 9);                      int n = int.Parse(str);                      mx = Math.Max(n' mx);                  }              }
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NextFile,The following statement contains a magic number: foreach (string file in list)              {                  var fn = new FileInfo(file);                  if (fn.Name.StartsWith("collected") && fn.Name.EndsWith(".csv"))                  {                      int idx = fn.Name.IndexOf(".csv");                      String str = fn.Name.Substring(9' idx - 9);                      int n = int.Parse(str);                      mx = Math.Max(n' mx);                  }              }
Magic Number,Encog.Examples.Iris,IrisPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Iris\IrisPredict.cs,Execute,The following statement contains a magic number: NormalizationStorageMLDataSet store = new NormalizationStorageMLDataSet(4' 0);
Magic Number,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,Execute,The following statement contains a magic number: IMLDataSet trainingSet = temp.Generate(100);
Magic Number,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,CreateJordanNetwork,The following statement contains a magic number: pattern.AddHiddenLayer(2);
Magic Number,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,CreateFeedforwardNetwork,The following statement contains a magic number: pattern.AddHiddenLayer(2);
Magic Number,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(                  network' score' 10' 2' 100);
Magic Number,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(                  network' score' 10' 2' 100);
Magic Number,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(                  network' score' 10' 2' 100);
Magic Number,Encog.Examples.JordanNetwork,JordanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainMain = new Backpropagation(network' trainingSet' 0.00001' 0.0);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: double[] firstinput = MakeInputs(150);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: double[] SecondInput = MakeInputs(150);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: double[] ThirdInputs = MakeInputs(150);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: double[] ideals = MakeInputs(150);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: var network = EncogUtility.SimpleFeedForward(4' 100' 1' 1' false);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: var network = EncogUtility.SimpleFeedForward(4' 100' 1' 1' false);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: EncogUtility.TrainConsole(network'set.Item1'22.1);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: double[] live1 = MakeInputs(150);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: double[] Live2 = MakeInputs(150);
Magic Number,Encog.Examples.LiveSimul,LiveSimul,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: double[] live3 = MakeInputs(150);
Magic Number,Encog.Examples.Lunar,LanderSimulator,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LanderSimulator.cs,LanderSimulator,The following statement contains a magic number: Fuel = 200;
Magic Number,Encog.Examples.Lunar,LanderSimulator,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LanderSimulator.cs,LanderSimulator,The following statement contains a magic number: Altitude = 10000;
Magic Number,Encog.Examples.Lunar,LanderSimulator,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LanderSimulator.cs,Telemetry,The following statement contains a magic number: return string                  .Format("Elapsed: {0} s' Fuel: {1} l' Velocity: {2} m/s' {3} m"'                   Seconds'                   Fuel'                   Format.FormatDouble(Velocity' 4)'                   (int) Altitude);
Magic Number,Encog.Examples.Lunar,LunarLander,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare(app.Args[0]' "anneal"' true) == 0)              {                  train = new NeuralSimulatedAnnealing(                      network' new PilotScore()' 10' 2' 100);              }              else              {                  train = new MLMethodGeneticAlgorithm( ()=>{  					BasicNetwork result = CreateNetwork();  					((IMLResettable)result).Reset();  					return result;  				}'new PilotScore()'500);              }
Magic Number,Encog.Examples.Lunar,LunarLander,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare(app.Args[0]' "anneal"' true) == 0)              {                  train = new NeuralSimulatedAnnealing(                      network' new PilotScore()' 10' 2' 100);              }              else              {                  train = new MLMethodGeneticAlgorithm( ()=>{  					BasicNetwork result = CreateNetwork();  					((IMLResettable)result).Reset();  					return result;  				}'new PilotScore()'500);              }
Magic Number,Encog.Examples.Lunar,LunarLander,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare(app.Args[0]' "anneal"' true) == 0)              {                  train = new NeuralSimulatedAnnealing(                      network' new PilotScore()' 10' 2' 100);              }              else              {                  train = new MLMethodGeneticAlgorithm( ()=>{  					BasicNetwork result = CreateNetwork();  					((IMLResettable)result).Reset();  					return result;  				}'new PilotScore()'500);              }
Magic Number,Encog.Examples.Lunar,LunarLander,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare(app.Args[0]' "anneal"' true) == 0)              {                  train = new NeuralSimulatedAnnealing(                      network' new PilotScore()' 10' 2' 100);              }              else              {                  train = new MLMethodGeneticAlgorithm( ()=>{  					BasicNetwork result = CreateNetwork();  					((IMLResettable)result).Reset();  					return result;  				}'new PilotScore()'500);              }
Magic Number,Encog.Examples.Lunar,LunarLander,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: for (int i = 0; i < 50; i++)              {                  train.Iteration();                  Console.WriteLine(@"Epoch #" + epoch + @" Score:" + train.Error);                  epoch++;              }
Magic Number,Encog.Examples.Lunar,LunarLander,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,CreateNetwork,The following statement contains a magic number: var pattern = new FeedForwardPattern {InputNeurons = 3};
Magic Number,Encog.Examples.Lunar,LunarLander,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,CreateNetwork,The following statement contains a magic number: pattern.AddHiddenLayer(50);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _fuelStats = new NormalizedField(NormalizationAction.Normalize' "fuel"' 200' 0' -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _fuelStats = new NormalizedField(NormalizationAction.Normalize' "fuel"' 200' 0' -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _fuelStats = new NormalizedField(NormalizationAction.Normalize' "fuel"' 200' 0' -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _altitudeStats = new NormalizedField(NormalizationAction.Normalize' "altitude"' 10000' 0' -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _altitudeStats = new NormalizedField(NormalizationAction.Normalize' "altitude"' 10000' 0' -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _altitudeStats = new NormalizedField(NormalizationAction.Normalize' "altitude"' 10000' 0' -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _velocityStats = new NormalizedField(NormalizationAction.Normalize' "velocity"'                                                  LanderSimulator.TerminalVelocity' -LanderSimulator.TerminalVelocity'                                                  -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _velocityStats = new NormalizedField(NormalizationAction.Normalize' "velocity"'                                                  LanderSimulator.TerminalVelocity' -LanderSimulator.TerminalVelocity'                                                  -0.9' 0.9);
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,ScorePilot,The following statement contains a magic number: while (sim.Flying)              {                  var input = new BasicMLData(3);                  input[0] = _fuelStats.Normalize(sim.Fuel);                  input[1] = _altitudeStats.Normalize(sim.Altitude);                  input[2] = _velocityStats.Normalize(sim.Velocity);                  IMLData output = _network.Compute(input);                  double value = output[0];                    bool thrust;                    if (value > 0)                  {                      thrust = true;                      if (_track)                          Console.WriteLine(@"THRUST");                  }                  else                      thrust = false;                    sim.Turn(thrust);                  if (_track)                      Console.WriteLine(sim.Telemetry());              }
Magic Number,Encog.Examples.Lunar,NeuralPilot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,ScorePilot,The following statement contains a magic number: while (sim.Flying)              {                  var input = new BasicMLData(3);                  input[0] = _fuelStats.Normalize(sim.Fuel);                  input[1] = _altitudeStats.Normalize(sim.Altitude);                  input[2] = _velocityStats.Normalize(sim.Velocity);                  IMLData output = _network.Compute(input);                  double value = output[0];                    bool thrust;                    if (value > 0)                  {                      thrust = true;                      if (_track)                          Console.WriteLine(@"THRUST");                  }                  else                      thrust = false;                    sim.Turn(thrust);                  if (_track)                      Console.WriteLine(sim.Telemetry());              }
Magic Number,Encog.Examples.Market,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketBuildTraining.cs,Generate,The following statement contains a magic number: begin = begin.AddDays(-60);
Magic Number,Encog.Examples.Market,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketBuildTraining.cs,Generate,The following statement contains a magic number: end = end.AddDays(-60);
Magic Number,Encog.Examples.Market,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketBuildTraining.cs,Generate,The following statement contains a magic number: begin = begin.AddYears(-2);
Magic Number,Encog.Examples.Market,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,GrabData,The following statement contains a magic number: begin = begin.AddDays(-60);
Magic Number,Encog.Examples.Market,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                    Direction actualDirection = DetermineDirection(actual);                  Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                    count++;                      Console.WriteLine(@"Day " + count + @":actual="                                    + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"("                                    + predictDirection + @")" + @"'diff=" + diff);              }
Magic Number,Encog.Examples.Market,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                    Direction actualDirection = DetermineDirection(actual);                  Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                    count++;                      Console.WriteLine(@"Day " + count + @":actual="                                    + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"("                                    + predictDirection + @")" + @"'diff=" + diff);              }
Magic Number,Encog.Examples.Market,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 2)              {                  Console.WriteLine(@"MarketPredict [data dir] [generate/train/prune/evaluate]");              }              else              {                  var dataDir = new FileInfo(app.Args[0]);                  if (String.Compare(app.Args[1]' "generate"' true) == 0)                  {                      MarketBuildTraining.Generate(dataDir);                  }                  else if (String.Compare(app.Args[1]' "train"' true) == 0)                  {                      MarketTrain.Train(dataDir);                  }                  else if (String.Compare(app.Args[1]' "evaluate"' true) == 0)                  {                      MarketEvaluate.Evaluate(dataDir);                  }                  else if (String.Compare(app.Args[1]' "prune"' true) == 0)                  {                      {                          MarketPrune.Incremental(dataDir);                      }                  }              }
Magic Number,Encog.Examples.Market,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.Market,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.Market,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.Market,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.Market,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(0' 50);
Magic Number,Encog.Examples.CSVMarketExample,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketbuildtraining.cs,Generate,The following statement contains a magic number: begin = begin.AddDays(-200);
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,GrabData,The following statement contains a magic number: begin = begin.AddDays(-150);
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                    Direction actualDirection = DetermineDirection(actual);                  Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                    count++;                      Console.WriteLine(@"Day " + count + @":actual="                                    + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"("                                    + predictDirection + @")" + @"'diff=" + diff);              }
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                    Direction actualDirection = DetermineDirection(actual);                  Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                    count++;                      Console.WriteLine(@"Day " + count + @":actual="                                    + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"("                                    + predictDirection + @")" + @"'diff=" + diff);              }
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3)              {                  Console.WriteLine(@"MarketPredict [data dir] [generate/train/prune/evaluate] PathToFile");                  Console.WriteLine(@"e.g csvMarketPredict [data dir] [generate/train/prune/evaluate] c:\\EURUSD.csv");              }              else              {                  var dataDir = new FileInfo(app.Args[0]);                  if (String.Compare(app.Args[1]' "generate"' true) == 0)                  {                      MarketBuildTraining.Generate(app.Args[2]);                  }                  else if (String.Compare(app.Args[1]' "train"' true) == 0)                  {                      MarketTrain.Train(dataDir);                  }                  else if (String.Compare(app.Args[1]' "evaluate"' true) == 0)                  {                      MarketEvaluate.Evaluate(dataDir'app.Args[2]);                  }                  else if (String.Compare(app.Args[1]' "prune"' true) == 0)                  {                      {                          MarketPrune.Incremental(dataDir);                      }                  }              }
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3)              {                  Console.WriteLine(@"MarketPredict [data dir] [generate/train/prune/evaluate] PathToFile");                  Console.WriteLine(@"e.g csvMarketPredict [data dir] [generate/train/prune/evaluate] c:\\EURUSD.csv");              }              else              {                  var dataDir = new FileInfo(app.Args[0]);                  if (String.Compare(app.Args[1]' "generate"' true) == 0)                  {                      MarketBuildTraining.Generate(app.Args[2]);                  }                  else if (String.Compare(app.Args[1]' "train"' true) == 0)                  {                      MarketTrain.Train(dataDir);                  }                  else if (String.Compare(app.Args[1]' "evaluate"' true) == 0)                  {                      MarketEvaluate.Evaluate(dataDir'app.Args[2]);                  }                  else if (String.Compare(app.Args[1]' "prune"' true) == 0)                  {                      {                          MarketPrune.Incremental(dataDir);                      }                  }              }
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3)              {                  Console.WriteLine(@"MarketPredict [data dir] [generate/train/prune/evaluate] PathToFile");                  Console.WriteLine(@"e.g csvMarketPredict [data dir] [generate/train/prune/evaluate] c:\\EURUSD.csv");              }              else              {                  var dataDir = new FileInfo(app.Args[0]);                  if (String.Compare(app.Args[1]' "generate"' true) == 0)                  {                      MarketBuildTraining.Generate(app.Args[2]);                  }                  else if (String.Compare(app.Args[1]' "train"' true) == 0)                  {                      MarketTrain.Train(dataDir);                  }                  else if (String.Compare(app.Args[1]' "evaluate"' true) == 0)                  {                      MarketEvaluate.Evaluate(dataDir'app.Args[2]);                  }                  else if (String.Compare(app.Args[1]' "prune"' true) == 0)                  {                      {                          MarketPrune.Incremental(dataDir);                      }                  }              }
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(0' 50);
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The following statement contains a magic number: const int dimensions = 2;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The following statement contains a magic number: const int numNeuronsPerDimension = 7;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The following statement contains a magic number: const double volumeNeuronWidth = 2.0/numNeuronsPerDimension;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The following statement contains a magic number: do              {                  train.Iteration();                  Console.WriteLine(@"Epoch #" + epoch + @" Error:" + train.Error);                  epoch++;              } while ((epoch < 1) && (train.Error > 0.001));
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The following statement contains a magic number: Set2DTestingArrays(100);
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Scale,The following statement contains a magic number: return (x*0.7) + 0.15;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Scale,The following statement contains a magic number: return (x*0.7) + 0.15;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,InverseScale,The following statement contains a magic number: return (x - 0.15)/0.7;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,InverseScale,The following statement contains a magic number: return (x - 0.15)/0.7;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Chop,The following statement contains a magic number: if (x > 0.99)                  return 0.99;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Chop,The following statement contains a magic number: if (x > 0.99)                  return 0.99;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols)              {  //[0] is x                  //[1] is y                  //Boundary bottom                   //int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);                  //int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);                    //Boundary middle                  int rowIndex = (int) Math.Round(((t[0] - 0.05)*(sideLength))' 6);                  int columnIndex = (int) Math.Round(((t[1] - 0.05)*(sideLength))' 6);                    surface[0][rowIndex + 1] = t[0];                  surface[columnIndex + 1][0] = t[1];                  surface[columnIndex + 1][rowIndex + 1] = t[valueCol];              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols)              {  //[0] is x                  //[1] is y                  //Boundary bottom                   //int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);                  //int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);                    //Boundary middle                  int rowIndex = (int) Math.Round(((t[0] - 0.05)*(sideLength))' 6);                  int columnIndex = (int) Math.Round(((t[1] - 0.05)*(sideLength))' 6);                    surface[0][rowIndex + 1] = t[0];                  surface[columnIndex + 1][0] = t[1];                  surface[columnIndex + 1][rowIndex + 1] = t[valueCol];              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols)              {  //[0] is x                  //[1] is y                  //Boundary bottom                   //int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);                  //int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);                    //Boundary middle                  int rowIndex = (int) Math.Round(((t[0] - 0.05)*(sideLength))' 6);                  int columnIndex = (int) Math.Round(((t[1] - 0.05)*(sideLength))' 6);                    surface[0][rowIndex + 1] = t[0];                  surface[columnIndex + 1][0] = t[1];                  surface[columnIndex + 1][rowIndex + 1] = t[valueCol];              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols)              {  //[0] is x                  //[1] is y                  //Boundary bottom                   //int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);                  //int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);                    //Boundary middle                  int rowIndex = (int) Math.Round(((t[0] - 0.05)*(sideLength))' 6);                  int columnIndex = (int) Math.Round(((t[1] - 0.05)*(sideLength))' 6);                    surface[0][rowIndex + 1] = t[0];                  surface[columnIndex + 1][0] = t[1];                  surface[columnIndex + 1][rowIndex + 1] = t[valueCol];              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int i = 1; i < surface.Count; i++)              {                  for (int j = 1; j < surface[i].Length; j++)                  {                      double cellWidth = (1.0/(2.0*(surface.Count - 1)));                      cols[(i - 1)*(surface.Count - 1) + (j - 1)] = new double[3];                      //For midpoints                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][0] = ((i - 1)/(double) (surface.Count - 1)) +                                                                        cellWidth;                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][1] = ((j - 1)/(double) (surface.Count - 1)) +                                                                        cellWidth;                      //For actual value                      //cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));                      //cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][2] = surface[j][i];                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int i = 1; i < surface.Count; i++)              {                  for (int j = 1; j < surface[i].Length; j++)                  {                      double cellWidth = (1.0/(2.0*(surface.Count - 1)));                      cols[(i - 1)*(surface.Count - 1) + (j - 1)] = new double[3];                      //For midpoints                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][0] = ((i - 1)/(double) (surface.Count - 1)) +                                                                        cellWidth;                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][1] = ((j - 1)/(double) (surface.Count - 1)) +                                                                        cellWidth;                      //For actual value                      //cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));                      //cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][2] = surface[j][i];                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int i = 1; i < surface.Count; i++)              {                  for (int j = 1; j < surface[i].Length; j++)                  {                      double cellWidth = (1.0/(2.0*(surface.Count - 1)));                      cols[(i - 1)*(surface.Count - 1) + (j - 1)] = new double[3];                      //For midpoints                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][0] = ((i - 1)/(double) (surface.Count - 1)) +                                                                        cellWidth;                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][1] = ((j - 1)/(double) (surface.Count - 1)) +                                                                        cellWidth;                      //For actual value                      //cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));                      //cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));                      cols[(i - 1)*(surface.Count - 1) + (j - 1)][2] = surface[j][i];                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal1DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[1]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal1DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[1]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[2];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  INPUT[i][1] = Scale((Convert.ToDouble(values[1]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[2]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[2];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  INPUT[i][1] = Scale((Convert.ToDouble(values[1]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[2]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[2];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  INPUT[i][1] = Scale((Convert.ToDouble(values[1]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[2]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[2];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  INPUT[i][1] = Scale((Convert.ToDouble(values[1]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[2]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[2];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  INPUT[i][1] = Scale((Convert.ToDouble(values[1]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[2]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[2];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale((Convert.ToDouble(values[0]) - 0.05)*(1.0/0.9));                  INPUT[i][1] = Scale((Convert.ToDouble(values[1]) - 0.05)*(1.0/0.9));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[2]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[3];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale(Convert.ToDouble(values[0]));                  INPUT[i][1] = Scale(Convert.ToDouble(values[1]));                  INPUT[i][2] = Scale(Convert.ToDouble(values[2]));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[3]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[3];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale(Convert.ToDouble(values[0]));                  INPUT[i][1] = Scale(Convert.ToDouble(values[1]));                  INPUT[i][2] = Scale(Convert.ToDouble(values[2]));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[3]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[3];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale(Convert.ToDouble(values[0]));                  INPUT[i][1] = Scale(Convert.ToDouble(values[1]));                  INPUT[i][2] = Scale(Convert.ToDouble(values[2]));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[3]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++)              {                  INPUT[i] = new double[3];                  IDEAL[i] = new double[1];                    var values = allLines[i].Split(''');                    INPUT[i][0] = Scale(Convert.ToDouble(values[0]));                  INPUT[i][1] = Scale(Convert.ToDouble(values[1]));                  INPUT[i][2] = Scale(Convert.ToDouble(values[2]));                  IDEAL[i][0] = Scale(Convert.ToDouble(values[3]));              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set2DTestingArrays,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        //double x = i/(double) iLimit;                      //double y = k/(double) kLimit;                      INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = 0;                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      for (int j = 0; j <= jLimit; j++)                      {                          int index = (i*(kLimit + 1)*(jLimit + 1)) + (j*(kLimit + 1)) + k;                          INPUT[index] = new double[3];                          IDEAL[index] = new double[1];                            //double x = (double)i / (double)iLimit;                          //double y = (double)k / (double)kLimit;                          //double z = (double)j / (double)jLimit;                            INPUT[index][0] = Scale((i/((double) iLimit)));                          INPUT[index][1] = Scale((k/((double) kLimit)));                          INPUT[index][2] = Scale((j/((double) jLimit)));                          IDEAL[index][0] = 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      for (int j = 0; j <= jLimit; j++)                      {                          int index = (i*(kLimit + 1)*(jLimit + 1)) + (j*(kLimit + 1)) + k;                          INPUT[index] = new double[3];                          IDEAL[index] = new double[1];                            //double x = (double)i / (double)iLimit;                          //double y = (double)k / (double)kLimit;                          //double z = (double)j / (double)jLimit;                            INPUT[index][0] = Scale((i/((double) iLimit)));                          INPUT[index][1] = Scale((k/((double) kLimit)));                          INPUT[index][2] = Scale((j/((double) jLimit)));                          IDEAL[index][0] = 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: const int iLimit = 30;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: const int kLimit = 30;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double x = i/(double) iLimit;                          double y = k/(double) kLimit;                            INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() <                                                                      (Math.Exp(                                                                          -((x - 0.6)*(x - 0.6) + (y - 0.5)*(y - 0.5))*3) -                                                                       0.1))                                                                         ? 1                                                                         : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double x = i/(double) iLimit;                          double y = k/(double) kLimit;                            INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() <                                                                      (Math.Exp(                                                                          -((x - 0.6)*(x - 0.6) + (y - 0.5)*(y - 0.5))*3) -                                                                       0.1))                                                                         ? 1                                                                         : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double x = i/(double) iLimit;                          double y = k/(double) kLimit;                            INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() <                                                                      (Math.Exp(                                                                          -((x - 0.6)*(x - 0.6) + (y - 0.5)*(y - 0.5))*3) -                                                                       0.1))                                                                         ? 1                                                                         : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double x = i/(double) iLimit;                          double y = k/(double) kLimit;                            INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() <                                                                      (Math.Exp(                                                                          -((x - 0.6)*(x - 0.6) + (y - 0.5)*(y - 0.5))*3) -                                                                       0.1))                                                                         ? 1                                                                         : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double x = i/(double) iLimit;                          double y = k/(double) kLimit;                            INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() <                                                                      (Math.Exp(                                                                          -((x - 0.6)*(x - 0.6) + (y - 0.5)*(y - 0.5))*3) -                                                                       0.1))                                                                         ? 1                                                                         : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double x = i/(double) iLimit;                          double y = k/(double) kLimit;                            INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() <                                                                      (Math.Exp(                                                                          -((x - 0.6)*(x - 0.6) + (y - 0.5)*(y - 0.5))*3) -                                                                       0.1))                                                                         ? 1                                                                         : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double x = i/(double) iLimit;                          double y = k/(double) kLimit;                            INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() <                                                                      (Math.Exp(                                                                          -((x - 0.6)*(x - 0.6) + (y - 0.5)*(y - 0.5))*3) -                                                                       0.1))                                                                         ? 1                                                                         : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: const int iLimit = 100;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: const int kLimit = 100;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: const int jLimit = 10000;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double average = 0;                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = (Math.Exp(-((x - 0.5)*(x - 0.5) + (y - 0.6)*(y - 0.6))*3) - 0.1);                        //if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;                        for (int j = 0; j < jLimit; j++)                      {                          average += (r.NextDouble() < expression) ? 1 : 0;                      }                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale((average/jLimit));                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double average = 0;                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = (Math.Exp(-((x - 0.5)*(x - 0.5) + (y - 0.6)*(y - 0.6))*3) - 0.1);                        //if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;                        for (int j = 0; j < jLimit; j++)                      {                          average += (r.NextDouble() < expression) ? 1 : 0;                      }                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale((average/jLimit));                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double average = 0;                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = (Math.Exp(-((x - 0.5)*(x - 0.5) + (y - 0.6)*(y - 0.6))*3) - 0.1);                        //if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;                        for (int j = 0; j < jLimit; j++)                      {                          average += (r.NextDouble() < expression) ? 1 : 0;                      }                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale((average/jLimit));                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double average = 0;                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = (Math.Exp(-((x - 0.5)*(x - 0.5) + (y - 0.6)*(y - 0.6))*3) - 0.1);                        //if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;                        for (int j = 0; j < jLimit; j++)                      {                          average += (r.NextDouble() < expression) ? 1 : 0;                      }                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale((average/jLimit));                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double average = 0;                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = (Math.Exp(-((x - 0.5)*(x - 0.5) + (y - 0.6)*(y - 0.6))*3) - 0.1);                        //if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;                        for (int j = 0; j < jLimit; j++)                      {                          average += (r.NextDouble() < expression) ? 1 : 0;                      }                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale((average/jLimit));                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double average = 0;                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = (Math.Exp(-((x - 0.5)*(x - 0.5) + (y - 0.6)*(y - 0.6))*3) - 0.1);                        //if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;                        for (int j = 0; j < jLimit; j++)                      {                          average += (r.NextDouble() < expression) ? 1 : 0;                      }                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale((average/jLimit));                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double average = 0;                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = (Math.Exp(-((x - 0.5)*(x - 0.5) + (y - 0.6)*(y - 0.6))*3) - 0.1);                        //if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;                        for (int j = 0; j < jLimit; j++)                      {                          average += (r.NextDouble() < expression) ? 1 : 0;                      }                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale((average/jLimit));                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: const int iLimit = 10;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: const int kLimit = 10;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale(expression);                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale(expression);                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale(expression);                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale(expression);                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale(expression);                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++)              {                  for (int k = 0; k <= kLimit; k++)                  {                      INPUT[i*(kLimit + 1) + k] = new double[2];                      IDEAL[i*(kLimit + 1) + k] = new double[1];                        double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                        INPUT[i*(kLimit + 1) + k][0] = Scale((i/((double) iLimit)));                      INPUT[i*(kLimit + 1) + k][1] = Scale((k/((double) kLimit)));                      IDEAL[i*(kLimit + 1) + k][0] = Scale(expression);                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: const int iLimit = 10;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: const int kLimit = 10;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: const int jLimit = 10;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                                                      INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() < expression) ? 1 : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                                                      INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() < expression) ? 1 : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                                                      INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() < expression) ? 1 : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                                                      INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() < expression) ? 1 : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                                                      INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() < expression) ? 1 : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  for (int k = 0; k < kLimit; k++)                  {                      double x = i/(double) iLimit;                      double y = k/(double) kLimit;                        for (int j = 0; j < jLimit; j++)                      {                          INPUT[i*jLimit*kLimit + k*jLimit + j] = new double[2];                          IDEAL[i*jLimit*kLimit + k*jLimit + j] = new double[1];                            double expression = ((x + 1.0/3.0)*(2 + Math.Log10((y/(x + 0.1)) + 0.1)))/3;                                                      INPUT[i*jLimit*kLimit + k*jLimit + j][0] = (i/((double) iLimit));                          INPUT[i*jLimit*kLimit + k*jLimit + j][1] = (k/((double) iLimit));                          IDEAL[i*jLimit*kLimit + k*jLimit + j][0] = (r.NextDouble() < expression) ? 1 : 0;                      }                  }              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DDegenerateTrainingDataLine,The following statement contains a magic number: var r = new Random(14768);
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DDegenerateTrainingDataLine,The following statement contains a magic number: const int iLimit = 10;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DDegenerateTrainingDataLine,The following statement contains a magic number: const int jLimit = 100;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataLine,The following statement contains a magic number: var r = new Random(14768);
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataLine,The following statement contains a magic number: const int iLimit = 1000;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: var r = new Random(14768);
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: const int iLimit = 20;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: const int jLimit = 10;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    for (int j = 0; j < jLimit; j++)                      average += (r.NextDouble() < (-4*Math.Pow(x' 2) + 4*x)) ? 1 : 0;                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    for (int j = 0; j < jLimit; j++)                      average += (r.NextDouble() < (-4*Math.Pow(x' 2) + 4*x)) ? 1 : 0;                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    for (int j = 0; j < jLimit; j++)                      average += (r.NextDouble() < (-4*Math.Pow(x' 2) + 4*x)) ? 1 : 0;                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: var r = new Random(14768);
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: const int iLimit = 100;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: const int jLimit = 100;
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    //double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;                  double y = ((Math.Exp(2.0*(x*4.0 - 1)) - 1.0)/(Math.Exp(2.0*(x*4.0 - 1)) + 1.0))/2 + 0.5;                    for (int j = 0; j < jLimit; j++)                  {                      average += (r.NextDouble() < y) ? 1 : 0;                  }                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    //double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;                  double y = ((Math.Exp(2.0*(x*4.0 - 1)) - 1.0)/(Math.Exp(2.0*(x*4.0 - 1)) + 1.0))/2 + 0.5;                    for (int j = 0; j < jLimit; j++)                  {                      average += (r.NextDouble() < y) ? 1 : 0;                  }                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    //double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;                  double y = ((Math.Exp(2.0*(x*4.0 - 1)) - 1.0)/(Math.Exp(2.0*(x*4.0 - 1)) + 1.0))/2 + 0.5;                    for (int j = 0; j < jLimit; j++)                  {                      average += (r.NextDouble() < y) ? 1 : 0;                  }                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    //double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;                  double y = ((Math.Exp(2.0*(x*4.0 - 1)) - 1.0)/(Math.Exp(2.0*(x*4.0 - 1)) + 1.0))/2 + 0.5;                    for (int j = 0; j < jLimit; j++)                  {                      average += (r.NextDouble() < y) ? 1 : 0;                  }                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    //double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;                  double y = ((Math.Exp(2.0*(x*4.0 - 1)) - 1.0)/(Math.Exp(2.0*(x*4.0 - 1)) + 1.0))/2 + 0.5;                    for (int j = 0; j < jLimit; j++)                  {                      average += (r.NextDouble() < y) ? 1 : 0;                  }                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.MultiRadial,MultiRadial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++)              {                  INPUT[i] = new double[1];                  IDEAL[i] = new double[1];                  double average = 0;                  double x = i/(double) iLimit;                    //double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;                  double y = ((Math.Exp(2.0*(x*4.0 - 1)) - 1.0)/(Math.Exp(2.0*(x*4.0 - 1)) + 1.0))/2 + 0.5;                    for (int j = 0; j < jLimit; j++)                  {                      average += (r.NextDouble() < y) ? 1 : 0;                  }                    INPUT[i][0] = Scale(x);                  IDEAL[i][0] = Scale(average/jLimit);              }
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(0' 50);
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3)              {                  Console.WriteLine(@" [prunator ]  [data dir]  [trainingfile] [networkfile]");              }              else              {                  var dataDir = new FileInfo(app.Args[1]);                  if (String.Compare(app.Args[0]' "prune"' true) == 0)                  {                      PrunerLoader.Incremental(dataDir' app.Args[2]' app.Args[3]);                  }              }
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3)              {                  Console.WriteLine(@" [prunator ]  [data dir]  [trainingfile] [networkfile]");              }              else              {                  var dataDir = new FileInfo(app.Args[1]);                  if (String.Compare(app.Args[0]' "prune"' true) == 0)                  {                      PrunerLoader.Incremental(dataDir' app.Args[2]' app.Args[3]);                  }              }
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3)              {                  Console.WriteLine(@" [prunator ]  [data dir]  [trainingfile] [networkfile]");              }              else              {                  var dataDir = new FileInfo(app.Args[1]);                  if (String.Compare(app.Args[0]' "prune"' true) == 0)                  {                      PrunerLoader.Incremental(dataDir' app.Args[2]' app.Args[3]);                  }              }
Magic Number,Encog.Examples.Normalize,NormalizeFile,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Normalize\NormalizeFile.cs,Execute,The following statement contains a magic number: if (app.Args.Length != 2)              {                  Console.WriteLine(@"Note: This example assumes that headers are present in the CSV files.");                  Console.WriteLine(@"NormalizeFile [input file] [target file]");              }              else              {                  var sourceFile = new FileInfo(app.Args[0]);                  var targetFile = new FileInfo(app.Args[1]);                    var analyst = new EncogAnalyst();                  var wizard = new AnalystWizard(analyst);                  wizard.Wizard(sourceFile' true' AnalystFileFormat.DecpntComma);                    DumpFieldInfo(analyst);                    var norm = new AnalystNormalizeCSV();                  norm.Analyze(sourceFile' true' CSVFormat.English' analyst);                  norm.ProduceOutputHeaders = true;                  norm.Normalize(targetFile);                  EncogFramework.Instance.Shutdown();              }
Magic Number,Encog.Examples.Normalize,SimpleNormalize,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Normalize\SimpleNormalize.cs,Execute,The following statement contains a magic number: var norm = new NormalizedField(NormalizationAction.Normalize'                                             null' 100' 0' 1' -1);
Magic Number,Encog.Examples.Normalize,SimpleNormalize,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Normalize\SimpleNormalize.cs,Execute,The following statement contains a magic number: double x = 5;
Magic Number,Encog.Examples.SVM,RegressionSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM\RegressionSVM.cs,Execute,The following statement contains a magic number: do              {                  train.Iteration();                  Console.WriteLine(@"Epoch #" + epoch + @" Error:" + train.Error);                  epoch++;              } while (train.Error > 0.01);
Magic Number,Encog.Examples.XOR,XOROnline,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: network.AddLayer(new BasicLayer(null' true' 2));
Magic Number,Encog.Examples.XOR,XOROnline,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: network.AddLayer(new BasicLayer(new ActivationSigmoid()' true' 3));
Magic Number,Encog.Examples.XOR,XOROnline,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: Propagation train = new Backpropagation(network' trainingSet' 0.7' 0.3);
Magic Number,Encog.Examples.XOR,XOROnline,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: Propagation train = new Backpropagation(network' trainingSet' 0.7' 0.3);
Magic Number,Encog.Examples.XOR,XOROnline,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: do              {                  train.Iteration();                  Console.WriteLine(@"Epoch #" + epoch + @" Error:" + train.Error);                  epoch++;              } while (train.Error > 0.01);
Magic Number,Encog.Examples.XOR,XORFactory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,xorPNNC,The following statement contains a magic number: Process(                  MLMethodFactory.TypePNN'                  METHOD_PNNC_A'                  MLTrainFactory.TypePNN'                  ""' 2);
Magic Number,Encog.Examples.XOR,XORFactory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The following statement contains a magic number: IMLMethod method = methodFactory.Create(methodName' methodArchitecture' 2' outputNeurons);
Magic Number,Encog.Examples.XOR,XORFactory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The following statement contains a magic number: if (method is IMLResettable && !(train is ManhattanPropagation))              {                  train.AddStrategy(new RequiredImprovementStrategy(500));              }
Magic Number,Encog.Examples.XOR,XORFactory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The following statement contains a magic number: EncogUtility.TrainToError(train' 0.01);
Magic Number,Encog.Examples.XOR,XORHelloWorld,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORHelloWorld.cs,Execute,The following statement contains a magic number: network.AddLayer(new BasicLayer(null' true' 2));
Magic Number,Encog.Examples.XOR,XORHelloWorld,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORHelloWorld.cs,Execute,The following statement contains a magic number: network.AddLayer(new BasicLayer(new ActivationSigmoid()' true' 3));
Magic Number,Encog.Examples.XOR,XORHelloWorld,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORHelloWorld.cs,Execute,The following statement contains a magic number: do              {                  train.Iteration();                  Console.WriteLine(@"Epoch #" + epoch + @" Error:" + train.Error);                  epoch++;              } while (train.Error > 0.01);
Magic Number,Encog.Examples.XOR,XORNEAT,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORNEAT.cs,Execute,The following statement contains a magic number: NEATPopulation pop = new NEATPopulation(2' 1' 1000);
Magic Number,Encog.Examples.XOR,XORNEAT,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORNEAT.cs,Execute,The following statement contains a magic number: NEATPopulation pop = new NEATPopulation(2' 1' 1000);
Magic Number,Encog.Examples.XOR,XORNEAT,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORNEAT.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(train' 0.01);
Magic Number,Encog.Examples.XOR,XORPSO,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORPSO.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 2' 0' 1' false);
Magic Number,Encog.Examples.XOR,XORPSO,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORPSO.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 2' 0' 1' false);
Magic Number,Encog.Examples.XOR,XORPSO,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORPSO.cs,Execute,The following statement contains a magic number: IMLTrain train = new NeuralPSO(network' randomizer' score' 20);
Magic Number,Encog.Examples.XOR,XORPSO,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORPSO.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(train' 0.01);
Magic Number,Encog.Examples.Persist,PersistEncog,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistEncog.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 6' 0' 1' false);
Magic Number,Encog.Examples.Persist,PersistEncog,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistEncog.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 6' 0' 1' false);
Magic Number,Encog.Examples.Persist,PersistEncog,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistEncog.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(network' trainingSet' 0.01);
Magic Number,Encog.Examples.Persist,PersistSerial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistSerial.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 6' 0' 1' false);
Magic Number,Encog.Examples.Persist,PersistSerial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistSerial.cs,Execute,The following statement contains a magic number: BasicNetwork network = EncogUtility.SimpleFeedForward(2' 6' 0' 1' false);
Magic Number,Encog.Examples.Persist,PersistSerial,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistSerial.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError(network' trainingSet' 0.01);
Magic Number,Encog.Examples.RangeandMarket,Prunes,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.RangeandMarket,Prunes,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.RangeandMarket,Prunes,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.RangeandMarket,Prunes,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.RangeandMarket,Prunes,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(0' 50);
Magic Number,Encog.Examples.Predict,PredictSunspot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Execute,The following statement contains a magic number: NormalizeSunspots(0.1' 0.9);
Magic Number,Encog.Examples.Predict,PredictSunspot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Execute,The following statement contains a magic number: NormalizeSunspots(0.1' 0.9);
Magic Number,Encog.Examples.Predict,PredictSunspot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,CreateNetwork,The following statement contains a magic number: network.AddLayer(new BasicLayer(10));
Magic Number,Encog.Examples.Predict,PredictSunspot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedSunspots[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  double prediction = output[0];                  _closedLoopSunspots[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopSunspots[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  double closedLoopPrediction = output[0];                    // display                  Console.WriteLine((StartingYear + year)                                    + @"  " + Format.FormatDouble(_normalizedSunspots[year]' 2)                                    + @"  " + Format.FormatDouble(prediction' 2)                                    + @"  " + Format.FormatDouble(closedLoopPrediction' 2));              }
Magic Number,Encog.Examples.Predict,PredictSunspot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedSunspots[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  double prediction = output[0];                  _closedLoopSunspots[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopSunspots[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  double closedLoopPrediction = output[0];                    // display                  Console.WriteLine((StartingYear + year)                                    + @"  " + Format.FormatDouble(_normalizedSunspots[year]' 2)                                    + @"  " + Format.FormatDouble(prediction' 2)                                    + @"  " + Format.FormatDouble(closedLoopPrediction' 2));              }
Magic Number,Encog.Examples.Predict,PredictSunspot,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedSunspots[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  double prediction = output[0];                  _closedLoopSunspots[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopSunspots[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  double closedLoopPrediction = output[0];                    // display                  Console.WriteLine((StartingYear + year)                                    + @"  " + Format.FormatDouble(_normalizedSunspots[year]' 2)                                    + @"  " + Format.FormatDouble(prediction' 2)                                    + @"  " + Format.FormatDouble(closedLoopPrediction' 2));              }
Magic Number,Encog.Examples.Predict,SunspotWindow,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Execute,The following statement contains a magic number: NormalizeSunspots(0.1' 0.9);
Magic Number,Encog.Examples.Predict,SunspotWindow,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Execute,The following statement contains a magic number: NormalizeSunspots(0.1' 0.9);
Magic Number,Encog.Examples.Predict,SunspotWindow,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,CreateNetwork,The following statement contains a magic number: network.AddLayer(new BasicLayer(10));
Magic Number,Encog.Examples.Predict,SunspotWindow,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedSunspots[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  double prediction = output[0];                  _closedLoopSunspots[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopSunspots[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  double closedLoopPrediction = output[0];                    // display                  Console.WriteLine((StartingYear + year)                                    + @"  " + Format.FormatDouble(_normalizedSunspots[year]' 2)                                    + @"  " + Format.FormatDouble(prediction' 2)                                    + @"  " + Format.FormatDouble(closedLoopPrediction' 2));              }
Magic Number,Encog.Examples.Predict,SunspotWindow,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedSunspots[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  double prediction = output[0];                  _closedLoopSunspots[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopSunspots[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  double closedLoopPrediction = output[0];                    // display                  Console.WriteLine((StartingYear + year)                                    + @"  " + Format.FormatDouble(_normalizedSunspots[year]' 2)                                    + @"  " + Format.FormatDouble(prediction' 2)                                    + @"  " + Format.FormatDouble(closedLoopPrediction' 2));              }
Magic Number,Encog.Examples.Predict,SunspotWindow,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++)              {                  // calculate based on actual data                  var input = new BasicMLData(WindowSize);                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _normalizedSunspots[(year - WindowSize) + i];                  }                  IMLData output = network.Compute(input);                  double prediction = output[0];                  _closedLoopSunspots[year] = prediction;                    // calculate "closed loop"' based on predicted data                  for (var i = 0; i < input.Count; i++)                  {                      input[i] = _closedLoopSunspots[(year - WindowSize) + i];                  }                  output = network.Compute(input);                  double closedLoopPrediction = output[0];                    // display                  Console.WriteLine((StartingYear + year)                                    + @"  " + Format.FormatDouble(_normalizedSunspots[year]' 2)                                    + @"  " + Format.FormatDouble(prediction' 2)                                    + @"  " + Format.FormatDouble(closedLoopPrediction' 2));              }
Magic Number,Encog.Examples.RateSP500,PredictSP500,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\RateSP500\PredictSP500.cs,createNetwork,The following statement contains a magic number: BasicNetwork net = (BasicNetwork) CreateFeedforwardNetwork(INPUT_SIZE*2'OUTPUT_SIZE' NEURONS_HIDDEN_1);
Magic Number,Encog.Examples.RateSP500,PredictSP500,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\RateSP500\PredictSP500.cs,display,The following statement contains a magic number: double[] present = new double[INPUT_SIZE*2];
Magic Number,Encog.Examples.RateSP500,PredictSP500,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\RateSP500\PredictSP500.cs,generateTrainingSets,The following statement contains a magic number: for (int i = 0; i < TRAINING_SIZE; i++)              {                  input[i] = new double[INPUT_SIZE*2];                  ideal[i] = new double[OUTPUT_SIZE];                  actual.getInputData(startIndex + (i*factor)' input[i]);                  actual.getOutputData(startIndex + (i*factor)' ideal[i]);              }
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,TrainSVM,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,TrainSVM,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The following statement contains a magic number: IMLMethod method = methodFactory.Create(methodName' methodArchitecture' 2' 1);
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The following statement contains a magic number: IMLDataSet dataSet = MakeAsets(3000' outputNeurons);
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The following statement contains a magic number: if (method is IMLResettable && !(train is ManhattanPropagation))              {                  train.AddStrategy(new RequiredImprovementStrategy(500));              }
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The following statement contains a magic number: EncogUtility.TrainToError(train' 0.01);
Magic Number,Encog.Examples.SVM_Predict,SVMExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: if (String.Compare(app.Args[0]' "random"' true) == 0)              {                  if (app.Args.Length > 1)                  {                      SVM_Predict.CreateSVMNetWork.RandomTrainerMethod(Convert.ToInt16(app.Args[1])' Convert.ToInt16(app.Args[2]));                      MakeAPause();                      app.Exit();                  }                  else                  {                      Console.WriteLine(@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");                      SVM_Predict.CreateSVMNetWork.RandomTrainerMethod(3000' 1);                      MakeAPause();                      app.Exit();                  }                }
Magic Number,Encog.Examples.SVM_Predict,SVMExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: if (String.Compare(app.Args[0]' "random"' true) == 0)              {                  if (app.Args.Length > 1)                  {                      SVM_Predict.CreateSVMNetWork.RandomTrainerMethod(Convert.ToInt16(app.Args[1])' Convert.ToInt16(app.Args[2]));                      MakeAPause();                      app.Exit();                  }                  else                  {                      Console.WriteLine(@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");                      SVM_Predict.CreateSVMNetWork.RandomTrainerMethod(3000' 1);                      MakeAPause();                      app.Exit();                  }                }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,SVMSearch,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.00000000001' 1);
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,SVMSearch,The following statement contains a magic number: while (bestsearch.IterationNumber < 30 && !stop.ShouldStop())          {              bestsearch.Iteration();              Console.WriteLine("Iteration #" + bestsearch.IterationNumber + " Error :" + bestsearch.Error);          }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for(int year=EVALUATE_START;year<EVALUATE_END;year++)  		{  			// calculate based on actual data  			var input = new BasicMLData(WINDOW_SIZE);  			for(int i=0;i<input.Count;i++)  			{  			    input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];  			    //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);  			}              IMLData output = network.Compute(input);              double prediction = output[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];    		    			// display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                    Console.WriteLine(((STARTING_YEAR + year)                                 + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                                 + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                                 + @"\t " + Format.FormatDouble(prediction' 4)                                 + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                                ));  			   			  		}
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for(int year=EVALUATE_START;year<EVALUATE_END;year++)  		{  			// calculate based on actual data  			var input = new BasicMLData(WINDOW_SIZE);  			for(int i=0;i<input.Count;i++)  			{  			    input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];  			    //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);  			}              IMLData output = network.Compute(input);              double prediction = output[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];    		    			// display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                    Console.WriteLine(((STARTING_YEAR + year)                                 + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                                 + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                                 + @"\t " + Format.FormatDouble(prediction' 4)                                 + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                                ));  			   			  		}
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for(int year=EVALUATE_START;year<EVALUATE_END;year++)  		{  			// calculate based on actual data  			var input = new BasicMLData(WINDOW_SIZE);  			for(int i=0;i<input.Count;i++)  			{  			    input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];  			    //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);  			}              IMLData output = network.Compute(input);              double prediction = output[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];    		    			// display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                    Console.WriteLine(((STARTING_YEAR + year)                                 + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                                 + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                                 + @"\t " + Format.FormatDouble(prediction' 4)                                 + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                                ));  			   			  		}
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for(int year=EVALUATE_START;year<EVALUATE_END;year++)  		{  			// calculate based on actual data  			var input = new BasicMLData(WINDOW_SIZE);  			for(int i=0;i<input.Count;i++)  			{  			    input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];  			    //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);  			}              IMLData output = network.Compute(input);              double prediction = output[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];    		    			// display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                    Console.WriteLine(((STARTING_YEAR + year)                                 + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                                 + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                                 + @"\t " + Format.FormatDouble(prediction' 4)                                 + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                                ));  			   			  		}
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for (int year = EVALUATE_START; year < EVALUATE_END; year++)          {              // calculate based on actual data              var input = new BasicMLData(WINDOW_SIZE);              for (int i = 0; i < input.Count; i++)              {                  input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);              }              IMLData output = network.Compute(input);              IMLData output2 = network2.Compute(input);                double prediction = output[0];              double prediction2 = output2[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];                IMLData output3 = network2.Compute(input);              double closedLoopPrediction2 = output[0];                // display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                Console.WriteLine(((STARTING_YEAR + year)                             + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                             + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                             + @"\t " + Format.FormatDouble(prediction' 4)                              + @"\t " + Format.FormatDouble(prediction2' 4)                             + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                               + @"\t " + Format.FormatDouble(closedLoopPrediction2' 4)                            ));              }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for (int year = EVALUATE_START; year < EVALUATE_END; year++)          {              // calculate based on actual data              var input = new BasicMLData(WINDOW_SIZE);              for (int i = 0; i < input.Count; i++)              {                  input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);              }              IMLData output = network.Compute(input);              IMLData output2 = network2.Compute(input);                double prediction = output[0];              double prediction2 = output2[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];                IMLData output3 = network2.Compute(input);              double closedLoopPrediction2 = output[0];                // display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                Console.WriteLine(((STARTING_YEAR + year)                             + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                             + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                             + @"\t " + Format.FormatDouble(prediction' 4)                              + @"\t " + Format.FormatDouble(prediction2' 4)                             + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                               + @"\t " + Format.FormatDouble(closedLoopPrediction2' 4)                            ));              }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for (int year = EVALUATE_START; year < EVALUATE_END; year++)          {              // calculate based on actual data              var input = new BasicMLData(WINDOW_SIZE);              for (int i = 0; i < input.Count; i++)              {                  input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);              }              IMLData output = network.Compute(input);              IMLData output2 = network2.Compute(input);                double prediction = output[0];              double prediction2 = output2[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];                IMLData output3 = network2.Compute(input);              double closedLoopPrediction2 = output[0];                // display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                Console.WriteLine(((STARTING_YEAR + year)                             + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                             + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                             + @"\t " + Format.FormatDouble(prediction' 4)                              + @"\t " + Format.FormatDouble(prediction2' 4)                             + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                               + @"\t " + Format.FormatDouble(closedLoopPrediction2' 4)                            ));              }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for (int year = EVALUATE_START; year < EVALUATE_END; year++)          {              // calculate based on actual data              var input = new BasicMLData(WINDOW_SIZE);              for (int i = 0; i < input.Count; i++)              {                  input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);              }              IMLData output = network.Compute(input);              IMLData output2 = network2.Compute(input);                double prediction = output[0];              double prediction2 = output2[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];                IMLData output3 = network2.Compute(input);              double closedLoopPrediction2 = output[0];                // display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                Console.WriteLine(((STARTING_YEAR + year)                             + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                             + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                             + @"\t " + Format.FormatDouble(prediction' 4)                              + @"\t " + Format.FormatDouble(prediction2' 4)                             + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                               + @"\t " + Format.FormatDouble(closedLoopPrediction2' 4)                            ));              }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for (int year = EVALUATE_START; year < EVALUATE_END; year++)          {              // calculate based on actual data              var input = new BasicMLData(WINDOW_SIZE);              for (int i = 0; i < input.Count; i++)              {                  input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);              }              IMLData output = network.Compute(input);              IMLData output2 = network2.Compute(input);                double prediction = output[0];              double prediction2 = output2[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];                IMLData output3 = network2.Compute(input);              double closedLoopPrediction2 = output[0];                // display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                Console.WriteLine(((STARTING_YEAR + year)                             + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                             + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                             + @"\t " + Format.FormatDouble(prediction' 4)                              + @"\t " + Format.FormatDouble(prediction2' 4)                             + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                               + @"\t " + Format.FormatDouble(closedLoopPrediction2' 4)                            ));              }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,predict,The following statement contains a magic number: for (int year = EVALUATE_START; year < EVALUATE_END; year++)          {              // calculate based on actual data              var input = new BasicMLData(WINDOW_SIZE);              for (int i = 0; i < input.Count; i++)              {                  input[i] = normalizedSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.normalizedSunspots[(year-WINDOW_SIZE)+i]);              }              IMLData output = network.Compute(input);              IMLData output2 = network2.Compute(input);                double prediction = output[0];              double prediction2 = output2[0];              closedLoopSunspots[year] = prediction;                // calculate "closed loop"' based on predicted data              for (int i = 0; i < input.Count; i++)              {                  input[i] = closedLoopSunspots[(year - WINDOW_SIZE) + i];                  //input.setData(i'this.closedLoopSunspots[(year-WINDOW_SIZE)+i]);              }              output = network.Compute(input);              double closedLoopPrediction = output[0];                IMLData output3 = network2.Compute(input);              double closedLoopPrediction2 = output[0];                // display              //System.out.println((STARTING_YEAR+year)              //        +"\t"+f.format(this.normalizedSunspots[year])              //        +"\t"+f.format(prediction)              //        +"\t"+f.format(closedLoopPrediction)                Console.WriteLine(((STARTING_YEAR + year)                             + @"\t " + Format.FormatDouble(SUNSPOTS[year]' 4)                             + @"\t " + Format.FormatDouble(normalizedSunspots[year]' 4)                             + @"\t " + Format.FormatDouble(prediction' 4)                              + @"\t " + Format.FormatDouble(prediction2' 4)                             + @"\t " + Format.FormatDouble(closedLoopPrediction' 4)                               + @"\t " + Format.FormatDouble(closedLoopPrediction2' 4)                            ));              }
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,run,The following statement contains a magic number: normalizeSunspots(0.1'0.9);
Magic Number,Encog.Examples.SVM_Predict,PredictSunspotSVM,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMPredictSunSpots.cs,run,The following statement contains a magic number: normalizeSunspots(0.1'0.9);
Magic Number,Encog.Examples.SVMPredictCSV,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,Generate,The following statement contains a magic number: begin = begin.AddDays(-600);
Magic Number,Encog.Examples.SVMPredictCSV,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,Generate,The following statement contains a magic number: end = begin.AddDays(200);
Magic Number,Encog.Examples.SVMPredictCSV,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,TrainNetworks,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.SVMPredictCSV,MarketBuildTraining,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,TrainNetworks,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,GrabData,The following statement contains a magic number: begin = begin.AddDays(-950);
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                    Direction actualDirection = DetermineDirection(actual);                  Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                    count++;                      Console.WriteLine(@"Day " + count + @":actual="                                    + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"("                                    + predictDirection + @")" + @"'diff=" + diff);              }
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data)              {                  IMLData input = pair.Input;                  IMLData actualData = pair.Ideal;                  IMLData predictData = network.Compute(input);                    double actual = actualData[0];                  double predict = predictData[0];                  double diff = Math.Abs(predict - actual);                    Direction actualDirection = DetermineDirection(actual);                  Direction predictDirection = DetermineDirection(predict);                    if (actualDirection == predictDirection)                      correct++;                    count++;                      Console.WriteLine(@"Day " + count + @":actual="                                    + Format.FormatDouble(actual' 4) + @"(" + actualDirection + @")"                                    + @"'predict=" + Format.FormatDouble(predict' 4) + @"("                                    + predictDirection + @")" + @"'diff=" + diff);              }
Magic Number,Encog.Examples.SVMPredictCSV,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainNetworks,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.SVMPredictCSV,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainNetworks,The following statement contains a magic number: StopTrainingStrategy stop = new StopTrainingStrategy(0.0001' 200);
Magic Number,Encog.Examples.SVMPredictCSV,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainSVMNetwork,The following statement contains a magic number: TemporalMLDataSet Tempo = CreateEval.GenerateATemporalSet(app.Args[1]' 1000' 500' CONFIG.INPUT_WINDOW' CONFIG.PREDICT_WINDOW);
Magic Number,Encog.Examples.SVMPredictCSV,MarketPredict,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainSVMNetwork,The following statement contains a magic number: TemporalMLDataSet Tempo = CreateEval.GenerateATemporalSet(app.Args[1]' 1000' 500' CONFIG.INPUT_WINDOW' CONFIG.PREDICT_WINDOW);
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: var prune = new PruneIncremental(training' pattern' 100' 1' 10'                                               new ConsoleStatusReportable());
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(5' 50);
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer(0' 50);
Magic Number,Encog.Examples.AnnealTSP,SolveTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\AnnealTSP\SolveTSP.cs,InitPath,The following statement contains a magic number: for (int i = 0; i < path.Length - 1; i++)              {                  int icandidate;                  do                  {                      icandidate = (int) (rand.NextDouble()*path.Length);                  } while (taken[icandidate]);                  path[i] = icandidate;                  taken[icandidate] = true;                  if (i == path.Length - 2)                  {                      icandidate = 0;                      while (taken[icandidate])                      {                          icandidate++;                      }                      path[i + 1] = icandidate;                  }              }
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,StringToBipolar,The following statement contains a magic number: for (int i = 0; i < str.Length; i++)              {                  char ch = char.ToUpper(str[i]);                  int idx = ch - FIRST_CHAR;                    int place = 1;                  for (int j = 0; j < BITS_PER_CHAR; j++)                  {                      bool value = (idx & place) > 0;                      result.SetBoolean(currentIndex++' value);                      place *= 2;                  }              }
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,BipolalToString,The following statement contains a magic number: for (int i = 0; i < (data.Count/BITS_PER_CHAR); i++)              {                  a = 0;                  p = 1;                  for (j = 0; j < BITS_PER_CHAR; j++)                  {                      if (data.GetBoolean(i*BITS_PER_CHAR + j))                          a += p;                        p *= 2;                  }                  result.Append((char) (a + FIRST_CHAR));              }
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,RandomBiPolar,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  if (ThreadSafeRandom.NextDouble() > 0.5)                      result[i] = -1;                  else                      result[i] = 1;              }
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,Execute,The following statement contains a magic number: network.Temperature = 100;
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,Execute,The following statement contains a magic number: do              {                  network.EstablishEquilibrium();                  app.WriteLine(network.Temperature + " : " + DisplayTour(network.CurrentState));                  network.DecreaseTemperature(0.99);              } while (!IsValidTour(network.CurrentState));
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: for (int n1 = 0; n1 < NUM_CITIES; n1++)              {                  distance[n1] = new double[NUM_CITIES];                  for (int n2 = 0; n2 < NUM_CITIES; n2++)                  {                      alpha1 = ((double) n1/NUM_CITIES)*2*Math.PI;                      alpha2 = ((double) n2/NUM_CITIES)*2*Math.PI;                      x1 = Math.Cos(alpha1);                      y1 = Math.Sin(alpha1);                      x2 = Math.Cos(alpha2);                      y2 = Math.Sin(alpha2);                      distance[n1][n2] = Math.Sqrt(Sqr(x1 - x2) + Sqr(y1 - y2));                  }              }
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: for (int n1 = 0; n1 < NUM_CITIES; n1++)              {                  distance[n1] = new double[NUM_CITIES];                  for (int n2 = 0; n2 < NUM_CITIES; n2++)                  {                      alpha1 = ((double) n1/NUM_CITIES)*2*Math.PI;                      alpha2 = ((double) n2/NUM_CITIES)*2*Math.PI;                      x1 = Math.Cos(alpha1);                      y1 = Math.Sin(alpha1);                      x2 = Math.Cos(alpha2);                      y2 = Math.Sin(alpha2);                      distance[n1][n2] = Math.Sqrt(Sqr(x1 - x2) + Sqr(y1 - y2));                  }              }
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CalculateWeights,The following statement contains a magic number: for (n1 = 0; n1 < NUM_CITIES; n1++)              {                  for (n2 = 0; n2 < NUM_CITIES; n2++)                  {                      i = n1*NUM_CITIES + n2;                      for (n3 = 0; n3 < NUM_CITIES; n3++)                      {                          for (n4 = 0; n4 < NUM_CITIES; n4++)                          {                              j = n3*NUM_CITIES + n4;                              weight = 0;                              if (i != j)                              {                                  predN3 = (n3 == 0 ? NUM_CITIES - 1 : n3 - 1);                                  succN3 = (n3 == NUM_CITIES - 1 ? 0 : n3 + 1);                                  if ((n1 == n3) || (n2 == n4))                                      weight = -gamma;                                  else if ((n1 == predN3) || (n1 == succN3))                                      weight = -distance[n2][n4];                              }                              network.SetWeight(i' j' weight);                          }                      }                      network.Threshold[i] = (-gamma/2);                  }              }
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: outstarNeurons = 2;
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: for (n = 0; n < PATTERN1.Length; n++)              {                  ideal1[n][0] = Math.Sin(n*0.25*Math.PI);                  ideal1[n][1] = Math.Cos(n*0.25*Math.PI);              }
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: for (n = 0; n < PATTERN1.Length; n++)              {                  ideal1[n][0] = Math.Sin(n*0.25*Math.PI);                  ideal1[n][1] = Math.Cos(n*0.25*Math.PI);              }
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,TrainInstar,The following statement contains a magic number: IMLTrain train = new TrainInstar(network' training' 0.1' true);
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,TrainInstar,The following statement contains a magic number: for (int i = 0; i < 1000; i++)              {                  train.Iteration();                  app.WriteLine("Training instar' Epoch #" + epoch);                  epoch++;              }
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,TrainOutstar,The following statement contains a magic number: IMLTrain train = new TrainOutstar(network' training' 0.1);
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,TrainOutstar,The following statement contains a magic number: for (int i = 0; i < 1000; i++)              {                  train.Iteration();                  app.WriteLine("Training outstar' Epoch #" + epoch);                  epoch++;              }
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,DetermineAngle,The following statement contains a magic number: double result = (Math.Atan2(angle[0]' angle[1])/Math.PI)*180;
Magic Number,Encog.Examples.CPN,RocketCPN,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,DetermineAngle,The following statement contains a magic number: if (result < 0)                  result += 360;
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,Execute,The following statement contains a magic number: IMLDataSet trainingSet = temp.Generate(100);
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,CreateElmanNetwork,The following statement contains a magic number: pattern.AddHiddenLayer(5);
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,CreateFeedforwardNetwork,The following statement contains a magic number: pattern.AddHiddenLayer(5);
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,C:\repos\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,TrainNetwork,The following statement contains a magic number: IMLTrain trainAlt = new NeuralSimulatedAnnealing(network' score' 10' 2' 100);
